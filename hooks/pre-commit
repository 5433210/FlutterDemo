#!/bin/bash
# Git pre-commit hook for version management
# 在提交前进行版本信息检查和验证

set -e

# 颜色输出
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔍 运行 pre-commit 版本检查...${NC}"

# 检查是否在项目根目录
if [ ! -f "pubspec.yaml" ]; then
    echo -e "${RED}❌ 错误: 不在Flutter项目根目录${NC}"
    exit 1
fi

# 检查Python环境
if ! command -v python &> /dev/null; then
    echo -e "${RED}❌ 错误: 未找到Python环境${NC}"
    exit 1
fi

# 检查版本管理脚本是否存在
if [ ! -f "scripts/check_version_consistency.py" ]; then
    echo -e "${YELLOW}⚠️ 警告: 版本检查脚本不存在，跳过版本检查${NC}"
    exit 0
fi

# 获取暂存文件列表
STAGED_FILES=$(git diff --cached --name-only)

# 检查是否有版本相关文件被修改
VERSION_FILES_CHANGED=false
VERSION_RELATED_FILES=(
    "pubspec.yaml"
    "version.yaml" 
    "version.json"
    "android/app/build.gradle.kts"
    "ios/Runner/Info.plist"
    "web/manifest.json"
    "linux/CMakeLists.txt"
    "macos/Runner/Info.plist"
    "ohos/entry/src/main/config.json"
    "lib/version_config.dart"
)

for file in $STAGED_FILES; do
    for version_file in "${VERSION_RELATED_FILES[@]}"; do
        if [[ "$file" == "$version_file" ]]; then
            VERSION_FILES_CHANGED=true
            echo -e "${BLUE}📋 检测到版本相关文件变更: $file${NC}"
            break
        fi
    done
done

# 如果版本相关文件有变更，运行版本一致性检查
if [ "$VERSION_FILES_CHANGED" = true ]; then
    echo -e "${BLUE}🔍 运行版本一致性检查...${NC}"
    
    if python scripts/check_version_consistency.py --quiet; then
        echo -e "${GREEN}✅ 版本一致性检查通过${NC}"
    else
        echo -e "${RED}❌ 版本一致性检查失败${NC}"
        echo -e "${YELLOW}请修复版本不一致问题后重新提交${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}✅ 无版本相关文件变更，跳过版本检查${NC}"
fi

# 检查是否有硬编码的版本号
echo -e "${BLUE}🔍 检查硬编码版本号...${NC}"
HARDCODED_VERSIONS=()

# 检查Dart文件中的硬编码版本
for file in $STAGED_FILES; do
    if [[ "$file" == *.dart ]]; then
        # 检查是否包含疑似硬编码的版本号模式
        if git show ":$file" | grep -E "(version.*['\"])[0-9]+\.[0-9]+\.[0-9]+" > /dev/null; then
            HARDCODED_VERSIONS+=("$file")
        fi
    fi
done

if [ ${#HARDCODED_VERSIONS[@]} -gt 0 ]; then
    echo -e "${YELLOW}⚠️ 警告: 发现可能的硬编码版本号:${NC}"
    for file in "${HARDCODED_VERSIONS[@]}"; do
        echo -e "${YELLOW}  - $file${NC}"
    done
    echo -e "${YELLOW}建议使用 VersionConfig 类获取版本信息${NC}"
fi

# 检查提交消息是否包含版本信息 (如果是版本提交)
if [ "$VERSION_FILES_CHANGED" = true ]; then
    # 从暂存的提交消息中检查 (如果可用)
    if [ -f ".git/COMMIT_EDITMSG" ]; then
        COMMIT_MSG=$(cat .git/COMMIT_EDITMSG)
        if [[ ! "$COMMIT_MSG" =~ (version|版本|v[0-9]+\.[0-9]+\.[0-9]+|build|构建) ]]; then
            echo -e "${YELLOW}⚠️ 建议: 版本相关提交建议在提交消息中包含版本信息${NC}"
        fi
    fi
fi

# 检查Flutter项目基本结构
echo -e "${BLUE}🔍 验证Flutter项目结构...${NC}"
REQUIRED_DIRS=("lib" "android" "ios")
for dir in "${REQUIRED_DIRS[@]}"; do
    if [ ! -d "$dir" ]; then
        echo -e "${RED}❌ 错误: 缺少必要目录 $dir${NC}"
        exit 1
    fi
done

# 运行Flutter分析 (仅对Dart文件)
DART_FILES_CHANGED=false
for file in $STAGED_FILES; do
    if [[ "$file" == *.dart ]]; then
        DART_FILES_CHANGED=true
        break
    fi
done

if [ "$DART_FILES_CHANGED" = true ]; then
    echo -e "${BLUE}🔍 运行Flutter代码分析...${NC}"
    if flutter analyze --no-pub > /dev/null 2>&1; then
        echo -e "${GREEN}✅ Flutter代码分析通过${NC}"
    else
        echo -e "${YELLOW}⚠️ Flutter代码分析发现问题，但不阻止提交${NC}"
        echo -e "${BLUE}建议运行 'flutter analyze' 查看详细信息并修复${NC}"
    fi
fi

# 生成预提交版本信息快照 (用于调试)
if [ "$VERSION_FILES_CHANGED" = true ]; then
    echo -e "${BLUE}📋 生成版本信息快照...${NC}"
    if python scripts/generate_version_info.py --output .git/version_snapshot.json > /dev/null 2>&1; then
        echo -e "${GREEN}✅ 版本信息快照已生成${NC}"
    else
        echo -e "${YELLOW}⚠️ 警告: 版本信息快照生成失败${NC}"
    fi
fi

echo -e "${GREEN}✅ pre-commit 检查完成${NC}"
exit 0 