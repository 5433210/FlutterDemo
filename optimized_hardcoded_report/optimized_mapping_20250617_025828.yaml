# 优化的硬编码文本映射文件
# 包含ARB键复用和新建两种处理方式
# 请审核以下内容，并将 approved 设置为 true

# reuse_existing_keys: 复用现有ARB键的硬编码文本
# create_new_keys: 需要新建ARB键的硬编码文本

!!python/object/apply:collections.OrderedDict
- - - create_new_keys
    - !!python/object/apply:collections.OrderedDict
      - - - error_messages
          - !!python/object/apply:collections.OrderedDict
            - - - e
                - action: create_new
                  text_zh: '无法加载纹理图片: $e'
                  text_en: '无法加载纹理图片: $e'
                  file: presentation\widgets\practice\property_panels\collection_panels\m3_background_texture_panel.dart
                  line: 824
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicestorageservice
                - action: create_new
                  text_zh: PracticeStorageService 实例创建成功
                  text_en: PracticeStorageService 实例创建成功
                  file: application\providers\service_providers.dart
                  line: 91
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practiceservice
                - action: create_new
                  text_zh: 正在创建 PracticeService 实例
                  text_en: 正在创建 PracticeService 实例
                  file: application\providers\service_providers.dart
                  line: 105
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text练习不存在
                - action: create_new
                  text_zh: 练习不存在
                  text_en: 练习不存在
                  file: application\repositories\practice_repository_impl.dart
                  line: 48
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - titleExcludeid
                - action: create_new
                  text_zh: '检查标题是否存在: $title, 排除ID: $excludeId'
                  text_en: '检查标题是否存在: $title, 排除ID: $excludeId'
                  file: application\repositories\practice_repository_impl.dart
                  line: 147
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - title1
                - action: create_new
                  text_zh: '绘制标题: $title'
                  text_en: '绘制标题: $title'
                  file: presentation\widgets\practice\thumbnail_generator.dart
                  line: 134
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - pagesLength
                - action: create_new
                  text_zh: 成功解析页面数据：${pages.length} 个页面
                  text_en: 成功解析页面数据：${pages.length} 个页面
                  file: application\repositories\practice_repository_impl.dart
                  line: 231
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text解析pages字段失
                - action: create_new
                  text_zh: 解析pages字段失败：不是有效的列表
                  text_en: 解析pages字段失败：不是有效的列表
                  file: application\repositories\practice_repository_impl.dart
                  line: 206
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - queryparams
                - action: create_new
                  text_zh: '生成查询参数: $queryParams'
                  text_en: '生成查询参数: $queryParams'
                  file: application\repositories\practice_repository_impl.dart
                  line: 266
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - listLength
                - action: create_new
                  text_zh: '查询结果数量: ${list.length}'
                  text_en: '查询结果数量: ${list.length}'
                  file: application\repositories\practice_repository_impl.dart
                  line: 269
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - totalcount
                - action: create_new
                  text_zh: 数据库中总共有 $totalCount 条练习记录
                  text_en: 数据库中总共有 $totalCount 条练习记录
                  file: application\repositories\practice_repository_impl.dart
                  line: 274
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - warning
                - action: create_new
                  text_zh: '警告: 未指定有效页面范围，默认使用第一页'
                  text_en: '警告: 未指定有效页面范围，默认使用第一页'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 221
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - fieldOperatorValue
                - action: create_new
                  text_zh: '查询字帖: $field $operator $value'
                  text_en: '查询字帖: $field $operator $value'
                  file: application\repositories\practice_repository_impl.dart
                  line: 312
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - resultsLength
                - action: create_new
                  text_zh: '查询结果: ${results.length} 条记录'
                  text_en: '查询结果: ${results.length} 条记录'
                  file: application\repositories\practice_repository_impl.dart
                  line: 326
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicerepositoryimplSaveIdPracticeId
                - action: create_new
                  text_zh: === PracticeRepositoryImpl.save 完成 === [ID=${practice.id}]
                  text_en: === PracticeRepositoryImpl.save 完成 === [ID=${practice.id}]
                  file: application\repositories\practice_repository_impl.dart
                  line: 365
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - stacktraceCurrent
                - action: create_new
                  text_zh: '调用堆栈: ${StackTrace.current}'
                  text_en: '调用堆栈: ${StackTrace.current}'
                  file: application\repositories\practice_repository_impl.dart
                  line: 340
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - jsonLength
                - action: create_new
                  text_zh: '_prepareForSave: 开始处理JSON数据，共 ${json.length} 个字段'
                  text_en: '_prepareForSave: 开始处理JSON数据，共 ${json.length} 个字段'
                  file: application\repositories\practice_repository_impl.dart
                  line: 611
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - prepareddataKeysJoin
                - action: create_new
                  text_zh: '数据准备完成，字段: ${preparedData.keys.join('
                  text_en: '数据准备完成，字段: ${preparedData.keys.join('
                  file: application\repositories\practice_repository_impl.dart
                  line: 350
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - savePracticeId
                - action: create_new
                  text_zh: 开始调用 _db.save($_table, ${practice.id}, ...)
                  text_en: 开始调用 _db.save($_table, ${practice.id}, ...)
                  file: application\repositories\practice_repository_impl.dart
                  line: 352
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - saveSuccess1
                - action: create_new
                  text_zh: 调用 _db.save 成功
                  text_en: 调用 _db.save 成功
                  file: application\repositories\practice_repository_impl.dart
                  line: 354
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - saveddata
                - action: create_new
                  text_zh: '数据保存验证成功: ${savedData['
                  text_en: '数据保存验证成功: ${savedData['
                  file: application\repositories\practice_repository_impl.dart
                  line: 464
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - errorE
                - action: create_new
                  text_zh: '错误: 保存实体失败: $e'
                  text_en: '错误: 保存实体失败: $e'
                  file: application\repositories\practice_repository_impl.dart
                  line: 368
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - eIsErrorEStacktrace
                - action: create_new
                  text_zh: '错误堆栈: ${e is Error ? e.stackTrace :'
                  text_en: '错误堆栈: ${e is Error ? e.stackTrace :'
                  file: application\repositories\practice_repository_impl.dart
                  line: 451
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - savemanyPracticesLength
                - action: create_new
                  text_zh: 'saveMany: 开始保存 ${practices.length} 个实体'
                  text_en: 'saveMany: 开始保存 ${practices.length} 个实体'
                  file: application\repositories\practice_repository_impl.dart
                  line: 377
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - savemanyPId
                - action: create_new
                  text_zh: 'saveMany: 处理ID=${p.id}的实体'
                  text_en: 'saveMany: 处理ID=${p.id}的实体'
                  file: application\repositories\practice_repository_impl.dart
                  line: 382
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - savemany
                - action: create_new
                  text_zh: 'saveMany: 批量保存成功'
                  text_en: 'saveMany: 批量保存成功'
                  file: application\repositories\practice_repository_impl.dart
                  line: 387
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - thumbnailNull
                - action: create_new
                  text_zh: '缩略图生成完成: ${thumbnail != null ?'
                  text_en: '缩略图生成完成: ${thumbnail != null ?'
                  file: presentation\widgets\practice\file_operations_mixin.dart
                  line: 202
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - settingsCreatetimeNow
                - action: create_new
                  text_zh: 新建字帖，设置 createTime=$now
                  text_en: 新建字帖，设置 createTime=$now
                  file: application\repositories\practice_repository_impl.dart
                  line: 422
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - createtime
                - action: create_new
                  text_zh: 现有字帖，尝试获取原有 createTime...
                  text_en: 现有字帖，尝试获取原有 createTime...
                  file: application\repositories\practice_repository_impl.dart
                  line: 425
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - warningIdId
                - action: create_new
                  text_zh: '警告: 无法获取现有字帖数据 [ID=$id]'
                  text_en: '警告: 无法获取现有字帖数据 [ID=$id]'
                  file: application\repositories\practice_repository_impl.dart
                  line: 428
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - createtimeExistingpractice
                - action: create_new
                  text_zh: '使用原有的 createTime: ${existingPractice['
                  text_en: '使用原有的 createTime: ${existingPractice['
                  file: application\repositories\practice_repository_impl.dart
                  line: 434
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - now
                - action: create_new
                  text_zh: '无法获取原有createTime，使用当前时间作为fallback: $now'
                  text_en: '无法获取原有createTime，使用当前时间作为fallback: $now'
                  file: application\repositories\practice_repository_impl.dart
                  line: 438
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - savepracticerawSet
                - action: create_new
                  text_zh: === savePracticeRaw 开始调用 _db.set 方法 ===
                  text_en: === savePracticeRaw 开始调用 _db.set 方法 ===
                  file: application\repositories\practice_repository_impl.dart
                  line: 443
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practiceidPracticeid
                - action: create_new
                  text_zh: '参数: _table=$_table, practiceId=$practiceId'
                  text_en: '参数: _table=$_table, practiceId=$practiceId'
                  file: application\repositories\practice_repository_impl.dart
                  line: 444
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - dataKeysJoin
                - action: create_new
                  text_zh: '数据内容: ${data.keys.join('
                  text_en: '数据内容: ${data.keys.join('
                  file: application\repositories\practice_repository_impl.dart
                  line: 445
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - set
                - action: create_new
                  text_zh: _db.set 调用成功
                  text_en: _db.set 调用成功
                  file: application\repositories\practice_repository_impl.dart
                  line: 448
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - errorSetE
                - action: create_new
                  text_zh: '错误: _db.set 调用失败: $e'
                  text_en: '错误: _db.set 调用失败: $e'
                  file: application\repositories\practice_repository_impl.dart
                  line: 450
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - savepracticerawIdPracticeid
                - action: create_new
                  text_zh: 'savePracticeRaw: 已保存数据到数据库，ID=$practiceId'
                  text_en: 'savePracticeRaw: 已保存数据到数据库，ID=$practiceId'
                  file: application\repositories\practice_repository_impl.dart
                  line: 454
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text开始验证数据是否已保
                - action: create_new
                  text_zh: 开始验证数据是否已保存...
                  text_en: 开始验证数据是否已保存...
                  file: application\repositories\practice_repository_impl.dart
                  line: 457
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practiceid
                - action: create_new
                  text_zh: '已保存缩略图到文件系统: $practiceId'
                  text_en: '已保存缩略图到文件系统: $practiceId'
                  file: application\services\practice\practice_service.dart
                  line: 234
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - updatefavoritestatus
                - action: create_new
                  text_zh: 'updateFavoriteStatus: 成功更新收藏状态'
                  text_en: 'updateFavoriteStatus: 成功更新收藏状态'
                  file: application\repositories\practice_repository_impl.dart
                  line: 520
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - titleLikeFilterKeyword
                - action: create_new
                  text_zh: '添加关键词筛选条件: title LIKE %${filter.keyword}%'
                  text_en: '添加关键词筛选条件: title LIKE %${filter.keyword}%'
                  file: application\repositories\practice_repository_impl.dart
                  line: 539
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - tagsLikeTag
                - action: create_new
                  text_zh: '添加标签筛选条件: tags LIKE %$tag%'
                  text_en: '添加标签筛选条件: tags LIKE %$tag%'
                  file: application\repositories\practice_repository_impl.dart
                  line: 547
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - statusFilterStatus
                - action: create_new
                  text_zh: '添加状态筛选条件: status=${filter.status}'
                  text_en: '添加状态筛选条件: status=${filter.status}'
                  file: application\repositories\practice_repository_impl.dart
                  line: 554
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - isfavorite
                - action: create_new
                  text_zh: '添加收藏筛选条件: isFavorite=1 (使用条件格式)'
                  text_en: '添加收藏筛选条件: isFavorite=1 (使用条件格式)'
                  file: application\repositories\practice_repository_impl.dart
                  line: 579
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text注意如果没有收藏的练
                - action: create_new
                  text_zh: '⚠️ 注意: 如果没有收藏的练习，带有isFavorite=1条件的查询将不返回结果'
                  text_en: '⚠️ 注意: 如果没有收藏的练习，带有isFavorite=1条件的查询将不返回结果'
                  file: application\repositories\practice_repository_impl.dart
                  line: 580
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - query
                - action: create_new
                  text_zh: '最终查询参数: $query'
                  text_en: '最终查询参数: $query'
                  file: application\repositories\practice_repository_impl.dart
                  line: 598
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text_prepareFo
                - action: create_new
                  text_zh: '_prepareForSave: pages字段不存在，设为空列表'
                  text_en: '_prepareForSave: pages字段不存在，设为空列表'
                  file: application\repositories\practice_repository_impl.dart
                  line: 678
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text_processDb
                - action: create_new
                  text_zh: '_processDbData: status字段不存在于数据库，设为默认值active'
                  text_en: '_processDbData: status字段不存在于数据库，设为默认值active'
                  file: application\repositories\practice_repository_impl.dart
                  line: 754
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - dirpath
                - action: create_new
                  text_zh: 目录不存在：$dirPath
                  text_en: 目录不存在：$dirPath
                  file: application\services\library_import_service.dart
                  line: 32
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - filepath
                - action: create_new
                  text_zh: '开始写入PDF文件: $filePath'
                  text_en: '开始写入PDF文件: $filePath'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 370
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - mimetype
                - action: create_new
                  text_zh: 不支持的文件类型：$mimeType
                  text_en: 不支持的文件类型：$mimeType
                  file: application\services\library_import_service.dart
                  line: 87
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text生成缩略图失败
                - action: create_new
                  text_zh: 生成缩略图失败
                  text_en: 生成缩略图失败
                  file: application\services\library_import_service.dart
                  line: 106
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - id
                - action: create_new
                  text_zh: '无法找到指定的字帖: $id'
                  text_en: '无法找到指定的字帖: $id'
                  file: application\services\practice\practice_service.dart
                  line: 175
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text预览区域无效
                - action: create_new
                  text_zh: 预览区域无效
                  text_en: 预览区域无效
                  file: application\services\image\character_image_processor.dart
                  line: 93
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text图像解码失败
                - action: create_new
                  text_zh: 图像解码失败
                  text_en: 图像解码失败
                  file: application\services\image\character_image_processor.dart
                  line: 188
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text处理区域无效
                - action: create_new
                  text_zh: 处理区域无效
                  text_en: 处理区域无效
                  file: application\services\image\character_image_processor.dart
                  line: 180
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text没有轮廓点
                - action: create_new
                  text_zh: 没有轮廓点
                  text_en: 没有轮廓点
                  file: application\services\image\character_image_processor.dart
                  line: 559
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text无法计算有效的轮廓边
                - action: create_new
                  text_zh: 无法计算有效的轮廓边界
                  text_en: 无法计算有效的轮廓边界
                  file: application\services\image\character_image_processor.dart
                  line: 579
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practiceserviceCreatepractice
                - action: create_new
                  text_zh: === PracticeService.createPractice 完成 ===
                  text_en: === PracticeService.createPractice 完成 ===
                  file: application\services\practice\practice_service.dart
                  line: 49
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - titleTitleTagsTagsStatusStatus
                - action: create_new
                  text_zh: '参数: title=$title, tags=$tags, status=$status'
                  text_en: '参数: title=$title, tags=$tags, status=$status'
                  file: application\services\practice\practice_service.dart
                  line: 37
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practiceIdSave
                - action: create_new
                  text_zh: 已创建实体，生成的ID=${practice.id}, 准备调用 _repository.save...
                  text_en: 已创建实体，生成的ID=${practice.id}, 准备调用 _repository.save...
                  file: application\services\practice\practice_service.dart
                  line: 44
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - saveResultId
                - action: create_new
                  text_zh: _repository.save 调用成功，返回ID=${result.id}
                  text_en: _repository.save 调用成功，返回ID=${result.id}
                  file: application\services\practice\practice_service.dart
                  line: 191
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - errorCreatepracticeFailedE
                - action: create_new
                  text_zh: '错误: createPractice 失败 - $e'
                  text_en: '错误: createPractice 失败 - $e'
                  file: application\services\practice\practice_service.dart
                  line: 52
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practiceserviceSavepractice
                - action: create_new
                  text_zh: === PracticeService.savePractice 完成(更新字帖分支) ===
                  text_en: === PracticeService.savePractice 完成(更新字帖分支) ===
                  file: application\services\practice\practice_service.dart
                  line: 202
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - newpracticeId
                - action: create_new
                  text_zh: '已保存新字帖缩略图到文件系统: ${newPractice.id}'
                  text_en: '已保存新字帖缩略图到文件系统: ${newPractice.id}'
                  file: application\services\practice\practice_service.dart
                  line: 163
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text检测到页面数据将更新
                - action: create_new
                  text_zh: 检测到页面数据，将更新页面
                  text_en: 检测到页面数据，将更新页面
                  file: application\services\practice\practice_service.dart
                  line: 136
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - save1
                - action: create_new
                  text_zh: 创建了更新后的实体, 准备调用 _repository.save...
                  text_en: 创建了更新后的实体, 准备调用 _repository.save...
                  file: application\services\practice\practice_service.dart
                  line: 187
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - thumbnailLength
                - action: create_new
                  text_zh: 准备保存缩略图, 大小=${thumbnail.length} 字节
                  text_en: 准备保存缩略图, 大小=${thumbnail.length} 字节
                  file: application\services\practice\practice_service.dart
                  line: 195
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - compressedthumbnailLength
                - action: create_new
                  text_zh: 压缩后缩略图大小=${compressedThumbnail.length} 字节
                  text_en: 压缩后缩略图大小=${compressedThumbnail.length} 字节
                  file: application\services\practice\practice_service.dart
                  line: 197
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - resultId
                - action: create_new
                  text_zh: '已保存现有字帖缩略图到文件系统: ${result.id}'
                  text_en: '已保存现有字帖缩略图到文件系统: ${result.id}'
                  file: application\services\practice\practice_service.dart
                  line: 199
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - error1
                - action: create_new
                  text_zh: '错误: 未能渲染任何页面'
                  text_en: '错误: 未能渲染任何页面'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 265
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practiceserviceTogglefavoriteIdId
                - action: create_new
                  text_zh: 'PracticeService.toggleFavorite 开始: ID=$id'
                  text_en: 'PracticeService.toggleFavorite 开始: ID=$id'
                  file: application\services\practice\practice_service.dart
                  line: 253
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practiceNull
                - action: create_new
                  text_zh: '获取字帖结果: ${practice != null ?'
                  text_en: '获取字帖结果: ${practice != null ?'
                  file: application\services\practice\practice_service.dart
                  line: 256
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practiceIsfavorite
                - action: create_new
                  text_zh: '当前收藏状态: ${practice.isFavorite}'
                  text_en: '当前收藏状态: ${practice.isFavorite}'
                  file: application\services\practice\practice_service.dart
                  line: 260
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - newfavoritestatus
                - action: create_new
                  text_zh: '新的收藏状态: $newFavoriteStatus'
                  text_en: '新的收藏状态: $newFavoriteStatus'
                  file: application\services\practice\practice_service.dart
                  line: 264
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text使用轻量级方法更新收
                - action: create_new
                  text_zh: 使用轻量级方法更新收藏状态成功
                  text_en: 使用轻量级方法更新收藏状态成功
                  file: application\services\practice\practice_service.dart
                  line: 272
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text轻量级方法失败尝试完
                - action: create_new
                  text_zh: 轻量级方法失败，尝试完整保存
                  text_en: 轻量级方法失败，尝试完整保存
                  file: application\services\practice\practice_service.dart
                  line: 276
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - success
                - action: create_new
                  text_zh: '保存结果: 成功'
                  text_en: '保存结果: 成功'
                  file: application\services\practice\practice_service.dart
                  line: 281
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - originalbytesLengthJpgbytesLength
                - action: create_new
                  text_zh: '文件大小: ${originalBytes.length} -> ${jpgBytes.length} 字节'
                  text_en: '文件大小: ${originalBytes.length} -> ${jpgBytes.length} 字节'
                  file: application\services\practice\practice_service.dart
                  line: 346
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text文件不存在
                - action: create_new
                  text_zh: 文件不存在
                  text_en: 文件不存在
                  file: infrastructure\storage\local_storage.dart
                  line: 297
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text封面导入图保存失败
                - action: create_new
                  text_zh: 封面导入图保存失败
                  text_en: 封面导入图保存失败
                  file: application\services\storage\work_storage_service.dart
                  line: 198
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text封面缩略图保存失败
                - action: create_new
                  text_zh: 封面缩略图保存失败
                  text_en: 封面缩略图保存失败
                  file: application\services\storage\work_storage_service.dart
                  line: 242
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text源文件不存在
                - action: create_new
                  text_zh: 源文件不存在
                  text_en: 源文件不存在
                  file: infrastructure\storage\local_storage.dart
                  line: 320
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text源图片不存在
                - action: create_new
                  text_zh: 源图片不存在
                  text_en: 源图片不存在
                  file: application\services\work\work_image_service.dart
                  line: 669
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text图片文件不能为空
                - action: create_new
                  text_zh: 图片文件不能为空
                  text_en: 图片文件不能为空
                  file: application\services\work\work_service.dart
                  line: 132
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - workid
                - action: create_new
                  text_zh: '作品不存在: $workId'
                  text_en: '作品不存在: $workId'
                  file: application\services\work\work_service.dart
                  line: 267
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - applanguageFromstring
                - action: create_new
                  text_zh: 'AppLanguage.fromString: 从字符串'
                  text_en: 'AppLanguage.fromString: 从字符串'
                  file: domain\enums\app_language.dart
                  line: 55
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - applanguageFromstringResult
                - action: create_new
                  text_zh: 'AppLanguage.fromString: 解析结果: $result'
                  text_en: 'AppLanguage.fromString: 解析结果: $result'
                  file: domain\enums\app_language.dart
                  line: 62
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - backuppath
                - action: create_new
                  text_zh: '备份文件不存在: $backupPath'
                  text_en: '备份文件不存在: $backupPath'
                  file: infrastructure\backup\backup_service.dart
                  line: 372
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text备份中未找到应用数据
                - action: create_new
                  text_zh: 备份中未找到应用数据目录
                  text_en: 备份中未找到应用数据目录
                  file: infrastructure\backup\backup_service.dart
                  line: 787
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text备份中未找到数据库目
                - action: create_new
                  text_zh: 备份中未找到数据库目录
                  text_en: 备份中未找到数据库目录
                  file: infrastructure\backup\backup_service.dart
                  line: 865
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text备份中未找到数据库文
                - action: create_new
                  text_zh: 备份中未找到数据库文件
                  text_en: 备份中未找到数据库文件
                  file: infrastructure\backup\backup_service.dart
                  line: 877
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text数据库恢复需要重启应
                - action: create_new
                  text_zh: 数据库恢复需要重启应用
                  text_en: 数据库恢复需要重启应用
                  file: infrastructure\backup\backup_service.dart
                  line: 928
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text已清除所有缓存
                - action: create_new
                  text_zh: 已清除所有缓存
                  text_en: 已清除所有缓存
                  file: infrastructure\cache\services\cache_manager.dart
                  line: 25
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - intervalInminutes
                - action: create_new
                  text_zh: '已启动缓存监控，间隔: ${interval.inMinutes}分钟'
                  text_en: '已启动缓存监控，间隔: ${interval.inMinutes}分钟'
                  file: infrastructure\cache\services\cache_manager.dart
                  line: 38
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - totalsizeTostringasfixedMb
                - action: create_new
                  text_zh: '当前缓存总大小: ${(totalSize / (1024 * 1024)).toStringAsFixed(2)}MB'
                  text_en: '当前缓存总大小: ${(totalSize / (1024 * 1024)).toStringAsFixed(2)}MB'
                  file: infrastructure\cache\services\cache_manager.dart
                  line: 52
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text缓存大小超过阈值开始
                - action: create_new
                  text_zh: 缓存大小超过阈值，开始清理
                  text_en: 缓存大小超过阈值，开始清理
                  file: infrastructure\cache\services\cache_manager.dart
                  line: 57
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - cache
                - action: create_new
                  text_zh: '已清理缓存: $cache'
                  text_en: '已清理缓存: $cache'
                  file: infrastructure\cache\services\cache_manager.dart
                  line: 78
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - editpageloggerFileopserrorEMessage
                - action: create_new
                  text_zh: 'EditPageLogger.fileOpsError: 日志记录失败: $e, 原始消息: $message'
                  text_en: 'EditPageLogger.fileOpsError: 日志记录失败: $e, 原始消息: $message'
                  file: infrastructure\logging\edit_page_logger_extension.dart
                  line: 245
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - eRenameerrorStorageerror
                - action: create_new
                  text_zh: '无法恢复数据库文件: $e, $renameError, $storageError'
                  text_en: '无法恢复数据库文件: $e, $renameError, $storageError'
                  file: infrastructure\persistence\sqlite\database_restore_handler.dart
                  line: 148
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - sqlitedatabaseSaveTableIdId
                - action: create_new
                  text_zh: 'SQLiteDatabase.save: 开始保存数据到 $table, id=$id'
                  text_en: 'SQLiteDatabase.save: 开始保存数据到 $table, id=$id'
                  file: infrastructure\persistence\sqlite\sqlite_database.dart
                  line: 186
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - sqlitedatabaseSave
                - action: create_new
                  text_zh: 'SQLiteDatabase.save: 插入完成'
                  text_en: 'SQLiteDatabase.save: 插入完成'
                  file: infrastructure\persistence\sqlite\sqlite_database.dart
                  line: 215
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - sqlitedatabaseSaveUpdatecount
                - action: create_new
                  text_zh: 'SQLiteDatabase.save: 更新完成，影响行数: $updateCount'
                  text_en: 'SQLiteDatabase.save: 更新完成，影响行数: $updateCount'
                  file: infrastructure\persistence\sqlite\sqlite_database.dart
                  line: 206
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - sqlitedatabaseSaveId
                - action: create_new
                  text_zh: 'SQLiteDatabase.save: 保存后无法验证数据，记录不存在: $id'
                  text_en: 'SQLiteDatabase.save: 保存后无法验证数据，记录不存在: $id'
                  file: infrastructure\persistence\sqlite\sqlite_database.dart
                  line: 227
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - sqlitedatabaseSaveTableId
                - action: create_new
                  text_zh: 'SQLiteDatabase.save: 数据保存成功，已验证 $table.$id'
                  text_en: 'SQLiteDatabase.save: 数据保存成功，已验证 $table.$id'
                  file: infrastructure\persistence\sqlite\sqlite_database.dart
                  line: 229
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - sqlitedatabaseSaveE
                - action: create_new
                  text_zh: 'SQLiteDatabase.save: 保存失败: $e'
                  text_en: 'SQLiteDatabase.save: 保存失败: $e'
                  file: infrastructure\persistence\sqlite\sqlite_database.dart
                  line: 231
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text数据库降级不支持
                - action: create_new
                  text_zh: 数据库降级不支持
                  text_en: 数据库降级不支持
                  file: infrastructure\persistence\sqlite\sqlite_database.dart
                  line: 559
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - platformlocale
                - action: create_new
                  text_zh: '【系统语言】操作系统语言检测: $platformLocale'
                  text_en: '【系统语言】操作系统语言检测: $platformLocale'
                  file: presentation\app.dart
                  line: 47
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - zh
                - action: create_new
                  text_zh: '【系统语言】检测到中文系统语言，设置为: zh'
                  text_en: '【系统语言】检测到中文系统语言，设置为: zh'
                  file: presentation\app.dart
                  line: 55
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - en
                - action: create_new
                  text_zh: '【系统语言】检测到英文系统语言，设置为: en'
                  text_en: '【系统语言】检测到英文系统语言，设置为: en'
                  file: presentation\app.dart
                  line: 58
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text系统语言未检测到支持
                - action: create_new
                  text_zh: 【系统语言】未检测到支持的系统语言，默认使用中文
                  text_en: 【系统语言】未检测到支持的系统语言，默认使用中文
                  file: presentation\app.dart
                  line: 62
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - userlanguage
                - action: create_new
                  text_zh: '【系统语言】当前用户语言设置: $userLanguage'
                  text_en: '【系统语言】当前用户语言设置: $userLanguage'
                  file: presentation\app.dart
                  line: 85
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - finallocaleLanguagecode
                - action: create_new
                  text_zh: '【系统语言】最终使用的语言: ${finalLocale?.languageCode ??'
                  text_en: '【系统语言】最终使用的语言: ${finalLocale?.languageCode ??'
                  file: presentation\app.dart
                  line: 92
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text开始复制选中元素
                - action: create_new
                  text_zh: 开始复制选中元素...
                  text_en: 开始复制选中元素...
                  file: presentation\pages\practices\clipboard_enhancements.dart
                  line: 10
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - clipboardelementNull
                - action: create_new
                  text_zh: '复制结果: ${clipboardElement != null ?'
                  text_en: '复制结果: ${clipboardElement != null ?'
                  file: presentation\pages\practices\clipboard_enhancements.dart
                  line: 12
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - clipboardelement
                - action: create_new
                  text_zh: '内部剪贴板完整内容: $clipboardElement'
                  text_en: '内部剪贴板完整内容: $clipboardElement'
                  file: presentation\pages\practices\clipboard_enhancements.dart
                  line: 53
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text剪贴板详细检查
                - action: create_new
                  text_zh: ======= 剪贴板详细检查 =======
                  text_en: ======= 剪贴板详细检查 =======
                  file: presentation\pages\practices\clipboard_enhancements.dart
                  line: 29
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text内部剪贴板为空
                - action: create_new
                  text_zh: 内部剪贴板为空
                  text_en: 内部剪贴板为空
                  file: presentation\pages\practices\clipboard_enhancements.dart
                  line: 56
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text剪贴板检查结束
                - action: create_new
                  text_zh: ======= 剪贴板检查结束 =======
                  text_en: ======= 剪贴板检查结束 =======
                  file: presentation\pages\practices\clipboard_enhancements.dart
                  line: 59
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - oldvalueStateGridvisible
                - action: create_new
                  text_zh: '🎨 网格显示切换: $oldValue → ${_controller.state.gridVisible}'
                  text_en: '🎨 网格显示切换: $oldValue → ${_controller.state.gridVisible}'
                  file: presentation\pages\practices\m3_practice_edit_page.dart
                  line: 2895
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - stateGridsize
                - action: create_new
                  text_zh: '🎨 网格大小: ${_controller.state.gridSize}'
                  text_en: '🎨 网格大小: ${_controller.state.gridSize}'
                  file: presentation\pages\practices\m3_practice_edit_page.dart
                  line: 2896
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - triggergridsettingschange
                - action: create_new
                  text_zh: 🎨 调用 triggerGridSettingsChange()
                  text_en: 🎨 调用 triggerGridSettingsChange()
                  file: presentation\pages\practices\m3_practice_edit_page.dart
                  line: 2901
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - setstate
                - action: create_new
                  text_zh: 🎨 调用 setState() 强制重建UI
                  text_en: 🎨 调用 setState() 强制重建UI
                  file: presentation\pages\practices\m3_practice_edit_page.dart
                  line: 2905
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text网格切换完成
                - action: create_new
                  text_zh: 🎨 网格切换完成
                  text_en: 🎨 网格切换完成
                  file: presentation\pages\practices\m3_practice_edit_page.dart
                  line: 2908
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - handlepanupdateWarning
                - action: create_new
                  text_zh: '【平移】handlePanUpdate: 警告 - 偏移量包含NaN值！'
                  text_en: '【平移】handlePanUpdate: 警告 - 偏移量包含NaN值！'
                  file: presentation\pages\practices\widgets\canvas_gesture_handler.dart
                  line: 540
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - handlepanupdate
                - action: create_new
                  text_zh: '【平移】handlePanUpdate: 回调后，偏移量=$_elementStartPosition'
                  text_en: '【平移】handlePanUpdate: 回调后，偏移量=$_elementStartPosition'
                  file: presentation\pages\practices\widgets\canvas_gesture_handler.dart
                  line: 557
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - handletapupId
                - action: create_new
                  text_zh: '【选择】handleTapUp: 点击已选中元素，取消选中: $id'
                  text_en: '【选择】handleTapUp: 点击已选中元素，取消选中: $id'
                  file: presentation\pages\practices\widgets\canvas_gesture_handler.dart
                  line: 686
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - handletapup
                - action: create_new
                  text_zh: '【选择】handleTapUp: 点击空白区域，清除选择'
                  text_en: '【选择】handleTapUp: 点击空白区域，清除选择'
                  file: presentation\pages\practices\widgets\canvas_gesture_handler.dart
                  line: 737
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - canvasstructurelistenerTypeE
                - action: create_new
                  text_zh: '📡 CanvasStructureListener: 层级处理器错误 - $type: $e'
                  text_en: '📡 CanvasStructureListener: 层级处理器错误 - $type: $e'
                  file: presentation\pages\practices\widgets\canvas_structure_listener.dart
                  line: 52
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - canvasstructurelistener
                - action: create_new
                  text_zh: '📟 CanvasStructureListener: 已释放资源'
                  text_en: '📟 CanvasStructureListener: 已释放资源'
                  file: presentation\pages\practices\widgets\canvas_structure_listener.dart
                  line: 87
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - canvasstructurelistenerType
                - action: create_new
                  text_zh: '📡 CanvasStructureListener: 取消注册层级处理器 - $type'
                  text_en: '📡 CanvasStructureListener: 取消注册层级处理器 - $type'
                  file: presentation\pages\practices\widgets\canvas_structure_listener.dart
                  line: 105
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - staticbackground
                - action: create_new
                  text_zh: '📡 StaticBackground: 处理网格设置变化'
                  text_en: '📡 StaticBackground: 处理网格设置变化'
                  file: presentation\pages\practices\widgets\canvas_structure_listener.dart
                  line: 163
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - contentEventElementsLength
                - action: create_new
                  text_zh: '📡 Content: 处理元素变化 - ${event.elements.length} 个元素'
                  text_en: '📡 Content: 处理元素变化 - ${event.elements.length} 个元素'
                  file: presentation\pages\practices\widgets\canvas_structure_listener.dart
                  line: 170
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - content
                - action: create_new
                  text_zh: '📡 Content: 处理图层可见性变化'
                  text_en: '📡 Content: 处理图层可见性变化'
                  file: presentation\pages\practices\widgets\canvas_structure_listener.dart
                  line: 172
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - interactionEventNewtool
                - action: create_new
                  text_zh: '📡 Interaction: 处理工具变化 - ${event.newTool}'
                  text_en: '📡 Interaction: 处理工具变化 - ${event.newTool}'
                  file: presentation\pages\practices\widgets\canvas_structure_listener.dart
                  line: 190
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - disposeDirtyE
                - action: create_new
                  text_zh: 'dispose dirty tracker失败: $e'
                  text_en: 'dispose dirty tracker失败: $e'
                  file: presentation\pages\practices\widgets\content_render_controller.dart
                  line: 118
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - disposeRebuildE
                - action: create_new
                  text_zh: 'dispose rebuild manager失败: $e'
                  text_en: 'dispose rebuild manager失败: $e'
                  file: presentation\pages\practices\widgets\content_render_controller.dart
                  line: 124
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - contentrendercontrollerE
                - action: create_new
                  text_zh: 'ContentRenderController dispose过程中发生异常: $e'
                  text_en: 'ContentRenderController dispose过程中发生异常: $e'
                  file: presentation\pages\practices\widgets\content_render_controller.dart
                  line: 134
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - warningContentrendercontrollerSuperDispose
                - action: create_new
                  text_zh: 警告：ContentRenderController super.dispose()可能未能成功调用
                  text_en: 警告：ContentRenderController super.dispose()可能未能成功调用
                  file: presentation\pages\practices\widgets\content_render_controller.dart
                  line: 160
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - disposeCacheE
                - action: create_new
                  text_zh: 'dispose cache manager失败: $e'
                  text_en: 'dispose cache manager失败: $e'
                  file: presentation\pages\practices\widgets\content_render_layer.dart
                  line: 237
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - contentrenderlayerE
                - action: create_new
                  text_zh: 'ContentRenderLayer dispose过程中发生异常: $e'
                  text_en: 'ContentRenderLayer dispose过程中发生异常: $e'
                  file: presentation\pages\practices\widgets\content_render_layer.dart
                  line: 240
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - contentrenderlayerSuperDisposeDisposeerror
                - action: create_new
                  text_zh: 'ContentRenderLayer super.dispose()调用失败: $disposeError'
                  text_en: 'ContentRenderLayer super.dispose()调用失败: $disposeError'
                  file: presentation\pages\practices\widgets\content_render_layer.dart
                  line: 248
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - contentrenderlayerDisposeFinalerror
                - action: create_new
                  text_zh: 'ContentRenderLayer 最终super.dispose()调用失败: $finalError'
                  text_en: 'ContentRenderLayer 最终super.dispose()调用失败: $finalError'
                  file: presentation\pages\practices\widgets\content_render_layer.dart
                  line: 254
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - warningContentrenderlayerSuperDispose
                - action: create_new
                  text_zh: 警告：ContentRenderLayer super.dispose()可能未能成功调用
                  text_en: 警告：ContentRenderLayer super.dispose()可能未能成功调用
                  file: presentation\pages\practices\widgets\content_render_layer.dart
                  line: 264
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - dragoperationmanager
                - action: create_new
                  text_zh: '🎯 DragOperationManager: 初始化完成'
                  text_en: '🎯 DragOperationManager: 初始化完成'
                  file: presentation\pages\practices\widgets\drag_operation_manager.dart
                  line: 407
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - dragoperationmanagerE
                - action: create_new
                  text_zh: '🎯 DragOperationManager: PostDrag阶段异常 - $e'
                  text_en: '🎯 DragOperationManager: PostDrag阶段异常 - $e'
                  file: presentation\pages\practices\widgets\drag_operation_manager.dart
                  line: 352
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - elementidXYSnappedxSnappedy
                - action: create_new
                  text_zh: '🎯 网格吸附: $elementId 从 ($x, $y) 到 ($snappedX, $snappedY)'
                  text_en: '🎯 网格吸附: $elementId 从 ($x, $y) 到 ($snappedX, $snappedY)'
                  file: presentation\pages\practices\widgets\drag_operation_manager.dart
                  line: 288
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - dragoperationmanagerElementslistLength
                - action: create_new
                  text_zh: '🎯 DragOperationManager: 已创建 ${elementsList.length} 个元素快照'
                  text_en: '🎯 DragOperationManager: 已创建 ${elementsList.length} 个元素快照'
                  file: presentation\pages\practices\widgets\drag_operation_manager.dart
                  line: 431
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text点击删除按钮
                - action: create_new
                  text_zh: 点击删除按钮
                  text_en: 点击删除按钮
                  file: presentation\pages\works\components\filter\date_range_filter_section.dart
                  line: 60
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text应用日期范围开始_s
                - action: create_new
                  text_zh: '应用日期范围 - 开始: $_startDate, 结束: $_endDate'
                  text_en: '应用日期范围 - 开始: $_startDate, 结束: $_endDate'
                  file: presentation\pages\works\components\filter\date_range_filter_section.dart
                  line: 109
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - presetSelectedSelected
                - action: create_new
                  text_zh: '选择预设: $preset, selected: $selected'
                  text_en: '选择预设: $preset, selected: $selected'
                  file: presentation\pages\works\components\filter\date_range_filter_section.dart
                  line: 203
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text当前页面ID未设置无
                - action: create_new
                  text_zh: 当前页面ID未设置，无法创建选区
                  text_en: 当前页面ID未设置，无法创建选区
                  file: presentation\providers\character\character_collection_provider.dart
                  line: 142
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text当前页面图像未设置无
                - action: create_new
                  text_zh: 当前页面图像未设置，无法创建选区
                  text_en: 当前页面图像未设置，无法创建选区
                  file: presentation\providers\character\character_collection_provider.dart
                  line: 145
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text选区尺寸过小最小尺寸
                - action: create_new
                  text_zh: 选区尺寸过小，最小尺寸为20x20
                  text_en: 选区尺寸过小，最小尺寸为20x20
                  file: presentation\providers\character\character_collection_provider.dart
                  line: 148
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text页面图像未设置无法加
                - action: create_new
                  text_zh: 页面图像未设置，无法加载选区数据
                  text_en: 页面图像未设置，无法加载选区数据
                  file: presentation\providers\character\character_collection_provider.dart
                  line: 451
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodel
                - action: create_new
                  text_zh: 'PracticeListViewModel: 尝试重新加载练习数据'
                  text_en: 'PracticeListViewModel: 尝试重新加载练习数据'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 529
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelTrue
                - action: create_new
                  text_zh: 'PracticeListViewModel: 开始加载练习数据，设置isLoading=true'
                  text_en: 'PracticeListViewModel: 开始加载练习数据，设置isLoading=true'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 152
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelQuerypractices
                - action: create_new
                  text_zh: 'PracticeListViewModel: 调用 _practiceService.queryPractices'
                  text_en: 'PracticeListViewModel: 调用 _practiceService.queryPractices'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 167
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelFilterTojson
                - action: create_new
                  text_zh: 'PracticeListViewModel: 详细过滤条件: ${filter.toJson()}'
                  text_en: 'PracticeListViewModel: 详细过滤条件: ${filter.toJson()}'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 168
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelPracticesresultLength
                - action: create_new
                  text_zh: 'PracticeListViewModel: 查询结果数量: ${practicesResult.length}'
                  text_en: 'PracticeListViewModel: 查询结果数量: ${practicesResult.length}'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 170
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelCount
                - action: create_new
                  text_zh: 'PracticeListViewModel: 调用 _practiceService.count'
                  text_en: 'PracticeListViewModel: 调用 _practiceService.count'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 176
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelTotalcount
                - action: create_new
                  text_zh: 'PracticeListViewModel: 总记录数: $totalCount'
                  text_en: 'PracticeListViewModel: 总记录数: $totalCount'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 178
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelE
                - action: create_new
                  text_zh: 'PracticeListViewModel: 初始化失败: $e'
                  text_en: 'PracticeListViewModel: 初始化失败: $e'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 516
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelStack
                - action: create_new
                  text_zh: 'PracticeListViewModel: 错误堆栈: $stack'
                  text_en: 'PracticeListViewModel: 错误堆栈: $stack'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 517
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelStacktrace
                - action: create_new
                  text_zh: 'PracticeListViewModel: 错误堆栈: $stackTrace'
                  text_en: 'PracticeListViewModel: 错误堆栈: $stackTrace'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 224
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelSavedstateFilter
                - action: create_new
                  text_zh: 'PracticeListViewModel: 已恢复状态，过滤条件：${savedState.filter}'
                  text_en: 'PracticeListViewModel: 已恢复状态，过滤条件：${savedState.filter}'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 495
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelLoaderror
                - action: create_new
                  text_zh: 'PracticeListViewModel: 重试加载失败: $loadError'
                  text_en: 'PracticeListViewModel: 重试加载失败: $loadError'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 532
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - practicelistviewmodelLoadstack
                - action: create_new
                  text_zh: 'PracticeListViewModel: 错误堆栈: $loadStack'
                  text_en: 'PracticeListViewModel: 错误堆栈: $loadStack'
                  file: presentation\viewmodels\practice_list_view_model.dart
                  line: 533
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text没有找到有效的图片文
                - action: create_new
                  text_zh: 没有找到有效的图片文件
                  text_en: 没有找到有效的图片文件
                  file: presentation\viewmodels\work_import_view_model.dart
                  line: 101
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - regionIdErrorENStack
                - action: create_new
                  text_zh: '区域绘制失败: ${region.id}, error: $e\n$stack'
                  text_en: '区域绘制失败: ${region.id}, error: $e\n$stack'
                  file: presentation\widgets\character_collection\regions_painter.dart
                  line: 82
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - eNStack
                - action: create_new
                  text_zh: '❌ 纹理绘制错误: $e\n$stack'
                  text_en: '❌ 纹理绘制错误: $e\n$stack'
                  file: presentation\widgets\practice\collection_painter.dart
                  line: 561
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - collectionpainterPositionBackgroundcolor
                - action: create_new
                  text_zh: '🎨 CollectionPainter: 绘制字符背景色 ${position.backgroundColor}'
                  text_en: '🎨 CollectionPainter: 绘制字符背景色 ${position.backgroundColor}'
                  file: presentation\widgets\practice\collection_painter.dart
                  line: 186
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text没有字符图像数据
                - action: create_new
                  text_zh: 没有字符图像数据
                  text_en: 没有字符图像数据
                  file: presentation\widgets\practice\collection_painter.dart
                  line: 336
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - index
                - action: create_new
                  text_zh: '尝试查找索引键1: $index'
                  text_en: '尝试查找索引键1: $index'
                  file: presentation\widgets\practice\collection_painter.dart
                  line: 351
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - characterimages
                - action: create_new
                  text_zh: '找到characterImages子键: $characterImages'
                  text_en: '找到characterImages子键: $characterImages'
                  file: presentation\widgets\practice\collection_painter.dart
                  line: 380
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text没有找到字符
                - action: create_new
                  text_zh: 没有找到字符
                  text_en: 没有找到字符
                  file: presentation\widgets\practice\collection_painter.dart
                  line: 389
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - pathCachekey
                - action: create_new
                  text_zh: '🔄 开始加载纹理: $path (缓存键: $cacheKey)'
                  text_en: '🔄 开始加载纹理: $path (缓存键: $cacheKey)'
                  file: presentation\widgets\practice\collection_painter.dart
                  line: 401
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - cachekeyImageWidthXImageHeight
                - action: create_new
                  text_zh: '✅ 纹理加载成功并缓存: $cacheKey (${image.width}x${image.height})'
                  text_en: '✅ 纹理加载成功并缓存: $cacheKey (${image.width}x${image.height})'
                  file: presentation\widgets\practice\collection_painter.dart
                  line: 436
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - ePath
                - action: create_new
                  text_zh: '❌ 加载纹理失败: $e, 路径: $path'
                  text_en: '❌ 加载纹理失败: $e, 路径: $path'
                  file: presentation\widgets\practice\collection_painter.dart
                  line: 440
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - cachekey
                - action: create_new
                  text_zh: '从内存缓存中找到图像: $cacheKey'
                  text_en: '从内存缓存中找到图像: $cacheKey'
                  file: presentation\widgets\practice\collection_painter.dart
                  line: 603
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text显示导出对话框
                - action: create_new
                  text_zh: 显示导出对话框
                  text_en: 显示导出对话框
                  file: presentation\widgets\practice\file_operations.dart
                  line: 42
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - result
                - action: create_new
                  text_zh: '导出对话框返回结果: $result'
                  text_en: '导出对话框返回结果: $result'
                  file: presentation\widgets\practice\file_operations.dart
                  line: 72
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text开始导出PDF
                - action: create_new
                  text_zh: 开始导出PDF
                  text_en: 开始导出PDF
                  file: presentation\widgets\practice\file_operations.dart
                  line: 113
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - extraparams
                - action: create_new
                  text_zh: '导出PDF的额外参数: $extraParams'
                  text_en: '导出PDF的额外参数: $extraParams'
                  file: presentation\widgets\practice\file_operations.dart
                  line: 119
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - pdfpathNull
                - action: create_new
                  text_zh: 'PDF导出结果: ${pdfPath != null ?'
                  text_en: 'PDF导出结果: ${pdfPath != null ?'
                  file: presentation\widgets\practice\file_operations.dart
                  line: 129
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exists
                - action: create_new
                  text_zh: '检查导出的第一个图片文件是否存在: $exists'
                  text_en: '检查导出的第一个图片文件是否存在: $exists'
                  file: presentation\widgets\practice\file_operations.dart
                  line: 195
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - filesize
                - action: create_new
                  text_zh: '导出的第一个图片文件大小: $fileSize 字节'
                  text_en: '导出的第一个图片文件大小: $fileSize 字节'
                  file: presentation\widgets\practice\file_operations.dart
                  line: 199
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exporttypeName
                - action: create_new
                  text_zh: '开始导出图片, 格式: ${exportType.name}'
                  text_en: '开始导出图片, 格式: ${exportType.name}'
                  file: presentation\widgets\practice\file_operations.dart
                  line: 173
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - iImagepathsI
                - action: create_new
                  text_zh: '导出的图片 ${i + 1}: ${imagePaths[i]}'
                  text_en: '导出的图片 ${i + 1}: ${imagePaths[i]}'
                  file: presentation\widgets\practice\file_operations.dart
                  line: 186
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - stack
                - action: create_new
                  text_zh: '堆栈跟踪: $stack'
                  text_en: '堆栈跟踪: $stack'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 398
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text导出字帖过程结束
                - action: create_new
                  text_zh: === 导出字帖过程结束 ===
                  text_en: === 导出字帖过程结束 ===
                  file: presentation\widgets\practice\file_operations.dart
                  line: 237
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - currentTotal
                - action: create_new
                  text_zh: '渲染进度: $current/$total'
                  text_en: '渲染进度: $current/$total'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 64
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - savetitleIdPracticeid
                - action: create_new
                  text_zh: '字帖保存成功: $saveTitle, ID: $practiceId'
                  text_en: '字帖保存成功: $saveTitle, ID: $practiceId'
                  file: presentation\widgets\practice\file_operations_mixin.dart
                  line: 174
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - titleIdPracticeid
                - action: create_new
                  text_zh: '字帖另存为成功: $title, ID: $practiceId'
                  text_en: '字帖另存为成功: $title, ID: $practiceId'
                  file: presentation\widgets\practice\file_operations_mixin.dart
                  line: 256
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - textCanvas性能优化
                - action: create_new
                  text_zh: 🎯 Canvas性能优化效果最终报告
                  text_en: 🎯 Canvas性能优化效果最终报告
                  file: presentation\widgets\practice\optimization_metrics_collector.dart
                  line: 188
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - sessiondurationInminutesSessiondurationInseconds
                - action: create_new
                  text_zh: '📊 会话时长: ${sessionDuration.inMinutes}分${sessionDuration.inSeconds
                    % 60}秒'
                  text_en: '📊 会话时长: ${sessionDuration.inMinutes}分${sessionDuration.inSeconds
                    % 60}秒'
                  file: presentation\widgets\practice\optimization_metrics_collector.dart
                  line: 334
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text帧性能指标
                - action: create_new
                  text_zh: '🎯 帧性能指标:'
                  text_en: '🎯 帧性能指标:'
                  file: presentation\widgets\practice\optimization_metrics_collector.dart
                  line: 337
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - frame
                - action: create_new
                  text_zh: 'FPS效率: ${frame['
                  text_en: 'FPS效率: ${frame['
                  file: presentation\widgets\practice\optimization_metrics_collector.dart
                  line: 341
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text通知性能指标
                - action: create_new
                  text_zh: '🔔 通知性能指标:'
                  text_en: '🔔 通知性能指标:'
                  file: presentation\widgets\practice\optimization_metrics_collector.dart
                  line: 344
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - notification
                - action: create_new
                  text_zh: '平均处理时间: ${notification['
                  text_en: '平均处理时间: ${notification['
                  file: presentation\widgets\practice\optimization_metrics_collector.dart
                  line: 349
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text重建性能指标
                - action: create_new
                  text_zh: '🔄 重建性能指标:'
                  text_en: '🔄 重建性能指标:'
                  file: presentation\widgets\practice\optimization_metrics_collector.dart
                  line: 352
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - rebuild
                - action: create_new
                  text_zh: '平均重建时间: ${rebuild['
                  text_en: '平均重建时间: ${rebuild['
                  file: presentation\widgets\practice\optimization_metrics_collector.dart
                  line: 355
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text优化效率总评
                - action: create_new
                  text_zh: '⭐ 优化效率总评:'
                  text_en: '⭐ 优化效率总评:'
                  file: presentation\widgets\practice\optimization_metrics_collector.dart
                  line: 358
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - efficiency
                - action: create_new
                  text_zh: '综合评分: ${efficiency['
                  text_en: '综合评分: ${efficiency['
                  file: presentation\widgets\practice\optimization_metrics_collector.dart
                  line: 362
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - selfadaptiveperformanceoptimizer
                - action: create_new
                  text_zh: '⏱️ SelfAdaptivePerformanceOptimizer: 移除帧率限制'
                  text_en: '⏱️ SelfAdaptivePerformanceOptimizer: 移除帧率限制'
                  file: presentation\widgets\practice\performance_optimizer.dart
                  line: 723
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - newconfigTojson
                - action: create_new
                  text_zh: '配置详情: ${newConfig.toJson()}'
                  text_en: '配置详情: ${newConfig.toJson()}'
                  file: presentation\widgets\practice\performance_optimizer.dart
                  line: 418
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - tojson
                - action: create_new
                  text_zh: '应用配置: ${_config.toJson()}'
                  text_en: '应用配置: ${_config.toJson()}'
                  file: presentation\widgets\practice\performance_optimizer.dart
                  line: 782
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - selfadaptiveperformanceoptimizerLevel
                - action: create_new
                  text_zh: '📱 SelfAdaptivePerformanceOptimizer: 设置设备性能等级为 $level'
                  text_en: '📱 SelfAdaptivePerformanceOptimizer: 设置设备性能等级为 $level'
                  file: presentation\widgets\practice\performance_optimizer.dart
                  line: 528
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - memoryoptimizedconfigTojson
                - action: create_new
                  text_zh: '优化配置: ${memoryOptimizedConfig.toJson()}'
                  text_en: '优化配置: ${memoryOptimizedConfig.toJson()}'
                  file: presentation\widgets\practice\performance_optimizer.dart
                  line: 683
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - selfadaptiveperformanceoptimizerDetectedlevel
                - action: create_new
                  text_zh: '🔍 SelfAdaptivePerformanceOptimizer: 检测到设备性能等级为 $detectedLevel'
                  text_en: '🔍 SelfAdaptivePerformanceOptimizer: 检测到设备性能等级为 $detectedLevel'
                  file: presentation\widgets\practice\performance_optimizer.dart
                  line: 779
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text无法获取渲染对象
                - action: create_new
                  text_zh: 无法获取渲染对象
                  text_en: 无法获取渲染对象
                  file: presentation\widgets\practice\practice_persistence_mixin.dart
                  line: 41
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text无法将图像转换为字节
                - action: create_new
                  text_zh: 无法将图像转换为字节数组
                  text_en: 无法将图像转换为字节数组
                  file: widgets\character_edit\character_edit_canvas.dart
                  line: 731
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - repaintboundaryE
                - action: create_new
                  text_zh: '从 RepaintBoundary 捕获图像失败: $e'
                  text_en: '从 RepaintBoundary 捕获图像失败: $e'
                  file: presentation\widgets\practice\practice_persistence_mixin.dart
                  line: 64
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - titleIdCurrentpracticeid
                - action: create_new
                  text_zh: '字帖另存为成功: $title, ID: $currentPracticeId'
                  text_en: '字帖另存为成功: $title, ID: $currentPracticeId'
                  file: presentation\widgets\practice\practice_persistence_mixin.dart
                  line: 176
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - savetitleIdCurrentpracticeid
                - action: create_new
                  text_zh: '字帖保存成功: $saveTitle, ID: $currentPracticeId'
                  text_en: '字帖保存成功: $saveTitle, ID: $currentPracticeId'
                  file: presentation\widgets\practice\practice_persistence_mixin.dart
                  line: 243
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text纹理缓存统计信息
                - action: create_new
                  text_zh: 📊 纹理缓存统计信息
                  text_en: 📊 纹理缓存统计信息
                  file: presentation\widgets\practice\texture_manager.dart
                  line: 33
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text纹理路径为空
                - action: create_new
                  text_zh: ❌ 纹理路径为空
                  text_en: ❌ 纹理路径为空
                  file: presentation\widgets\practice\texture_manager.dart
                  line: 57
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - fileid
                - action: create_new
                  text_zh: '⏳ 纹理正在加载中: $fileId'
                  text_en: '⏳ 纹理正在加载中: $fileId'
                  file: presentation\widgets\practice\texture_manager.dart
                  line: 75
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - fileidImageWidthXImageHeight
                - action: create_new
                  text_zh: '✅ 从存储服务加载纹理成功: $fileId (${image.width}x${image.height})'
                  text_en: '✅ 从存储服务加载纹理成功: $fileId (${image.width}x${image.height})'
                  file: presentation\widgets\practice\texture_manager.dart
                  line: 142
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - path1
                - action: create_new
                  text_zh: '❌ 无法加载纹理: $path'
                  text_en: '❌ 无法加载纹理: $path'
                  file: presentation\widgets\practice\texture_manager.dart
                  line: 154
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - bgcolorstr
                - action: create_new
                  text_zh: '页面背景颜色: $bgColorStr'
                  text_en: '页面背景颜色: $bgColorStr'
                  file: presentation\widgets\practice\thumbnail_generator.dart
                  line: 30
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - elementsLength
                - action: create_new
                  text_zh: '页面元素数量: ${elements.length}'
                  text_en: '页面元素数量: ${elements.length}'
                  file: presentation\widgets\practice\thumbnail_generator.dart
                  line: 37
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - scalePagewidthXPageheight
                - action: create_new
                  text_zh: '缩放比例: $scale (原始尺寸: ${pageWidth}x$pageHeight)'
                  text_en: '缩放比例: $scale (原始尺寸: ${pageWidth}x$pageHeight)'
                  file: presentation\widgets\practice\thumbnail_generator.dart
                  line: 45
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - charactersLength
                - action: create_new
                  text_zh: '集字元素字符数量: ${characters.length}'
                  text_en: '集字元素字符数量: ${characters.length}'
                  file: presentation\widgets\practice\thumbnail_generator.dart
                  line: 200
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - widthXHeightFontsizeFontcolor
                - action: create_new
                  text_zh: '集字元素尺寸: ${width}x$height, 字体大小: $fontSize, 字体颜色: $fontColor'
                  text_en: '集字元素尺寸: ${width}x$height, 字体大小: $fontSize, 字体颜色: $fontColor'
                  file: presentation\widgets\practice\thumbnail_generator.dart
                  line: 211
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text1
                - action: create_new
                  text_zh: '集字元素文本: $text'
                  text_en: '集字元素文本: $text'
                  file: presentation\widgets\practice\thumbnail_generator.dart
                  line: 232
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exportdialog
                - action: create_new
                  text_zh: 'ExportDialog: 用户取消了目录选择'
                  text_en: 'ExportDialog: 用户取消了目录选择'
                  file: presentation\widgets\practice\export\export_dialog.dart
                  line: 1270
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exportdialogError
                - action: create_new
                  text_zh: 'ExportDialog: 错误 - 文件名包含非法字符'
                  text_en: 'ExportDialog: 错误 - 文件名包含非法字符'
                  file: presentation\widgets\practice\export\export_dialog.dart
                  line: 1011
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exportdialogE
                - action: create_new
                  text_zh: 'ExportDialog: 选择目录失败: $e'
                  text_en: 'ExportDialog: 选择目录失败: $e'
                  file: presentation\widgets\practice\export\export_dialog.dart
                  line: 1273
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exportdialogResult
                - action: create_new
                  text_zh: 'ExportDialog: 导出回调返回值: $result'
                  text_en: 'ExportDialog: 导出回调返回值: $result'
                  file: presentation\widgets\practice\export\export_dialog.dart
                  line: 1065
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exportdialogDirectoryPath
                - action: create_new
                  text_zh: 'ExportDialog: 获取到默认路径: ${directory.path}'
                  text_en: 'ExportDialog: 获取到默认路径: ${directory.path}'
                  file: presentation\widgets\practice\export\export_dialog.dart
                  line: 1215
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exportdialogExists
                - action: create_new
                  text_zh: 'ExportDialog: 选择的目录是否存在: $exists'
                  text_en: 'ExportDialog: 选择的目录是否存在: $exists'
                  file: presentation\widgets\practice\export\export_dialog.dart
                  line: 1253
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exportdialogStack
                - action: create_new
                  text_zh: 'ExportDialog: 堆栈跟踪: $stack'
                  text_en: 'ExportDialog: 堆栈跟踪: $stack'
                  file: presentation\widgets\practice\export\export_dialog.dart
                  line: 1274
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exportdialogSelecteddirectory
                - action: create_new
                  text_zh: 'ExportDialog: 用户选择的目录: $selectedDirectory'
                  text_en: 'ExportDialog: 用户选择的目录: $selectedDirectory'
                  file: presentation\widgets\practice\export\export_dialog.dart
                  line: 1248
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text检查文件系统权限
                - action: create_new
                  text_zh: 检查文件系统权限...
                  text_en: 检查文件系统权限...
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 152
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text文件系统权限检查通过
                - action: create_new
                  text_zh: 文件系统权限检查通过
                  text_en: 文件系统权限检查通过
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 156
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text尝试创建目录并再次检
                - action: create_new
                  text_zh: 尝试创建目录并再次检查权限...
                  text_en: 尝试创建目录并再次检查权限...
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 159
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - outputpath
                - action: create_new
                  text_zh: '目录已准备好: $outputPath'
                  text_en: '目录已准备好: $outputPath'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 350
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - errorOutputpath
                - action: create_new
                  text_zh: '错误: 无法创建目录: $outputPath'
                  text_en: '错误: 无法创建目录: $outputPath'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 346
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - pageimagesLength
                - action: create_new
                  text_zh: 成功渲染 ${pageImages.length} 个页面
                  text_en: 成功渲染 ${pageImages.length} 个页面
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 269
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - filepathFilesize
                - action: create_new
                  text_zh: 'PDF文件保存成功: $filePath (大小: $fileSize 字节)'
                  text_en: 'PDF文件保存成功: $filePath (大小: $fileSize 字节)'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 376
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - readtestLength
                - action: create_new
                  text_zh: '文件读取测试成功: ${readTest.length} 字节'
                  text_en: '文件读取测试成功: ${readTest.length} 字节'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 381
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - errorFilepath
                - action: create_new
                  text_zh: '错误: PDF文件写入后不存在: $filePath'
                  text_en: '错误: PDF文件写入后不存在: $filePath'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 388
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exportedfilesLength
                - action: create_new
                  text_zh: 导出完成，成功导出 ${exportedFiles.length} 个文件
                  text_en: 导出完成，成功导出 ${exportedFiles.length} 个文件
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 126
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - pageformatIslandscape
                - action: create_new
                  text_zh: '使用页面格式: $pageFormat, 朝向: ${isLandscape ?'
                  text_en: '使用页面格式: $pageFormat, 朝向: ${isLandscape ?'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 186
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - pageindicesLength
                - action: create_new
                  text_zh: '导出所有页面: ${pageIndices.length}页'
                  text_en: '导出所有页面: ${pageIndices.length}页'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 196
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - currentpage
                - action: create_new
                  text_zh: '只导出当前页面: 第${currentPage + 1}页'
                  text_en: '只导出当前页面: 第${currentPage + 1}页'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 203
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - pagerangePageindicesLength
                - action: create_new
                  text_zh: '导出自定义范围页面: $pageRange => ${pageIndices.length}页'
                  text_en: '导出自定义范围页面: $pageRange => ${pageIndices.length}页'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 210
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - fitpolicy
                - action: create_new
                  text_zh: '应用适配策略: $fitPolicy'
                  text_en: '应用适配策略: $fitPolicy'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 303
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - warningPageindex
                - action: create_new
                  text_zh: '警告: 未能渲染第 ${pageIndex + 1} 页，跳过'
                  text_en: '警告: 未能渲染第 ${pageIndex + 1} 页，跳过'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 260
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - pageindex
                - action: create_new
                  text_zh: 成功渲染第 ${pageIndex + 1} 页
                  text_en: 成功渲染第 ${pageIndex + 1} 页
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 258
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - pageindexImageLength
                - action: create_new
                  text_zh: '添加第 ${pageIndex + 1} 页到PDF: ${image.length} 字节'
                  text_en: '添加第 ${pageIndex + 1} 页到PDF: ${image.length} 字节'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 279
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - pdfbytesLength
                - action: create_new
                  text_zh: 'PDF生成完成: ${pdfBytes.length} 字节'
                  text_en: 'PDF生成完成: ${pdfBytes.length} 字节'
                  file: presentation\widgets\practice\export\export_service.dart
                  line: 361
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - verticalalignColumnalignment
                - action: create_new
                  text_zh: '竖排文本列: 垂直对齐=$verticalAlign, 列对齐=$columnAlignment'
                  text_en: '竖排文本列: 垂直对齐=$verticalAlign, 列对齐=$columnAlignment'
                  file: presentation\widgets\practice\property_panels\vertical_column_justified_text.dart
                  line: 74
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text图片文件为空
                - action: create_new
                  text_zh: 图片文件为空
                  text_en: 图片文件为空
                  file: presentation\widgets\practice\property_panels\collection_panels\m3_background_texture_panel.dart
                  line: 812
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - nodeDebuglabel
                - action: create_new
                  text_zh: '已恢复优先级焦点到: ${node.debugLabel ??'
                  text_en: '已恢复优先级焦点到: ${node.debugLabel ??'
                  file: utils\focus\focus_persistence.dart
                  line: 38
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - systemaltstate
                - action: create_new
                  text_zh: '⌨️ Alt键状态强制同步: $systemAltState'
                  text_en: '⌨️ Alt键状态强制同步: $systemAltState'
                  file: utils\keyboard\keyboard_utils.dart
                  line: 170
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text轮廓处理超时
                - action: create_new
                  text_zh: 轮廓处理超时
                  text_en: 轮廓处理超时
                  file: widgets\character_edit\character_edit_canvas.dart
                  line: 709
                  context_type: error_messages
                  similar_key: null
                  similarity: 0
                  approved: false
        - - ui_text_widget
          - !!python/object/apply:collections.OrderedDict
            - - - e
                - action: create_new
                  text_zh: '应用启动失败: $e'
                  text_en: '应用启动失败: $e'
                  file: main.dart
                  line: 106
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text字体测试工具
                - action: create_new
                  text_zh: 字体测试工具
                  text_en: 字体测试工具
                  file: presentation\widgets\font_tester.dart
                  line: 17
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text字体粗细测试工具
                - action: create_new
                  text_zh: 字体粗细测试工具
                  text_en: 字体粗细测试工具
                  file: presentation\widgets\font_weight_tester.dart
                  line: 17
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - homePageBodyCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenConstTextHomePageStyleTextstyleFontsizeConstSizedboxHeightElevatedbuttonOnpressedContextGoApproutesFonttesterChildConstText
                - action: create_new
                  text_zh: 'Home Page'')), body: Center( child: Column( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ const Text(''Home Page'',
                    style: TextStyle(fontSize: 24)), const SizedBox(height: 32), ElevatedButton(
                    onPressed: () { context.go(AppRoutes.fontTester); }, child: const
                    Text(''字体测试工具'
                  text_en: 'Home Page'')), body: Center( child: Column( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ const Text(''Home Page'',
                    style: TextStyle(fontSize: 24)), const SizedBox(height: 32), ElevatedButton(
                    onPressed: () { context.go(AppRoutes.fontTester); }, child: const
                    Text(''字体测试工具'
                  file: presentation\pages\home_page.dart
                  line: 12
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - characterdetailloaderrorErrorStyleTextstyleColorThemeColorschemeErrorOverrideVoidDisposeDisposeSuperDisposeFutureVoidCharacterviewCharacterStringTagAsyncTryFinalCharacterserviceRefReadCharacterserviceproviderAwaitCharacterserviceAddtagCharacterIdTagRefInvalidateCharacterdetailproviderWidgetCharacteridCatchEIfMountedFinalApplocalizationsOfContextScaffoldmessengerOfContextShowsnackbarSnackbarContentTextTagadderrorETostringBackgroundcolorThemeOfContextColorschemeErrorWidgetWidgetrefRefThemedataThemeIntSelectedindexApplocalizationsFinalDetailstateRefWatchCharacterdetailproviderWidgetCharacteridReturnDetailstateMaybewhenDataStateIfStateNullReturnConstSizedboxShrinkFinalFormatsStateAvailableformatsIfFormatsIsemptyReturnConstSizedboxShrinkReturnSizedboxHeightChildListviewBuilderScrolldirectionAxisHorizontalItemcountFormatsLengthItembuilderContextIndexFinalFormatFormatsIndexFinalIsselectedIndexSelectedindexReturnFuturebuilderStringFutureFormatResolvepathWidgetCharacteridBuilderContextSnapshotReturnGesturedetectorOntapSetstateSelectedformatIndexChildContainerWidthHeightMarginConstEdgeinsetsOnlyRightDecorationBoxdecorationBorderBorderAllColorIsselectedThemeColorschemePrimaryThemeColorschemeOutlineWidthIsselectedBorderradiusBorderradiusCircularChildSnapshotHasdataSnapshotDataFormatConstCenterChildSizedboxWidthHeightChildCircularprogressindicatorStrokewidthOrelseConstSizedboxShrinkWidgetStringImagepathDynamicFormatFinalExtensionImagepathTolowercaseSplitLastFinalIssvgExtensionSvgFinalApplocalizationsOfContextReturnFuturebuilderImagedimensionsFutureFutureValueConstImagedimensionsWidthHeightIssvgFalseBuilderContextSnapshotStringTooltiptextFormatTooltiptextNDimensionsPxReturnTooltipMessageTooltiptextWaitdurationConstDurationMillisecondsShowdurationConstDurationSecondsTextstyleConstTextstyleFontsizeColorColorsWhiteDecorationBoxdecorationColorColorsBorderradiusBorderradiusCircularChildStackFitStackfitExpandChildrenIfIssvgSvgpictureFileFileImagepathFitBoxfitContainPlaceholderbuilderContextConstIconIconsImageElseImageFileFileImagepathFitBoxfitContainErrorbuilderContextErrorStacktraceReturnConstIconIconsWidgetWidgetrefRefThemedataThemeCharacterviewCharacterApplocalizationsFinalStartsectionwidgetsTextCharacterCharacterStyleThemeTextthemeHeadlinemediumCopywithFontweightFontweightBoldOverflowTextoverflowEllipsisFinalEndsectionwidgetsWidgetIfWidgetOntogglefavoriteNullEndsectionwidgetsAddIconbuttonIconIconCharacterIsfavoriteIconsFavoriteIconsColorCharacterIsfavoriteThemeColorschemeErrorThemeColorschemeOnsurfaceOnpressedAsyncWidgetOntogglefavoriteCallTooltipCharacterIsfavoriteRemovefavoriteAddfavoriteConstraintsConstBoxconstraintsMinwidthMinheightPaddingEdgeinsetsZeroVisualdensityVisualdensityCompactIfWidgetOneditNullEndsectionwidgetsAddIconbuttonIconConstIconIconsEditOnpressedFinalCharacterviewRefReadCharacterdetailproviderWidgetCharacteridValueCharacterIfCharacterviewNullNavigatorOfContextPushnamedApproutesCharactercollectionArgumentsWorkidCharacterviewWorkidPageidCharacterviewPageidCharacteridCharacterviewIdElseWidgetOneditCallTooltipEditConstraintsConstBoxconstraintsMinwidthMinheightPaddingEdgeinsetsZeroVisualdensityVisualdensityCompactIfWidgetOncloseNullEndsectionwidgetsAddIconbuttonIconConstIconIconsCloseOnpressedWidgetOncloseTooltipCancelConstraintsConstBoxconstraintsMinwidthMinheightPaddingEdgeinsetsZeroVisualdensityVisualdensityCompactReturnAdaptiverowStartsectionStartsectionwidgetsEndsectionEndsectionwidgetsSectionspacingItemspacingWidgetThemedataThemeCharacterviewCharacterStringImagepathApplocalizationsReturnContainerAlignmentAlignmentCenterDecorationBoxdecorationColorThemeColorschemeSurfacecontainerhighestWithalphaBorderradiusBorderradiusCircularChildImagepathNullImagepathIsnotemptyCliprrectBorderradiusBorderradiusCircularChildZoomableimageviewImagepathImagepathEnablemousewheelTrueMinscaleMaxscaleShowcontrolsTrueErrorbuilderContextErrorStacktraceReturnColumnMainaxisalignmentMainaxisalignmentCenterChildrenIconIconsSizeColorThemeColorschemeErrorConstSizedboxHeightTextImageloaderrorErrorTostringStyleTextstyleColorThemeColorschemeErrorLoadingbuilderContextReturnCenterChildCircularprogressindicatorColorThemeColorschemePrimaryStrokewidthColumnMainaxisalignmentMainaxisalignmentCenterChildrenIconIconsSizeColorThemeColorschemeOnsurfacevariantConstSizedboxHeightTextNocharactersStyleTextstyleColorThemeColorschemeOnsurfacevariantWidgetThemedataThemeRequiredStringTitleRequiredStringContentRequiredIcondataIcondataReturnPaddingPaddingConstEdgeinsetsOnlyBottomAppsizesSpacingmediumChildRowCrossaxisalignmentCrossaxisalignmentStartChildrenSizedboxWidthHeightChildIconIcondataSizeColorThemeColorschemePrimaryConstSizedboxWidthExpandedChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenTextTitleStyleThemeTextthemeBodysmallCopywithColorThemeColorschemeOnsurfacevariantOverflowTextoverflowEllipsisTextContentStyleThemeTextthemeBodymediumOverflowTextoverflowEllipsisMaxlinesWidgetThemedataThemeRequiredStringTitleRequiredStringContentRequiredIcondataIcondataRequiredIcondataButtoniconRequiredStringButtontooltipRequiredVoidcallbackOnbuttonpressedReturnPaddingPaddingConstEdgeinsetsOnlyBottomAppsizesSpacingmediumChildRowCrossaxisalignmentCrossaxisalignmentStartChildrenSizedboxWidthHeightChildIconIcondataSizeColorThemeColorschemePrimaryConstSizedboxWidthExpandedChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenTextTitleStyleThemeTextthemeBodysmallCopywithColorThemeColorschemeOnsurfacevariantOverflowTextoverflowEllipsisRowChildrenExpandedChildTextContentStyleThemeTextthemeBodymediumOverflowTextoverflowEllipsisMaxlinesIconbuttonIconIconButtoniconSizeColorThemeColorschemePrimaryOnpressedOnbuttonpressedTooltipButtontooltipConstraintsConstBoxconstraintsMinwidthMinheightPaddingEdgeinsetsZeroVisualdensityVisualdensityCompactStringDatetimeDatetimeReturnDateformatYyyyMmDdHhMmFormatDatetimeStringDynamicFormatFinalApplocalizationsOfContextTryStringFormattypenameSwitchFormatFormatCaseCharacterimagetypeOriginalFormattypenameOriginalBreakCaseCharacterimagetypeBinaryFormattypenameCharacterdetailformatbinaryBreakCaseCharacterimagetypeThumbnailFormattypenameCharacterdetailformatthumbnailBreakCaseCharacterimagetypeSquarebinaryFormattypenameCharacterdetailformatsquarebinaryBreakCaseCharacterimagetypeSquaretransparentFormattypenameCharacterdetailformatsquaretransparentBreakCaseCharacterimagetypeTransparentFormattypenameCharacterdetailformattransparentBreakCaseCharacterimagetypeOutlineFormattypenameCharacterdetailformatoutlineBreakCaseCharacterimagetypeSquareoutlineFormattypenameCharacterdetailformatsquareoutlineBreakDefaultFormattypenameFormatFormatTostringStringExtensionSwitchFormatFormatCaseCharacterimagetypeOutlineCaseCharacterimagetypeSquareoutlineExtensionSvgBreakDefaultExtensionPngBreakReturnFormatNameNFormattypeFormattypenameNFileextensionExtensionNCharacterdetailformatdescriptionFormatDescriptionCatchEReturn
                - action: create_new
                  text_zh: '${l10n.characterDetailLoadError}: $error'', style: TextStyle(color:
                    theme.colorScheme.error), ), ), ), ), ); } @override void dispose()
                    { _tagController.dispose(); super.dispose(); } Future<void> _addTag(CharacterView
                    character, String tag) async { try { final characterService =
                    ref.read(characterServiceProvider); await characterService.addTag(character.id,
                    tag); ref.invalidate(characterDetailProvider(widget.characterId));
                    } catch (e) { if (mounted) { final l10n = AppLocalizations.of(context);
                    ScaffoldMessenger.of(context).showSnackBar( SnackBar( content:
                    Text(l10n.tagAddError(e.toString())), backgroundColor: Theme.of(context).colorScheme.error,
                    ), ); } } } Widget _buildFormatSelector( WidgetRef ref, ThemeData
                    theme, int selectedIndex, AppLocalizations l10n, ) { final detailState
                    = ref.watch(characterDetailProvider(widget.characterId)); return
                    detailState.maybeWhen( data: (state) { if (state == null) return
                    const SizedBox.shrink(); final formats = state.availableFormats;
                    if (formats.isEmpty) return const SizedBox.shrink(); return SizedBox(
                    height: 60, child: ListView.builder( scrollDirection: Axis.horizontal,
                    itemCount: formats.length, itemBuilder: (context, index) { final
                    format = formats[index]; final isSelected = index == selectedIndex;
                    return FutureBuilder<String>( future: format.resolvePath(widget.characterId),
                    builder: (context, snapshot) { return GestureDetector( onTap:
                    () { setState(() { selectedFormat = index; }); }, child: Container(
                    width: 60, height: 60, margin: const EdgeInsets.only(right: 8),
                    decoration: BoxDecoration( border: Border.all( color: isSelected
                    ? theme.colorScheme.primary : theme.colorScheme.outline, width:
                    isSelected ? 2 : 1, ), borderRadius: BorderRadius.circular(4),
                    ), child: snapshot.hasData ? _buildFormatThumbnailWithTooltip(
                    snapshot.data!, format) : const Center( child: SizedBox( width:
                    20, height: 20, child: CircularProgressIndicator( strokeWidth:
                    2, ), ), ), ), ); }, ); }, ), ); }, orElse: () => const SizedBox.shrink(),
                    ); } Widget _buildFormatThumbnailWithTooltip(String imagePath,
                    dynamic format) { final extension = imagePath.toLowerCase().split(''.'').last;
                    final isSvg = extension == ''svg''; final l10n = AppLocalizations.of(context);
                    return FutureBuilder<ImageDimensions?>( future: Future.value(
                    const ImageDimensions(width: 300, height: 300, isSvg: false)),
                    builder: (context, snapshot) { String tooltipText = _getFormatTooltip(format);
                    tooltipText += ''\n${l10n.dimensions}: 300×300 px''; return Tooltip(
                    message: tooltipText, waitDuration: const Duration(milliseconds:
                    500), showDuration: const Duration(seconds: 5), textStyle: const
                    TextStyle( fontSize: 14, color: Colors.white, ), decoration: BoxDecoration(
                    color: Colors.black87, borderRadius: BorderRadius.circular(4),
                    ), child: Stack( fit: StackFit.expand, children: [ if (isSvg)
                    SvgPicture.file( File(imagePath), fit: BoxFit.contain, placeholderBuilder:
                    (context) => const Icon(Icons.image), ) else Image.file( File(imagePath),
                    fit: BoxFit.contain, errorBuilder: (context, error, stackTrace)
                    { return const Icon(Icons.broken_image); }, ), ], ), ); }, );
                    } Widget _buildHeader( WidgetRef ref, ThemeData theme, CharacterView
                    character, AppLocalizations l10n, ) { final startSectionWidgets
                    = [ Text( character.character, style: theme.textTheme.headlineMedium?.copyWith(
                    fontWeight: FontWeight.bold, ), overflow: TextOverflow.ellipsis,
                    ), ]; final endSectionWidgets = <Widget>[]; if (widget.onToggleFavorite
                    != null) { endSectionWidgets.add( IconButton( icon: Icon( character.isFavorite
                    ? Icons.favorite : Icons.favorite_border, color: character.isFavorite
                    ? theme.colorScheme.error : theme.colorScheme.onSurface, ), onPressed:
                    () async { widget.onToggleFavorite?.call(); }, tooltip: character.isFavorite
                    ? l10n.removeFavorite : l10n.addFavorite, constraints: const BoxConstraints(
                    minWidth: 40, minHeight: 40, ), padding: EdgeInsets.zero, visualDensity:
                    VisualDensity.compact, ), ); } if (widget.onEdit != null) { endSectionWidgets.add(
                    IconButton( icon: const Icon(Icons.edit), onPressed: () { final
                    characterView = ref .read(characterDetailProvider(widget.characterId))
                    .value ?.character; if (characterView != null) { Navigator.of(context).pushNamed(
                    AppRoutes.characterCollection, arguments: { ''workId'': characterView.workId,
                    ''pageId'': characterView.pageId, ''characterId'': characterView.id,
                    }, ); } else { widget.onEdit?.call(); } }, tooltip: l10n.edit,
                    constraints: const BoxConstraints( minWidth: 40, minHeight: 40,
                    ), padding: EdgeInsets.zero, visualDensity: VisualDensity.compact,
                    ), ); } if (widget.onClose != null) { endSectionWidgets.add( IconButton(
                    icon: const Icon(Icons.close), onPressed: widget.onClose, tooltip:
                    l10n.cancel, constraints: const BoxConstraints( minWidth: 40,
                    minHeight: 40, ), padding: EdgeInsets.zero, visualDensity: VisualDensity.compact,
                    ), ); } return AdaptiveRow( startSection: startSectionWidgets,
                    endSection: endSectionWidgets, sectionSpacing: 8.0, itemSpacing:
                    4.0, ); } Widget _buildImagePreview( ThemeData theme, CharacterView
                    character, String? imagePath, AppLocalizations l10n, ) { return
                    Container( alignment: Alignment.center, decoration: BoxDecoration(
                    color: theme.colorScheme.surfaceContainerHighest .withAlpha(77),
                    borderRadius: BorderRadius.circular(8), ), child: imagePath !=
                    null && imagePath.isNotEmpty ? ClipRRect( borderRadius: BorderRadius.circular(8),
                    child: ZoomableImageView( imagePath: imagePath, enableMouseWheel:
                    true, minScale: 0.5, maxScale: 5.0, showControls: true, errorBuilder:
                    (context, error, stackTrace) { return Column( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ Icon( Icons.broken_image,
                    size: 48, color: theme.colorScheme.error, ), const SizedBox(height:
                    16), Text( l10n.imageLoadError(error.toString()), style: TextStyle(color:
                    theme.colorScheme.error), ), ], ); }, loadingBuilder: (context)
                    { return Center( child: CircularProgressIndicator( color: theme.colorScheme.primary,
                    strokeWidth: 2, ), ); }, ), ) : Column( mainAxisAlignment: MainAxisAlignment.center,
                    children: [ Icon( Icons.image_not_supported, size: 48, color:
                    theme.colorScheme.onSurfaceVariant, ), const SizedBox(height:
                    16), Text( l10n.noCharacters, style: TextStyle(color: theme.colorScheme.onSurfaceVariant),
                    ), ], ), ); } Widget _buildInfoItem( ThemeData theme, { required
                    String title, required String content, required IconData iconData,
                    }) { return Padding( padding: const EdgeInsets.only(bottom: AppSizes.spacingMedium),
                    child: Row( crossAxisAlignment: CrossAxisAlignment.start, children:
                    [ SizedBox( width: 20, height: 20, child: Icon( iconData, size:
                    20, color: theme.colorScheme.primary, ), ), const SizedBox(width:
                    8), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text( title, style: theme.textTheme.bodySmall?.copyWith(
                    color: theme.colorScheme.onSurfaceVariant, ), overflow: TextOverflow.ellipsis,
                    ), Text( content, style: theme.textTheme.bodyMedium, overflow:
                    TextOverflow.ellipsis, maxLines: 3, ), ], ), ), ], ), ); } Widget
                    _buildInfoItemWithButton( ThemeData theme, { required String title,
                    required String content, required IconData iconData, required
                    IconData buttonIcon, required String buttonTooltip, required VoidCallback
                    onButtonPressed, }) { return Padding( padding: const EdgeInsets.only(bottom:
                    AppSizes.spacingMedium), child: Row( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ SizedBox( width: 20, height: 20, child: Icon( iconData,
                    size: 20, color: theme.colorScheme.primary, ), ), const SizedBox(width:
                    8), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text( title, style: theme.textTheme.bodySmall?.copyWith(
                    color: theme.colorScheme.onSurfaceVariant, ), overflow: TextOverflow.ellipsis,
                    ), Row( children: [ Expanded( child: Text( content, style: theme.textTheme.bodyMedium,
                    overflow: TextOverflow.ellipsis, maxLines: 2, ), ), IconButton(
                    icon: Icon( buttonIcon, size: 18, color: theme.colorScheme.primary,
                    ), onPressed: onButtonPressed, tooltip: buttonTooltip, constraints:
                    const BoxConstraints( minWidth: 32, minHeight: 32, ), padding:
                    EdgeInsets.zero, visualDensity: VisualDensity.compact, ), ], ),
                    ], ), ), ], ), ); } String _formatDateTime(DateTime dateTime)
                    { return DateFormat(''yyyy-MM-dd HH:mm'').format(dateTime); }
                    String _getFormatTooltip(dynamic format) { final l10n = AppLocalizations.of(context);
                    try { String formatTypeName; switch (format.format) { case CharacterImageType.original:
                    formatTypeName = l10n.original; break; case CharacterImageType.binary:
                    formatTypeName = l10n.characterDetailFormatBinary; break; case
                    CharacterImageType.thumbnail: formatTypeName = l10n.characterDetailFormatThumbnail;
                    break; case CharacterImageType.squareBinary: formatTypeName =
                    l10n.characterDetailFormatSquareBinary; break; case CharacterImageType.squareTransparent:
                    formatTypeName = l10n.characterDetailFormatSquareTransparent;
                    break; case CharacterImageType.transparent: formatTypeName = l10n.characterDetailFormatTransparent;
                    break; case CharacterImageType.outline: formatTypeName = l10n.characterDetailFormatOutline;
                    break; case CharacterImageType.squareOutline: formatTypeName =
                    l10n.characterDetailFormatSquareOutline; break; default: formatTypeName
                    = format.format.toString(); } String extension; switch (format.format)
                    { case CharacterImageType.outline: case CharacterImageType.squareOutline:
                    extension = ''SVG''; break; default: extension = ''PNG''; break;
                    } return ''${format.name}\n${l10n.formatType}: $formatTypeName\n${l10n.fileExtension}:
                    $extension\n${l10n.characterDetailFormatDescription}: ${format.description}'';
                    } catch (e) { return ''图片格式信息'
                  text_en: '${l10n.characterDetailLoadError}: $error'', style: TextStyle(color:
                    theme.colorScheme.error), ), ), ), ), ); } @override void dispose()
                    { _tagController.dispose(); super.dispose(); } Future<void> _addTag(CharacterView
                    character, String tag) async { try { final characterService =
                    ref.read(characterServiceProvider); await characterService.addTag(character.id,
                    tag); ref.invalidate(characterDetailProvider(widget.characterId));
                    } catch (e) { if (mounted) { final l10n = AppLocalizations.of(context);
                    ScaffoldMessenger.of(context).showSnackBar( SnackBar( content:
                    Text(l10n.tagAddError(e.toString())), backgroundColor: Theme.of(context).colorScheme.error,
                    ), ); } } } Widget _buildFormatSelector( WidgetRef ref, ThemeData
                    theme, int selectedIndex, AppLocalizations l10n, ) { final detailState
                    = ref.watch(characterDetailProvider(widget.characterId)); return
                    detailState.maybeWhen( data: (state) { if (state == null) return
                    const SizedBox.shrink(); final formats = state.availableFormats;
                    if (formats.isEmpty) return const SizedBox.shrink(); return SizedBox(
                    height: 60, child: ListView.builder( scrollDirection: Axis.horizontal,
                    itemCount: formats.length, itemBuilder: (context, index) { final
                    format = formats[index]; final isSelected = index == selectedIndex;
                    return FutureBuilder<String>( future: format.resolvePath(widget.characterId),
                    builder: (context, snapshot) { return GestureDetector( onTap:
                    () { setState(() { selectedFormat = index; }); }, child: Container(
                    width: 60, height: 60, margin: const EdgeInsets.only(right: 8),
                    decoration: BoxDecoration( border: Border.all( color: isSelected
                    ? theme.colorScheme.primary : theme.colorScheme.outline, width:
                    isSelected ? 2 : 1, ), borderRadius: BorderRadius.circular(4),
                    ), child: snapshot.hasData ? _buildFormatThumbnailWithTooltip(
                    snapshot.data!, format) : const Center( child: SizedBox( width:
                    20, height: 20, child: CircularProgressIndicator( strokeWidth:
                    2, ), ), ), ), ); }, ); }, ), ); }, orElse: () => const SizedBox.shrink(),
                    ); } Widget _buildFormatThumbnailWithTooltip(String imagePath,
                    dynamic format) { final extension = imagePath.toLowerCase().split(''.'').last;
                    final isSvg = extension == ''svg''; final l10n = AppLocalizations.of(context);
                    return FutureBuilder<ImageDimensions?>( future: Future.value(
                    const ImageDimensions(width: 300, height: 300, isSvg: false)),
                    builder: (context, snapshot) { String tooltipText = _getFormatTooltip(format);
                    tooltipText += ''\n${l10n.dimensions}: 300×300 px''; return Tooltip(
                    message: tooltipText, waitDuration: const Duration(milliseconds:
                    500), showDuration: const Duration(seconds: 5), textStyle: const
                    TextStyle( fontSize: 14, color: Colors.white, ), decoration: BoxDecoration(
                    color: Colors.black87, borderRadius: BorderRadius.circular(4),
                    ), child: Stack( fit: StackFit.expand, children: [ if (isSvg)
                    SvgPicture.file( File(imagePath), fit: BoxFit.contain, placeholderBuilder:
                    (context) => const Icon(Icons.image), ) else Image.file( File(imagePath),
                    fit: BoxFit.contain, errorBuilder: (context, error, stackTrace)
                    { return const Icon(Icons.broken_image); }, ), ], ), ); }, );
                    } Widget _buildHeader( WidgetRef ref, ThemeData theme, CharacterView
                    character, AppLocalizations l10n, ) { final startSectionWidgets
                    = [ Text( character.character, style: theme.textTheme.headlineMedium?.copyWith(
                    fontWeight: FontWeight.bold, ), overflow: TextOverflow.ellipsis,
                    ), ]; final endSectionWidgets = <Widget>[]; if (widget.onToggleFavorite
                    != null) { endSectionWidgets.add( IconButton( icon: Icon( character.isFavorite
                    ? Icons.favorite : Icons.favorite_border, color: character.isFavorite
                    ? theme.colorScheme.error : theme.colorScheme.onSurface, ), onPressed:
                    () async { widget.onToggleFavorite?.call(); }, tooltip: character.isFavorite
                    ? l10n.removeFavorite : l10n.addFavorite, constraints: const BoxConstraints(
                    minWidth: 40, minHeight: 40, ), padding: EdgeInsets.zero, visualDensity:
                    VisualDensity.compact, ), ); } if (widget.onEdit != null) { endSectionWidgets.add(
                    IconButton( icon: const Icon(Icons.edit), onPressed: () { final
                    characterView = ref .read(characterDetailProvider(widget.characterId))
                    .value ?.character; if (characterView != null) { Navigator.of(context).pushNamed(
                    AppRoutes.characterCollection, arguments: { ''workId'': characterView.workId,
                    ''pageId'': characterView.pageId, ''characterId'': characterView.id,
                    }, ); } else { widget.onEdit?.call(); } }, tooltip: l10n.edit,
                    constraints: const BoxConstraints( minWidth: 40, minHeight: 40,
                    ), padding: EdgeInsets.zero, visualDensity: VisualDensity.compact,
                    ), ); } if (widget.onClose != null) { endSectionWidgets.add( IconButton(
                    icon: const Icon(Icons.close), onPressed: widget.onClose, tooltip:
                    l10n.cancel, constraints: const BoxConstraints( minWidth: 40,
                    minHeight: 40, ), padding: EdgeInsets.zero, visualDensity: VisualDensity.compact,
                    ), ); } return AdaptiveRow( startSection: startSectionWidgets,
                    endSection: endSectionWidgets, sectionSpacing: 8.0, itemSpacing:
                    4.0, ); } Widget _buildImagePreview( ThemeData theme, CharacterView
                    character, String? imagePath, AppLocalizations l10n, ) { return
                    Container( alignment: Alignment.center, decoration: BoxDecoration(
                    color: theme.colorScheme.surfaceContainerHighest .withAlpha(77),
                    borderRadius: BorderRadius.circular(8), ), child: imagePath !=
                    null && imagePath.isNotEmpty ? ClipRRect( borderRadius: BorderRadius.circular(8),
                    child: ZoomableImageView( imagePath: imagePath, enableMouseWheel:
                    true, minScale: 0.5, maxScale: 5.0, showControls: true, errorBuilder:
                    (context, error, stackTrace) { return Column( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ Icon( Icons.broken_image,
                    size: 48, color: theme.colorScheme.error, ), const SizedBox(height:
                    16), Text( l10n.imageLoadError(error.toString()), style: TextStyle(color:
                    theme.colorScheme.error), ), ], ); }, loadingBuilder: (context)
                    { return Center( child: CircularProgressIndicator( color: theme.colorScheme.primary,
                    strokeWidth: 2, ), ); }, ), ) : Column( mainAxisAlignment: MainAxisAlignment.center,
                    children: [ Icon( Icons.image_not_supported, size: 48, color:
                    theme.colorScheme.onSurfaceVariant, ), const SizedBox(height:
                    16), Text( l10n.noCharacters, style: TextStyle(color: theme.colorScheme.onSurfaceVariant),
                    ), ], ), ); } Widget _buildInfoItem( ThemeData theme, { required
                    String title, required String content, required IconData iconData,
                    }) { return Padding( padding: const EdgeInsets.only(bottom: AppSizes.spacingMedium),
                    child: Row( crossAxisAlignment: CrossAxisAlignment.start, children:
                    [ SizedBox( width: 20, height: 20, child: Icon( iconData, size:
                    20, color: theme.colorScheme.primary, ), ), const SizedBox(width:
                    8), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text( title, style: theme.textTheme.bodySmall?.copyWith(
                    color: theme.colorScheme.onSurfaceVariant, ), overflow: TextOverflow.ellipsis,
                    ), Text( content, style: theme.textTheme.bodyMedium, overflow:
                    TextOverflow.ellipsis, maxLines: 3, ), ], ), ), ], ), ); } Widget
                    _buildInfoItemWithButton( ThemeData theme, { required String title,
                    required String content, required IconData iconData, required
                    IconData buttonIcon, required String buttonTooltip, required VoidCallback
                    onButtonPressed, }) { return Padding( padding: const EdgeInsets.only(bottom:
                    AppSizes.spacingMedium), child: Row( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ SizedBox( width: 20, height: 20, child: Icon( iconData,
                    size: 20, color: theme.colorScheme.primary, ), ), const SizedBox(width:
                    8), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text( title, style: theme.textTheme.bodySmall?.copyWith(
                    color: theme.colorScheme.onSurfaceVariant, ), overflow: TextOverflow.ellipsis,
                    ), Row( children: [ Expanded( child: Text( content, style: theme.textTheme.bodyMedium,
                    overflow: TextOverflow.ellipsis, maxLines: 2, ), ), IconButton(
                    icon: Icon( buttonIcon, size: 18, color: theme.colorScheme.primary,
                    ), onPressed: onButtonPressed, tooltip: buttonTooltip, constraints:
                    const BoxConstraints( minWidth: 32, minHeight: 32, ), padding:
                    EdgeInsets.zero, visualDensity: VisualDensity.compact, ), ], ),
                    ], ), ), ], ), ); } String _formatDateTime(DateTime dateTime)
                    { return DateFormat(''yyyy-MM-dd HH:mm'').format(dateTime); }
                    String _getFormatTooltip(dynamic format) { final l10n = AppLocalizations.of(context);
                    try { String formatTypeName; switch (format.format) { case CharacterImageType.original:
                    formatTypeName = l10n.original; break; case CharacterImageType.binary:
                    formatTypeName = l10n.characterDetailFormatBinary; break; case
                    CharacterImageType.thumbnail: formatTypeName = l10n.characterDetailFormatThumbnail;
                    break; case CharacterImageType.squareBinary: formatTypeName =
                    l10n.characterDetailFormatSquareBinary; break; case CharacterImageType.squareTransparent:
                    formatTypeName = l10n.characterDetailFormatSquareTransparent;
                    break; case CharacterImageType.transparent: formatTypeName = l10n.characterDetailFormatTransparent;
                    break; case CharacterImageType.outline: formatTypeName = l10n.characterDetailFormatOutline;
                    break; case CharacterImageType.squareOutline: formatTypeName =
                    l10n.characterDetailFormatSquareOutline; break; default: formatTypeName
                    = format.format.toString(); } String extension; switch (format.format)
                    { case CharacterImageType.outline: case CharacterImageType.squareOutline:
                    extension = ''SVG''; break; default: extension = ''PNG''; break;
                    } return ''${format.name}\n${l10n.formatType}: $formatTypeName\n${l10n.fileExtension}:
                    $extension\n${l10n.characterDetailFormatDescription}: ${format.description}'';
                    } catch (e) { return ''图片格式信息'
                  file: presentation\pages\characters\components\m3_character_detail_panel.dart
                  line: 231
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - selectedcountRefReadLibrarymanagementproviderSelecteditemsLength
                - action: create_new
                  text_zh: ${l10n.selectedCount(ref.read(libraryManagementProvider).selectedItems.length)}
                    已剪切到剪贴板
                  text_en: ${l10n.selectedCount(ref.read(libraryManagementProvider).selectedItems.length)}
                    已剪切到剪贴板
                  file: presentation\pages\library\m3_library_management_page.dart
                  line: 152
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - countStyleThemeTextthemeBodysmallOntapNotifierSelectcategoryNullWidgetBuildcontextContextLibrarycategoryCategoryStringSelectedcategoryidLibrarymanagementnotifierNotifierMapStringIntItemcountsIntIndentlevelFinalThemeThemeOfContextFinalApplocalizationsOfContextFinalHaschildrenCategoryChildrenIsnotemptyFinalCountItemcountsCategoryIdIfContainskeyCategoryIdCategoryIdFalseFinalIsexpandedCategoryIdFalseReturnColumnCrossaxisalignmentCrossaxisalignmentStartChildrenDragtargetLibraryitemdragdataOnacceptwithdetailsDataFinalStateRefReadLibrarymanagementproviderIfStateIsbatchmodeStateSelecteditemsIsnotemptyForFinalItemidInStateSelecteditemsNotifierAdditemtocategoryItemidCategoryIdScaffoldmessengerOfContextShowsnackbarSnackbarContentTextStateSelecteditemsLength
                - action: create_new
                  text_zh: '($count)'', style: theme.textTheme.bodySmall, ), onTap:
                    () => notifier.selectCategory(null), ); } Widget _buildCategoryItem(
                    BuildContext context, LibraryCategory category, String? selectedCategoryId,
                    LibraryManagementNotifier notifier, Map<String, int> itemCounts,
                    int indentLevel, ) { final theme = Theme.of(context); final l10n
                    = AppLocalizations.of(context); final hasChildren = category.children.isNotEmpty;
                    final count = itemCounts[category.id] ?? 0; if (!_expandedCategories.containsKey(category.id))
                    { _expandedCategories[category.id] = false; } final isExpanded
                    = _expandedCategories[category.id] ?? false; return Column( crossAxisAlignment:
                    CrossAxisAlignment.start, children: [ DragTarget<LibraryItemDragData>(
                    onAcceptWithDetails: (data) { final state = ref.read(libraryManagementProvider);
                    if (state.isBatchMode && state.selectedItems.isNotEmpty) { for
                    (final itemId in state.selectedItems) { notifier.addItemToCategory(itemId,
                    category.id); } ScaffoldMessenger.of(context).showSnackBar( SnackBar(
                    content: Text( ''已将${state.selectedItems.length}个项目添加到'
                  text_en: '($count)'', style: theme.textTheme.bodySmall, ), onTap:
                    () => notifier.selectCategory(null), ); } Widget _buildCategoryItem(
                    BuildContext context, LibraryCategory category, String? selectedCategoryId,
                    LibraryManagementNotifier notifier, Map<String, int> itemCounts,
                    int indentLevel, ) { final theme = Theme.of(context); final l10n
                    = AppLocalizations.of(context); final hasChildren = category.children.isNotEmpty;
                    final count = itemCounts[category.id] ?? 0; if (!_expandedCategories.containsKey(category.id))
                    { _expandedCategories[category.id] = false; } final isExpanded
                    = _expandedCategories[category.id] ?? false; return Column( crossAxisAlignment:
                    CrossAxisAlignment.start, children: [ DragTarget<LibraryItemDragData>(
                    onAcceptWithDetails: (data) { final state = ref.read(libraryManagementProvider);
                    if (state.isBatchMode && state.selectedItems.isNotEmpty) { for
                    (final itemId in state.selectedItems) { notifier.addItemToCategory(itemId,
                    category.id); } ScaffoldMessenger.of(context).showSnackBar( SnackBar(
                    content: Text( ''已将${state.selectedItems.length}个项目添加到'
                  file: presentation\pages\library\components\library_category_panel.dart
                  line: 150
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - pageNotImplementedVoidFinalCurrentindexRefReadGlobalnavigationproviderCurrentsectionindexFinalLastindexWidgetsbindingInstanceAddpostframecallbackIfMountedReturnFinalSectionstoremoveIntForFinalIndexInIfIndexCurrentindexIndexLastindexContinueIfIndexSectionstoremoveAddIndexIfMountedSectionstoremoveIsnotemptySetstateRemoveallSectionstoremoveApploggerInfo
                - action: create_new
                  text_zh: Page not implemented')), ); } }, ); } void _cleanupUnusedSections()
                    { final currentIndex = ref.read(globalNavigationProvider).currentSectionIndex;
                    final lastIndex = _lastSelectedIndex; WidgetsBinding.instance.addPostFrameCallback((_)
                    { if (!mounted) return; final sectionsToRemove = <int>{}; for
                    (final index in _initializedSections) { if (index == currentIndex
                    || index == lastIndex) continue; if (_shouldCleanupSection(index))
                    { sectionsToRemove.add(index); } } if (mounted && sectionsToRemove.isNotEmpty)
                    { setState(() { _initializedSections.removeAll(sectionsToRemove);
                    }); AppLogger.info( '清理未使用的功能区
                  text_en: Page not implemented')), ); } }, ); } void _cleanupUnusedSections()
                    { final currentIndex = ref.read(globalNavigationProvider).currentSectionIndex;
                    final lastIndex = _lastSelectedIndex; WidgetsBinding.instance.addPostFrameCallback((_)
                    { if (!mounted) return; final sectionsToRemove = <int>{}; for
                    (final index in _initializedSections) { if (index == currentIndex
                    || index == lastIndex) continue; if (_shouldCleanupSection(index))
                    { sectionsToRemove.add(index); } } if (mounted && sectionsToRemove.isNotEmpty)
                    { setState(() { _initializedSections.removeAll(sectionsToRemove);
                    }); AppLogger.info( '清理未使用的功能区
                  file: presentation\pages\main\m3_main_window.dart
                  line: 367
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - unsupportedElementTypeElsePanelConstCenterChildTextSelectedElementNotFoundElsePanelFormultiselectionControllerSelectedidsStateSelectedelementidsOnelementpropertieschangedPropertiesForFinalIdInStateSelectedelementidsUpdateelementpropertiesIdPropertiesReturnPersistentresizablepanelPanelidInitialwidthMinwidthMaxwidthIsleftpanelFalseChildPanelFutureBoolAsyncIfNullFinalTypeTypeApploggerDebug
                - action: create_new
                  text_zh: 'Unsupported element type'')); } } else { panel = const
                    Center(child: Text(''Selected element not found'')); } } else
                    { panel = M3PracticePropertyPanel.forMultiSelection( controller:
                    _controller, selectedIds: _controller.state.selectedElementIds,
                    onElementPropertiesChanged: (properties) { for (final id in _controller.state.selectedElementIds)
                    { _controller.updateElementProperties(id, properties); } }, );
                    } return PersistentResizablePanel( panelId: ''practice_edit_right_panel_properties'',
                    initialWidth: 400, minWidth: 300, maxWidth: 800, isLeftPanel:
                    false, child: panel, ); }, ); } Future<bool> _checkClipboardContent()
                    async { if (_clipboardElement != null) { final type = _clipboardElement?[''type''];
                    AppLogger.debug( ''检查剪贴板: 内部剪贴板有内容'
                  text_en: 'Unsupported element type'')); } } else { panel = const
                    Center(child: Text(''Selected element not found'')); } } else
                    { panel = M3PracticePropertyPanel.forMultiSelection( controller:
                    _controller, selectedIds: _controller.state.selectedElementIds,
                    onElementPropertiesChanged: (properties) { for (final id in _controller.state.selectedElementIds)
                    { _controller.updateElementProperties(id, properties); } }, );
                    } return PersistentResizablePanel( panelId: ''practice_edit_right_panel_properties'',
                    initialWidth: 400, minWidth: 300, maxWidth: 800, isLeftPanel:
                    false, child: panel, ); }, ); } Future<bool> _checkClipboardContent()
                    async { if (_clipboardElement != null) { final type = _clipboardElement?[''type''];
                    AppLogger.debug( ''检查剪贴板: 内部剪贴板有内容'
                  file: presentation\pages\practices\m3_practice_edit_page.dart
                  line: 817
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - savefailureETostringFutureBoolAsyncFinalApplocalizationsOfContextIfStatePagesIsemptyIfMountedReturnFalseScaffoldmessengerOfContextShowsnackbarSnackbarContentTextCannotsavenopagesReturnFalseFinalScaffoldmessengerScaffoldmessengerOfContextIfIssavedAwaitReturnTrueTryApploggerInfo
                - action: create_new
                  text_zh: '${l10n.saveFailure}: ${e.toString()}'')), ); } } } Future<bool>
                    _savePractice() async { final l10n = AppLocalizations.of(context);
                    if (_controller.state.pages.isEmpty) { if (!mounted) return false;
                    ScaffoldMessenger.of(context).showSnackBar( SnackBar(content:
                    Text(l10n.cannotSaveNoPages)), ); return false; } final scaffoldMessenger
                    = ScaffoldMessenger.of(context); if (!_controller.isSaved) { await
                    _saveAsNewPractice(); return true; } try { AppLogger.info( ''开始保存字帖'
                  text_en: '${l10n.saveFailure}: ${e.toString()}'')), ); } } } Future<bool>
                    _savePractice() async { final l10n = AppLocalizations.of(context);
                    if (_controller.state.pages.isEmpty) { if (!mounted) return false;
                    ScaffoldMessenger.of(context).showSnackBar( SnackBar(content:
                    Text(l10n.cannotSaveNoPages)), ); return false; } final scaffoldMessenger
                    = ScaffoldMessenger.of(context); if (!_controller.isSaved) { await
                    _saveAsNewPractice(); return true; } try { AppLogger.info( ''开始保存字帖'
                  file: presentation\pages\practices\m3_practice_edit_page.dart
                  line: 2241
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - savefailureETostringReturnFalseVoidIfStateCurrentpageindexStateCurrentpageindexStatePagesLengthReturnFinalElementsStateCurrentpageelementsIfElementsIsemptyReturnFinalIdsStringForFinalElementInElementsFinalIdElementIdAsStringFinalLayeridElementLayeridAsStringIfLayeridNullStateIslayerlockedLayeridIdsAddIdSelectelementsIdsVoidPracticeeditutilsSendelementtobackIfCurrentstateNullCurrentstateContextMountedSetstateVoidApploggerDebug
                - action: create_new
                  text_zh: '${l10n.saveFailure}: ${e.toString()}'')), ); } return
                    false; } } void _selectAllElements() { if (_controller.state.currentPageIndex
                    < 0 || _controller.state.currentPageIndex >= _controller.state.pages.length)
                    { return; } final elements = _controller.state.currentPageElements;
                    if (elements.isEmpty) return; final ids = <String>[]; for (final
                    element in elements) { final id = element[''id''] as String; final
                    layerId = element[''layerId''] as String?; if (layerId == null
                    || !_controller.state.isLayerLocked(layerId)) { ids.add(id); }
                    } _controller.selectElements(ids); } void _sendElementToBack()
                    { PracticeEditUtils.sendElementToBack(_controller); if (_canvasKey.currentState
                    == null || !_canvasKey.currentState!.context.mounted) { setState(()
                    {}); } } void _setupCanvasReference() { AppLogger.debug( ''画布引用将由画布组件自身设置'
                  text_en: '${l10n.saveFailure}: ${e.toString()}'')), ); } return
                    false; } } void _selectAllElements() { if (_controller.state.currentPageIndex
                    < 0 || _controller.state.currentPageIndex >= _controller.state.pages.length)
                    { return; } final elements = _controller.state.currentPageElements;
                    if (elements.isEmpty) return; final ids = <String>[]; for (final
                    element in elements) { final id = element[''id''] as String; final
                    layerId = element[''layerId''] as String?; if (layerId == null
                    || !_controller.state.isLayerLocked(layerId)) { ids.add(id); }
                    } _controller.selectElements(ids); } void _sendElementToBack()
                    { PracticeEditUtils.sendElementToBack(_controller); if (_canvasKey.currentState
                    == null || !_canvasKey.currentState!.context.mounted) { setState(()
                    {}); } } void _setupCanvasReference() { AppLogger.debug( ''画布引用将由画布组件自身设置'
                  file: presentation\pages\practices\m3_practice_edit_page.dart
                  line: 2351
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - unknownElementTypeTypeFinalRendertimeDatetimeNowDifferenceRenderstartInmillisecondsIfRendertimeEditpageloggerPerformancewarning
                - action: create_new
                  text_zh: 'Unknown element type: $type'')), ); } final renderTime
                    = DateTime.now().difference(renderStart).inMilliseconds; if (renderTime
                    > 8) { EditPageLogger.performanceWarning(''渲染性能警告'
                  text_en: 'Unknown element type: $type'')), ); } final renderTime
                    = DateTime.now().difference(renderStart).inMilliseconds; if (renderTime
                    > 8) { EditPageLogger.performanceWarning(''渲染性能警告'
                  file: presentation\pages\practices\widgets\content_render_layer.dart
                  line: 802
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - indexStyleConstTextstyleColorColorsWhiteFontsizeFontweightFontweightBoldWidgetConstPaddingFinalDragwidthPaddingFinalDragheightPaddingFinalCenterxFinalCenteryFinalDragleftCenterxDragwidthFinalDragtopCenteryDragheightReturnPositionedLeftDragleftTopDragtopWidthDragwidthHeightDragheightChildMouseregionCursorSystemmousecursorsMoveChildGesturedetectorBehaviorHittestbehaviorTranslucentOnpanstartDetailsEditpageloggerCanvasdebug
                - action: create_new
                  text_zh: '$index'', style: const TextStyle( color: Colors.white,
                    fontSize: 8, fontWeight: FontWeight.bold, ), ), ), ), ), ), ),
                    ), ); } Widget _buildTransparentDragLayer() { const padding =
                    5.0; final dragWidth = _currentWidth + padding * 2; final dragHeight
                    = _currentHeight + padding * 2; final centerX = _currentX + _currentWidth
                    / 2; final centerY = _currentY + _currentHeight / 2; final dragLeft
                    = centerX - dragWidth / 2; final dragTop = centerY - dragHeight
                    / 2; return Positioned( left: dragLeft, top: dragTop, width: dragWidth,
                    height: dragHeight, child: MouseRegion( cursor: SystemMouseCursors.move,
                    child: GestureDetector( behavior: HitTestBehavior.translucent,
                    onPanStart: (details) { EditPageLogger.canvasDebug(''控制点主导：开始平移操作'
                  text_en: '$index'', style: const TextStyle( color: Colors.white,
                    fontSize: 8, fontWeight: FontWeight.bold, ), ), ), ), ), ), ),
                    ), ); } Widget _buildTransparentDragLayer() { const padding =
                    5.0; final dragWidth = _currentWidth + padding * 2; final dragHeight
                    = _currentHeight + padding * 2; final centerX = _currentX + _currentWidth
                    / 2; final centerY = _currentY + _currentHeight / 2; final dragLeft
                    = centerX - dragWidth / 2; final dragTop = centerY - dragHeight
                    / 2; return Positioned( left: dragLeft, top: dragTop, width: dragWidth,
                    height: dragHeight, child: MouseRegion( cursor: SystemMouseCursors.move,
                    child: GestureDetector( behavior: HitTestBehavior.translucent,
                    onPanStart: (details) { EditPageLogger.canvasDebug(''控制点主导：开始平移操作'
                  file: presentation\pages\practices\widgets\free_control_points.dart
                  line: 586
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - noPagesAvailableStyleThemeOfContextTextthemeBodylargeFinalCurrentpageControllerStateCurrentpageIfCurrentpageNullReturnCenterChildTextCurrentPageDoesNotExistStyleThemeOfContextTextthemeBodylargeFinalElementsControllerStateCurrentpageelementsReturnPerfPerformanceoverlayShowoverlayDragconfigShowperformanceoverlayChildCurrentpageElementsColorschemeWidgetRenderlayertypeLayertypeLayerconfigConfigReturnBuildlayerwidgetLayertypeConfigWidgetMapStringDynamicPageListMapStringDynamicElementsColorschemeColorschemeInitializeelementsElementsFinalPagesizeElementutilsCalculatepixelsizePageFinalPagekeyPageWidthPageHeightPageOrientationPageDpiIfNullPagekeyWidgetsbindingInstanceAddpostframecallbackIfMountedPagekeyReturnStackChildrenContainerColorColorschemeInversesurfaceWithalphaChildRepaintboundaryKeyConstValuekeyChildInteractiveviewerBoundarymarginConstEdgeinsetsAllDoubleInfinityPanenabledIsdraggingScaleenabledTrueMinscaleMaxscaleScalefactorTransformationcontrollerWidgetTransformationcontrollerOninteractionstartScalestartdetailsDetailsOninteractionupdateScaleupdatedetailsDetailsOninteractionendScaleenddetailsDetailsFinalScaleWidgetTransformationcontrollerValueGetmaxscaleonaxisWidgetControllerZoomtoScaleConstrainedFalseChildDragtargetStringOnwillacceptwithdetailsDataReturnTextImageCollectionContainsDataDataOnacceptwithdetailsDataDataDataDataOffsetBuilderContextCandidatedataRejecteddataReturnGesturedetectorBehaviorHittestbehaviorDefertochildOntapdownDetailsIfShouldhandleanyspecialgestureElementsTrueElseFalseOntapupDetailsFalseHandletapupDetailsElementsCastMapStringDynamic
                - action: create_new
                  text_zh: 'No pages available'', style: Theme.of(context).textTheme.bodyLarge,
                    ), ); } final currentPage = controller.state.currentPage; if (currentPage
                    == null) { return Center( child: Text( ''Current page does not
                    exist'', style: Theme.of(context).textTheme.bodyLarge, ), ); }
                    final elements = controller.state.currentPageElements; return
                    perf.PerformanceOverlay( showOverlay: DragConfig.showPerformanceOverlay,
                    child: _buildPageContent(currentPage, elements, colorScheme),
                    ); } Widget _buildLayerWidget(RenderLayerType layerType, LayerConfig
                    config) { return buildLayerWidget(layerType, config); } Widget
                    _buildPageContent( Map<String, dynamic> page, List<Map<String,
                    dynamic>> elements, ColorScheme colorScheme, ) { _contentRenderController.initializeElements(elements);
                    final pageSize = ElementUtils.calculatePixelSize(page); final
                    pageKey = ''${page[''width'']}_${page[''height'']}_${page[''orientation'']}_${page[''dpi'']}'';
                    if (_lastPageKey != null && _lastPageKey != pageKey) { WidgetsBinding.instance.addPostFrameCallback((_)
                    { if (mounted && !_isDisposed) { _fitPageToScreen(); } }); } _lastPageKey
                    = pageKey; return Stack( children: [ Container( color: colorScheme.inverseSurface
                    .withAlpha(26), child: RepaintBoundary( key: const ValueKey(''interactive_viewer_repaint_boundary''),
                    child: InteractiveViewer( boundaryMargin: const EdgeInsets.all(double.infinity),
                    panEnabled: !(_isDragging || _dragStateManager.isDragging || _isReadyForDrag),
                    scaleEnabled: true, minScale: 0.1, maxScale: 15.0, scaleFactor:
                    600.0, transformationController: widget.transformationController,
                    onInteractionStart: (ScaleStartDetails details) {}, onInteractionUpdate:
                    (ScaleUpdateDetails details) { }, onInteractionEnd: (ScaleEndDetails
                    details) { final scale = widget.transformationController.value.getMaxScaleOnAxis();
                    widget.controller.zoomTo(scale); }, constrained: false, child:
                    DragTarget<String>( onWillAcceptWithDetails: (data) { return [''text'',
                    ''image'', ''collection''].contains(data.data); }, onAcceptWithDetails:
                    (data) { _handleElementDrop(data.data, data.offset); }, builder:
                    (context, candidateData, rejectedData) { return GestureDetector(
                    behavior: HitTestBehavior.deferToChild, onTapDown: (details) {
                    if (shouldHandleAnySpecialGesture(elements)) { _isReadyForDrag
                    = true; } else { _isReadyForDrag = false; } }, onTapUp: (details)
                    { _isReadyForDrag = false; _gestureHandler.handleTapUp( details,
                    elements.cast< Map<String, dynamic>>()); _debugCanvasState(''元素选择后'
                  text_en: 'No pages available'', style: Theme.of(context).textTheme.bodyLarge,
                    ), ); } final currentPage = controller.state.currentPage; if (currentPage
                    == null) { return Center( child: Text( ''Current page does not
                    exist'', style: Theme.of(context).textTheme.bodyLarge, ), ); }
                    final elements = controller.state.currentPageElements; return
                    perf.PerformanceOverlay( showOverlay: DragConfig.showPerformanceOverlay,
                    child: _buildPageContent(currentPage, elements, colorScheme),
                    ); } Widget _buildLayerWidget(RenderLayerType layerType, LayerConfig
                    config) { return buildLayerWidget(layerType, config); } Widget
                    _buildPageContent( Map<String, dynamic> page, List<Map<String,
                    dynamic>> elements, ColorScheme colorScheme, ) { _contentRenderController.initializeElements(elements);
                    final pageSize = ElementUtils.calculatePixelSize(page); final
                    pageKey = ''${page[''width'']}_${page[''height'']}_${page[''orientation'']}_${page[''dpi'']}'';
                    if (_lastPageKey != null && _lastPageKey != pageKey) { WidgetsBinding.instance.addPostFrameCallback((_)
                    { if (mounted && !_isDisposed) { _fitPageToScreen(); } }); } _lastPageKey
                    = pageKey; return Stack( children: [ Container( color: colorScheme.inverseSurface
                    .withAlpha(26), child: RepaintBoundary( key: const ValueKey(''interactive_viewer_repaint_boundary''),
                    child: InteractiveViewer( boundaryMargin: const EdgeInsets.all(double.infinity),
                    panEnabled: !(_isDragging || _dragStateManager.isDragging || _isReadyForDrag),
                    scaleEnabled: true, minScale: 0.1, maxScale: 15.0, scaleFactor:
                    600.0, transformationController: widget.transformationController,
                    onInteractionStart: (ScaleStartDetails details) {}, onInteractionUpdate:
                    (ScaleUpdateDetails details) { }, onInteractionEnd: (ScaleEndDetails
                    details) { final scale = widget.transformationController.value.getMaxScaleOnAxis();
                    widget.controller.zoomTo(scale); }, constrained: false, child:
                    DragTarget<String>( onWillAcceptWithDetails: (data) { return [''text'',
                    ''image'', ''collection''].contains(data.data); }, onAcceptWithDetails:
                    (data) { _handleElementDrop(data.data, data.offset); }, builder:
                    (context, candidateData, rejectedData) { return GestureDetector(
                    behavior: HitTestBehavior.deferToChild, onTapDown: (details) {
                    if (shouldHandleAnySpecialGesture(elements)) { _isReadyForDrag
                    = true; } else { _isReadyForDrag = false; } }, onTapUp: (details)
                    { _isReadyForDrag = false; _gestureHandler.handleTapUp( details,
                    elements.cast< Map<String, dynamic>>()); _debugCanvasState(''元素选择后'
                  file: presentation\pages\practices\widgets\m3_practice_edit_canvas.dart
                  line: 596
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - widgetControllerStateCurrenttool
                - action: create_new
                  text_zh: '当前工具: ${widget.controller.state.currentTool}'
                  text_en: '当前工具: ${widget.controller.state.currentTool}'
                  file: presentation\pages\practices\widgets\m3_practice_edit_canvas.dart
                  line: 926
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text选择模式
                - action: create_new
                  text_zh: 选择模式
                  text_en: 选择模式
                  file: presentation\pages\practices\widgets\m3_practice_edit_canvas.dart
                  line: 951
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - widgetTransformationcontrollerValueGetmaxscaleonaxisTointOverflowTextoverflowEllipsisStyleTextstyleColorColorschemeOnsurfacevariantFontsizeFontweightFontweightBoldVoidStringContextFinalPanenabledIsdraggingEditpageloggerCanvasdebug
                - action: create_new
                  text_zh: '${(widget.transformationController.value.getMaxScaleOnAxis()
                    * 100).toInt()}%'', overflow: TextOverflow.ellipsis, style: TextStyle(
                    color: colorScheme.onSurfaceVariant, fontSize: 12, fontWeight:
                    FontWeight.bold, ), ), ), ], ), ), ], ), ), ), ], ); } void _debugCanvasState(String
                    context) { final panEnabled = !(_isDragging || _dragStateManager.isDragging
                    || _isReadyForDrag); EditPageLogger.canvasDebug( ''画布状态检查'
                  text_en: '${(widget.transformationController.value.getMaxScaleOnAxis()
                    * 100).toInt()}%'', overflow: TextOverflow.ellipsis, style: TextStyle(
                    color: colorScheme.onSurfaceVariant, fontSize: 12, fontWeight:
                    FontWeight.bold, ), ), ), ], ), ), ], ), ), ), ], ); } void _debugCanvasState(String
                    context) { final panEnabled = !(_isDragging || _dragStateManager.isDragging
                    || _isReadyForDrag); EditPageLogger.canvasDebug( ''画布状态检查'
                  file: presentation\pages\practices\widgets\m3_practice_edit_canvas.dart
                  line: 1018
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - dropdownmenuitemValueChildTextDropdownmenuitemValueChildTextDropdownmenuitemValueChildTextOnchangedValueIfValueNullRefReadBackupsettingsproviderNotifierSetkeepbackupcountValueIfBackupsettingsLastbackuptimeNullListtileTitleTextLastbackuptimeSubtitleTextDateformatYmdFormatBackupsettingsLastbackuptimeConstSizedboxHeightAppsizesWrapSpacingAppsizesRunspacingAppsizesAlignmentWrapalignmentSpaceevenlyChildrenElevatedbuttonIconIconConstIconIconsBackupLabelTextCreatebackupOnpressedAsyncAwaitContextRefElevatedbuttonIconIconConstIconIconsRestoreLabelTextRestorebackupOnpressedAsyncAwaitContextRefElevatedbuttonIconIconConstIconIconsLabelTextImportbackupOnpressedAsyncAwaitContextRefElevatedbuttonIconIconConstIconIconsDownloadLabelTextExportbackupOnpressedAsyncAwaitContextRefConstSizedboxHeightAppsizesTextBackuplistStyleThemeOfContextTextthemeTitlemediumConstSizedboxHeightAppsizesBackuplistWhenDataBackupsContextRefBackupsLoadingConstCenterChildCircularprogressindicatorErrorErrorStackTextLoadfailedErrorWidgetBuildcontextContextWidgetrefRefListBackupinfoBackupsFinalApplocalizationsOfContextIfBackupsIsemptyReturnPaddingPaddingConstEdgeinsetsAllAppsizesChildCenterChildTextNobackupsReturnListviewBuilderShrinkwrapTruePhysicsConstNeverscrollablescrollphysicsItemcountBackupsLengthItembuilderContextIndexFinalBackupBackupsIndexReturnCardMarginConstEdgeinsetsSymmetricVerticalChildListtileTitleTextBackupFilenameSubtitleColumnCrossaxisalignmentCrossaxisalignmentStartChildrenIfBackupDescriptionNullBackupDescriptionBackupFilenameTextBackupDescriptionStyleConstTextstyleFontweightFontweightBoldTextDateformatYmdFormatBackupCreationtimeTextFilesizeformatterFormatBackupSizeTrailingRowMainaxissizeMainaxissizeMinChildrenIconbuttonIconConstIconIconsRestoreTooltipRestoreOnpressedAsyncFinalResultAwaitContextIfResultNullResultConfirmedIfContextMountedShowdialogContextContextBarrierdismissibleFalseBuilderContextAlertdialogContentColumnMainaxissizeMainaxissizeMinChildrenConstCircularprogressindicatorConstSizedboxHeightAppsizesTextRestoringbackupFinalAutorestartResultAutorestartFinalCurrentcontextContextApploggerInfo
                - action: create_new
                  text_zh: '1''), ), DropdownMenuItem( value: 3, child: Text(''3''),
                    ), DropdownMenuItem( value: 5, child: Text(''5''), ), DropdownMenuItem(
                    value: 10, child: Text(''10''), ), ], onChanged: (value) { if
                    (value != null) { ref .read(backupSettingsProvider.notifier) .setKeepBackupCount(value);
                    } }, ), ), if (backupSettings.lastBackupTime != null) ListTile(
                    title: Text(l10n.lastBackupTime), subtitle: Text( DateFormat.yMd().add_Hm().format(backupSettings.lastBackupTime!),
                    ), ), const SizedBox(height: AppSizes.p16), Wrap( spacing: AppSizes.p8,
                    runSpacing: AppSizes.p8, alignment: WrapAlignment.spaceEvenly,
                    children: [ ElevatedButton.icon( icon: const Icon(Icons.backup),
                    label: Text(l10n.createBackup), onPressed: () async { await _showCreateBackupDialog(context,
                    ref); }, ), ElevatedButton.icon( icon: const Icon(Icons.restore),
                    label: Text(l10n.restoreBackup), onPressed: () async { await _showRestoreBackupDialog(context,
                    ref); }, ), ElevatedButton.icon( icon: const Icon(Icons.upload_file),
                    label: Text(l10n.importBackup), onPressed: () async { await _importBackup(context,
                    ref); }, ), ElevatedButton.icon( icon: const Icon(Icons.download),
                    label: Text(l10n.exportBackup), onPressed: () async { await _showExportBackupDialog(context,
                    ref); }, ), ], ), const SizedBox(height: AppSizes.p16), Text(
                    l10n.backupList, style: Theme.of(context).textTheme.titleMedium,
                    ), const SizedBox(height: AppSizes.p8), backupList.when( data:
                    (backups) => _buildBackupList(context, ref, backups), loading:
                    () => const Center(child: CircularProgressIndicator()), error:
                    (error, stack) => Text(''${l10n.loadFailed}: $error''), ), ],
                    ); } Widget _buildBackupList( BuildContext context, WidgetRef
                    ref, List<BackupInfo> backups) { final l10n = AppLocalizations.of(context);
                    if (backups.isEmpty) { return Padding( padding: const EdgeInsets.all(AppSizes.p16),
                    child: Center( child: Text(l10n.noBackups), ), ); } return ListView.builder(
                    shrinkWrap: true, physics: const NeverScrollableScrollPhysics(),
                    itemCount: backups.length, itemBuilder: (context, index) { final
                    backup = backups[index]; return Card( margin: const EdgeInsets.symmetric(vertical:
                    4), child: ListTile( title: Text(backup.fileName), subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start, children: [ if (backup.description
                    != null && backup.description != backup.fileName) Text( backup.description!,
                    style: const TextStyle(fontWeight: FontWeight.bold), ), Text(
                    DateFormat.yMd().add_Hm().format(backup.creationTime), ), Text(
                    FileSizeFormatter.format(backup.size), ), ], ), trailing: Row(
                    mainAxisSize: MainAxisSize.min, children: [ IconButton( icon:
                    const Icon(Icons.restore), tooltip: l10n.restore, onPressed: ()
                    async { final result = await _showRestoreConfirmDialog(context);
                    if (result != null && result.confirmed) { if (context.mounted)
                    { showDialog( context: context, barrierDismissible: false, builder:
                    (context) => AlertDialog( content: Column( mainAxisSize: MainAxisSize.min,
                    children: [ const CircularProgressIndicator(), const SizedBox(height:
                    AppSizes.p16), Text(l10n.restoringBackup), ], ), ), ); } final
                    autoRestart = result.autoRestart; final currentContext = context;
                    AppLogger.info(''用户选择的自动重启选项'
                  text_en: '1''), ), DropdownMenuItem( value: 3, child: Text(''3''),
                    ), DropdownMenuItem( value: 5, child: Text(''5''), ), DropdownMenuItem(
                    value: 10, child: Text(''10''), ), ], onChanged: (value) { if
                    (value != null) { ref .read(backupSettingsProvider.notifier) .setKeepBackupCount(value);
                    } }, ), ), if (backupSettings.lastBackupTime != null) ListTile(
                    title: Text(l10n.lastBackupTime), subtitle: Text( DateFormat.yMd().add_Hm().format(backupSettings.lastBackupTime!),
                    ), ), const SizedBox(height: AppSizes.p16), Wrap( spacing: AppSizes.p8,
                    runSpacing: AppSizes.p8, alignment: WrapAlignment.spaceEvenly,
                    children: [ ElevatedButton.icon( icon: const Icon(Icons.backup),
                    label: Text(l10n.createBackup), onPressed: () async { await _showCreateBackupDialog(context,
                    ref); }, ), ElevatedButton.icon( icon: const Icon(Icons.restore),
                    label: Text(l10n.restoreBackup), onPressed: () async { await _showRestoreBackupDialog(context,
                    ref); }, ), ElevatedButton.icon( icon: const Icon(Icons.upload_file),
                    label: Text(l10n.importBackup), onPressed: () async { await _importBackup(context,
                    ref); }, ), ElevatedButton.icon( icon: const Icon(Icons.download),
                    label: Text(l10n.exportBackup), onPressed: () async { await _showExportBackupDialog(context,
                    ref); }, ), ], ), const SizedBox(height: AppSizes.p16), Text(
                    l10n.backupList, style: Theme.of(context).textTheme.titleMedium,
                    ), const SizedBox(height: AppSizes.p8), backupList.when( data:
                    (backups) => _buildBackupList(context, ref, backups), loading:
                    () => const Center(child: CircularProgressIndicator()), error:
                    (error, stack) => Text(''${l10n.loadFailed}: $error''), ), ],
                    ); } Widget _buildBackupList( BuildContext context, WidgetRef
                    ref, List<BackupInfo> backups) { final l10n = AppLocalizations.of(context);
                    if (backups.isEmpty) { return Padding( padding: const EdgeInsets.all(AppSizes.p16),
                    child: Center( child: Text(l10n.noBackups), ), ); } return ListView.builder(
                    shrinkWrap: true, physics: const NeverScrollableScrollPhysics(),
                    itemCount: backups.length, itemBuilder: (context, index) { final
                    backup = backups[index]; return Card( margin: const EdgeInsets.symmetric(vertical:
                    4), child: ListTile( title: Text(backup.fileName), subtitle: Column(
                    crossAxisAlignment: CrossAxisAlignment.start, children: [ if (backup.description
                    != null && backup.description != backup.fileName) Text( backup.description!,
                    style: const TextStyle(fontWeight: FontWeight.bold), ), Text(
                    DateFormat.yMd().add_Hm().format(backup.creationTime), ), Text(
                    FileSizeFormatter.format(backup.size), ), ], ), trailing: Row(
                    mainAxisSize: MainAxisSize.min, children: [ IconButton( icon:
                    const Icon(Icons.restore), tooltip: l10n.restore, onPressed: ()
                    async { final result = await _showRestoreConfirmDialog(context);
                    if (result != null && result.confirmed) { if (context.mounted)
                    { showDialog( context: context, barrierDismissible: false, builder:
                    (context) => AlertDialog( content: Column( mainAxisSize: MainAxisSize.min,
                    children: [ const CircularProgressIndicator(), const SizedBox(height:
                    AppSizes.p16), Text(l10n.restoringBackup), ], ), ), ); } final
                    autoRestart = result.autoRestart; final currentContext = context;
                    AppLogger.info(''用户选择的自动重启选项'
                  file: presentation\pages\settings\components\backup_settings.dart
                  line: 87
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - failedToDeleteETostringFutureVoidBuildcontextContextStringWorkidAsyncFinalApplocalizationsOfContextTryFinalWorkRefReadWorkbrowseproviderWorksFirstwhereWWIdWorkidFinalAlltagsRefReadWorkbrowseproviderWorksExpandWorkWorkTagsTosetTolistFinalResultAwaitShowdialogListStringContextContextBuilderContextTagsWorkTagsSuggestedtagsAlltagsOnsavedNewtagsNavigatorOfContextPopNewtagsBarrierdismissibleFalseIfResultNullApploggerDebug
                - action: create_new
                  text_zh: 'Failed to delete: ${e.toString()}''))); } } } Future<void>
                    _handleTagEdited(BuildContext context, String workId) async {
                    final l10n = AppLocalizations.of(context); try { final work =
                    ref.read(workBrowseProvider).works.firstWhere((w) => w.id == workId);
                    final allTags = ref .read(workBrowseProvider) .works .expand((work)
                    => work.tags) .toSet() .toList(); final result = await showDialog<List<String>>(
                    context: context, builder: (context) => M3WorkTagEditDialog( tags:
                    work.tags, suggestedTags: allTags, onSaved: (newTags) { Navigator.of(context).pop(newTags);
                    }, ), barrierDismissible: false, ); if (result != null) { AppLogger.debug(''更新作品标签'
                  text_en: 'Failed to delete: ${e.toString()}''))); } } } Future<void>
                    _handleTagEdited(BuildContext context, String workId) async {
                    final l10n = AppLocalizations.of(context); try { final work =
                    ref.read(workBrowseProvider).works.firstWhere((w) => w.id == workId);
                    final allTags = ref .read(workBrowseProvider) .works .expand((work)
                    => work.tags) .toSet() .toList(); final result = await showDialog<List<String>>(
                    context: context, builder: (context) => M3WorkTagEditDialog( tags:
                    work.tags, suggestedTags: allTags, onSaved: (newTags) { Navigator.of(context).pop(newTags);
                    }, ), barrierDismissible: false, ); if (result != null) { AppLogger.debug(''更新作品标签'
                  file: presentation\pages\works\m3_work_browse_page.dart
                  line: 333
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - indexStyleConstTextstyleColorColorsWhiteFontsizeIfIsselectedPositionedTopRightChildContainerPaddingConstEdgeinsetsAllDecorationBoxdecorationColorThemeColorschemePrimaryShapeBoxshapeCircleChildConstIconIconsCheckSizeColorColorsWhiteIfIsselectedWidgetOnremoveNullPositionedBottomRightChildIconbuttonFilledOnpressedHapticfeedbackLightimpactWidgetOnremoveIndexIconConstIconIconsCloseSizeStyleIconbuttonStylefromBackgroundcolorThemeColorschemeErrorForegroundcolorThemeColorschemeOnerrorPaddingConstEdgeinsetsAllMinimumsizeConstSizeTaptargetsizeMaterialtaptargetsizeShrinkwrapShapeRoundedrectangleborderBorderradiusBorderradiusCircularAppsizesXxsIfWidgetIseditablePositionedRightBottomIsselectedWidgetOnremoveNullChildContainerPaddingConstEdgeinsetsAllDecorationBoxdecorationColorThemeColorschemeSurfacecontainerhighestWithvaluesAlphaBorderradiusBorderradiusCircularChildIconIconsSizeColorThemeColorschemeOnsurfacevariantIfFileexistsCenterChildTooltipMessageErrormessageChildColumnMainaxissizeMainaxissizeMinChildrenIconIconsSizeColorThemeColorschemeSurfaceIfAttemptcountAttemptcountConstSizedboxWidthHeightChildCircularprogressindicatorStrokewidthFutureVoidAsyncCancelBoolHasfailuresFalseForFinalImageInWidgetImagesTryFinalPathWidgetPathresolverImageTryFinalFileFilePathIfAwaitFileExistsFinalRandomaccessfileAwaitFileOpenModeFilemodeReadTryAwaitRandomaccessfileReadPathExistsTrueLastmodifiedAwaitFileLastmodifiedFinallyAwaitRandomaccessfileCloseElseFinalStatusPathFinalAttemptsStatusCheckattemptsPathExistsFalseCheckattemptsAttemptsIfAttemptsHasfailuresTrueCatchEApploggerDebugFileExistsButNotAccessibleYetTagThumbnailstripDataPathPathErrorETostringFinalStatusPathFinalAttemptsStatusCheckattemptsPathExistsFalseCheckattemptsAttemptsIfAttemptsHasfailuresTrueCatchEWidgetPathresolverImageExistsFalseHasfailuresTrueIfMountedSetstateIfHasfailuresTimerConstDurationMillisecondsIfMountedVoidPointersignaleventEventApploggerDebugEventRuntimetype
                - action: create_new
                  text_zh: '${index + 1}'', style: const TextStyle( color: Colors.white,
                    fontSize: 12, ), ), ), ), if (isSelected) Positioned( top: 4,
                    right: 4, child: Container( padding: const EdgeInsets.all(2),
                    decoration: BoxDecoration( color: theme.colorScheme.primary, shape:
                    BoxShape.circle, ), child: const Icon( Icons.check, size: 12,
                    color: Colors.white, ), ), ), if (isSelected && widget.onRemove
                    != null) Positioned( bottom: 4, right: 4, child: IconButton.filled(
                    onPressed: () { HapticFeedback.lightImpact(); widget.onRemove!(index);
                    }, icon: const Icon(Icons.close, size: 16), style: IconButton.styleFrom(
                    backgroundColor: theme.colorScheme.error, foregroundColor: theme.colorScheme.onError,
                    padding: const EdgeInsets.all(4), minimumSize: const Size(24,
                    24), tapTargetSize: MaterialTapTargetSize.shrinkWrap, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(AppSizes.xxs), ), ), ), ),
                    if (widget.isEditable && !_isDragging) Positioned( right: 4, bottom:
                    isSelected && widget.onRemove != null ? 32 : 4, child: Container(
                    padding: const EdgeInsets.all(2), decoration: BoxDecoration( color:
                    theme.colorScheme.surfaceContainerHighest .withValues(alpha: 0.8),
                    borderRadius: BorderRadius.circular(2), ), child: Icon( Icons.drag_indicator,
                    size: 16, color: theme.colorScheme.onSurfaceVariant, ), ), ),
                    if (!fileExists) Center( child: Tooltip( message: errorMessage,
                    child: Column( mainAxisSize: MainAxisSize.min, children: [ Icon(
                    Icons.circle_rounded, size: 24, color: theme.colorScheme.surface,
                    ), if (attemptCount > 0 && attemptCount < _maxRetryAttempts) const
                    SizedBox( width: 16, height: 16, child: CircularProgressIndicator(strokeWidth:
                    2), ), ], ), ), ), ], ), ), ), ); } Future<void> _checkImageFiles()
                    async { _retryTimer?.cancel(); bool hasFailures = false; for (final
                    image in widget.images) { try { final path = widget.pathResolver(image);
                    try { final file = File(path); if (await file.exists()) { final
                    randomAccessFile = await file.open(mode: FileMode.read); try {
                    await randomAccessFile.read(4); _fileStatus[path] = _FileStatus(
                    exists: true, lastModified: await file.lastModified(), ); } finally
                    { await randomAccessFile.close(); } } else { final status = _fileStatus[path];
                    final attempts = status?.checkAttempts ?? 0; _fileStatus[path]
                    = _FileStatus(exists: false) ..checkAttempts = attempts + 1; if
                    (attempts < _maxRetryAttempts) { hasFailures = true; } } } catch
                    (e) { AppLogger.debug( ''File exists but not accessible yet'',
                    tag: ''ThumbnailStrip'', data: {''path'': path, ''error'': e.toString()},
                    ); final status = _fileStatus[path]; final attempts = status?.checkAttempts
                    ?? 0; _fileStatus[path] = _FileStatus(exists: false) ..checkAttempts
                    = attempts + 1; if (attempts < _maxRetryAttempts) { hasFailures
                    = true; } } } catch (e) { _fileStatus[widget.pathResolver(image)]
                    = _FileStatus(exists: false); hasFailures = true; } } if (mounted)
                    setState(() {}); if (hasFailures) { _retryTimer = Timer(const
                    Duration(milliseconds: 500), () { if (mounted) _checkImageFiles();
                    }); } } void _handlePointerSignal(PointerSignalEvent event) {
                    AppLogger.debug(''收到指针信号事件: ${event.runtimeType}'
                  text_en: '${index + 1}'', style: const TextStyle( color: Colors.white,
                    fontSize: 12, ), ), ), ), if (isSelected) Positioned( top: 4,
                    right: 4, child: Container( padding: const EdgeInsets.all(2),
                    decoration: BoxDecoration( color: theme.colorScheme.primary, shape:
                    BoxShape.circle, ), child: const Icon( Icons.check, size: 12,
                    color: Colors.white, ), ), ), if (isSelected && widget.onRemove
                    != null) Positioned( bottom: 4, right: 4, child: IconButton.filled(
                    onPressed: () { HapticFeedback.lightImpact(); widget.onRemove!(index);
                    }, icon: const Icon(Icons.close, size: 16), style: IconButton.styleFrom(
                    backgroundColor: theme.colorScheme.error, foregroundColor: theme.colorScheme.onError,
                    padding: const EdgeInsets.all(4), minimumSize: const Size(24,
                    24), tapTargetSize: MaterialTapTargetSize.shrinkWrap, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(AppSizes.xxs), ), ), ), ),
                    if (widget.isEditable && !_isDragging) Positioned( right: 4, bottom:
                    isSelected && widget.onRemove != null ? 32 : 4, child: Container(
                    padding: const EdgeInsets.all(2), decoration: BoxDecoration( color:
                    theme.colorScheme.surfaceContainerHighest .withValues(alpha: 0.8),
                    borderRadius: BorderRadius.circular(2), ), child: Icon( Icons.drag_indicator,
                    size: 16, color: theme.colorScheme.onSurfaceVariant, ), ), ),
                    if (!fileExists) Center( child: Tooltip( message: errorMessage,
                    child: Column( mainAxisSize: MainAxisSize.min, children: [ Icon(
                    Icons.circle_rounded, size: 24, color: theme.colorScheme.surface,
                    ), if (attemptCount > 0 && attemptCount < _maxRetryAttempts) const
                    SizedBox( width: 16, height: 16, child: CircularProgressIndicator(strokeWidth:
                    2), ), ], ), ), ), ], ), ), ), ); } Future<void> _checkImageFiles()
                    async { _retryTimer?.cancel(); bool hasFailures = false; for (final
                    image in widget.images) { try { final path = widget.pathResolver(image);
                    try { final file = File(path); if (await file.exists()) { final
                    randomAccessFile = await file.open(mode: FileMode.read); try {
                    await randomAccessFile.read(4); _fileStatus[path] = _FileStatus(
                    exists: true, lastModified: await file.lastModified(), ); } finally
                    { await randomAccessFile.close(); } } else { final status = _fileStatus[path];
                    final attempts = status?.checkAttempts ?? 0; _fileStatus[path]
                    = _FileStatus(exists: false) ..checkAttempts = attempts + 1; if
                    (attempts < _maxRetryAttempts) { hasFailures = true; } } } catch
                    (e) { AppLogger.debug( ''File exists but not accessible yet'',
                    tag: ''ThumbnailStrip'', data: {''path'': path, ''error'': e.toString()},
                    ); final status = _fileStatus[path]; final attempts = status?.checkAttempts
                    ?? 0; _fileStatus[path] = _FileStatus(exists: false) ..checkAttempts
                    = attempts + 1; if (attempts < _maxRetryAttempts) { hasFailures
                    = true; } } } catch (e) { _fileStatus[widget.pathResolver(image)]
                    = _FileStatus(exists: false); hasFailures = true; } } if (mounted)
                    setState(() {}); if (hasFailures) { _retryTimer = Timer(const
                    Duration(milliseconds: 500), () { if (mounted) _checkImageFiles();
                    }); } } void _handlePointerSignal(PointerSignalEvent event) {
                    AppLogger.debug(''收到指针信号事件: ${event.runtimeType}'
                  file: presentation\pages\works\components\thumbnail_strip.dart
                  line: 278
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text快捷选择
                - action: create_new
                  text_zh: 快捷选择
                  text_en: 快捷选择
                  file: presentation\widgets\date_range_picker.dart
                  line: 181
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text这个工具用于测试不同
                - action: create_new
                  text_zh: 这个工具用于测试不同字体的显示效果。每种字体都会显示相同的文本，包括英文、数字和中文。特别测试了字重从w100到w900的完整范围，以验证字体是否正确响应字重变化。
                  text_en: 这个工具用于测试不同字体的显示效果。每种字体都会显示相同的文本，包括英文、数字和中文。特别测试了字重从w100到w900的完整范围，以验证字体是否正确响应字重变化。
                  file: presentation\widgets\font_tester.dart
                  line: 22
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text注意事项
                - action: create_new
                  text_zh: '注意事项:'
                  text_en: '注意事项:'
                  file: presentation\widgets\font_tester.dart
                  line: 37
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text1思源黑体和思源宋体
                - action: create_new
                  text_zh: 1. 思源黑体和思源宋体是可变字体，理论上支持w100-w900的全部字重。
                  text_en: 1. 思源黑体和思源宋体是可变字体，理论上支持w100-w900的全部字重。
                  file: presentation\widgets\font_tester.dart
                  line: 42
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text2如果字重变化不明显
                - action: create_new
                  text_zh: 2. 如果字重变化不明显，可能是因为字体文件未正确注册或Flutter对可变字体的支持有限制。
                  text_en: 2. 如果字重变化不明显，可能是因为字体文件未正确注册或Flutter对可变字体的支持有限制。
                  file: presentation\widgets\font_tester.dart
                  line: 45
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text3系统默认字体通常只
                - action: create_new
                  text_zh: 3. 系统默认字体通常只支持有限的字重变化（如normal和bold）。
                  text_en: 3. 系统默认字体通常只支持有限的字重变化（如normal和bold）。
                  file: presentation\widgets\font_tester.dart
                  line: 48
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text字重范围测试w100
                - action: create_new
                  text_zh: 字重范围测试 (w100-w900)
                  text_en: 字重范围测试 (w100-w900)
                  file: presentation\widgets\font_tester.dart
                  line: 115
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - sourcehansans
                - action: create_new
                  text_zh: '思源黑体 (SourceHanSans):'
                  text_en: '思源黑体 (SourceHanSans):'
                  file: presentation\widgets\font_weight_tester.dart
                  line: 133
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - fileAssetsFontsChineseSourcehansanscnVfOtf
                - action: create_new
                  text_zh: '- 文件: assets/fonts/chinese/SourceHanSansCN-VF.otf'
                  text_en: '- 文件: assets/fonts/chinese/SourceHanSansCN-VF.otf'
                  file: presentation\widgets\font_weight_tester.dart
                  line: 134
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - variableFont
                - action: create_new
                  text_zh: '- 类型: 可变字体 (Variable Font)'
                  text_en: '- 类型: 可变字体 (Variable Font)'
                  file: presentation\widgets\font_weight_tester.dart
                  line: 141
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - wght
                - action: create_new
                  text_zh: '- 字重轴: wght (100-900)'
                  text_en: '- 字重轴: wght (100-900)'
                  file: presentation\widgets\font_weight_tester.dart
                  line: 142
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - sourcehanserif
                - action: create_new
                  text_zh: '思源宋体 (SourceHanSerif):'
                  text_en: '思源宋体 (SourceHanSerif):'
                  file: presentation\widgets\font_weight_tester.dart
                  line: 138
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - fileAssetsFontsChineseSourcehanserifcnVfOtf
                - action: create_new
                  text_zh: '- 文件: assets/fonts/chinese/SourceHanSerifCN-VF.otf'
                  text_en: '- 文件: assets/fonts/chinese/SourceHanSerifCN-VF.otf'
                  file: presentation\widgets\font_weight_tester.dart
                  line: 139
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text1Flutter引擎
                - action: create_new
                  text_zh: 1. Flutter引擎对可变字体的支持不完整
                  text_en: 1. Flutter引擎对可变字体的支持不完整
                  file: presentation\widgets\font_weight_tester.dart
                  line: 147
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text2字体文件的字重轴未
                - action: create_new
                  text_zh: 2. 字体文件的字重轴未被正确识别
                  text_en: 2. 字体文件的字重轴未被正确识别
                  file: presentation\widgets\font_weight_tester.dart
                  line: 148
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text3字体注册方式不正确
                - action: create_new
                  text_zh: 3. 字体注册方式不正确
                  text_en: 3. 字体注册方式不正确
                  file: presentation\widgets\font_weight_tester.dart
                  line: 148
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text4平台特定的字体渲染
                - action: create_new
                  text_zh: 4. 平台特定的字体渲染限制
                  text_en: 4. 平台特定的字体渲染限制
                  file: presentation\widgets\font_weight_tester.dart
                  line: 150
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text1使用不同的字体家族
                - action: create_new
                  text_zh: 1. 使用不同的字体家族名称注册同一字体文件的不同字重
                  text_en: 1. 使用不同的字体家族名称注册同一字体文件的不同字重
                  file: presentation\widgets\font_weight_tester.dart
                  line: 155
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text2使用非可变字体的多
                - action: create_new
                  text_zh: 2. 使用非可变字体的多个字重文件
                  text_en: 2. 使用非可变字体的多个字重文件
                  file: presentation\widgets\font_weight_tester.dart
                  line: 157
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text3使用fontVar
                - action: create_new
                  text_zh: 3. 使用fontVariations属性直接设置字重轴的值
                  text_en: 3. 使用fontVariations属性直接设置字重轴的值
                  file: presentation\widgets\font_weight_tester.dart
                  line: 157
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text4在应用中提供字体粗
                - action: create_new
                  text_zh: 4. 在应用中提供字体粗细预览，帮助用户选择合适的字重
                  text_en: 4. 在应用中提供字体粗细预览，帮助用户选择合适的字重
                  file: presentation\widgets\font_weight_tester.dart
                  line: 159
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text这个工具专门用于测试
                - action: create_new
                  text_zh: 这个工具专门用于测试思源黑体和思源宋体的字重变化。我们测试了不同的字重注册方式和渲染方式，以找出为什么只有两种粗细变化生效。
                  text_en: 这个工具专门用于测试思源黑体和思源宋体的字重变化。我们测试了不同的字重注册方式和渲染方式，以找出为什么只有两种粗细变化生效。
                  file: presentation\widgets\font_weight_tester.dart
                  line: 22
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text字体文件信息
                - action: create_new
                  text_zh: 字体文件信息
                  text_en: 字体文件信息
                  file: presentation\widgets\font_weight_tester.dart
                  line: 118
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text注意Flutter对
                - action: create_new
                  text_zh: '注意: Flutter对可变字体的支持可能有限制。如果字重变化不明显，可能是因为:'
                  text_en: '注意: Flutter对可变字体的支持可能有限制。如果字重变化不明显，可能是因为:'
                  file: presentation\widgets\font_weight_tester.dart
                  line: 143
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text可能的解决方案
                - action: create_new
                  text_zh: '可能的解决方案:'
                  text_en: '可能的解决方案:'
                  file: presentation\widgets\font_weight_tester.dart
                  line: 151
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - abc
                - action: create_new
                  text_zh: 永曰月明清风 ABC 123
                  text_en: 永曰月明清风 ABC 123
                  file: presentation\widgets\font_weight_tester.dart
                  line: 241
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - applocalizationsOfContextImageloaderrorErrorTostringStyleConstTextstyleColorColorsRedTextalignTextalignCenterWidgetBuildcontextContextWidgetChildIntFrameBoolWassynchronouslyloadedIfFrameNullIfWassynchronouslyloadedWidgetsbindingInstanceAddpostframecallbackIfReturnFinalImagestateRefReadWorkimageproviderFinalCurrentimageidImagestateWorkidImagestateCurrentpageidIfCurrentimageidImagestateReturnAnimatedswitcherDurationConstDurationMillisecondsChildChildReturnCenterChildColumnMainaxissizeMainaxissizeMinChildrenConstCircularprogressindicatorStrokewidthConstSizedboxHeightTextApplocalizationsOfContextLoadingimageStyleConstTextstyleColorColorsGreyWidgetWorkimagestateImagestateListCharacterregionRegionsSizeViewportsizeListStringSelectedidsFinalToolmodeRefWatchToolmodeproviderFinalIspanmodeToolmodeToolPanFinalIsselectmodeToolmodeToolSelectFinalCharactercollectionRefWatchCharactercollectionproviderReturnStackFitStackfitExpandChildrenInteractiveviewerConstrainedFalseTransformationcontrollerMinscaleMaxscaleScaleenabledTruePanenabledValueIspanmodeBoundarymarginConstEdgeinsetsAllDoubleInfinityOninteractionstartOninteractionupdateOninteractionendAlignmentAlignmentTopleftChildListenerChildStackChildrenImageMemoryImagestateImagedataFitBoxfitContainAlignmentAlignmentTopleftFilterqualityFilterqualityHighGaplessplaybackTrueFramebuilderErrorbuilderIfNullRegionsIsnotemptyPositionedFillChildGesturedetectorOntapupOnpanstartIspanmodeOnpanupdateIspanmodeOnpanendIspanmodeChildCustompaintPainterRegionspainterRegionsRegionsTransformerHoveredidAdjustingregionidCurrenttoolToolmodeIsadjustingCharactercollectionIsadjustingSelectedidsSelectedidsIfNullPositionedFillChildValuelistenablebuilderBoolValuelistenableBuilderContextIsaltpressedChildReturnMouseregionCursorIsaltpressedSystemmousecursorsMoveOnhoverEventFinalHandleindexEventLocalpositionSetstateHandleindexOnexitSetstateNullChildGesturedetectorBehaviorHittestbehaviorOpaqueOntapupOnpanstartIsaltpressedOnpanupdateIsaltpressedOnpanendIsaltpressedChildCustompaintPainterAdjustableregionpainterRegionTransformerIsactiveTrueIsadjustingTrueActivehandleindexCurrentrotationGuidelinesViewportrectIfIsselectmodePositionedFillChildValuelistenablebuilderBoolValuelistenableBuilderContextIsaltpressedChildReturnMouseregionCursorIsaltpressedSystemmousecursorsMoveSystemmousecursorsPreciseChildGesturedetectorOntapupOnpanstartIsaltpressedOnpanupdateIsaltpressedOnpanendIsaltpressedChildCustompaintPainterActiveselectionpainterStartpointOffsetZeroEndpointOffsetZeroViewportsizeViewportsizeSizeZeroIsactiveNullWidgetIfNullReturnConstSizedboxShrinkReturnGesturedetectorOnpanupdateDetailsSetstateDetailsLocalpositionOnpanendDetailsIfNullNullDetailsChildCustompaintPainterActiveselectionpainterStartpointEndpointViewportsizeViewportsizeWidgetReturnStackChildrenIfNullPositionedLeftLeftTopTopChildSelectiontoolbarOnconfirmOncancelOndeleteIfNullPositionedLeftDxTopDyChildAnimatedopacityDurationConstDurationMillisecondsOpacityNullChildContainerPaddingConstEdgeinsetsSymmetricHorizontalVerticalDecorationBoxdecorationColorColorsWhiteBorderradiusBorderradiusCircularBoxshadowBoxshadowColorColorsBlackWithalphaBlurradiusOffsetConstOffsetBorderBorderAllColorNullColorsBlueColorsBlueWithalphaWidthChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowMainaxissizeMainaxissizeMinChildrenConstIconIconsStraightenSizeColorColorsBlueConstSizedboxWidthTextWidthRoundHeightRoundStyleConstTextstyleColorColorsBlueFontweightFontweightFontsizeIfPaddingPaddingConstEdgeinsetsOnlyTopChildRowMainaxissizeMainaxissizeMinChildrenConstIconIconsSizeColorColorsBlueConstSizedboxWidthTextMathPiRoundStyleConstTextstyleColorColorsBlueFontweightFontweightFontsizeDoubleOffsetCenterOffsetPointReturnPointCenterDirectionListOffsetRectRectFinalGuidesOffsetGuidesAddOffsetRectCenterDxGuidesAddOffsetRectCenterDxViewportsizeHeightGuidesAddOffsetRectCenterDyGuidesAddOffsetViewportsizeWidthRectCenterDyIfRectHeightGuidesAddOffsetRectTopGuidesAddOffsetViewportsizeWidthRectTopIfRectWidthGuidesAddOffsetRectLeftGuidesAddOffsetRectLeftViewportsizeHeightReturnGuidesOffsetIfNullReturnOffsetZeroConstPaddingFinalViewportsizeViewportsizeSizeZeroVarXRightPaddingVarYTopIfXViewportsizeWidthXLeftPaddingIfYPaddingYPaddingIfYViewportsizeHeightYViewportsizeHeightIfFinalRotationdegreesMathPiIfRotationdegreesRotationdegreesYMathMaxYBottomPaddingElseIfRotationdegreesRotationdegreesYMathMinYTopPaddingReturnOffsetXYVoidApploggerDebugCalled
                - action: create_new
                  text_zh: '${AppLocalizations.of(context).imageLoadError}: ${error.toString()}'',
                    style: const TextStyle(color: Colors.red), textAlign: TextAlign.center,
                    ), ], ), ); } Widget _buildImageFrame( BuildContext context, Widget
                    child, int? frame, bool wasSynchronouslyLoaded, ) { if (frame
                    != null) { if (!wasSynchronouslyLoaded) { WidgetsBinding.instance.addPostFrameCallback((_)
                    { if (!_mounted) return; final imageState = ref.read(workImageProvider);
                    final currentImageId = ''${imageState.workId}-${imageState.currentPageId}'';
                    if (_lastImageId != currentImageId) { _handleImageLoaded(imageState);
                    } }); } return AnimatedSwitcher( duration: const Duration(milliseconds:
                    200), child: child, ); } return Center( child: Column( mainAxisSize:
                    MainAxisSize.min, children: [ const CircularProgressIndicator(strokeWidth:
                    2), const SizedBox(height: 16), Text( AppLocalizations.of(context).loadingImage,
                    style: const TextStyle(color: Colors.grey), ), ], ), ); } Widget
                    _buildImageLayer( WorkImageState imageState, List<CharacterRegion>
                    regions, Size viewportSize, List<String> selectedIds, ) { final
                    toolMode = ref.watch(toolModeProvider); final isPanMode = toolMode
                    == Tool.pan; final isSelectMode = toolMode == Tool.select; final
                    characterCollection = ref.watch(characterCollectionProvider);
                    return Stack( fit: StackFit.expand, children: [ InteractiveViewer(
                    constrained: false, transformationController: _transformationController,
                    minScale: 0.1, maxScale: 10.0, scaleEnabled: true, panEnabled:
                    _altKeyNotifier.value || isPanMode, boundaryMargin: const EdgeInsets.all(double.infinity),
                    onInteractionStart: _handleInteractionStart, onInteractionUpdate:
                    _handleInteractionUpdate, onInteractionEnd: _handleInteractionEnd,
                    alignment: Alignment.topLeft, child: Listener( child: Stack( children:
                    [ Image.memory( imageState.imageData!, fit: BoxFit.contain, alignment:
                    Alignment.topLeft, filterQuality: FilterQuality.high, gaplessPlayback:
                    true, frameBuilder: _buildImageFrame, errorBuilder: _buildErrorWidget,
                    ), if (_transformer != null && regions.isNotEmpty) Positioned.fill(
                    child: GestureDetector( onTapUp: _onTapUp, onPanStart: isPanMode
                    || _isAltKeyPressed ? _handlePanStart : _handleSelectionStart,
                    onPanUpdate: isPanMode || _isAltKeyPressed ? _handlePanUpdate
                    : _handleSelectionUpdate, onPanEnd: isPanMode || _isAltKeyPressed
                    ? _handlePanEnd : _handleSelectionEnd, child: CustomPaint( painter:
                    RegionsPainter( regions: regions, transformer: _transformer!,
                    hoveredId: _hoveredRegionId, adjustingRegionId: _adjustingRegionId,
                    currentTool: toolMode, isAdjusting: characterCollection.isAdjusting,
                    selectedIds: selectedIds, ), ), ), ), if (_isAdjusting && _adjustingRegionId
                    != null) Positioned.fill( child: ValueListenableBuilder<bool>(
                    valueListenable: _altKeyNotifier, builder: (context, isAltPressed,
                    child) { return MouseRegion( cursor: isAltPressed ? SystemMouseCursors.move
                    : _getCursor(), onHover: (event) { final handleIndex = _getHandleIndexFromPosition(
                    event.localPosition); setState(() { _activeHandleIndex = handleIndex;
                    }); }, onExit: (_) { setState(() { _activeHandleIndex = null;
                    }); }, child: GestureDetector( behavior: HitTestBehavior .opaque,
                    onTapUp: _onTapUp, onPanStart: isAltPressed ? _handlePanStart
                    : _handleAdjustmentPanStart, onPanUpdate: isAltPressed ? _handlePanUpdate
                    : _handleAdjustmentPanUpdate, onPanEnd: isAltPressed ? _handlePanEnd
                    : _handleAdjustmentPanEnd, child: CustomPaint( painter: AdjustableRegionPainter(
                    region: _originalRegion!, transformer: _transformer!, isActive:
                    true, isAdjusting: true, activeHandleIndex: _activeHandleIndex,
                    currentRotation: _currentRotation, guideLines: _guideLines, viewportRect:
                    _adjustingRect, ), ), ), ); }, ), ), if (isSelectMode && !_isAdjusting)
                    Positioned.fill( child: ValueListenableBuilder<bool>( valueListenable:
                    _altKeyNotifier, builder: (context, isAltPressed, child) { return
                    MouseRegion( cursor: isAltPressed ? SystemMouseCursors.move :
                    SystemMouseCursors.precise, child: GestureDetector( onTapUp: _onTapUp,
                    onPanStart: isAltPressed ? _handlePanStart : _handleSelectionStart,
                    onPanUpdate: isAltPressed ? _handlePanUpdate : _handleSelectionUpdate,
                    onPanEnd: isAltPressed ? _handlePanEnd : _handleSelectionEnd,
                    child: CustomPaint( painter: ActiveSelectionPainter( startPoint:
                    _selectionStart ?? Offset.zero, endPoint: _selectionCurrent ??
                    Offset.zero, viewportSize: _transformer?.viewportSize ?? Size.zero,
                    isActive: _selectionStart != null, ), ), ), ); }, ), ), ], ),
                    ), ), ], ); } Widget _buildSelectionToolLayer() { if (!_isInSelectionMode
                    || _selectionStart == null) { return const SizedBox.shrink();
                    } return GestureDetector( onPanUpdate: (details) { setState(()
                    { _selectionCurrent = details.localPosition; }); }, onPanEnd:
                    (details) { if (_selectionStart != null && _selectionCurrent !=
                    null) { _handleSelectionEnd(details); } }, child: CustomPaint(
                    painter: ActiveSelectionPainter( startPoint: _selectionStart!,
                    endPoint: _selectionCurrent ?? _selectionStart!, viewportSize:
                    _transformer!.viewportSize, ), ), ); } Widget _buildUILayer()
                    { return Stack( children: [ if (_hasCompletedSelection && _lastCompletedSelection
                    != null) Positioned( left: _lastCompletedSelection!.left, top:
                    _lastCompletedSelection!.top - 40, child: SelectionToolbar( onConfirm:
                    () { _confirmSelection(); }, onCancel: () { _cancelSelection();
                    }, onDelete: () { }, ), ), if (_isAdjusting && _adjustingRect
                    != null) Positioned( left: _calculateIndicatorPosition().dx, top:
                    _calculateIndicatorPosition().dy, child: AnimatedOpacity( duration:
                    const Duration(milliseconds: 150), opacity: _activeHandleIndex
                    != null ? 1.0 : 0.7, child: Container( padding: const EdgeInsets.symmetric(horizontal:
                    6, vertical: 4), decoration: BoxDecoration( color: Colors.white,
                    borderRadius: BorderRadius.circular(4), boxShadow: [ BoxShadow(
                    color: Colors.black.withAlpha(26), blurRadius: 4, offset: const
                    Offset(0, 2), ), ], border: Border.all( color: _activeHandleIndex
                    != null ? Colors.blue : Colors.blue.withAlpha(179), width: 1,
                    ), ), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Row( mainAxisSize: MainAxisSize.min, children: [ const
                    Icon( Icons.straighten, size: 14, color: Colors.blue, ), const
                    SizedBox(width: 4), Text( ''${_adjustingRect!.width.round()}×${_adjustingRect!.height.round()}'',
                    style: const TextStyle( color: Colors.blue, fontWeight: FontWeight.w600,
                    fontSize: 13, ), ), ], ), if (_currentRotation != 0) Padding(
                    padding: const EdgeInsets.only(top: 2), child: Row( mainAxisSize:
                    MainAxisSize.min, children: [ const Icon( Icons.rotate_right,
                    size: 14, color: Colors.blue, ), const SizedBox(width: 4), Text(
                    ''${(_currentRotation * 180 / math.pi).round()}°'', style: const
                    TextStyle( color: Colors.blue, fontWeight: FontWeight.w600, fontSize:
                    13, ), ), ], ), ), ], ), ), ), ), ], ); } double _calculateAngle(Offset
                    center, Offset point) { return (point - center).direction; } List<Offset>
                    _calculateGuideLines(Rect rect) { final guides = <Offset>[]; guides.add(Offset(rect.center.dx,
                    0)); guides.add(Offset(rect.center.dx, _transformer!.viewportSize.height));
                    guides.add(Offset(0, rect.center.dy)); guides.add(Offset(_transformer!.viewportSize.width,
                    rect.center.dy)); if (rect.height < 20) { guides.add(Offset(0,
                    rect.top)); guides.add(Offset(_transformer!.viewportSize.width,
                    rect.top)); } if (rect.width < 20) { guides.add(Offset(rect.left,
                    0)); guides.add(Offset(rect.left, _transformer!.viewportSize.height));
                    } return guides; } Offset _calculateIndicatorPosition() { if (_adjustingRect
                    == null) return Offset.zero; const padding = 8.0; final viewportSize
                    = _transformer?.viewportSize ?? Size.zero; var x = _adjustingRect!.right
                    + padding; var y = _adjustingRect!.top; if (x + 120 > viewportSize.width)
                    { x = _adjustingRect!.left - padding - 120; } if (y < padding)
                    { y = padding; } if (y + 50 > viewportSize.height) { y = viewportSize.height
                    - 50; } if (_currentRotation != 0) { final rotationDegrees = (_currentRotation
                    * 180 / math.pi) % 360; if (rotationDegrees > 45 && rotationDegrees
                    < 135) { y = math.max(y, _adjustingRect!.bottom + padding); }
                    else if (rotationDegrees > 225 && rotationDegrees < 315) { y =
                    math.min(y, _adjustingRect!.top - 50 - padding); } } return Offset(x,
                    y); } void _cancelAdjustment() { AppLogger.debug(''取消选区调整 (_cancelAdjustment
                    called)'
                  text_en: '${AppLocalizations.of(context).imageLoadError}: ${error.toString()}'',
                    style: const TextStyle(color: Colors.red), textAlign: TextAlign.center,
                    ), ], ), ); } Widget _buildImageFrame( BuildContext context, Widget
                    child, int? frame, bool wasSynchronouslyLoaded, ) { if (frame
                    != null) { if (!wasSynchronouslyLoaded) { WidgetsBinding.instance.addPostFrameCallback((_)
                    { if (!_mounted) return; final imageState = ref.read(workImageProvider);
                    final currentImageId = ''${imageState.workId}-${imageState.currentPageId}'';
                    if (_lastImageId != currentImageId) { _handleImageLoaded(imageState);
                    } }); } return AnimatedSwitcher( duration: const Duration(milliseconds:
                    200), child: child, ); } return Center( child: Column( mainAxisSize:
                    MainAxisSize.min, children: [ const CircularProgressIndicator(strokeWidth:
                    2), const SizedBox(height: 16), Text( AppLocalizations.of(context).loadingImage,
                    style: const TextStyle(color: Colors.grey), ), ], ), ); } Widget
                    _buildImageLayer( WorkImageState imageState, List<CharacterRegion>
                    regions, Size viewportSize, List<String> selectedIds, ) { final
                    toolMode = ref.watch(toolModeProvider); final isPanMode = toolMode
                    == Tool.pan; final isSelectMode = toolMode == Tool.select; final
                    characterCollection = ref.watch(characterCollectionProvider);
                    return Stack( fit: StackFit.expand, children: [ InteractiveViewer(
                    constrained: false, transformationController: _transformationController,
                    minScale: 0.1, maxScale: 10.0, scaleEnabled: true, panEnabled:
                    _altKeyNotifier.value || isPanMode, boundaryMargin: const EdgeInsets.all(double.infinity),
                    onInteractionStart: _handleInteractionStart, onInteractionUpdate:
                    _handleInteractionUpdate, onInteractionEnd: _handleInteractionEnd,
                    alignment: Alignment.topLeft, child: Listener( child: Stack( children:
                    [ Image.memory( imageState.imageData!, fit: BoxFit.contain, alignment:
                    Alignment.topLeft, filterQuality: FilterQuality.high, gaplessPlayback:
                    true, frameBuilder: _buildImageFrame, errorBuilder: _buildErrorWidget,
                    ), if (_transformer != null && regions.isNotEmpty) Positioned.fill(
                    child: GestureDetector( onTapUp: _onTapUp, onPanStart: isPanMode
                    || _isAltKeyPressed ? _handlePanStart : _handleSelectionStart,
                    onPanUpdate: isPanMode || _isAltKeyPressed ? _handlePanUpdate
                    : _handleSelectionUpdate, onPanEnd: isPanMode || _isAltKeyPressed
                    ? _handlePanEnd : _handleSelectionEnd, child: CustomPaint( painter:
                    RegionsPainter( regions: regions, transformer: _transformer!,
                    hoveredId: _hoveredRegionId, adjustingRegionId: _adjustingRegionId,
                    currentTool: toolMode, isAdjusting: characterCollection.isAdjusting,
                    selectedIds: selectedIds, ), ), ), ), if (_isAdjusting && _adjustingRegionId
                    != null) Positioned.fill( child: ValueListenableBuilder<bool>(
                    valueListenable: _altKeyNotifier, builder: (context, isAltPressed,
                    child) { return MouseRegion( cursor: isAltPressed ? SystemMouseCursors.move
                    : _getCursor(), onHover: (event) { final handleIndex = _getHandleIndexFromPosition(
                    event.localPosition); setState(() { _activeHandleIndex = handleIndex;
                    }); }, onExit: (_) { setState(() { _activeHandleIndex = null;
                    }); }, child: GestureDetector( behavior: HitTestBehavior .opaque,
                    onTapUp: _onTapUp, onPanStart: isAltPressed ? _handlePanStart
                    : _handleAdjustmentPanStart, onPanUpdate: isAltPressed ? _handlePanUpdate
                    : _handleAdjustmentPanUpdate, onPanEnd: isAltPressed ? _handlePanEnd
                    : _handleAdjustmentPanEnd, child: CustomPaint( painter: AdjustableRegionPainter(
                    region: _originalRegion!, transformer: _transformer!, isActive:
                    true, isAdjusting: true, activeHandleIndex: _activeHandleIndex,
                    currentRotation: _currentRotation, guideLines: _guideLines, viewportRect:
                    _adjustingRect, ), ), ), ); }, ), ), if (isSelectMode && !_isAdjusting)
                    Positioned.fill( child: ValueListenableBuilder<bool>( valueListenable:
                    _altKeyNotifier, builder: (context, isAltPressed, child) { return
                    MouseRegion( cursor: isAltPressed ? SystemMouseCursors.move :
                    SystemMouseCursors.precise, child: GestureDetector( onTapUp: _onTapUp,
                    onPanStart: isAltPressed ? _handlePanStart : _handleSelectionStart,
                    onPanUpdate: isAltPressed ? _handlePanUpdate : _handleSelectionUpdate,
                    onPanEnd: isAltPressed ? _handlePanEnd : _handleSelectionEnd,
                    child: CustomPaint( painter: ActiveSelectionPainter( startPoint:
                    _selectionStart ?? Offset.zero, endPoint: _selectionCurrent ??
                    Offset.zero, viewportSize: _transformer?.viewportSize ?? Size.zero,
                    isActive: _selectionStart != null, ), ), ), ); }, ), ), ], ),
                    ), ), ], ); } Widget _buildSelectionToolLayer() { if (!_isInSelectionMode
                    || _selectionStart == null) { return const SizedBox.shrink();
                    } return GestureDetector( onPanUpdate: (details) { setState(()
                    { _selectionCurrent = details.localPosition; }); }, onPanEnd:
                    (details) { if (_selectionStart != null && _selectionCurrent !=
                    null) { _handleSelectionEnd(details); } }, child: CustomPaint(
                    painter: ActiveSelectionPainter( startPoint: _selectionStart!,
                    endPoint: _selectionCurrent ?? _selectionStart!, viewportSize:
                    _transformer!.viewportSize, ), ), ); } Widget _buildUILayer()
                    { return Stack( children: [ if (_hasCompletedSelection && _lastCompletedSelection
                    != null) Positioned( left: _lastCompletedSelection!.left, top:
                    _lastCompletedSelection!.top - 40, child: SelectionToolbar( onConfirm:
                    () { _confirmSelection(); }, onCancel: () { _cancelSelection();
                    }, onDelete: () { }, ), ), if (_isAdjusting && _adjustingRect
                    != null) Positioned( left: _calculateIndicatorPosition().dx, top:
                    _calculateIndicatorPosition().dy, child: AnimatedOpacity( duration:
                    const Duration(milliseconds: 150), opacity: _activeHandleIndex
                    != null ? 1.0 : 0.7, child: Container( padding: const EdgeInsets.symmetric(horizontal:
                    6, vertical: 4), decoration: BoxDecoration( color: Colors.white,
                    borderRadius: BorderRadius.circular(4), boxShadow: [ BoxShadow(
                    color: Colors.black.withAlpha(26), blurRadius: 4, offset: const
                    Offset(0, 2), ), ], border: Border.all( color: _activeHandleIndex
                    != null ? Colors.blue : Colors.blue.withAlpha(179), width: 1,
                    ), ), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Row( mainAxisSize: MainAxisSize.min, children: [ const
                    Icon( Icons.straighten, size: 14, color: Colors.blue, ), const
                    SizedBox(width: 4), Text( ''${_adjustingRect!.width.round()}×${_adjustingRect!.height.round()}'',
                    style: const TextStyle( color: Colors.blue, fontWeight: FontWeight.w600,
                    fontSize: 13, ), ), ], ), if (_currentRotation != 0) Padding(
                    padding: const EdgeInsets.only(top: 2), child: Row( mainAxisSize:
                    MainAxisSize.min, children: [ const Icon( Icons.rotate_right,
                    size: 14, color: Colors.blue, ), const SizedBox(width: 4), Text(
                    ''${(_currentRotation * 180 / math.pi).round()}°'', style: const
                    TextStyle( color: Colors.blue, fontWeight: FontWeight.w600, fontSize:
                    13, ), ), ], ), ), ], ), ), ), ), ], ); } double _calculateAngle(Offset
                    center, Offset point) { return (point - center).direction; } List<Offset>
                    _calculateGuideLines(Rect rect) { final guides = <Offset>[]; guides.add(Offset(rect.center.dx,
                    0)); guides.add(Offset(rect.center.dx, _transformer!.viewportSize.height));
                    guides.add(Offset(0, rect.center.dy)); guides.add(Offset(_transformer!.viewportSize.width,
                    rect.center.dy)); if (rect.height < 20) { guides.add(Offset(0,
                    rect.top)); guides.add(Offset(_transformer!.viewportSize.width,
                    rect.top)); } if (rect.width < 20) { guides.add(Offset(rect.left,
                    0)); guides.add(Offset(rect.left, _transformer!.viewportSize.height));
                    } return guides; } Offset _calculateIndicatorPosition() { if (_adjustingRect
                    == null) return Offset.zero; const padding = 8.0; final viewportSize
                    = _transformer?.viewportSize ?? Size.zero; var x = _adjustingRect!.right
                    + padding; var y = _adjustingRect!.top; if (x + 120 > viewportSize.width)
                    { x = _adjustingRect!.left - padding - 120; } if (y < padding)
                    { y = padding; } if (y + 50 > viewportSize.height) { y = viewportSize.height
                    - 50; } if (_currentRotation != 0) { final rotationDegrees = (_currentRotation
                    * 180 / math.pi) % 360; if (rotationDegrees > 45 && rotationDegrees
                    < 135) { y = math.max(y, _adjustingRect!.bottom + padding); }
                    else if (rotationDegrees > 225 && rotationDegrees < 315) { y =
                    math.min(y, _adjustingRect!.top - 50 - padding); } } return Offset(x,
                    y); } void _cancelAdjustment() { AppLogger.debug(''取消选区调整 (_cancelAdjustment
                    called)'
                  file: presentation\widgets\character_collection\m3_image_view.dart
                  line: 470
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text无法加载图片
                - action: create_new
                  text_zh: 无法加载图片
                  text_en: 无法加载图片
                  file: presentation\widgets\common\zoomable_image_view.dart
                  line: 137
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text键盘快捷键
                - action: create_new
                  text_zh: '键盘快捷键:'
                  text_en: '键盘快捷键:'
                  file: presentation\widgets\forms\work_form.dart
                  line: 345
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - ctrlTTitleCtrlACtrlRN
                - action: create_new
                  text_zh: 'Ctrl+T: 标题 Ctrl+A: 作者 Ctrl+R: 备注\n'
                  text_en: 'Ctrl+T: 标题 Ctrl+A: 作者 Ctrl+R: 备注\n'
                  file: presentation\widgets\forms\work_form.dart
                  line: 348
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - currentpageTotalpages
                - action: create_new
                  text_zh: $currentPage / $totalPages 页 (共$totalItems条)
                  text_en: $currentPage / $totalPages 页 (共$totalItems条)
                  file: presentation\widgets\pagination\pagination_controls.dart
                  line: 67
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - indexStyleTextstyleColorIsselectedColorschemeOnprimaryColorschemeOnsurfacevariantFontsizeFontweightFontweightBoldWidgetBuildcontextContextFinalColorschemeThemeOfContextColorschemeReturnListviewBuilderScrolldirectionAxisHorizontalControllerPaddingConstEdgeinsetsSymmetricHorizontalVerticalItemcountWidgetPagesLengthItembuilderContextIndexFinalPageWidgetPagesIndexFinalIsselectedIndexWidgetCurrentpageindexReturnPaddingPaddingConstEdgeinsetsOnlyRightChildGesturedetectorOntapEditpageloggerEditpagedebug
                - action: create_new
                  text_zh: '${index + 1}'', style: TextStyle( color: isSelected ?
                    colorScheme.onPrimary : colorScheme.onSurfaceVariant, fontSize:
                    12, fontWeight: FontWeight.bold, ), ), ), ), ], ), ), ), ); },
                    ); } Widget _buildSimplePageList(BuildContext context) { final
                    colorScheme = Theme.of(context).colorScheme; return ListView.builder(
                    scrollDirection: Axis.horizontal, controller: _scrollController,
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical:
                    8), itemCount: widget.pages.length, itemBuilder: (context, index)
                    { final page = widget.pages[index]; final isSelected = index ==
                    widget.currentPageIndex; return Padding( padding: const EdgeInsets.only(right:
                    16), child: GestureDetector( onTap: () { EditPageLogger.editPageDebug(
                    ''页面缩略图选择(简单列表)'
                  text_en: '${index + 1}'', style: TextStyle( color: isSelected ?
                    colorScheme.onPrimary : colorScheme.onSurfaceVariant, fontSize:
                    12, fontWeight: FontWeight.bold, ), ), ), ), ], ), ), ), ); },
                    ); } Widget _buildSimplePageList(BuildContext context) { final
                    colorScheme = Theme.of(context).colorScheme; return ListView.builder(
                    scrollDirection: Axis.horizontal, controller: _scrollController,
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical:
                    8), itemCount: widget.pages.length, itemBuilder: (context, index)
                    { final page = widget.pages[index]; final isSelected = index ==
                    widget.currentPageIndex; return Padding( padding: const EdgeInsets.only(right:
                    16), child: GestureDetector( onTap: () { EditPageLogger.editPageDebug(
                    ''页面缩略图选择(简单列表)'
                  file: presentation\widgets\practice\m3_page_thumbnail_strip.dart
                  line: 291
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - layerLayernameStyleConstTextstyleFontweightFontweightBoldActionsTextbuttonOnpressedNavigatorOfContextPopFalseChildTextCancelFilledbuttonOnpressedNavigatorOfContextPopTrueStyleFilledbuttonStylefromBackgroundcolorThemeOfContextColorschemeErrorChildTextDeleteIfResultTrueEditpageloggerPropertypaneldebug
                - action: create_new
                  text_zh: 'Layer: $layerName'', style: const TextStyle(fontWeight:
                    FontWeight.bold), ), ], ), actions: [ TextButton( onPressed: ()
                    => Navigator.of(context).pop(false), child: Text(l10n.cancel),
                    ), FilledButton( onPressed: () => Navigator.of(context).pop(true),
                    style: FilledButton.styleFrom( backgroundColor: Theme.of(context).colorScheme.error,
                    ), child: Text(l10n.delete), ), ], ), ); if (result == true) {
                    EditPageLogger.propertyPanelDebug( ''确认删除图层'
                  text_en: 'Layer: $layerName'', style: const TextStyle(fontWeight:
                    FontWeight.bold), ), ], ), actions: [ TextButton( onPressed: ()
                    => Navigator.of(context).pop(false), child: Text(l10n.cancel),
                    ), FilledButton( onPressed: () => Navigator.of(context).pop(true),
                    style: FilledButton.styleFrom( backgroundColor: Theme.of(context).colorScheme.error,
                    ), child: Text(l10n.delete), ), ], ), ); if (result == true) {
                    EditPageLogger.propertyPanelDebug( ''确认删除图层'
                  file: presentation\widgets\practice\m3_practice_layer_panel.dart
                  line: 455
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - saveCtrlSOnpressedContextConstVerticaldividerIndentEndindentRowMainaxissizeMainaxissizeMinChildrenIconbuttonIconConstIconIconsTooltipSaveasCtrlShiftSOnpressedContextConstSizedboxWidthAppsizesSIconbuttonIconConstIconIconsTooltipExportCtrlEOnpressedContextConstVerticaldividerIndentEndindentRowMainaxissizeMainaxissizeMinChildrenIconbuttonIconIconShowthumbnailsIconsIconsTooltipShowthumbnailsHidethumbnailsCtrlOShowthumbnailsCtrlOOnpressedOnthumbnailtoggleShowthumbnailsStyleIconbuttonStylefromForegroundcolorShowthumbnailsColorschemeTertiaryColorschemePrimaryFutureVoidBuildcontextContextApplocalizationsAsyncFinalCurrenttitleControllerPracticetitleEditpageloggerEditpagedebug
                - action: create_new
                  text_zh: '${l10n.save} (Ctrl+S)''), onPressed: () => _savePractice(context,
                    l10n), ), ], ), const VerticalDivider(indent: 8, endIndent: 8),
                    Row( mainAxisSize: MainAxisSize.min, children: [ IconButton( icon:
                    const Icon(Icons.save_as), tooltip: ''${l10n.saveAs} (Ctrl+Shift+S)'',
                    onPressed: () => _saveAs(context, l10n), ), const SizedBox(width:
                    AppSizes.s), IconButton( icon: const Icon(Icons.file_download),
                    tooltip: ''${l10n.export} (Ctrl+E)'', onPressed: () => _exportPractice(context,
                    l10n), ), ], ), const VerticalDivider(indent: 8, endIndent: 8),
                    Row( mainAxisSize: MainAxisSize.min, children: [ IconButton( icon:
                    Icon( showThumbnails ? Icons.view_carousel : Icons.view_carousel_outlined,
                    ), tooltip: showThumbnails ? ''${l10n.hideThumbnails} (Ctrl+O)''
                    : ''${l10n.showThumbnails} (Ctrl+O)'', onPressed: () => onThumbnailToggle(!showThumbnails),
                    style: IconButton.styleFrom( foregroundColor: showThumbnails ?
                    colorScheme.tertiary : colorScheme.primary, ), ), ], ), ], );
                    } Future<void> _editTitle(BuildContext context, AppLocalizations
                    l10n) async { final currentTitle = controller.practiceTitle; EditPageLogger.editPageDebug(
                    ''开始编辑标题'
                  text_en: '${l10n.save} (Ctrl+S)''), onPressed: () => _savePractice(context,
                    l10n), ), ], ), const VerticalDivider(indent: 8, endIndent: 8),
                    Row( mainAxisSize: MainAxisSize.min, children: [ IconButton( icon:
                    const Icon(Icons.save_as), tooltip: ''${l10n.saveAs} (Ctrl+Shift+S)'',
                    onPressed: () => _saveAs(context, l10n), ), const SizedBox(width:
                    AppSizes.s), IconButton( icon: const Icon(Icons.file_download),
                    tooltip: ''${l10n.export} (Ctrl+E)'', onPressed: () => _exportPractice(context,
                    l10n), ), ], ), const VerticalDivider(indent: 8, endIndent: 8),
                    Row( mainAxisSize: MainAxisSize.min, children: [ IconButton( icon:
                    Icon( showThumbnails ? Icons.view_carousel : Icons.view_carousel_outlined,
                    ), tooltip: showThumbnails ? ''${l10n.hideThumbnails} (Ctrl+O)''
                    : ''${l10n.showThumbnails} (Ctrl+O)'', onPressed: () => onThumbnailToggle(!showThumbnails),
                    style: IconButton.styleFrom( foregroundColor: showThumbnails ?
                    colorScheme.tertiary : colorScheme.primary, ), ), ], ), ], );
                    } Future<void> _editTitle(BuildContext context, AppLocalizations
                    l10n) async { final currentTitle = controller.practiceTitle; EditPageLogger.editPageDebug(
                    ''开始编辑标题'
                  file: presentation\widgets\practice\m3_top_navigation_bar.dart
                  line: 104
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - itemcountItemsStyleTextstyleFontsizeColorColorsGreenWithopacityFutureElementrepresentationStringElementidMapStringDynamicElementdataAsyncFinalWidgetAwaitElementdataCompressedTrueIfWidgetNullReturnNullFinalOriginalsizeElementdataFinalOptimizedsizeOriginalsizeRoundOriginalsizeOptimizedsizeReturnElementrepresentationElementidElementidModeElementrepresentationmodeCompressedWidgetWidgetMetadataElementmetadataOriginalsizeOriginalsizeOptimizedsizeOptimizedsizeCompressionratioGenerationtimeDatetimeNowFutureWidgetMapStringDynamicElementdataBoolCompressedFalseAsyncReturnContainerWidthHeightColorColorsBlueWithopacityChildConstCenterChildTextElementFutureElementrepresentationStringElementidMapStringDynamicElementdataAsyncFinalWidgetAwaitElementdataIfWidgetNullReturnNullReturnElementrepresentationElementidElementidModeElementrepresentationmodeFullWidgetWidgetMetadataElementmetadataOriginalsizeElementdataOptimizedsizeElementdataCompressionratioGenerationtimeDatetimeNowWidgetMapStringDynamicElementdataFinalElementtypeElementdataTypeAsStringElementReturnContainerWidthTodoubleHeightTodoubleDecorationBoxdecorationBorderBorderAllColorColorsGreyWithopacityBorderradiusBorderradiusCircularColorColorsGreyWithopacityChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenIconIconsWidgetsSizeColorColorsGreyWithopacityConstSizedboxHeightTextElementtypeStyleTextstyleFontsizeColorColorsGreyWithopacityFutureWidgetMapStringDynamicElementdataAsyncFinalImagepathElementdataImagepathAsStringIfImagepathNullReturnNullTryFinalImageAwaitLoadimageImagepathPriorityLoadpriorityBackgroundStrategyLoadingstrategyMemoryoptimizedIfImageNullReturnNullReturnContainerWidthTodoubleHeightTodoubleDecorationBoxdecorationBorderBorderAllColorColorsGreyWithopacityBorderradiusBorderradiusCircularChildCliprrectBorderradiusBorderradiusCircularChildRawimageImageImageFitBoxfitCoverWidthTodoubleHeightTodoubleCatchEIfKdebugmodeDebugprintFailedToCreateImagePreviewEReturnElementdataFutureElementrepresentationStringElementidMapStringDynamicElementdataAsyncFinalElementtypeElementdataTypeAsStringUnknownWidgetPreviewwidgetSwitchElementtypeCaseImagePreviewwidgetAwaitElementdataBreakCaseTextPreviewwidgetElementdataBreakCaseCollectionPreviewwidgetElementdataBreakDefaultPreviewwidgetElementdataBreakIfPreviewwidgetNullReturnNullFinalOriginalsizeElementdataFinalOptimizedsizeOriginalsizeReturnElementrepresentationElementidElementidModeElementrepresentationmodePreviewWidgetPreviewwidgetMetadataElementmetadataOriginalsizeOriginalsizeOptimizedsizeOptimizedsizeCompressionratioOptimizedsizeOriginalsizeGenerationtimeDatetimeNowFutureElementrepresentationStringElementidMapStringDynamicElementdataAsyncFinalProxywidgetElementidElementdataFinalOriginalsizeElementdataConstProxysizeReturnElementrepresentationElementidElementidModeElementrepresentationmodeProxyWidgetProxywidgetMetadataElementmetadataOriginalsizeOriginalsizeOptimizedsizeProxysizeCompressionratioProxysizeOriginalsizeGenerationtimeDatetimeNowWidgetStringElementidMapStringDynamicElementdataReturnGesturedetectorOntapElementidElementdataChildContainerWidthTodoubleHeightTodoubleDecorationBoxdecorationBorderBorderAllColorColorsOrangeWithopacityBorderradiusBorderradiusCircularColorColorsOrangeWithopacityChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenIconIconsSizeColorColorsOrangeWithopacityConstSizedboxHeightTextTapToLoadStyleTextstyleFontsizeColorColorsOrangeWithopacityWidgetMapStringDynamicElementdataFinalTextElementdataTextAsStringTextElementFinalTruncatedtextTextLengthTextSubstringTextReturnContainerWidthTodoubleHeightTodoublePaddingConstEdgeinsetsAllDecorationBoxdecorationBorderBorderAllColorColorsBlueWithopacityBorderradiusBorderradiusCircularColorColorsBlueWithopacityChildTextTruncatedtextStyleConstTextstyleFontsizeOverflowTextoverflowEllipsisMaxlinesElementrepresentationmodeStringElementtypeMapStringDynamicElementdataMemorystatsMemorystatsFinalEstimatedsizeElementdataFinalMemorypressureMemorystatsPressureratioIfMemorypressureReturnEstimatedsizeElementrepresentationmodeProxyElementrepresentationmodeCompressedIfMemorypressureReturnEstimatedsizeElementrepresentationmodeCompressedElementrepresentationmodePreviewIfEstimatedsizeReturnElementrepresentationmodeCompressedReturnElementrepresentationmodeFullIntMapStringDynamicElementdataFinalElementtypeElementdataTypeAsStringUnknownSwitchElementtypeCaseImageFinalWidthElementdataWidthAsNumTodoubleFinalHeightElementdataHeightAsNumTodoubleReturnWidthHeightRoundCaseTextFinalTextElementdataTextAsStringReturnTextLengthCaseCollectionFinalItemsElementdataItemsAsListReturnItemsLengthDefaultReturnFutureElementrepresentationStringElementidMapStringDynamicElementdataElementrepresentationmodeModeAsyncFinalElementtypeElementdataTypeAsStringUnknownFinalMemorystatsMemorystatsFinalRepresentationmodeModeElementtypeElementdataMemorystatsSwitchRepresentationmodeCaseElementrepresentationmodeFullReturnAwaitElementidElementdataCaseElementrepresentationmodePreviewReturnAwaitElementidElementdataCaseElementrepresentationmodeCompressedReturnAwaitElementidElementdataCaseElementrepresentationmodeProxyReturnAwaitElementidElementdataCaseElementrepresentationmodeAdaptiveReturnAwaitElementidElementdataVoidAddlistenerIfKdebugmodeDebugprintMemoryefficientelementrepresentationInitializedFutureVoidStringElementidMapStringDynamicElementdataAsyncAwaitCreaterepresentationElementidElementdataModeElementrepresentationmodeFullForceregenerateTrueVoidFinalMemorystatsMemorystatsIfMemorystatsPressureratioVoidFinalRepresentationstooptimizeEntriesWhereEntryEntryValueModeElementrepresentationmodeFullTakeTolistForFinalEntryInRepresentationstooptimizeFinalElementidEntryKeyFutureAsyncRemoveElementidFutureElementrepresentationStringElementidAsyncWhileContainsElementidAwaitFutureDelayedConstDurationMillisecondsReturnElementidVoidRequiredStringOperationMapStringDynamicDataFinalNowDatetimeNowIfNowDifferenceNowEditpageloggerPerformanceinfo
                - action: create_new
                  text_zh: '$itemCount items'', style: TextStyle( fontSize: 10, color:
                    Colors.green.withOpacity(0.8), ), ), ], ), ); } Future<ElementRepresentation?>
                    _createCompressedRepresentation( String elementId, Map<String,
                    dynamic> elementData, ) async { final widget = await _createElementWidget(elementData,
                    compressed: true); if (widget == null) return null; _memoryOptimizedCount++;
                    final originalSize = _estimateElementSize(elementData); final
                    optimizedSize = (originalSize * _compressionQuality).round();
                    _compressionSavedBytes += (originalSize - optimizedSize); return
                    ElementRepresentation( elementId: elementId, mode: ElementRepresentationMode.compressed,
                    widget: widget, metadata: ElementMetadata( originalSize: originalSize,
                    optimizedSize: optimizedSize, compressionRatio: _compressionQuality,
                    generationTime: DateTime.now(), ), ); } Future<Widget?> _createElementWidget(Map<String,
                    dynamic> elementData, {bool compressed = false}) async { return
                    Container( width: 100, height: 100, color: Colors.blue.withOpacity(0.1),
                    child: const Center( child: Text(''Element''), ), ); } Future<ElementRepresentation?>
                    _createFullRepresentation( String elementId, Map<String, dynamic>
                    elementData, ) async { final widget = await _createElementWidget(elementData);
                    if (widget == null) return null; return ElementRepresentation(
                    elementId: elementId, mode: ElementRepresentationMode.full, widget:
                    widget, metadata: ElementMetadata( originalSize: _estimateElementSize(elementData),
                    optimizedSize: _estimateElementSize(elementData), compressionRatio:
                    1.0, generationTime: DateTime.now(), ), ); } Widget _createGenericPreview(Map<String,
                    dynamic> elementData) { final elementType = elementData[''type'']
                    as String? ?? ''Element''; return Container( width: _previewDimension.toDouble(),
                    height: _previewDimension.toDouble(), decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey.withOpacity(0.3)), borderRadius:
                    BorderRadius.circular(4), color: Colors.grey.withOpacity(0.1),
                    ), child: Column( mainAxisAlignment: MainAxisAlignment.center,
                    children: [ Icon( Icons.widgets, size: 32, color: Colors.grey.withOpacity(0.7),
                    ), const SizedBox(height: 4), Text( elementType, style: TextStyle(
                    fontSize: 10, color: Colors.grey.withOpacity(0.8), ), ), ], ),
                    ); } Future<Widget?> _createImagePreview(Map<String, dynamic>
                    elementData) async { final imagePath = elementData[''imagePath'']
                    as String?; if (imagePath == null) return null; try { final image
                    = await _resourceLoader.loadImage( imagePath, priority: LoadPriority.background,
                    strategy: LoadingStrategy.memoryOptimized, ); if (image == null)
                    return null; return Container( width: _previewDimension.toDouble(),
                    height: _previewDimension.toDouble(), decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey.withOpacity(0.3)), borderRadius:
                    BorderRadius.circular(4), ), child: ClipRRect( borderRadius: BorderRadius.circular(4),
                    child: RawImage( image: image, fit: BoxFit.cover, width: _previewDimension.toDouble(),
                    height: _previewDimension.toDouble(), ), ), ); } catch (e) { if
                    (kDebugMode) { debugPrint(''❌ Failed to create image preview:
                    $e''); } return _createGenericPreview(elementData); } } Future<ElementRepresentation?>
                    _createPreviewRepresentation( String elementId, Map<String, dynamic>
                    elementData, ) async { final elementType = elementData[''type'']
                    as String? ?? ''unknown''; Widget? previewWidget; switch (elementType)
                    { case ''image'': previewWidget = await _createImagePreview(elementData);
                    break; case ''text'': previewWidget = _createTextPreview(elementData);
                    break; case ''collection'': previewWidget = _createCollectionPreview(elementData);
                    break; default: previewWidget = _createGenericPreview(elementData);
                    break; } if (previewWidget == null) return null; _previewGeneratedCount++;
                    final originalSize = _estimateElementSize(elementData); final
                    optimizedSize = originalSize ~/ 4; return ElementRepresentation(
                    elementId: elementId, mode: ElementRepresentationMode.preview,
                    widget: previewWidget, metadata: ElementMetadata( originalSize:
                    originalSize, optimizedSize: optimizedSize, compressionRatio:
                    optimizedSize / originalSize, generationTime: DateTime.now(),
                    ), ); } Future<ElementRepresentation?> _createProxyRepresentation(
                    String elementId, Map<String, dynamic> elementData, ) async {
                    final proxyWidget = _createProxyWidget(elementId, elementData);
                    final originalSize = _estimateElementSize(elementData); const
                    proxySize = 1024; return ElementRepresentation( elementId: elementId,
                    mode: ElementRepresentationMode.proxy, widget: proxyWidget, metadata:
                    ElementMetadata( originalSize: originalSize, optimizedSize: proxySize,
                    compressionRatio: proxySize / originalSize, generationTime: DateTime.now(),
                    ), ); } Widget _createProxyWidget( String elementId, Map<String,
                    dynamic> elementData) { return GestureDetector( onTap: () => _loadFullRepresentation(elementId,
                    elementData), child: Container( width: _previewDimension.toDouble(),
                    height: _previewDimension.toDouble(), decoration: BoxDecoration(
                    border: Border.all(color: Colors.orange.withOpacity(0.3)), borderRadius:
                    BorderRadius.circular(4), color: Colors.orange.withOpacity(0.1),
                    ), child: Column( mainAxisAlignment: MainAxisAlignment.center,
                    children: [ Icon( Icons.cloud_download, size: 32, color: Colors.orange.withOpacity(0.7),
                    ), const SizedBox(height: 4), Text( ''Tap to load'', style: TextStyle(
                    fontSize: 10, color: Colors.orange.withOpacity(0.8), ), ), ],
                    ), ), ); } Widget _createTextPreview(Map<String, dynamic> elementData)
                    { final text = elementData[''text''] as String? ?? ''Text Element'';
                    final truncatedText = text.length > 50 ? ''${text.substring(0,
                    50)}...'' : text; return Container( width: _previewDimension.toDouble(),
                    height: (_previewDimension / 2).toDouble(), padding: const EdgeInsets.all(4),
                    decoration: BoxDecoration( border: Border.all(color: Colors.blue.withOpacity(0.3)),
                    borderRadius: BorderRadius.circular(4), color: Colors.blue.withOpacity(0.1),
                    ), child: Text( truncatedText, style: const TextStyle(fontSize:
                    10), overflow: TextOverflow.ellipsis, maxLines: 3, ), ); } ElementRepresentationMode
                    _determineOptimalRepresentationMode( String elementType, Map<String,
                    dynamic> elementData, MemoryStats memoryStats, ) { final estimatedSize
                    = _estimateElementSize(elementData); final memoryPressure = memoryStats.pressureRatio;
                    if (memoryPressure > 0.8) { return estimatedSize > _largeElementThreshold
                    ? ElementRepresentationMode.proxy : ElementRepresentationMode.compressed;
                    } if (memoryPressure > 0.6) { return estimatedSize > _largeElementThreshold
                    ? ElementRepresentationMode.compressed : ElementRepresentationMode.preview;
                    } if (estimatedSize > _largeElementThreshold * 2) { return ElementRepresentationMode.compressed;
                    } return ElementRepresentationMode.full; } int _estimateElementSize(Map<String,
                    dynamic> elementData) { final elementType = elementData[''type'']
                    as String? ?? ''unknown''; switch (elementType) { case ''image'':
                    final width = (elementData[''width''] as num?)?.toDouble() ??
                    100; final height = (elementData[''height''] as num?)?.toDouble()
                    ?? 100; return (width * height * 4).round(); case ''text'': final
                    text = elementData[''text''] as String? ?? ''''; return text.length
                    * 2; case ''collection'': final items = elementData[''items'']
                    as List? ?? []; return items.length * 1024; default: return 1024;
                    } } Future<ElementRepresentation?> _generateRepresentation( String
                    elementId, Map<String, dynamic> elementData, ElementRepresentationMode?
                    mode, ) async { final elementType = elementData[''type''] as String?
                    ?? ''unknown''; final memoryStats = _memoryManager.memoryStats;
                    final representationMode = mode ?? _determineOptimalRepresentationMode(
                    elementType, elementData, memoryStats, ); switch (representationMode)
                    { case ElementRepresentationMode.full: return await _createFullRepresentation(elementId,
                    elementData); case ElementRepresentationMode.preview: return await
                    _createPreviewRepresentation(elementId, elementData); case ElementRepresentationMode.compressed:
                    return await _createCompressedRepresentation(elementId, elementData);
                    case ElementRepresentationMode.proxy: return await _createProxyRepresentation(elementId,
                    elementData); case ElementRepresentationMode.adaptive: return
                    await _createAdaptiveRepresentation(elementId, elementData); }
                    } void _initializeRepresentationSystem() { _memoryManager.addListener(_onMemoryStateChanged);
                    if (kDebugMode) { debugPrint(''💾 MemoryEfficientElementRepresentation:
                    Initialized''); } } Future<void> _loadFullRepresentation( String
                    elementId, Map<String, dynamic> elementData) async { await createRepresentation(
                    elementId, elementData, mode: ElementRepresentationMode.full,
                    forceRegenerate: true, ); } void _onMemoryStateChanged() { final
                    memoryStats = _memoryManager.memoryStats; if (memoryStats.pressureRatio
                    > 0.8) { _optimizeExistingRepresentations(); } } void _optimizeExistingRepresentations()
                    { final representationsToOptimize = _representations.entries .where((entry)
                    => entry.value.mode == ElementRepresentationMode.full) .take(5)
                    .toList(); for (final entry in representationsToOptimize) { final
                    elementId = entry.key; Future(() async { _representations.remove(elementId);
                    }); } } Future<ElementRepresentation?> _waitForLoadingCompletion(
                    String elementId) async { while (_loadingElements.contains(elementId))
                    { await Future.delayed(const Duration(milliseconds: 100)); } return
                    _representations[elementId]; } void _throttledNotifyListeners({
                    required String operation, Map<String, dynamic>? data, }) { final
                    now = DateTime.now(); if (now.difference(_lastNotificationTime)
                    >= _notificationThrottle) { _lastNotificationTime = now; EditPageLogger.performanceInfo(
                    ''内存高效表示管理器通知'
                  text_en: '$itemCount items'', style: TextStyle( fontSize: 10, color:
                    Colors.green.withOpacity(0.8), ), ), ], ), ); } Future<ElementRepresentation?>
                    _createCompressedRepresentation( String elementId, Map<String,
                    dynamic> elementData, ) async { final widget = await _createElementWidget(elementData,
                    compressed: true); if (widget == null) return null; _memoryOptimizedCount++;
                    final originalSize = _estimateElementSize(elementData); final
                    optimizedSize = (originalSize * _compressionQuality).round();
                    _compressionSavedBytes += (originalSize - optimizedSize); return
                    ElementRepresentation( elementId: elementId, mode: ElementRepresentationMode.compressed,
                    widget: widget, metadata: ElementMetadata( originalSize: originalSize,
                    optimizedSize: optimizedSize, compressionRatio: _compressionQuality,
                    generationTime: DateTime.now(), ), ); } Future<Widget?> _createElementWidget(Map<String,
                    dynamic> elementData, {bool compressed = false}) async { return
                    Container( width: 100, height: 100, color: Colors.blue.withOpacity(0.1),
                    child: const Center( child: Text(''Element''), ), ); } Future<ElementRepresentation?>
                    _createFullRepresentation( String elementId, Map<String, dynamic>
                    elementData, ) async { final widget = await _createElementWidget(elementData);
                    if (widget == null) return null; return ElementRepresentation(
                    elementId: elementId, mode: ElementRepresentationMode.full, widget:
                    widget, metadata: ElementMetadata( originalSize: _estimateElementSize(elementData),
                    optimizedSize: _estimateElementSize(elementData), compressionRatio:
                    1.0, generationTime: DateTime.now(), ), ); } Widget _createGenericPreview(Map<String,
                    dynamic> elementData) { final elementType = elementData[''type'']
                    as String? ?? ''Element''; return Container( width: _previewDimension.toDouble(),
                    height: _previewDimension.toDouble(), decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey.withOpacity(0.3)), borderRadius:
                    BorderRadius.circular(4), color: Colors.grey.withOpacity(0.1),
                    ), child: Column( mainAxisAlignment: MainAxisAlignment.center,
                    children: [ Icon( Icons.widgets, size: 32, color: Colors.grey.withOpacity(0.7),
                    ), const SizedBox(height: 4), Text( elementType, style: TextStyle(
                    fontSize: 10, color: Colors.grey.withOpacity(0.8), ), ), ], ),
                    ); } Future<Widget?> _createImagePreview(Map<String, dynamic>
                    elementData) async { final imagePath = elementData[''imagePath'']
                    as String?; if (imagePath == null) return null; try { final image
                    = await _resourceLoader.loadImage( imagePath, priority: LoadPriority.background,
                    strategy: LoadingStrategy.memoryOptimized, ); if (image == null)
                    return null; return Container( width: _previewDimension.toDouble(),
                    height: _previewDimension.toDouble(), decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey.withOpacity(0.3)), borderRadius:
                    BorderRadius.circular(4), ), child: ClipRRect( borderRadius: BorderRadius.circular(4),
                    child: RawImage( image: image, fit: BoxFit.cover, width: _previewDimension.toDouble(),
                    height: _previewDimension.toDouble(), ), ), ); } catch (e) { if
                    (kDebugMode) { debugPrint(''❌ Failed to create image preview:
                    $e''); } return _createGenericPreview(elementData); } } Future<ElementRepresentation?>
                    _createPreviewRepresentation( String elementId, Map<String, dynamic>
                    elementData, ) async { final elementType = elementData[''type'']
                    as String? ?? ''unknown''; Widget? previewWidget; switch (elementType)
                    { case ''image'': previewWidget = await _createImagePreview(elementData);
                    break; case ''text'': previewWidget = _createTextPreview(elementData);
                    break; case ''collection'': previewWidget = _createCollectionPreview(elementData);
                    break; default: previewWidget = _createGenericPreview(elementData);
                    break; } if (previewWidget == null) return null; _previewGeneratedCount++;
                    final originalSize = _estimateElementSize(elementData); final
                    optimizedSize = originalSize ~/ 4; return ElementRepresentation(
                    elementId: elementId, mode: ElementRepresentationMode.preview,
                    widget: previewWidget, metadata: ElementMetadata( originalSize:
                    originalSize, optimizedSize: optimizedSize, compressionRatio:
                    optimizedSize / originalSize, generationTime: DateTime.now(),
                    ), ); } Future<ElementRepresentation?> _createProxyRepresentation(
                    String elementId, Map<String, dynamic> elementData, ) async {
                    final proxyWidget = _createProxyWidget(elementId, elementData);
                    final originalSize = _estimateElementSize(elementData); const
                    proxySize = 1024; return ElementRepresentation( elementId: elementId,
                    mode: ElementRepresentationMode.proxy, widget: proxyWidget, metadata:
                    ElementMetadata( originalSize: originalSize, optimizedSize: proxySize,
                    compressionRatio: proxySize / originalSize, generationTime: DateTime.now(),
                    ), ); } Widget _createProxyWidget( String elementId, Map<String,
                    dynamic> elementData) { return GestureDetector( onTap: () => _loadFullRepresentation(elementId,
                    elementData), child: Container( width: _previewDimension.toDouble(),
                    height: _previewDimension.toDouble(), decoration: BoxDecoration(
                    border: Border.all(color: Colors.orange.withOpacity(0.3)), borderRadius:
                    BorderRadius.circular(4), color: Colors.orange.withOpacity(0.1),
                    ), child: Column( mainAxisAlignment: MainAxisAlignment.center,
                    children: [ Icon( Icons.cloud_download, size: 32, color: Colors.orange.withOpacity(0.7),
                    ), const SizedBox(height: 4), Text( ''Tap to load'', style: TextStyle(
                    fontSize: 10, color: Colors.orange.withOpacity(0.8), ), ), ],
                    ), ), ); } Widget _createTextPreview(Map<String, dynamic> elementData)
                    { final text = elementData[''text''] as String? ?? ''Text Element'';
                    final truncatedText = text.length > 50 ? ''${text.substring(0,
                    50)}...'' : text; return Container( width: _previewDimension.toDouble(),
                    height: (_previewDimension / 2).toDouble(), padding: const EdgeInsets.all(4),
                    decoration: BoxDecoration( border: Border.all(color: Colors.blue.withOpacity(0.3)),
                    borderRadius: BorderRadius.circular(4), color: Colors.blue.withOpacity(0.1),
                    ), child: Text( truncatedText, style: const TextStyle(fontSize:
                    10), overflow: TextOverflow.ellipsis, maxLines: 3, ), ); } ElementRepresentationMode
                    _determineOptimalRepresentationMode( String elementType, Map<String,
                    dynamic> elementData, MemoryStats memoryStats, ) { final estimatedSize
                    = _estimateElementSize(elementData); final memoryPressure = memoryStats.pressureRatio;
                    if (memoryPressure > 0.8) { return estimatedSize > _largeElementThreshold
                    ? ElementRepresentationMode.proxy : ElementRepresentationMode.compressed;
                    } if (memoryPressure > 0.6) { return estimatedSize > _largeElementThreshold
                    ? ElementRepresentationMode.compressed : ElementRepresentationMode.preview;
                    } if (estimatedSize > _largeElementThreshold * 2) { return ElementRepresentationMode.compressed;
                    } return ElementRepresentationMode.full; } int _estimateElementSize(Map<String,
                    dynamic> elementData) { final elementType = elementData[''type'']
                    as String? ?? ''unknown''; switch (elementType) { case ''image'':
                    final width = (elementData[''width''] as num?)?.toDouble() ??
                    100; final height = (elementData[''height''] as num?)?.toDouble()
                    ?? 100; return (width * height * 4).round(); case ''text'': final
                    text = elementData[''text''] as String? ?? ''''; return text.length
                    * 2; case ''collection'': final items = elementData[''items'']
                    as List? ?? []; return items.length * 1024; default: return 1024;
                    } } Future<ElementRepresentation?> _generateRepresentation( String
                    elementId, Map<String, dynamic> elementData, ElementRepresentationMode?
                    mode, ) async { final elementType = elementData[''type''] as String?
                    ?? ''unknown''; final memoryStats = _memoryManager.memoryStats;
                    final representationMode = mode ?? _determineOptimalRepresentationMode(
                    elementType, elementData, memoryStats, ); switch (representationMode)
                    { case ElementRepresentationMode.full: return await _createFullRepresentation(elementId,
                    elementData); case ElementRepresentationMode.preview: return await
                    _createPreviewRepresentation(elementId, elementData); case ElementRepresentationMode.compressed:
                    return await _createCompressedRepresentation(elementId, elementData);
                    case ElementRepresentationMode.proxy: return await _createProxyRepresentation(elementId,
                    elementData); case ElementRepresentationMode.adaptive: return
                    await _createAdaptiveRepresentation(elementId, elementData); }
                    } void _initializeRepresentationSystem() { _memoryManager.addListener(_onMemoryStateChanged);
                    if (kDebugMode) { debugPrint(''💾 MemoryEfficientElementRepresentation:
                    Initialized''); } } Future<void> _loadFullRepresentation( String
                    elementId, Map<String, dynamic> elementData) async { await createRepresentation(
                    elementId, elementData, mode: ElementRepresentationMode.full,
                    forceRegenerate: true, ); } void _onMemoryStateChanged() { final
                    memoryStats = _memoryManager.memoryStats; if (memoryStats.pressureRatio
                    > 0.8) { _optimizeExistingRepresentations(); } } void _optimizeExistingRepresentations()
                    { final representationsToOptimize = _representations.entries .where((entry)
                    => entry.value.mode == ElementRepresentationMode.full) .take(5)
                    .toList(); for (final entry in representationsToOptimize) { final
                    elementId = entry.key; Future(() async { _representations.remove(elementId);
                    }); } } Future<ElementRepresentation?> _waitForLoadingCompletion(
                    String elementId) async { while (_loadingElements.contains(elementId))
                    { await Future.delayed(const Duration(milliseconds: 100)); } return
                    _representations[elementId]; } void _throttledNotifyListeners({
                    required String operation, Map<String, dynamic>? data, }) { final
                    now = DateTime.now(); if (now.difference(_lastNotificationTime)
                    >= _notificationThrottle) { _lastNotificationTime = now; EditPageLogger.performanceInfo(
                    ''内存高效表示管理器通知'
                  file: presentation\widgets\practice\memory_efficient_element_representation.dart
                  line: 228
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - currentfpsTostringFps
                - action: create_new
                  text_zh: '拖拽帧率: ${currentFps.toString()} FPS'
                  text_en: '拖拽帧率: ${currentFps.toString()} FPS'
                  file: presentation\widgets\practice\performance_monitor.dart
                  line: 608
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - avgfpsTostringasfixedFps
                - action: create_new
                  text_zh: '平均帧率: ${avgFps.toStringAsFixed(1)} FPS'
                  text_en: '平均帧率: ${avgFps.toStringAsFixed(1)} FPS'
                  file: presentation\widgets\practice\performance_monitor.dart
                  line: 618
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - updatecountBatchupdatecount
                - action: create_new
                  text_zh: '更新次数: $updateCount (批量: $batchUpdateCount)'
                  text_en: '更新次数: $updateCount (批量: $batchUpdateCount)'
                  file: presentation\widgets\practice\performance_monitor.dart
                  line: 623
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - avgupdatetimeTostringasfixedMs
                - action: create_new
                  text_zh: '平均更新时间: ${avgUpdateTime.toStringAsFixed(2)}ms'
                  text_en: '平均更新时间: ${avgUpdateTime.toStringAsFixed(2)}ms'
                  file: presentation\widgets\practice\performance_monitor.dart
                  line: 629
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - elementcount
                - action: create_new
                  text_zh: '拖拽元素: $elementCount'
                  text_en: '拖拽元素: $elementCount'
                  file: presentation\widgets\practice\performance_monitor.dart
                  line: 637
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text性能警告帧率过低
                - action: create_new
                  text_zh: '⚠️ 性能警告: 帧率过低'
                  text_en: '⚠️ 性能警告: 帧率过低'
                  file: presentation\widgets\practice\performance_monitor.dart
                  line: 648
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text暂无内容
                - action: create_new
                  text_zh: 暂无内容
                  text_en: 暂无内容
                  file: presentation\widgets\practice\text_renderer.dart
                  line: 858
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - exporttypeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightWrapSpacingChildrenExporttypeValuesMapTypeReturnChoicechipLabelTextTypeNameSelectedTypeOnselectedSelectedIfSelectedSetstateTypeTolistWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextFilenameStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightTextfieldControllerDecorationInputdecorationHinttextBorderConstOutlineinputborderSuffixtextExporttypePdfPdfExporttypeJpgJpgPngWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextFitmodeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildRadiolisttilePdffitpolicyTitleTextFitwidthValuePdffitpolicyWidthGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueExpandedChildRadiolisttilePdffitpolicyTitleTextFitheightValuePdffitpolicyHeightGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueRadiolisttilePdffitpolicyTitleTextFitcontainValuePdffitpolicyContainGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueWidgetStringLabelIntIndexFinalApplocalizationsOfContextFinalControllerTexteditingcontrollerTextIndexTostringasfixedVoidUpdatemarginDoubleValueFinalNewvalueValueValueSetstateIndexNewvalueControllerTextNewvalueTostringasfixedControllerSelectionTextselectionFrompositionTextpositionOffsetControllerTextLengthReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextLabelConstSizedboxHeightRowChildrenExpandedChildTextfieldDecorationInputdecorationBorderConstOutlineinputborderContentpaddingConstEdgeinsetsSymmetricHorizontalVerticalSuffixtextCentimeterKeyboardtypeConstTextinputtypeNumberwithoptionsDecimalTrueTextalignTextalignCenterControllerControllerOnchangedValueTryFinalNewvalueDoubleParseValueIfNewvalueSetstateIndexNewvalueCatchEColumnMainaxissizeMainaxissizeMinMainaxisalignmentMainaxisalignmentCenterChildrenIconbuttonIconConstIconIconsPaddingEdgeinsetsZeroConstraintsConstBoxconstraintsIconsizeOnpressedUpdatemarginIndexIconbuttonIconConstIconIconsPaddingEdgeinsetsZeroConstraintsConstBoxconstraintsIconsizeOnpressedUpdatemarginIndexWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextPagemarginsStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildMargintopConstSizedboxWidthExpandedChildMarginrightConstSizedboxWidthExpandedChildMarginbottomConstSizedboxWidthExpandedChildMarginleftWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextPageorientationStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightCheckboxlisttileTitleRowChildrenConstIconIconsConstSizedboxWidthTextApplocalizationsOfContextAutodetectpageorientationValueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueIfConstSizedboxHeightRowChildrenExpandedChildRadiolisttileBoolTitleRowChildrenConstIconIconsConstSizedboxWidthFlexibleChildTextPortraitOverflowTextoverflowEllipsisValueFalseGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedNullValueSetstateValueExpandedChildRadiolisttileBoolTitleRowChildrenConstIconIconsConstSizedboxWidthFlexibleChildTextLandscapeOverflowTextoverflowEllipsisValueTrueGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedNullValueSetstateValueIfPaddingPaddingConstEdgeinsetsOnlyTopChildContainerPaddingConstEdgeinsetsAllDecorationBoxdecorationColorColorsBlueBorderradiusBorderradiusCircularBorderBorderAllColorColorsBlueChildRowChildrenIconIconsSizeColorColorsBlueConstSizedboxWidthExpandedChildTextAutodetectLandscapePortraitStyleTextstyleFontsizeColorColorsBlueWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextLocationStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildContainerPaddingConstEdgeinsetsSymmetricHorizontalVerticalDecorationBoxdecorationBorderBorderAllColorColorsGreyBorderradiusBorderradiusCircularChildTextSelectexportlocationOverflowTextoverflowEllipsisConstSizedboxWidthElevatedbuttonOnpressedChildTextBrowseWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextPagerangeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildRadiolisttilePagerangetypeTitleTextAllpagesValuePagerangetypeAllGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueIfExpandedChildRadiolisttilePagerangetypeTitleTextCurrentpageValuePagerangetypeCurrentGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueIfPagerangetypeCurrentRadiolisttilePagerangetypeTitleRowChildrenTextCustomrangeExpandedChildTextfieldControllerDecorationInputdecorationHinttextExportdialograngeexampleIsdenseTrueContentpaddingConstEdgeinsetsSymmetricHorizontalVerticalEnabledPagerangetypeCustomOnchangedValuePagerangetypeCustomGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueIfWidgetFinalApplocalizationsOfContextFinalPageformatmapPdfpageformatPdfpageformatPdfpageformatPdfpageformatLetterPdfpageformatLetterLegalPdfpageformatLegalReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextPagesizeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightDropdownbuttonformfieldPdfpageformatValueDecorationConstInputdecorationBorderOutlineinputborderContentpaddingEdgeinsetsSymmetricHorizontalVerticalItemsPageformatmapEntriesMapEntryFinalDoubleWidthcmEntryValueWidthPdfpageformatCmFinalDoubleHeightcmEntryValueHeightPdfpageformatCmReturnDropdownmenuitemPdfpageformatValueEntryValueChildTextEntryKeyWidthcmTostringasfixedHeightcmTostringasfixedCentimeterOverflowTextoverflowEllipsisTolistOnchangedValueIfValueNullSetstateValueWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextOutputqualityStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildSliderValueMinMaxDivisionsLabelOnchangedValueSetstateValueTextWidgetFinalApplocalizationsOfContextReturnContainerPaddingConstEdgeinsetsAllDecorationBoxdecorationColorColorsGreyBorderradiusBorderradiusCircularChildColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStretchChildrenRowMainaxisalignmentMainaxisalignmentCenterChildrenTextPreviewStyleConstTextstyleFontweightFontweightBoldFontsizeIfWidgetPagecountIsnotemptyTextPreviewpageWidgetPagecountStyleConstTextstyleFontsizeConstSizedboxHeightSizedboxHeightChildConstCenterChildCircularprogressindicatorNullCenterChildExporttypePdfAspectratioAspectratioWidthHeightChildContainerDecorationBoxdecorationColorColorsWhiteBoxshadowBoxshadowColorColorsGreyWithalphaSpreadradiusBlurradiusOffsetConstOffsetChildPaddingPaddingEdgeinsetsFromltrbChildImageMemoryFitImageMemoryFitBoxfitContainCenterChildTextCannotpreviewConstSizedboxHeightIfExporttypePdfCenterChildTextExportdimensionsWidthPdfpageformatCmHeightPdfpageformatCmLandscapePortraitStyleConstTextstyleFontsizeIfWidgetPagecountPaddingPaddingConstEdgeinsetsOnlyTopChildRowMainaxisalignmentMainaxisalignmentCenterChildrenIconbuttonIconConstIconIconsTooltipPreviouspageOnpressedNullTextWidgetPagecountIconbuttonIconConstIconIconsTooltipNextpageOnpressedWidgetPagecountNullBoolIntPageindexIfWidgetControllerNullReturnFalseTryFinalPagesWidgetControllerStatePagesIfPageindexPageindexPagesLengthReturnFalseFinalPagePagesPageindexIfPageContainskeyOrientationFinalOrientationPageOrientationAsStringIfOrientationNullOrientationIsnotemptyReturnOrientationTolowercaseLandscapeFinalWidthPageWidthAsNumTodoubleFinalHeightPageHeightAsNumTodoubleReturnWidthHeightCatchEEditpageloggerRenderererror
                - action: create_new
                  text_zh: '${l10n.exportType}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), Wrap( spacing: 8,
                    children: ExportType.values.map((type) { return ChoiceChip( label:
                    Text(type.name), selected: _exportType == type, onSelected: (selected)
                    { if (selected) { setState(() { _exportType = type; }); _generatePreview();
                    } }, ); }).toList(), ), ], ); } Widget _buildFileNameInput() {
                    final l10n = AppLocalizations.of(context); return Column( mainAxisSize:
                    MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.fileName}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), TextField( controller:
                    _fileNameController, decoration: InputDecoration( hintText: _getFileNameHint(),
                    border: const OutlineInputBorder(), suffixText: _exportType ==
                    ExportType.pdf ? ''.pdf'' : (_exportType == ExportType.jpg ? ''.jpg''
                    : ''.png''), ), ), ], ); } Widget _buildFitPolicySelector() {
                    final l10n = AppLocalizations.of(context); return Column( mainAxisSize:
                    MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.fitMode}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), Row( children: [
                    Expanded( child: RadioListTile<PdfFitPolicy>( title: Text(l10n.fitWidth),
                    value: PdfFitPolicy.width, groupValue: _fitPolicy, contentPadding:
                    EdgeInsets.zero, dense: true, onChanged: (value) { setState(()
                    { _fitPolicy = value!; }); _generatePreview(); }, ), ), Expanded(
                    child: RadioListTile<PdfFitPolicy>( title: Text(l10n.fitHeight),
                    value: PdfFitPolicy.height, groupValue: _fitPolicy, contentPadding:
                    EdgeInsets.zero, dense: true, onChanged: (value) { setState(()
                    { _fitPolicy = value!; }); _generatePreview(); }, ), ), ], ),
                    RadioListTile<PdfFitPolicy>( title: Text(l10n.fitContain), value:
                    PdfFitPolicy.contain, groupValue: _fitPolicy, contentPadding:
                    EdgeInsets.zero, dense: true, onChanged: (value) { setState(()
                    { _fitPolicy = value!; }); _generatePreview(); }, ), ], ); } Widget
                    _buildMarginInput(String label, int index) { final l10n = AppLocalizations.of(context);
                    final controller = TextEditingController(text: _margins[index].toStringAsFixed(1));
                    void updateMargin(double value) { final newValue = value < 0 ?
                    0.0 : value; setState(() { _margins[index] = newValue; controller.text
                    = newValue.toStringAsFixed(1); controller.selection = TextSelection.fromPosition(
                    TextPosition(offset: controller.text.length), ); }); _generatePreview();
                    } return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment:
                    CrossAxisAlignment.start, children: [ Text(label), const SizedBox(height:
                    4), Row( children: [ Expanded( child: TextField( decoration: InputDecoration(
                    border: const OutlineInputBorder(), contentPadding: const EdgeInsets.symmetric(horizontal:
                    8, vertical: 8), suffixText: l10n.centimeter, ), keyboardType:
                    const TextInputType.numberWithOptions(decimal: true), textAlign:
                    TextAlign.center, controller: controller, onChanged: (value) {
                    try { final newValue = double.parse(value); if (newValue >= 0)
                    { setState(() { _margins[index] = newValue; }); _generatePreview();
                    } } catch (e) { } }, ), ), Column( mainAxisSize: MainAxisSize.min,
                    mainAxisAlignment: MainAxisAlignment.center, children: [ IconButton(
                    icon: const Icon(Icons.arrow_drop_up), padding: EdgeInsets.zero,
                    constraints: const BoxConstraints(), iconSize: 20, onPressed:
                    () { updateMargin(_margins[index] + 0.1); }, ), IconButton( icon:
                    const Icon(Icons.arrow_drop_down), padding: EdgeInsets.zero, constraints:
                    const BoxConstraints(), iconSize: 20, onPressed: () { updateMargin(_margins[index]
                    - 0.1); }, ), ], ), ], ), ], ); } Widget _buildMarginsInput()
                    { final l10n = AppLocalizations.of(context); return Column( mainAxisSize:
                    MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.pageMargins}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), Row( children: [
                    Expanded( child: _buildMarginInput(l10n.marginTop, 0), ), const
                    SizedBox(width: 8), Expanded( child: _buildMarginInput(l10n.marginRight,
                    1), ), const SizedBox(width: 8), Expanded( child: _buildMarginInput(l10n.marginBottom,
                    2), ), const SizedBox(width: 8), Expanded( child: _buildMarginInput(l10n.marginLeft,
                    3), ), ], ), ], ); } Widget _buildOrientationSelector() { final
                    l10n = AppLocalizations.of(context); return Column( mainAxisSize:
                    MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.pageOrientation}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), CheckboxListTile(
                    title: Row( children: [ const Icon(Icons.auto_fix_high), const
                    SizedBox(width: 8), Text(AppLocalizations.of(context).autoDetectPageOrientation),
                    ], ), value: _autoDetectOrientation, contentPadding: EdgeInsets.zero,
                    dense: true, onChanged: (value) { setState(() { _autoDetectOrientation
                    = value!; if (_autoDetectOrientation) { _updateOrientation();
                    } }); _generatePreview(); }, ), const SizedBox(height: 8), Row(
                    children: [ Expanded( child: RadioListTile<bool>( title: Row(
                    children: [ const Icon(Icons.stay_current_portrait), const SizedBox(width:
                    8), Flexible( child: Text( l10n.portrait, overflow: TextOverflow.ellipsis,
                    ), ), ], ), value: false, groupValue: _isLandscape, contentPadding:
                    EdgeInsets.zero, dense: true, onChanged: _autoDetectOrientation
                    ? null : (value) { setState(() { _isLandscape = value!; }); _generatePreview();
                    }, ), ), Expanded( child: RadioListTile<bool>( title: Row( children:
                    [ const Icon(Icons.stay_current_landscape), const SizedBox(width:
                    8), Flexible( child: Text( l10n.landscape, overflow: TextOverflow.ellipsis,
                    ), ), ], ), value: true, groupValue: _isLandscape, contentPadding:
                    EdgeInsets.zero, dense: true, onChanged: _autoDetectOrientation
                    ? null : (value) { setState(() { _isLandscape = value!; }); _generatePreview();
                    }, ), ), ], ), if (_autoDetectOrientation) Padding( padding: const
                    EdgeInsets.only(top: 8.0), child: Container( padding: const EdgeInsets.all(8.0),
                    decoration: BoxDecoration( color: Colors.blue.shade50, borderRadius:
                    BorderRadius.circular(4.0), border: Border.all(color: Colors.blue.shade200),
                    ), child: Row( children: [ Icon( Icons.info_outline, size: 16,
                    color: Colors.blue.shade700, ), const SizedBox(width: 8), Expanded(
                    child: Text( ''${l10n.autoDetect}: ${_isLandscape ? l10n.landscape
                    : l10n.portrait}'', style: TextStyle( fontSize: 12, color: Colors.blue.shade700,
                    ), ), ), ], ), ), ), ], ); } Widget _buildOutputPathSelector()
                    { final l10n = AppLocalizations.of(context); return Column( mainAxisSize:
                    MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.location}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), Row( children: [
                    Expanded( child: Container( padding: const EdgeInsets.symmetric(horizontal:
                    12, vertical: 8), decoration: BoxDecoration( border: Border.all(color:
                    Colors.grey), borderRadius: BorderRadius.circular(4), ), child:
                    Text( _outputPath ?? l10n.selectExportLocation, overflow: TextOverflow.ellipsis,
                    ), ), ), const SizedBox(width: 8), ElevatedButton( onPressed:
                    _selectDirectory, child: Text(l10n.browse), ), ], ), ], ); } Widget
                    _buildPageRangeSelector() { final l10n = AppLocalizations.of(context);
                    return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment:
                    CrossAxisAlignment.start, children: [ Text(''${l10n.pageRange}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8), Row( children: [ Expanded( child: RadioListTile<PageRangeType>(
                    title: Text(l10n.allPages), value: PageRangeType.all, groupValue:
                    _pageRangeType, contentPadding: EdgeInsets.zero, dense: true,
                    onChanged: (value) { setState(() { _pageRangeType = value!; });
                    if (_autoDetectOrientation) { _updateOrientation(); } _generatePreview();
                    }, ), ), Expanded( child: RadioListTile<PageRangeType>( title:
                    Text(l10n.currentPage), value: PageRangeType.current, groupValue:
                    _pageRangeType, contentPadding: EdgeInsets.zero, dense: true,
                    onChanged: (value) { setState(() { _pageRangeType = value!; });
                    if (_pageRangeType == PageRangeType.current && _autoDetectOrientation)
                    { _updateOrientation(); } _generatePreview(); }, ), ), ], ), RadioListTile<PageRangeType>(
                    title: Row( children: [ Text(''${l10n.customRange} ''), Expanded(
                    child: TextField( controller: _pageRangeController, decoration:
                    InputDecoration( hintText: l10n.exportDialogRangeExample, isDense:
                    true, contentPadding: const EdgeInsets.symmetric( horizontal:
                    8, vertical: 8, ), ), enabled: _pageRangeType == PageRangeType.custom,
                    onChanged: (_) => _generatePreview(), ), ), ], ), value: PageRangeType.custom,
                    groupValue: _pageRangeType, contentPadding: EdgeInsets.zero, dense:
                    true, onChanged: (value) { setState(() { _pageRangeType = value!;
                    }); if (_autoDetectOrientation) { _updateOrientation(); } _generatePreview();
                    }, ), ], ); } Widget _buildPageSizeSelector() { final l10n = AppLocalizations.of(context);
                    final pageFormatMap = { ''A3'': PdfPageFormat.a3, ''A4'': PdfPageFormat.a4,
                    ''A5'': PdfPageFormat.a5, ''A6'': PdfPageFormat.a6, ''Letter'':
                    PdfPageFormat.letter, ''Legal'': PdfPageFormat.legal, }; return
                    Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.pageSize}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), DropdownButtonFormField<PdfPageFormat>(
                    value: _pageFormat, decoration: const InputDecoration( border:
                    OutlineInputBorder(), contentPadding: EdgeInsets.symmetric(horizontal:
                    12, vertical: 12), ), items: pageFormatMap.entries.map((entry)
                    { final double widthCm = entry.value.width / PdfPageFormat.cm;
                    final double heightCm = entry.value.height / PdfPageFormat.cm;
                    return DropdownMenuItem<PdfPageFormat>( value: entry.value, child:
                    Text( ''${entry.key} (${widthCm.toStringAsFixed(1)} × ${heightCm.toStringAsFixed(1)}
                    ${l10n.centimeter})'', overflow: TextOverflow.ellipsis, ), );
                    }).toList(), onChanged: (value) { if (value != null) { setState(()
                    { _pageFormat = value; }); _generatePreview(); } }, ), ], ); }
                    Widget _buildPixelRatioSelector() { final l10n = AppLocalizations.of(context);
                    return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment:
                    CrossAxisAlignment.start, children: [ Text(''${l10n.outputQuality}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8), Row( children: [ Expanded( child: Slider( value: _pixelRatio,
                    min: 1.0, max: 3.0, divisions: 2, label: _getPixelRatioLabel(),
                    onChanged: (value) { setState(() { _pixelRatio = value; }); _generatePreview();
                    }, ), ), Text(_getPixelRatioLabel()), ], ), ], ); } Widget _buildPreviewArea()
                    { final l10n = AppLocalizations.of(context); return Container(
                    padding: const EdgeInsets.all(16), decoration: BoxDecoration(
                    color: Colors.grey.shade200, borderRadius: BorderRadius.circular(8),
                    ), child: Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment:
                    CrossAxisAlignment.stretch, children: [ Row( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ Text( l10n.preview, style:
                    const TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ),
                    if (widget.pageCount > 1 && _pagePreviewCache.isNotEmpty) Text(
                    l10n.previewPage( _previewPageIndex + 1, widget.pageCount, ),
                    style: const TextStyle(fontSize: 14), ), ], ), const SizedBox(height:
                    16), SizedBox( height: 350, child: _isLoadingPreview ? const Center(child:
                    CircularProgressIndicator()) : _previewImage != null ? Center(
                    child: _exportType == ExportType.pdf ? AspectRatio( aspectRatio:
                    _getEffectivePageFormat().width / _getEffectivePageFormat().height,
                    child: Container( decoration: BoxDecoration( color: Colors.white,
                    boxShadow: [ BoxShadow( color: Colors.grey.withAlpha(128), spreadRadius:
                    1, blurRadius: 5, offset: const Offset(0, 3), ), ], ), child:
                    Padding( padding: EdgeInsets.fromLTRB( _margins[3] * 10, _margins[0]
                    * 10, _margins[1] * 10, _margins[2] * 10, ), child: Image.memory(
                    _previewImage!, fit: _getFitFromPolicy(), ), ), ), ) : Image.memory(
                    _previewImage!, fit: BoxFit.contain, ), ) : Center( child: Text(l10n.canNotPreview),
                    ), ), const SizedBox(height: 8), if (_exportType == ExportType.pdf)
                    Center( child: Text( l10n.exportDimensions( _getEffectivePageFormat().width
                    / PdfPageFormat.cm, _getEffectivePageFormat().height / PdfPageFormat.cm,
                    _isLandscape ? l10n.landscape : l10n.portrait, ), style: const
                    TextStyle(fontSize: 12), ), ), if (widget.pageCount > 1) Padding(
                    padding: const EdgeInsets.only(top: 8.0), child: Row( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ IconButton( icon: const
                    Icon(Icons.arrow_back), tooltip: l10n.previousPage, onPressed:
                    _previewPageIndex > 0 ? () => _switchPreviewPage(_previewPageIndex
                    - 1) : null, ), Text(''${_previewPageIndex + 1} / ${widget.pageCount}''),
                    IconButton( icon: const Icon(Icons.arrow_forward), tooltip: l10n.nextPage,
                    onPressed: _previewPageIndex < widget.pageCount - 1 ? () => _switchPreviewPage(_previewPageIndex
                    + 1) : null, ), ], ), ), ], ), ); } bool _detectPageOrientation(int
                    pageIndex) { if (widget.controller == null) { return false; }
                    try { final pages = widget.controller!.state.pages; if (pageIndex
                    < 0 || pageIndex >= pages.length) { return false; } final page
                    = pages[pageIndex]; if (page.containsKey(''orientation'')) { final
                    orientation = page[''orientation''] as String?; if (orientation
                    != null && orientation.isNotEmpty) { return orientation.toLowerCase()
                    == ''landscape''; } } final width = (page[''width''] as num?)?.toDouble()
                    ?? 210.0; final height = (page[''height''] as num?)?.toDouble()
                    ?? 297.0; return width > height; } catch (e) { EditPageLogger.rendererError(
                    ''检测页面方向失败'
                  text_en: '${l10n.exportType}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), Wrap( spacing: 8,
                    children: ExportType.values.map((type) { return ChoiceChip( label:
                    Text(type.name), selected: _exportType == type, onSelected: (selected)
                    { if (selected) { setState(() { _exportType = type; }); _generatePreview();
                    } }, ); }).toList(), ), ], ); } Widget _buildFileNameInput() {
                    final l10n = AppLocalizations.of(context); return Column( mainAxisSize:
                    MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.fileName}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), TextField( controller:
                    _fileNameController, decoration: InputDecoration( hintText: _getFileNameHint(),
                    border: const OutlineInputBorder(), suffixText: _exportType ==
                    ExportType.pdf ? ''.pdf'' : (_exportType == ExportType.jpg ? ''.jpg''
                    : ''.png''), ), ), ], ); } Widget _buildFitPolicySelector() {
                    final l10n = AppLocalizations.of(context); return Column( mainAxisSize:
                    MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.fitMode}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), Row( children: [
                    Expanded( child: RadioListTile<PdfFitPolicy>( title: Text(l10n.fitWidth),
                    value: PdfFitPolicy.width, groupValue: _fitPolicy, contentPadding:
                    EdgeInsets.zero, dense: true, onChanged: (value) { setState(()
                    { _fitPolicy = value!; }); _generatePreview(); }, ), ), Expanded(
                    child: RadioListTile<PdfFitPolicy>( title: Text(l10n.fitHeight),
                    value: PdfFitPolicy.height, groupValue: _fitPolicy, contentPadding:
                    EdgeInsets.zero, dense: true, onChanged: (value) { setState(()
                    { _fitPolicy = value!; }); _generatePreview(); }, ), ), ], ),
                    RadioListTile<PdfFitPolicy>( title: Text(l10n.fitContain), value:
                    PdfFitPolicy.contain, groupValue: _fitPolicy, contentPadding:
                    EdgeInsets.zero, dense: true, onChanged: (value) { setState(()
                    { _fitPolicy = value!; }); _generatePreview(); }, ), ], ); } Widget
                    _buildMarginInput(String label, int index) { final l10n = AppLocalizations.of(context);
                    final controller = TextEditingController(text: _margins[index].toStringAsFixed(1));
                    void updateMargin(double value) { final newValue = value < 0 ?
                    0.0 : value; setState(() { _margins[index] = newValue; controller.text
                    = newValue.toStringAsFixed(1); controller.selection = TextSelection.fromPosition(
                    TextPosition(offset: controller.text.length), ); }); _generatePreview();
                    } return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment:
                    CrossAxisAlignment.start, children: [ Text(label), const SizedBox(height:
                    4), Row( children: [ Expanded( child: TextField( decoration: InputDecoration(
                    border: const OutlineInputBorder(), contentPadding: const EdgeInsets.symmetric(horizontal:
                    8, vertical: 8), suffixText: l10n.centimeter, ), keyboardType:
                    const TextInputType.numberWithOptions(decimal: true), textAlign:
                    TextAlign.center, controller: controller, onChanged: (value) {
                    try { final newValue = double.parse(value); if (newValue >= 0)
                    { setState(() { _margins[index] = newValue; }); _generatePreview();
                    } } catch (e) { } }, ), ), Column( mainAxisSize: MainAxisSize.min,
                    mainAxisAlignment: MainAxisAlignment.center, children: [ IconButton(
                    icon: const Icon(Icons.arrow_drop_up), padding: EdgeInsets.zero,
                    constraints: const BoxConstraints(), iconSize: 20, onPressed:
                    () { updateMargin(_margins[index] + 0.1); }, ), IconButton( icon:
                    const Icon(Icons.arrow_drop_down), padding: EdgeInsets.zero, constraints:
                    const BoxConstraints(), iconSize: 20, onPressed: () { updateMargin(_margins[index]
                    - 0.1); }, ), ], ), ], ), ], ); } Widget _buildMarginsInput()
                    { final l10n = AppLocalizations.of(context); return Column( mainAxisSize:
                    MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.pageMargins}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), Row( children: [
                    Expanded( child: _buildMarginInput(l10n.marginTop, 0), ), const
                    SizedBox(width: 8), Expanded( child: _buildMarginInput(l10n.marginRight,
                    1), ), const SizedBox(width: 8), Expanded( child: _buildMarginInput(l10n.marginBottom,
                    2), ), const SizedBox(width: 8), Expanded( child: _buildMarginInput(l10n.marginLeft,
                    3), ), ], ), ], ); } Widget _buildOrientationSelector() { final
                    l10n = AppLocalizations.of(context); return Column( mainAxisSize:
                    MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.pageOrientation}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), CheckboxListTile(
                    title: Row( children: [ const Icon(Icons.auto_fix_high), const
                    SizedBox(width: 8), Text(AppLocalizations.of(context).autoDetectPageOrientation),
                    ], ), value: _autoDetectOrientation, contentPadding: EdgeInsets.zero,
                    dense: true, onChanged: (value) { setState(() { _autoDetectOrientation
                    = value!; if (_autoDetectOrientation) { _updateOrientation();
                    } }); _generatePreview(); }, ), const SizedBox(height: 8), Row(
                    children: [ Expanded( child: RadioListTile<bool>( title: Row(
                    children: [ const Icon(Icons.stay_current_portrait), const SizedBox(width:
                    8), Flexible( child: Text( l10n.portrait, overflow: TextOverflow.ellipsis,
                    ), ), ], ), value: false, groupValue: _isLandscape, contentPadding:
                    EdgeInsets.zero, dense: true, onChanged: _autoDetectOrientation
                    ? null : (value) { setState(() { _isLandscape = value!; }); _generatePreview();
                    }, ), ), Expanded( child: RadioListTile<bool>( title: Row( children:
                    [ const Icon(Icons.stay_current_landscape), const SizedBox(width:
                    8), Flexible( child: Text( l10n.landscape, overflow: TextOverflow.ellipsis,
                    ), ), ], ), value: true, groupValue: _isLandscape, contentPadding:
                    EdgeInsets.zero, dense: true, onChanged: _autoDetectOrientation
                    ? null : (value) { setState(() { _isLandscape = value!; }); _generatePreview();
                    }, ), ), ], ), if (_autoDetectOrientation) Padding( padding: const
                    EdgeInsets.only(top: 8.0), child: Container( padding: const EdgeInsets.all(8.0),
                    decoration: BoxDecoration( color: Colors.blue.shade50, borderRadius:
                    BorderRadius.circular(4.0), border: Border.all(color: Colors.blue.shade200),
                    ), child: Row( children: [ Icon( Icons.info_outline, size: 16,
                    color: Colors.blue.shade700, ), const SizedBox(width: 8), Expanded(
                    child: Text( ''${l10n.autoDetect}: ${_isLandscape ? l10n.landscape
                    : l10n.portrait}'', style: TextStyle( fontSize: 12, color: Colors.blue.shade700,
                    ), ), ), ], ), ), ), ], ); } Widget _buildOutputPathSelector()
                    { final l10n = AppLocalizations.of(context); return Column( mainAxisSize:
                    MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.location}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), Row( children: [
                    Expanded( child: Container( padding: const EdgeInsets.symmetric(horizontal:
                    12, vertical: 8), decoration: BoxDecoration( border: Border.all(color:
                    Colors.grey), borderRadius: BorderRadius.circular(4), ), child:
                    Text( _outputPath ?? l10n.selectExportLocation, overflow: TextOverflow.ellipsis,
                    ), ), ), const SizedBox(width: 8), ElevatedButton( onPressed:
                    _selectDirectory, child: Text(l10n.browse), ), ], ), ], ); } Widget
                    _buildPageRangeSelector() { final l10n = AppLocalizations.of(context);
                    return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment:
                    CrossAxisAlignment.start, children: [ Text(''${l10n.pageRange}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8), Row( children: [ Expanded( child: RadioListTile<PageRangeType>(
                    title: Text(l10n.allPages), value: PageRangeType.all, groupValue:
                    _pageRangeType, contentPadding: EdgeInsets.zero, dense: true,
                    onChanged: (value) { setState(() { _pageRangeType = value!; });
                    if (_autoDetectOrientation) { _updateOrientation(); } _generatePreview();
                    }, ), ), Expanded( child: RadioListTile<PageRangeType>( title:
                    Text(l10n.currentPage), value: PageRangeType.current, groupValue:
                    _pageRangeType, contentPadding: EdgeInsets.zero, dense: true,
                    onChanged: (value) { setState(() { _pageRangeType = value!; });
                    if (_pageRangeType == PageRangeType.current && _autoDetectOrientation)
                    { _updateOrientation(); } _generatePreview(); }, ), ), ], ), RadioListTile<PageRangeType>(
                    title: Row( children: [ Text(''${l10n.customRange} ''), Expanded(
                    child: TextField( controller: _pageRangeController, decoration:
                    InputDecoration( hintText: l10n.exportDialogRangeExample, isDense:
                    true, contentPadding: const EdgeInsets.symmetric( horizontal:
                    8, vertical: 8, ), ), enabled: _pageRangeType == PageRangeType.custom,
                    onChanged: (_) => _generatePreview(), ), ), ], ), value: PageRangeType.custom,
                    groupValue: _pageRangeType, contentPadding: EdgeInsets.zero, dense:
                    true, onChanged: (value) { setState(() { _pageRangeType = value!;
                    }); if (_autoDetectOrientation) { _updateOrientation(); } _generatePreview();
                    }, ), ], ); } Widget _buildPageSizeSelector() { final l10n = AppLocalizations.of(context);
                    final pageFormatMap = { ''A3'': PdfPageFormat.a3, ''A4'': PdfPageFormat.a4,
                    ''A5'': PdfPageFormat.a5, ''A6'': PdfPageFormat.a6, ''Letter'':
                    PdfPageFormat.letter, ''Legal'': PdfPageFormat.legal, }; return
                    Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text(''${l10n.pageSize}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8), DropdownButtonFormField<PdfPageFormat>(
                    value: _pageFormat, decoration: const InputDecoration( border:
                    OutlineInputBorder(), contentPadding: EdgeInsets.symmetric(horizontal:
                    12, vertical: 12), ), items: pageFormatMap.entries.map((entry)
                    { final double widthCm = entry.value.width / PdfPageFormat.cm;
                    final double heightCm = entry.value.height / PdfPageFormat.cm;
                    return DropdownMenuItem<PdfPageFormat>( value: entry.value, child:
                    Text( ''${entry.key} (${widthCm.toStringAsFixed(1)} × ${heightCm.toStringAsFixed(1)}
                    ${l10n.centimeter})'', overflow: TextOverflow.ellipsis, ), );
                    }).toList(), onChanged: (value) { if (value != null) { setState(()
                    { _pageFormat = value; }); _generatePreview(); } }, ), ], ); }
                    Widget _buildPixelRatioSelector() { final l10n = AppLocalizations.of(context);
                    return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment:
                    CrossAxisAlignment.start, children: [ Text(''${l10n.outputQuality}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8), Row( children: [ Expanded( child: Slider( value: _pixelRatio,
                    min: 1.0, max: 3.0, divisions: 2, label: _getPixelRatioLabel(),
                    onChanged: (value) { setState(() { _pixelRatio = value; }); _generatePreview();
                    }, ), ), Text(_getPixelRatioLabel()), ], ), ], ); } Widget _buildPreviewArea()
                    { final l10n = AppLocalizations.of(context); return Container(
                    padding: const EdgeInsets.all(16), decoration: BoxDecoration(
                    color: Colors.grey.shade200, borderRadius: BorderRadius.circular(8),
                    ), child: Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment:
                    CrossAxisAlignment.stretch, children: [ Row( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ Text( l10n.preview, style:
                    const TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ),
                    if (widget.pageCount > 1 && _pagePreviewCache.isNotEmpty) Text(
                    l10n.previewPage( _previewPageIndex + 1, widget.pageCount, ),
                    style: const TextStyle(fontSize: 14), ), ], ), const SizedBox(height:
                    16), SizedBox( height: 350, child: _isLoadingPreview ? const Center(child:
                    CircularProgressIndicator()) : _previewImage != null ? Center(
                    child: _exportType == ExportType.pdf ? AspectRatio( aspectRatio:
                    _getEffectivePageFormat().width / _getEffectivePageFormat().height,
                    child: Container( decoration: BoxDecoration( color: Colors.white,
                    boxShadow: [ BoxShadow( color: Colors.grey.withAlpha(128), spreadRadius:
                    1, blurRadius: 5, offset: const Offset(0, 3), ), ], ), child:
                    Padding( padding: EdgeInsets.fromLTRB( _margins[3] * 10, _margins[0]
                    * 10, _margins[1] * 10, _margins[2] * 10, ), child: Image.memory(
                    _previewImage!, fit: _getFitFromPolicy(), ), ), ), ) : Image.memory(
                    _previewImage!, fit: BoxFit.contain, ), ) : Center( child: Text(l10n.canNotPreview),
                    ), ), const SizedBox(height: 8), if (_exportType == ExportType.pdf)
                    Center( child: Text( l10n.exportDimensions( _getEffectivePageFormat().width
                    / PdfPageFormat.cm, _getEffectivePageFormat().height / PdfPageFormat.cm,
                    _isLandscape ? l10n.landscape : l10n.portrait, ), style: const
                    TextStyle(fontSize: 12), ), ), if (widget.pageCount > 1) Padding(
                    padding: const EdgeInsets.only(top: 8.0), child: Row( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ IconButton( icon: const
                    Icon(Icons.arrow_back), tooltip: l10n.previousPage, onPressed:
                    _previewPageIndex > 0 ? () => _switchPreviewPage(_previewPageIndex
                    - 1) : null, ), Text(''${_previewPageIndex + 1} / ${widget.pageCount}''),
                    IconButton( icon: const Icon(Icons.arrow_forward), tooltip: l10n.nextPage,
                    onPressed: _previewPageIndex < widget.pageCount - 1 ? () => _switchPreviewPage(_previewPageIndex
                    + 1) : null, ), ], ), ), ], ), ); } bool _detectPageOrientation(int
                    pageIndex) { if (widget.controller == null) { return false; }
                    try { final pages = widget.controller!.state.pages; if (pageIndex
                    < 0 || pageIndex >= pages.length) { return false; } final page
                    = pages[pageIndex]; if (page.containsKey(''orientation'')) { final
                    orientation = page[''orientation''] as String?; if (orientation
                    != null && orientation.isNotEmpty) { return orientation.toLowerCase()
                    == ''landscape''; } } final width = (page[''width''] as num?)?.toDouble()
                    ?? 210.0; final height = (page[''height''] as num?)?.toDouble()
                    ?? 297.0; return width > height; } catch (e) { EditPageLogger.rendererError(
                    ''检测页面方向失败'
                  file: presentation\widgets\practice\export\export_dialog.dart
                  line: 229
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - createexportdirectoryfailedEReturnSetstateTrueFinalExtraparamsStringDynamicIfExporttypePdfFinalPageformatExtraparamsPageformatPageformatExtraparamsPagerangetypeIfPagerangetypeCurrentExtraparamsCurrentpageWidgetCurrentpageindexElseIfPagerangetypeCustomExtraparamsPagerangeTextExtraparamsMarginsExtraparamsFitpolicyDebugprintExportdialogNameFilenameExtraparams
                - action: create_new
                  text_zh: '${l10n.createExportDirectoryFailed}: $e'')), ); return;
                    } } setState(() { _isExporting = true; }); final extraParams =
                    <String, dynamic>{}; if (_exportType == ExportType.pdf) { final
                    pageFormat = _getEffectivePageFormat(); extraParams[''pageFormat'']
                    = pageFormat; extraParams[''pageRangeType''] = _pageRangeType;
                    if (_pageRangeType == PageRangeType.current) { extraParams[''currentPage'']
                    = widget.currentPageIndex; } else if (_pageRangeType == PageRangeType.custom)
                    { extraParams[''pageRange''] = _pageRangeController.text; } extraParams[''margins'']
                    = _margins; extraParams[''fitPolicy''] = _fitPolicy; } debugPrint(
                    ''ExportDialog: 调用导出回调, 路径=$_outputPath, 类型=${_exportType.name},
                    文件名=$fileName, 像素比例=$_pixelRatio, 额外参数=$extraParams'
                  text_en: '${l10n.createExportDirectoryFailed}: $e'')), ); return;
                    } } setState(() { _isExporting = true; }); final extraParams =
                    <String, dynamic>{}; if (_exportType == ExportType.pdf) { final
                    pageFormat = _getEffectivePageFormat(); extraParams[''pageFormat'']
                    = pageFormat; extraParams[''pageRangeType''] = _pageRangeType;
                    if (_pageRangeType == PageRangeType.current) { extraParams[''currentPage'']
                    = widget.currentPageIndex; } else if (_pageRangeType == PageRangeType.custom)
                    { extraParams[''pageRange''] = _pageRangeController.text; } extraParams[''margins'']
                    = _margins; extraParams[''fitPolicy''] = _fitPolicy; } debugPrint(
                    ''ExportDialog: 调用导出回调, 路径=$_outputPath, 类型=${_exportType.name},
                    文件名=$fileName, 像素比例=$_pixelRatio, 额外参数=$extraParams'
                  file: presentation\widgets\practice\export\export_dialog.dart
                  line: 993
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - styleTextthemeBodysmallTextStyleTextthemeBodysmallTextStyleTextthemeBodysmallWidgetRequiredBuildcontextContextRequiredStringTitleListWidgetChildrenConstWidgetBoolInitiallyexpandedFalseFinalColorschemeThemeOfContextColorschemeFinalTextthemeThemeOfContextTextthemeReturnMaterialColorColorsTransparentChildThemeDataThemeOfContextCopywithDividercolorColorsTransparentChildExpansiontileTitleTextTitleStyleTextthemeTitlemediumCopywithColorColorschemeOnsurfaceInitiallyexpandedInitiallyexpandedCollapsediconcolorColorschemeOnsurfacevariantIconcolorColorschemePrimaryBackgroundcolorColorschemeSurfacecontainerlowCollapsedbackgroundcolorColorschemeSurfacecontainerlowChildrenpaddingEdgeinsetsZeroChildrenChildrenWidgetRequiredBuildcontextContextRequiredStringLabelRequiredDoubleValueStringSuffixRequiredFunctionDoubleOnchangedFinalColorschemeThemeOfContextColorschemeFinalTextthemeThemeOfContextTextthemeFinalStringKeyLabelFinalStringValuestrValueTostringasfixedIfContainskeyKeyKeyTexteditingcontrollerTextValuestrElseIfKeyTextValuestrWidgetsbindingInstanceAddpostframecallbackIfContainskeyKeyKeyValueTexteditingvalueTextValuestrSelectionKeySelectionReturnColumnCrossaxisalignmentCrossaxisalignmentStartChildrenTextLabelStyleTextthemeBodymediumCopywithColorColorschemeOnsurfacevariantConstSizedboxHeightTextfieldControllerKeyKeyboardtypeTextinputtypeNumberDecorationInputdecorationIsdenseTrueContentpaddingConstEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderBorderradiusBorderradiusCircularBordersideBordersideColorColorschemeOutlineEnabledborderOutlineinputborderBorderradiusBorderradiusCircularBordersideBordersideColorColorschemeOutlineFocusedborderOutlineinputborderBorderradiusBorderradiusCircularBordersideBordersideColorColorschemePrimaryWidthSuffixtextSuffixOnchangedTextIfIsactiveFalseCancelIfTextReturnEditpageloggerPropertypaneldebug
                - action: create_new
                  text_zh: '0%'', style: textTheme.bodySmall), Text(''50%'', style:
                    textTheme.bodySmall), Text(''100%'', style: textTheme.bodySmall),
                    ], ), ], ); }, ), ], ), ), ], ); } Widget m3ExpansionTile({ required
                    BuildContext context, required String title, List<Widget> children
                    = const <Widget>[], bool initiallyExpanded = false, }) { final
                    colorScheme = Theme.of(context).colorScheme; final textTheme =
                    Theme.of(context).textTheme; return Material( color: Colors.transparent,
                    child: Theme( data: Theme.of(context).copyWith( dividerColor:
                    Colors.transparent, ), child: ExpansionTile( title: Text( title,
                    style: textTheme.titleMedium?.copyWith( color: colorScheme.onSurface,
                    ), ), initiallyExpanded: initiallyExpanded, collapsedIconColor:
                    colorScheme.onSurfaceVariant, iconColor: colorScheme.primary,
                    backgroundColor: colorScheme.surfaceContainerLow, collapsedBackgroundColor:
                    colorScheme.surfaceContainerLow, childrenPadding: EdgeInsets.zero,
                    children: children, ), ), ); } Widget _buildOptimizedNumberField({
                    required BuildContext context, required String label, required
                    double value, String? suffix, required Function(double) onChanged,
                    }) { final colorScheme = Theme.of(context).colorScheme; final
                    textTheme = Theme.of(context).textTheme; final String key = label;
                    final String valueStr = value.toStringAsFixed(0); if (!_numberControllers.containsKey(key))
                    { _numberControllers[key] = TextEditingController(text: valueStr);
                    } else { if (_numberControllers[key]!.text != valueStr) { WidgetsBinding.instance.addPostFrameCallback((_)
                    { if (_numberControllers.containsKey(key)) { _numberControllers[key]!.value
                    = TextEditingValue( text: valueStr, selection: _numberControllers[key]!.selection,
                    ); } }); } } return Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text( label, style: textTheme.bodyMedium?.copyWith(
                    color: colorScheme.onSurfaceVariant, ), ), const SizedBox(height:
                    4.0), TextField( controller: _numberControllers[key], keyboardType:
                    TextInputType.number, decoration: InputDecoration( isDense: true,
                    contentPadding: const EdgeInsets.symmetric( horizontal: 12.0,
                    vertical: 8.0, ), border: OutlineInputBorder( borderRadius: BorderRadius.circular(8.0),
                    borderSide: BorderSide( color: colorScheme.outline, ), ), enabledBorder:
                    OutlineInputBorder( borderRadius: BorderRadius.circular(8.0),
                    borderSide: BorderSide( color: colorScheme.outline, ), ), focusedBorder:
                    OutlineInputBorder( borderRadius: BorderRadius.circular(8.0),
                    borderSide: BorderSide( color: colorScheme.primary, width: 2.0,
                    ), ), suffixText: suffix, ), onChanged: (text) { if (_debounceTimer?.isActive
                    ?? false) { _debounceTimer!.cancel(); } if (text == _lastProcessedValue)
                    { return; } EditPageLogger.propertyPanelDebug( ''数字输入字段变更'
                  text_en: '0%'', style: textTheme.bodySmall), Text(''50%'', style:
                    textTheme.bodySmall), Text(''100%'', style: textTheme.bodySmall),
                    ], ), ], ); }, ), ], ), ), ], ); } Widget m3ExpansionTile({ required
                    BuildContext context, required String title, List<Widget> children
                    = const <Widget>[], bool initiallyExpanded = false, }) { final
                    colorScheme = Theme.of(context).colorScheme; final textTheme =
                    Theme.of(context).textTheme; return Material( color: Colors.transparent,
                    child: Theme( data: Theme.of(context).copyWith( dividerColor:
                    Colors.transparent, ), child: ExpansionTile( title: Text( title,
                    style: textTheme.titleMedium?.copyWith( color: colorScheme.onSurface,
                    ), ), initiallyExpanded: initiallyExpanded, collapsedIconColor:
                    colorScheme.onSurfaceVariant, iconColor: colorScheme.primary,
                    backgroundColor: colorScheme.surfaceContainerLow, collapsedBackgroundColor:
                    colorScheme.surfaceContainerLow, childrenPadding: EdgeInsets.zero,
                    children: children, ), ), ); } Widget _buildOptimizedNumberField({
                    required BuildContext context, required String label, required
                    double value, String? suffix, required Function(double) onChanged,
                    }) { final colorScheme = Theme.of(context).colorScheme; final
                    textTheme = Theme.of(context).textTheme; final String key = label;
                    final String valueStr = value.toStringAsFixed(0); if (!_numberControllers.containsKey(key))
                    { _numberControllers[key] = TextEditingController(text: valueStr);
                    } else { if (_numberControllers[key]!.text != valueStr) { WidgetsBinding.instance.addPostFrameCallback((_)
                    { if (_numberControllers.containsKey(key)) { _numberControllers[key]!.value
                    = TextEditingValue( text: valueStr, selection: _numberControllers[key]!.selection,
                    ); } }); } } return Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Text( label, style: textTheme.bodyMedium?.copyWith(
                    color: colorScheme.onSurfaceVariant, ), ), const SizedBox(height:
                    4.0), TextField( controller: _numberControllers[key], keyboardType:
                    TextInputType.number, decoration: InputDecoration( isDense: true,
                    contentPadding: const EdgeInsets.symmetric( horizontal: 12.0,
                    vertical: 8.0, ), border: OutlineInputBorder( borderRadius: BorderRadius.circular(8.0),
                    borderSide: BorderSide( color: colorScheme.outline, ), ), enabledBorder:
                    OutlineInputBorder( borderRadius: BorderRadius.circular(8.0),
                    borderSide: BorderSide( color: colorScheme.outline, ), ), focusedBorder:
                    OutlineInputBorder( borderRadius: BorderRadius.circular(8.0),
                    borderSide: BorderSide( color: colorScheme.primary, width: 2.0,
                    ), ), suffixText: suffix, ), onChanged: (text) { if (_debounceTimer?.isActive
                    ?? false) { _debounceTimer!.cancel(); } if (text == _lastProcessedValue)
                    { return; } EditPageLogger.propertyPanelDebug( ''数字输入字段变更'
                  file: presentation\widgets\practice\property_panels\m3_practice_property_panel_base.dart
                  line: 172
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - nameStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextNameStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightTrailingIconbuttonIconConstIconIconsEditTooltipRenameOnpressedConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileTitleTextElementsStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextChildrenLengthElementsStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightConstSizedboxHeightIfLayerNullCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileTitleTextLayerStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextLayerNameAsStringStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightTrailingIconbuttonIconConstIconIconsLaunchTooltipSelecttargetlayerOnpressedIfLayeridNullWidgetControllerSelectlayerLayeridConstSizedboxHeightCardMarginConstEdgeinsetsSymmetricHorizontalVerticalElevationColorColorschemeSurfacecontainerlowShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowChildrenIconIconsVisibilitySizeColorColorschemePrimaryConstSizedboxWidthTextStateanddisplayStyleTextthemeTitlemediumCopywithFontweightFontweightBoldColorColorschemeOnsurfaceConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextLockedStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldValueIslockedActivecolorColorschemePrimaryOnchangedValueLockedValueSecondaryIconIslockedIconsLockIconsColorIslockedColorschemePrimaryColorschemeOnsurfacevariantConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextVisibleStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldValueIshiddenActivecolorColorschemePrimaryOnchangedValueHiddenValueSecondaryIconIshiddenIconsIconsVisibilityColorIshiddenColorschemeOnsurfacevariantColorschemePrimaryConstSizedboxHeightColumnCrossaxisalignmentCrossaxisalignmentStartChildrenTextOpacityStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowChildrenExpandedChildSliderValueOpacityMinMaxDivisionsLabelOpacityRoundActivecolorColorschemePrimaryThumbcolorColorschemePrimaryOnchangedValueOpacityValueSizedboxWidthChildTextOpacityRoundStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldTextalignTextalignCenterConstSizedboxHeightCardMarginConstEdgeinsetsSymmetricHorizontalVerticalElevationColorColorschemeSurfacecontainerlowShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowChildrenIconIconsCategorySizeColorColorschemePrimaryConstSizedboxWidthTextGroupoperationsStyleTextthemeTitlemediumCopywithFontweightFontweightBoldColorColorschemeOnsurfaceConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnChildrenListtileLeadingIconIconsEditColorColorschemePrimaryTitleTextEditgroupcontentsStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldSubtitleTextEditgroupcontentsdescriptionStyleTextstyleColorColorschemeOnsurfacevariantOntapConstDividerListtileLeadingIconIconsColorColorschemePrimaryTitleTextUngroupStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldSubtitleTextUngroupdescriptionStyleTextstyleColorColorschemeOnsurfacevariantOntapConstSizedboxHeightCardMarginConstEdgeinsetsSymmetricHorizontalVerticalElevationColorColorschemeSurfacecontainerlowShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowChildrenIconIconsSizeColorColorschemeErrorConstSizedboxWidthTextDangerzoneStyleTextthemeTitlemediumCopywithFontweightFontweightBoldColorColorschemeErrorConstSizedboxHeightElevatedbuttonIconOnpressedIconIconIconsDeleteColorColorschemeErrorSizeLabelTextDeletegroupStyleTextthemeLabellargeCopywithColorColorschemeErrorStyleElevatedbuttonStylefromBackgroundcolorColorschemeErrorcontainerForegroundcolorColorschemeErrorMinimumsizeConstSizeFromheightIfChildrenIsnotemptyConstSizedboxHeightCardMarginConstEdgeinsetsSymmetricHorizontalVerticalElevationColorColorschemeSurfacecontainerlowShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowChildrenIconIconsSizeColorColorschemePrimaryConstSizedboxWidthTextGroupelementsStyleTextthemeTitlemediumCopywithFontweightFontweightBoldColorColorschemeOnsurfaceConstSizedboxHeightListviewBuilderShrinkwrapTruePhysicsConstNeverscrollablescrollphysicsItemcountChildrenLengthItembuilderContextIndexFinalElementChildrenIndexFinalElementnameElementNameAsStringUnnamedelementFinalTypeElementTypeAsStringFinalIshiddenElementHiddenAsBoolFalseFinalIslockedElementLockedAsBoolFalseFinalOpacityElementOpacityAsNumTodoubleIcondataIcondataSwitchTypeCaseTextIcondataIconsBreakCaseImageIcondataIconsImageBreakCaseCollectionIcondataIconsBreakCaseGroupIcondataIconsBreakDefaultIcondataIconsReturnCardMarginConstEdgeinsetsSymmetricVerticalHorizontalElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileLeadingIconIcondataColorColorschemeOnsurfacevariantTitleTextElementnameOverflowTextoverflowEllipsisStyleTextthemeBodymediumCopywithColorColorschemeOnsurfaceFontweightFontweightSubtitleTextOpacityOpacityRoundStyleTextthemeBodysmallCopywithColorColorschemeOnsurfacevariantTrailingRowMainaxissizeMainaxissizeMinChildrenIconIshiddenIconsIconsVisibilitySizeColorIshiddenColorschemeOnsurfacevariantColorschemePrimaryConstSizedboxWidthIconIslockedIconsLockIconsSizeColorIslockedColorschemePrimaryColorschemeOnsurfacevariantOverrideVoidDidupdatewidgetOldwidgetSuperDidupdatewidgetOldwidgetIfOldwidgetElementIdWidgetElementIdFinalNameWidgetElementNameAsStringGroupTextNameFalseOverrideVoidDisposeRemovelistenerDisposeDisposeSuperDisposeOverrideVoidInitstateSuperInitstateFinalNameWidgetElementNameAsStringGroupTexteditingcontrollerTextNameFocusnodeAddlistenerVoidFinalNewnameTextTrimFinalGroupidWidgetElementIdAsStringFinalOldnameWidgetElementNameAsStringGroupIfNewnameIsnotemptyNewnameOldnameEditpageloggerPropertypaneldebug
                - action: create_new
                  text_zh: '${l10n.name}:'', style: const TextStyle( fontWeight: FontWeight.bold,
                    fontSize: 14, ), ), subtitle: Text( name, style: TextStyle( fontSize:
                    16, color: colorScheme.onSurface, fontWeight: FontWeight.w500,
                    ), ), trailing: IconButton( icon: const Icon(Icons.edit), tooltip:
                    l10n.rename, onPressed: _startEditingName, ), ), ), const SizedBox(height:
                    8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: ListTile( title: Text( ''${l10n.elements}:'', style:
                    const TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ),
                    ), subtitle: Text( ''${children.length} ${l10n.elements}'', style:
                    TextStyle( fontSize: 16, color: colorScheme.onSurface, fontWeight:
                    FontWeight.w500, ), ), ), ), const SizedBox(height: 8), if (layer
                    != null) Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: ListTile( title: Text( ''${l10n.layer}:'', style: const
                    TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ), ), subtitle:
                    Text( layer[''name''] as String? ?? l10n.layer1, style: TextStyle(
                    fontSize: 16, color: colorScheme.onSurface, fontWeight: FontWeight.w500,
                    ), ), trailing: IconButton( icon: const Icon(Icons.launch), tooltip:
                    l10n.selectTargetLayer, onPressed: () { if (layerId != null) {
                    widget.controller.selectLayer(layerId); } }, ), ), ), ], ), ),
                    ), const SizedBox(height: 8), Card( margin: const EdgeInsets.symmetric(horizontal:
                    8.0, vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(16.0), child:
                    Column( crossAxisAlignment: CrossAxisAlignment.start, children:
                    [ Row( children: [ Icon( Icons.visibility, size: 20, color: colorScheme.primary,
                    ), const SizedBox(width: 8), Text( l10n.stateAndDisplay, style:
                    textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold,
                    color: colorScheme.onSurface, ), ), ], ), const SizedBox(height:
                    16), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: SwitchListTile( title: Text( l10n.locked, style: TextStyle(
                    color: colorScheme.onSurface, fontWeight: FontWeight.bold, ),
                    ), value: isLocked, activeColor: colorScheme.primary, onChanged:
                    (value) { _updateElementProperty(''locked'', value); }, secondary:
                    Icon( isLocked ? Icons.lock : Icons.lock_open, color: isLocked
                    ? colorScheme.primary : colorScheme.onSurfaceVariant, ), ), ),
                    const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: SwitchListTile( title: Text( l10n.visible, style: TextStyle(
                    color: colorScheme.onSurface, fontWeight: FontWeight.bold, ),
                    ), value: !isHidden, activeColor: colorScheme.primary, onChanged:
                    (value) { _updateElementProperty(''hidden'', !value); }, secondary:
                    Icon( isHidden ? Icons.visibility_off : Icons.visibility, color:
                    isHidden ? colorScheme.onSurfaceVariant : colorScheme.primary,
                    ), ), ), const SizedBox(height: 16), Column( crossAxisAlignment:
                    CrossAxisAlignment.start, children: [ Text( ''${l10n.opacity}:'',
                    style: const TextStyle( fontWeight: FontWeight.bold, ), ), const
                    SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    Row( children: [ Expanded( child: Slider( value: opacity, min:
                    0.0, max: 1.0, divisions: 100, label: ''${(opacity * 100).round()}%'',
                    activeColor: colorScheme.primary, thumbColor: colorScheme.primary,
                    onChanged: (value) { _updateElementProperty(''opacity'', value);
                    }, ), ), SizedBox( width: 50, child: Text( ''${(opacity * 100).round()}%'',
                    style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold,
                    ), textAlign: TextAlign.center, ), ), ], ), ), ), ], ), ], ),
                    ), ), const SizedBox(height: 8), Card( margin: const EdgeInsets.symmetric(horizontal:
                    8.0, vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(16.0), child:
                    Column( crossAxisAlignment: CrossAxisAlignment.start, children:
                    [ Row( children: [ Icon( Icons.category, size: 20, color: colorScheme.primary,
                    ), const SizedBox(width: 8), Text( l10n.groupOperations, style:
                    textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold,
                    color: colorScheme.onSurface, ), ), ], ), const SizedBox(height:
                    16), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    Column( children: [ ListTile( leading: Icon( Icons.edit, color:
                    colorScheme.primary, ), title: Text( l10n.editGroupContents, style:
                    TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold,
                    ), ), subtitle: Text( l10n.editGroupContentsDescription, style:
                    TextStyle( color: colorScheme.onSurfaceVariant, ), ), onTap: ()
                    { _enterGroupEditMode(); }, ), const Divider(), ListTile( leading:
                    Icon( Icons.unfold_more, color: colorScheme.primary, ), title:
                    Text( l10n.ungroup, style: TextStyle( color: colorScheme.onSurface,
                    fontWeight: FontWeight.bold, ), ), subtitle: Text( l10n.ungroupDescription,
                    style: TextStyle( color: colorScheme.onSurfaceVariant, ), ), onTap:
                    () { _ungroupElements(); }, ), ], ), ), ), ], ), ), ), const SizedBox(height:
                    8), Card( margin: const EdgeInsets.symmetric(horizontal: 8.0,
                    vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(16.0), child:
                    Column( crossAxisAlignment: CrossAxisAlignment.start, children:
                    [ Row( children: [ Icon( Icons.delete_outline, size: 20, color:
                    colorScheme.error, ), const SizedBox(width: 8), Text( l10n.dangerZone,
                    style: textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold,
                    color: colorScheme.error, ), ), ], ), const SizedBox(height: 16),
                    ElevatedButton.icon( onPressed: () { _deleteGroup(); }, icon:
                    Icon( Icons.delete, color: colorScheme.error, size: 18, ), label:
                    Text( l10n.deleteGroup, style: textTheme.labelLarge?.copyWith(
                    color: colorScheme.error, ), ), style: ElevatedButton.styleFrom(
                    backgroundColor: colorScheme.errorContainer, foregroundColor:
                    colorScheme.error, minimumSize: const Size.fromHeight(48), ),
                    ), ], ), ), ), if (children.isNotEmpty) ...[ const SizedBox(height:
                    8), Card( margin: const EdgeInsets.symmetric(horizontal: 8.0,
                    vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(16.0), child:
                    Column( crossAxisAlignment: CrossAxisAlignment.start, children:
                    [ Row( children: [ Icon( Icons.format_list_bulleted, size: 20,
                    color: colorScheme.primary, ), const SizedBox(width: 8), Text(
                    l10n.groupElements, style: textTheme.titleMedium?.copyWith( fontWeight:
                    FontWeight.bold, color: colorScheme.onSurface, ), ), ], ), const
                    SizedBox(height: 16), ListView.builder( shrinkWrap: true, physics:
                    const NeverScrollableScrollPhysics(), itemCount: children.length,
                    itemBuilder: (context, index) { final element = children[index];
                    final elementName = element[''name''] as String? ?? l10n.unnamedElement;
                    final type = element[''type''] as String; final isHidden = element[''hidden'']
                    as bool? ?? false; final isLocked = element[''locked''] as bool?
                    ?? false; final opacity = (element[''opacity''] as num?)?.toDouble()
                    ?? 1.0; IconData iconData; switch (type) { case ''text'': iconData
                    = Icons.text_fields; break; case ''image'': iconData = Icons.image;
                    break; case ''collection'': iconData = Icons.font_download; break;
                    case ''group'': iconData = Icons.group_work; break; default: iconData
                    = Icons.crop_square; } return Card( margin: const EdgeInsets.symmetric(
                    vertical: 2, horizontal: 0), elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8),
                    ), child: ListTile( leading: Icon( iconData, color: colorScheme.onSurfaceVariant,
                    ), title: Text( elementName, overflow: TextOverflow.ellipsis,
                    style: textTheme.bodyMedium?.copyWith( color: colorScheme.onSurface,
                    fontWeight: FontWeight.w500, ), ), subtitle: Text( ''${l10n.opacity}:
                    ${(opacity * 100).round()}%'', style: textTheme.bodySmall?.copyWith(
                    color: colorScheme.onSurfaceVariant, ), ), trailing: Row( mainAxisSize:
                    MainAxisSize.min, children: [ Icon( isHidden ? Icons.visibility_off
                    : Icons.visibility, size: 16, color: isHidden ? colorScheme.onSurfaceVariant
                    : colorScheme.primary, ), const SizedBox(width: 8), Icon( isLocked
                    ? Icons.lock : Icons.lock_open, size: 16, color: isLocked ? colorScheme.primary
                    : colorScheme.onSurfaceVariant, ), ], ), ), ); }, ), ], ), ),
                    ), ], ], ); } @override void didUpdateWidget(_M3GroupPropertyPanelContent
                    oldWidget) { super.didUpdateWidget(oldWidget); if (oldWidget.element[''id'']
                    != widget.element[''id'']) { final name = widget.element[''name'']
                    as String? ?? ''Group''; _nameController.text = name; _isEditingName
                    = false; } } @override void dispose() { _nameFocusNode.removeListener(_onFocusChange);
                    _nameController.dispose(); _nameFocusNode.dispose(); super.dispose();
                    } @override void initState() { super.initState(); final name =
                    widget.element[''name''] as String? ?? ''Group''; _nameController
                    = TextEditingController(text: name); _nameFocusNode = FocusNode();
                    _nameFocusNode.addListener(_onFocusChange); } void _applyNameChange()
                    { final newName = _nameController.text.trim(); final groupId =
                    widget.element[''id''] as String; final oldName = widget.element[''name'']
                    as String? ?? ''Group''; if (newName.isNotEmpty && newName !=
                    oldName) { EditPageLogger.propertyPanelDebug( ''分组名称修改'
                  text_en: '${l10n.name}:'', style: const TextStyle( fontWeight: FontWeight.bold,
                    fontSize: 14, ), ), subtitle: Text( name, style: TextStyle( fontSize:
                    16, color: colorScheme.onSurface, fontWeight: FontWeight.w500,
                    ), ), trailing: IconButton( icon: const Icon(Icons.edit), tooltip:
                    l10n.rename, onPressed: _startEditingName, ), ), ), const SizedBox(height:
                    8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: ListTile( title: Text( ''${l10n.elements}:'', style:
                    const TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ),
                    ), subtitle: Text( ''${children.length} ${l10n.elements}'', style:
                    TextStyle( fontSize: 16, color: colorScheme.onSurface, fontWeight:
                    FontWeight.w500, ), ), ), ), const SizedBox(height: 8), if (layer
                    != null) Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: ListTile( title: Text( ''${l10n.layer}:'', style: const
                    TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ), ), subtitle:
                    Text( layer[''name''] as String? ?? l10n.layer1, style: TextStyle(
                    fontSize: 16, color: colorScheme.onSurface, fontWeight: FontWeight.w500,
                    ), ), trailing: IconButton( icon: const Icon(Icons.launch), tooltip:
                    l10n.selectTargetLayer, onPressed: () { if (layerId != null) {
                    widget.controller.selectLayer(layerId); } }, ), ), ), ], ), ),
                    ), const SizedBox(height: 8), Card( margin: const EdgeInsets.symmetric(horizontal:
                    8.0, vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(16.0), child:
                    Column( crossAxisAlignment: CrossAxisAlignment.start, children:
                    [ Row( children: [ Icon( Icons.visibility, size: 20, color: colorScheme.primary,
                    ), const SizedBox(width: 8), Text( l10n.stateAndDisplay, style:
                    textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold,
                    color: colorScheme.onSurface, ), ), ], ), const SizedBox(height:
                    16), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: SwitchListTile( title: Text( l10n.locked, style: TextStyle(
                    color: colorScheme.onSurface, fontWeight: FontWeight.bold, ),
                    ), value: isLocked, activeColor: colorScheme.primary, onChanged:
                    (value) { _updateElementProperty(''locked'', value); }, secondary:
                    Icon( isLocked ? Icons.lock : Icons.lock_open, color: isLocked
                    ? colorScheme.primary : colorScheme.onSurfaceVariant, ), ), ),
                    const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: SwitchListTile( title: Text( l10n.visible, style: TextStyle(
                    color: colorScheme.onSurface, fontWeight: FontWeight.bold, ),
                    ), value: !isHidden, activeColor: colorScheme.primary, onChanged:
                    (value) { _updateElementProperty(''hidden'', !value); }, secondary:
                    Icon( isHidden ? Icons.visibility_off : Icons.visibility, color:
                    isHidden ? colorScheme.onSurfaceVariant : colorScheme.primary,
                    ), ), ), const SizedBox(height: 16), Column( crossAxisAlignment:
                    CrossAxisAlignment.start, children: [ Text( ''${l10n.opacity}:'',
                    style: const TextStyle( fontWeight: FontWeight.bold, ), ), const
                    SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    Row( children: [ Expanded( child: Slider( value: opacity, min:
                    0.0, max: 1.0, divisions: 100, label: ''${(opacity * 100).round()}%'',
                    activeColor: colorScheme.primary, thumbColor: colorScheme.primary,
                    onChanged: (value) { _updateElementProperty(''opacity'', value);
                    }, ), ), SizedBox( width: 50, child: Text( ''${(opacity * 100).round()}%'',
                    style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold,
                    ), textAlign: TextAlign.center, ), ), ], ), ), ), ], ), ], ),
                    ), ), const SizedBox(height: 8), Card( margin: const EdgeInsets.symmetric(horizontal:
                    8.0, vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(16.0), child:
                    Column( crossAxisAlignment: CrossAxisAlignment.start, children:
                    [ Row( children: [ Icon( Icons.category, size: 20, color: colorScheme.primary,
                    ), const SizedBox(width: 8), Text( l10n.groupOperations, style:
                    textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold,
                    color: colorScheme.onSurface, ), ), ], ), const SizedBox(height:
                    16), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    Column( children: [ ListTile( leading: Icon( Icons.edit, color:
                    colorScheme.primary, ), title: Text( l10n.editGroupContents, style:
                    TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold,
                    ), ), subtitle: Text( l10n.editGroupContentsDescription, style:
                    TextStyle( color: colorScheme.onSurfaceVariant, ), ), onTap: ()
                    { _enterGroupEditMode(); }, ), const Divider(), ListTile( leading:
                    Icon( Icons.unfold_more, color: colorScheme.primary, ), title:
                    Text( l10n.ungroup, style: TextStyle( color: colorScheme.onSurface,
                    fontWeight: FontWeight.bold, ), ), subtitle: Text( l10n.ungroupDescription,
                    style: TextStyle( color: colorScheme.onSurfaceVariant, ), ), onTap:
                    () { _ungroupElements(); }, ), ], ), ), ), ], ), ), ), const SizedBox(height:
                    8), Card( margin: const EdgeInsets.symmetric(horizontal: 8.0,
                    vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(16.0), child:
                    Column( crossAxisAlignment: CrossAxisAlignment.start, children:
                    [ Row( children: [ Icon( Icons.delete_outline, size: 20, color:
                    colorScheme.error, ), const SizedBox(width: 8), Text( l10n.dangerZone,
                    style: textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold,
                    color: colorScheme.error, ), ), ], ), const SizedBox(height: 16),
                    ElevatedButton.icon( onPressed: () { _deleteGroup(); }, icon:
                    Icon( Icons.delete, color: colorScheme.error, size: 18, ), label:
                    Text( l10n.deleteGroup, style: textTheme.labelLarge?.copyWith(
                    color: colorScheme.error, ), ), style: ElevatedButton.styleFrom(
                    backgroundColor: colorScheme.errorContainer, foregroundColor:
                    colorScheme.error, minimumSize: const Size.fromHeight(48), ),
                    ), ], ), ), ), if (children.isNotEmpty) ...[ const SizedBox(height:
                    8), Card( margin: const EdgeInsets.symmetric(horizontal: 8.0,
                    vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(16.0), child:
                    Column( crossAxisAlignment: CrossAxisAlignment.start, children:
                    [ Row( children: [ Icon( Icons.format_list_bulleted, size: 20,
                    color: colorScheme.primary, ), const SizedBox(width: 8), Text(
                    l10n.groupElements, style: textTheme.titleMedium?.copyWith( fontWeight:
                    FontWeight.bold, color: colorScheme.onSurface, ), ), ], ), const
                    SizedBox(height: 16), ListView.builder( shrinkWrap: true, physics:
                    const NeverScrollableScrollPhysics(), itemCount: children.length,
                    itemBuilder: (context, index) { final element = children[index];
                    final elementName = element[''name''] as String? ?? l10n.unnamedElement;
                    final type = element[''type''] as String; final isHidden = element[''hidden'']
                    as bool? ?? false; final isLocked = element[''locked''] as bool?
                    ?? false; final opacity = (element[''opacity''] as num?)?.toDouble()
                    ?? 1.0; IconData iconData; switch (type) { case ''text'': iconData
                    = Icons.text_fields; break; case ''image'': iconData = Icons.image;
                    break; case ''collection'': iconData = Icons.font_download; break;
                    case ''group'': iconData = Icons.group_work; break; default: iconData
                    = Icons.crop_square; } return Card( margin: const EdgeInsets.symmetric(
                    vertical: 2, horizontal: 0), elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8),
                    ), child: ListTile( leading: Icon( iconData, color: colorScheme.onSurfaceVariant,
                    ), title: Text( elementName, overflow: TextOverflow.ellipsis,
                    style: textTheme.bodyMedium?.copyWith( color: colorScheme.onSurface,
                    fontWeight: FontWeight.w500, ), ), subtitle: Text( ''${l10n.opacity}:
                    ${(opacity * 100).round()}%'', style: textTheme.bodySmall?.copyWith(
                    color: colorScheme.onSurfaceVariant, ), ), trailing: Row( mainAxisSize:
                    MainAxisSize.min, children: [ Icon( isHidden ? Icons.visibility_off
                    : Icons.visibility, size: 16, color: isHidden ? colorScheme.onSurfaceVariant
                    : colorScheme.primary, ), const SizedBox(width: 8), Icon( isLocked
                    ? Icons.lock : Icons.lock_open, size: 16, color: isLocked ? colorScheme.primary
                    : colorScheme.onSurfaceVariant, ), ], ), ), ); }, ), ], ), ),
                    ), ], ], ); } @override void didUpdateWidget(_M3GroupPropertyPanelContent
                    oldWidget) { super.didUpdateWidget(oldWidget); if (oldWidget.element[''id'']
                    != widget.element[''id'']) { final name = widget.element[''name'']
                    as String? ?? ''Group''; _nameController.text = name; _isEditingName
                    = false; } } @override void dispose() { _nameFocusNode.removeListener(_onFocusChange);
                    _nameController.dispose(); _nameFocusNode.dispose(); super.dispose();
                    } @override void initState() { super.initState(); final name =
                    widget.element[''name''] as String? ?? ''Group''; _nameController
                    = TextEditingController(text: name); _nameFocusNode = FocusNode();
                    _nameFocusNode.addListener(_onFocusChange); } void _applyNameChange()
                    { final newName = _nameController.text.trim(); final groupId =
                    widget.element[''id''] as String; final oldName = widget.element[''name'']
                    as String? ?? ''Group''; if (newName.isNotEmpty && newName !=
                    oldName) { EditPageLogger.propertyPanelDebug( ''分组名称修改'
                  file: presentation\widgets\practice\property_panels\m3_practice_property_panel_group.dart
                  line: 170
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - nameStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextNameStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightTrailingIconbuttonIconConstIconIconsEditTooltipRenameOnpressedConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileTitleTextPositionStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextLayerpositionTotallayersStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileTitleTextElementsStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextElementcountElementsStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightConstSizedboxHeightBuildpersistentpanelcardContextContextPanelidTitleStateanddisplayDefaultexpandedTrueChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextVisibleStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldValueIsvisibleActivecolorColorschemePrimaryOnchangedValueEditpageloggerPropertypaneldebug
                - action: create_new
                  text_zh: '${l10n.name}:'', style: const TextStyle( fontWeight: FontWeight.bold,
                    fontSize: 14, ), ), subtitle: Text( name, style: TextStyle( fontSize:
                    16, color: colorScheme.onSurface, fontWeight: FontWeight.w500,
                    ), ), trailing: IconButton( icon: const Icon(Icons.edit), tooltip:
                    l10n.rename, onPressed: _startEditingName, ), ), ), const SizedBox(height:
                    8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: ListTile( title: Text( ''${l10n.position}:'', style:
                    const TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ),
                    ), subtitle: Text( ''$layerPosition / $totalLayers'', style: TextStyle(
                    fontSize: 16, color: colorScheme.onSurface, fontWeight: FontWeight.w500,
                    ), ), ), ), const SizedBox(height: 8), Card( elevation: 0, color:
                    colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0), ), child: ListTile(
                    title: Text( ''${l10n.elements}:'', style: const TextStyle( fontWeight:
                    FontWeight.bold, fontSize: 14, ), ), subtitle: Text( ''$elementCount
                    ${l10n.elements}'', style: TextStyle( fontSize: 16, color: colorScheme.onSurface,
                    fontWeight: FontWeight.w500, ), ), ), ), ], ), const SizedBox(height:
                    8), M3PanelStyles.buildPersistentPanelCard( context: context,
                    panelId: ''layer_state_display'', title: l10n.stateAndDisplay,
                    defaultExpanded: true, children: [ Card( elevation: 0, color:
                    colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0), ), child: SwitchListTile(
                    title: Text( l10n.visible, style: TextStyle( color: colorScheme.onSurface,
                    fontWeight: FontWeight.bold, ), ), value: isVisible, activeColor:
                    colorScheme.primary, onChanged: (value) { EditPageLogger.propertyPanelDebug(
                    ''图层可见性变更'
                  text_en: '${l10n.name}:'', style: const TextStyle( fontWeight: FontWeight.bold,
                    fontSize: 14, ), ), subtitle: Text( name, style: TextStyle( fontSize:
                    16, color: colorScheme.onSurface, fontWeight: FontWeight.w500,
                    ), ), trailing: IconButton( icon: const Icon(Icons.edit), tooltip:
                    l10n.rename, onPressed: _startEditingName, ), ), ), const SizedBox(height:
                    8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: ListTile( title: Text( ''${l10n.position}:'', style:
                    const TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ),
                    ), subtitle: Text( ''$layerPosition / $totalLayers'', style: TextStyle(
                    fontSize: 16, color: colorScheme.onSurface, fontWeight: FontWeight.w500,
                    ), ), ), ), const SizedBox(height: 8), Card( elevation: 0, color:
                    colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0), ), child: ListTile(
                    title: Text( ''${l10n.elements}:'', style: const TextStyle( fontWeight:
                    FontWeight.bold, fontSize: 14, ), ), subtitle: Text( ''$elementCount
                    ${l10n.elements}'', style: TextStyle( fontSize: 16, color: colorScheme.onSurface,
                    fontWeight: FontWeight.w500, ), ), ), ), ], ), const SizedBox(height:
                    8), M3PanelStyles.buildPersistentPanelCard( context: context,
                    panelId: ''layer_state_display'', title: l10n.stateAndDisplay,
                    defaultExpanded: true, children: [ Card( elevation: 0, color:
                    colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0), ), child: SwitchListTile(
                    title: Text( l10n.visible, style: TextStyle( color: colorScheme.onSurface,
                    fontWeight: FontWeight.bold, ), ), value: isVisible, activeColor:
                    colorScheme.primary, onChanged: (value) { EditPageLogger.propertyPanelDebug(
                    ''图层可见性变更'
                  file: presentation\widgets\practice\property_panels\m3_practice_property_panel_layer.dart
                  line: 141
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - opacityStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowChildrenExpandedChildSliderValueOpacityMinMaxDivisionsLabelOpacityRoundActivecolorColorschemePrimaryThumbcolorColorschemePrimaryOnchangedValueEditpageloggerPropertypaneldebug
                - action: create_new
                  text_zh: '${l10n.opacity}:'', style: const TextStyle( fontWeight:
                    FontWeight.bold, ), ), const SizedBox(height: 8), Card( elevation:
                    0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding:
                    const EdgeInsets.all(8.0), child: Row( children: [ Expanded( child:
                    Slider( value: opacity, min: 0.0, max: 1.0, divisions: 100, label:
                    ''${(opacity * 100).round()}%'', activeColor: colorScheme.primary,
                    thumbColor: colorScheme.primary, onChanged: (value) { EditPageLogger.propertyPanelDebug(
                    ''图层不透明度变更'
                  text_en: '${l10n.opacity}:'', style: const TextStyle( fontWeight:
                    FontWeight.bold, ), ), const SizedBox(height: 8), Card( elevation:
                    0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding:
                    const EdgeInsets.all(8.0), child: Row( children: [ Expanded( child:
                    Slider( value: opacity, min: 0.0, max: 1.0, divisions: 100, label:
                    ''${(opacity * 100).round()}%'', activeColor: colorScheme.primary,
                    thumbColor: colorScheme.primary, onChanged: (value) { EditPageLogger.propertyPanelDebug(
                    ''图层不透明度变更'
                  file: presentation\widgets\practice\property_panels\m3_practice_property_panel_layer.dart
                  line: 310
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - opacityRoundStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldTextalignTextalignCenterConstSizedboxHeightBuildpersistentpanelcardContextContextPanelidTitleLayeroperationsDefaultexpandedTrueChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildSinglechildscrollviewScrolldirectionAxisHorizontalChildRowMainaxisalignmentMainaxisalignmentSpaceevenlyChildrenContextContextIconIconsLabelBringtofrontTooltipBringlayertofrontOnpressedIstoplayerNullTopColorschemeColorschemeTextthemeTextthemeContextContextIconIconsLabelMoveupTooltipMovelayerupOnpressedIstoplayerNullUpColorschemeColorschemeTextthemeTextthemeContextContextIconIconsLabelMovedownTooltipMovelayerdownOnpressedIsbottomlayerNullDownColorschemeColorschemeTextthemeTextthemeContextContextIconIconsLabelSendtobackTooltipSendtobackOnpressedIsbottomlayerNullBottomColorschemeColorschemeTextthemeTextthemeConstSizedboxHeightCenterChildSizedboxWidthDoubleInfinityChildElevatedbuttonIconOnpressedContextIconIconIconsDeleteColorColorschemeErrorSizeLabelTextDeletelayerStyleTextthemeLabellargeCopywithColorColorschemeErrorStyleElevatedbuttonStylefromBackgroundcolorColorschemeErrorcontainerForegroundcolorColorschemeErrorMinimumsizeConstSizeFromheightIfElementcountConstSizedboxHeightBuildpersistentpanelcardContextContextPanelidTitleLayerelementsDefaultexpandedTrueChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowMainaxisalignmentMainaxisalignmentSpacebetweenChildrenTextTotalElementcountElementsStyleTextstyleColorColorschemeOnsurfacevariantFontweightFontweightBoldRowChildrenIconbuttonIconConstIconIconsVisibilityTooltipShowhideallelementsOnpressedElementsinlayerIconsizeIconbuttonIconConstIconIconsTooltipLockunlockallelementsOnpressedElementsinlayerIconsizeConstDividerElementsinlayerContextOverrideVoidDidupdatewidgetOldwidgetSuperDidupdatewidgetOldwidgetIfOldwidgetLayerIdWidgetLayerIdFinalNameWidgetLayerNameAsStringLayerTextNameFalseOverrideVoidDisposeRemovelistenerDisposeDisposeDisposeDisposeSuperDisposeOverrideVoidInitstateSuperInitstateFinalNameWidgetLayerNameAsStringLayerTexteditingcontrollerTextNameFocusnodeAddlistenerVoidIfNullFinalNewnameTextTrimIfNewnameIsnotemptyWidgetControllerUpdateelementpropertiesNameNewnameSetstateNullVoidFinalNewnameTextTrimFinalOldnameWidgetLayerNameAsStringLayerEditpageloggerPropertypaneldebug
                - action: create_new
                  text_zh: '${(opacity * 100).round()}%'', style: TextStyle( color:
                    colorScheme.onSurface, fontWeight: FontWeight.bold, ), textAlign:
                    TextAlign.center, ), ), ], ), ), ), ], ), ], ), const SizedBox(height:
                    8), M3PanelStyles.buildPersistentPanelCard( context: context,
                    panelId: ''layer_operations'', title: l10n.layerOperations, defaultExpanded:
                    true, children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    SingleChildScrollView( scrollDirection: Axis.horizontal, child:
                    Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, children:
                    [ _buildActionButton( context: context, icon: Icons.vertical_align_top,
                    label: l10n.bringToFront, tooltip: l10n.bringLayerToFront, onPressed:
                    isTopLayer ? null : () => _moveLayer(''top''), colorScheme: colorScheme,
                    textTheme: textTheme, ), _buildActionButton( context: context,
                    icon: Icons.arrow_upward, label: l10n.moveUp, tooltip: l10n.moveLayerUp,
                    onPressed: isTopLayer ? null : () => _moveLayer(''up''), colorScheme:
                    colorScheme, textTheme: textTheme, ), _buildActionButton( context:
                    context, icon: Icons.arrow_downward, label: l10n.moveDown, tooltip:
                    l10n.moveLayerDown, onPressed: isBottomLayer ? null : () => _moveLayer(''down''),
                    colorScheme: colorScheme, textTheme: textTheme, ), _buildActionButton(
                    context: context, icon: Icons.vertical_align_bottom, label: l10n.sendToBack,
                    tooltip: l10n.sendToBack, onPressed: isBottomLayer ? null : ()
                    => _moveLayer(''bottom''), colorScheme: colorScheme, textTheme:
                    textTheme, ), ], ), ), ), ), const SizedBox(height: 16), Center(
                    child: SizedBox( width: double.infinity, child: ElevatedButton.icon(
                    onPressed: () => _confirmDeleteLayer(context), icon: Icon( Icons.delete,
                    color: colorScheme.error, size: 18, ), label: Text( l10n.deleteLayer,
                    style: textTheme.labelLarge?.copyWith( color: colorScheme.error,
                    ), ), style: ElevatedButton.styleFrom( backgroundColor: colorScheme.errorContainer,
                    foregroundColor: colorScheme.error, minimumSize: const Size.fromHeight(48),
                    ), ), ), ), ], ), if (elementCount > 0) ...[ const SizedBox(height:
                    8), M3PanelStyles.buildPersistentPanelCard( context: context,
                    panelId: ''layer_elements'', title: l10n.layerElements, defaultExpanded:
                    true, children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children:
                    [ Text( ''${l10n.total}: $elementCount ${l10n.elements}'', style:
                    TextStyle( color: colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold,
                    ), ), Row( children: [ IconButton( icon: const Icon(Icons.visibility),
                    tooltip: l10n.showHideAllElements, onPressed: () => _toggleAllElementsVisibility(elementsInLayer),
                    iconSize: 20, ), IconButton( icon: const Icon(Icons.lock_outline),
                    tooltip: l10n.lockUnlockAllElements, onPressed: () => _toggleAllElementsLock(elementsInLayer),
                    iconSize: 20, ), ], ), ], ), ), ), const Divider(), _buildLayerElementsList(elementsInLayer,
                    context), ], ), ], ], ); } @override void didUpdateWidget(_M3LayerPropertyPanelContent
                    oldWidget) { super.didUpdateWidget(oldWidget); if (oldWidget.layer[''id'']
                    != widget.layer[''id'']) { final name = widget.layer[''name'']
                    as String? ?? ''Layer 1''; _nameController.text = name; _isEditingName
                    = false; } } @override void dispose() { _nameFocusNode.removeListener(_onFocusChange);
                    _nameController.dispose(); _nameFocusNode.dispose(); _elementNameController.dispose();
                    _elementNameFocusNode.dispose(); super.dispose(); } @override
                    void initState() { super.initState(); final name = widget.layer[''name'']
                    as String? ?? ''Layer 1''; _nameController = TextEditingController(text:
                    name); _nameFocusNode = FocusNode(); _nameFocusNode.addListener(_onFocusChange);
                    } void _applyElementNameChange() { if (_editingElementId != null)
                    { final newName = _elementNameController.text.trim(); if (newName.isNotEmpty)
                    { widget.controller .updateElementProperties(_editingElementId!,
                    {''name'': newName}); } setState(() { _editingElementId = null;
                    }); } } void _applyNameChange() { final newName = _nameController.text.trim();
                    final oldName = widget.layer[''name''] as String? ?? ''Layer 1'';
                    EditPageLogger.propertyPanelDebug( ''图层名称变更'
                  text_en: '${(opacity * 100).round()}%'', style: TextStyle( color:
                    colorScheme.onSurface, fontWeight: FontWeight.bold, ), textAlign:
                    TextAlign.center, ), ), ], ), ), ), ], ), ], ), const SizedBox(height:
                    8), M3PanelStyles.buildPersistentPanelCard( context: context,
                    panelId: ''layer_operations'', title: l10n.layerOperations, defaultExpanded:
                    true, children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    SingleChildScrollView( scrollDirection: Axis.horizontal, child:
                    Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, children:
                    [ _buildActionButton( context: context, icon: Icons.vertical_align_top,
                    label: l10n.bringToFront, tooltip: l10n.bringLayerToFront, onPressed:
                    isTopLayer ? null : () => _moveLayer(''top''), colorScheme: colorScheme,
                    textTheme: textTheme, ), _buildActionButton( context: context,
                    icon: Icons.arrow_upward, label: l10n.moveUp, tooltip: l10n.moveLayerUp,
                    onPressed: isTopLayer ? null : () => _moveLayer(''up''), colorScheme:
                    colorScheme, textTheme: textTheme, ), _buildActionButton( context:
                    context, icon: Icons.arrow_downward, label: l10n.moveDown, tooltip:
                    l10n.moveLayerDown, onPressed: isBottomLayer ? null : () => _moveLayer(''down''),
                    colorScheme: colorScheme, textTheme: textTheme, ), _buildActionButton(
                    context: context, icon: Icons.vertical_align_bottom, label: l10n.sendToBack,
                    tooltip: l10n.sendToBack, onPressed: isBottomLayer ? null : ()
                    => _moveLayer(''bottom''), colorScheme: colorScheme, textTheme:
                    textTheme, ), ], ), ), ), ), const SizedBox(height: 16), Center(
                    child: SizedBox( width: double.infinity, child: ElevatedButton.icon(
                    onPressed: () => _confirmDeleteLayer(context), icon: Icon( Icons.delete,
                    color: colorScheme.error, size: 18, ), label: Text( l10n.deleteLayer,
                    style: textTheme.labelLarge?.copyWith( color: colorScheme.error,
                    ), ), style: ElevatedButton.styleFrom( backgroundColor: colorScheme.errorContainer,
                    foregroundColor: colorScheme.error, minimumSize: const Size.fromHeight(48),
                    ), ), ), ), ], ), if (elementCount > 0) ...[ const SizedBox(height:
                    8), M3PanelStyles.buildPersistentPanelCard( context: context,
                    panelId: ''layer_elements'', title: l10n.layerElements, defaultExpanded:
                    true, children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children:
                    [ Text( ''${l10n.total}: $elementCount ${l10n.elements}'', style:
                    TextStyle( color: colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold,
                    ), ), Row( children: [ IconButton( icon: const Icon(Icons.visibility),
                    tooltip: l10n.showHideAllElements, onPressed: () => _toggleAllElementsVisibility(elementsInLayer),
                    iconSize: 20, ), IconButton( icon: const Icon(Icons.lock_outline),
                    tooltip: l10n.lockUnlockAllElements, onPressed: () => _toggleAllElementsLock(elementsInLayer),
                    iconSize: 20, ), ], ), ], ), ), ), const Divider(), _buildLayerElementsList(elementsInLayer,
                    context), ], ), ], ], ); } @override void didUpdateWidget(_M3LayerPropertyPanelContent
                    oldWidget) { super.didUpdateWidget(oldWidget); if (oldWidget.layer[''id'']
                    != widget.layer[''id'']) { final name = widget.layer[''name'']
                    as String? ?? ''Layer 1''; _nameController.text = name; _isEditingName
                    = false; } } @override void dispose() { _nameFocusNode.removeListener(_onFocusChange);
                    _nameController.dispose(); _nameFocusNode.dispose(); _elementNameController.dispose();
                    _elementNameFocusNode.dispose(); super.dispose(); } @override
                    void initState() { super.initState(); final name = widget.layer[''name'']
                    as String? ?? ''Layer 1''; _nameController = TextEditingController(text:
                    name); _nameFocusNode = FocusNode(); _nameFocusNode.addListener(_onFocusChange);
                    } void _applyElementNameChange() { if (_editingElementId != null)
                    { final newName = _elementNameController.text.trim(); if (newName.isNotEmpty)
                    { widget.controller .updateElementProperties(_editingElementId!,
                    {''name'': newName}); } setState(() { _editingElementId = null;
                    }); } } void _applyNameChange() { final newName = _nameController.text.trim();
                    final oldName = widget.layer[''name''] as String? ?? ''Layer 1'';
                    EditPageLogger.propertyPanelDebug( ''图层名称变更'
                  file: presentation\widgets\practice\property_panels\m3_practice_property_panel_layer.dart
                  line: 356
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - selectedSelectedidsLengthElementsStyleTextthemeTitlelargeCopywithFontweightFontweightBoldColorColorschemeOnsurfaceBuildpersistentpanelcardContextContextPanelidTitleCommonpropertiesDefaultexpandedTrueChildrenRowChildrenExpandedChildCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextLockedStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldValueCommonlockedFalseActivecolorColorschemePrimaryOnchangedCommonlockedNullValueLockedValueNullSecondaryIconCommonlockedTrueIconsLockIconsColorCommonlockedTrueColorschemePrimaryColorschemeOnsurfacevariantDenseTrueConstSizedboxWidthExpandedChildCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextVisibleStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldValueCommonhiddenFalseActivecolorColorschemePrimaryOnchangedCommonhiddenNullValueHiddenValueNullSecondaryIconCommonhiddenTrueIconsIconsVisibilityColorCommonhiddenTrueColorschemeOnsurfacevariantColorschemePrimaryDenseTrueConstSizedboxHeightIfCommonopacityNullTextOpacityStyleTextstyleColorColorschemeOnsurfacevariantFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowChildrenExpandedChildSliderValueCommonopacityMinMaxDivisionsLabelCommonopacityRoundActivecolorColorschemePrimaryThumbcolorColorschemePrimaryInactivecolorColorschemeSurfacecontainerhighestOnchangedValueOpacityValueSizedboxWidthChildTextCommonopacityRoundStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldTextalignTextalignCenterConstSizedboxHeightIfLayerNullTextLayerStyleTextstyleColorColorschemeOnsurfacevariantFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileLeadingIconIconsLayersColorColorschemePrimaryTitleTextLayerNameAsStringUnnamedlayerStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightTrailingRowMainaxissizeMainaxissizeMinChildrenIconLayerIsvisibleAsBoolTrueIconsVisibilityIconsSizeColorLayerIsvisibleAsBoolTrueColorschemePrimaryColorschemeOnsurfacevariantConstSizedboxWidthIconLayerIslockedAsBoolFalseIconsLockIconsSizeColorLayerIslockedAsBoolFalseColorschemePrimaryColorschemeOnsurfacevariantOntapControllerSelectlayerLayerIdAsStringBuildpersistentpanelcardContextContextPanelidTitleAlignmentoperationsDefaultexpandedFalseChildrenTextHorizontalalignmentStyleTextstyleColorColorschemeOnsurfacevariantFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowMainaxisalignmentMainaxisalignmentSpaceevenlyChildrenContextContextIconIconsTooltipAlignleftOnpressedLeftColorschemeColorschemeContextContextIconIconsTooltipAlignhorizontalcenterOnpressedCenterhColorschemeColorschemeContextContextIconIconsTooltipAlignrightOnpressedRightColorschemeColorschemeContextContextIconIconsTooltipDistributehorizontallyOnpressedSelectedidsLengthHorizontalNullColorschemeColorschemeConstSizedboxHeightTextVerticalalignmentStyleTextstyleColorColorschemeOnsurfacevariantFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowMainaxisalignmentMainaxisalignmentSpaceevenlyChildrenContextContextIconIconsTooltipAligntopOnpressedTopColorschemeColorschemeContextContextIconIconsTooltipAlignverticalcenterOnpressedCentervColorschemeColorschemeContextContextIconIconsTooltipAlignbottomOnpressedBottomColorschemeColorschemeContextContextIconIconsTooltipDistributeverticallyOnpressedSelectedidsLengthVerticalNullColorschemeColorschemeBuildpersistentpanelcardContextContextPanelidTitleGroupoperationsDefaultexpandedFalseChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileLeadingIconIconsGroupColorColorschemePrimaryTitleTextGroupStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldSubtitleTextGroupelementsStyleTextstyleColorColorschemeOnsurfacevariantOntapControllerGroupselectedelementsBuildpersistentpanelcardContextContextPanelidTitleDangerzoneDefaultexpandedFalseChildrenElevatedbuttonIconOnpressedControllerDeleteselectedelementsIconIconIconsDeleteColorColorschemeErrorSizeLabelTextDeleteSelectedidsLengthStyleTextthemeLabellargeCopywithColorColorschemeErrorStyleElevatedbuttonStylefromBackgroundcolorColorschemeErrorcontainerForegroundcolorColorschemeErrorMinimumsizeConstSizeFromheightVoidStringAlignmentEditpageloggerPropertypaneldebug
                - action: create_new
                  text_zh: '${l10n.selected}: ${selectedIds.length} ${l10n.elements}'',
                    style: textTheme.titleLarge?.copyWith( fontWeight: FontWeight.bold,
                    color: colorScheme.onSurface, ), ), ], ), ), M3PanelStyles.buildPersistentPanelCard(
                    context: context, panelId: ''multi_selection_basic_properties'',
                    title: l10n.commonProperties, defaultExpanded: true, children:
                    [ Row( children: [ Expanded( child: Card( elevation: 0, color:
                    colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0), ), child: SwitchListTile(
                    title: Text( l10n.locked, style: TextStyle( color: colorScheme.onSurface,
                    fontWeight: FontWeight.bold, ), ), value: commonLocked ?? false,
                    activeColor: colorScheme.primary, onChanged: commonLocked != null
                    ? (value) { _updateAllElements(''locked'', value); } : null, secondary:
                    Icon( commonLocked == true ? Icons.lock : Icons.lock_open, color:
                    commonLocked == true ? colorScheme.primary : colorScheme.onSurfaceVariant,
                    ), dense: true, ), ), ), const SizedBox(width: 8), Expanded( child:
                    Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: SwitchListTile( title: Text( l10n.visible, style: TextStyle(
                    color: colorScheme.onSurface, fontWeight: FontWeight.bold, ),
                    ), value: !(commonHidden ?? false), activeColor: colorScheme.primary,
                    onChanged: commonHidden != null ? (value) { _updateAllElements(''hidden'',
                    !value); } : null, secondary: Icon( commonHidden == true ? Icons.visibility_off
                    : Icons.visibility, color: commonHidden == true ? colorScheme.onSurfaceVariant
                    : colorScheme.primary, ), dense: true, ), ), ), ], ), const SizedBox(height:
                    16), if (commonOpacity != null) ...[ Text( ''${l10n.opacity}:'',
                    style: TextStyle( color: colorScheme.onSurfaceVariant, fontWeight:
                    FontWeight.bold, ), ), const SizedBox(height: 8), Card( elevation:
                    0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding:
                    const EdgeInsets.all(8.0), child: Row( children: [ Expanded( child:
                    Slider( value: commonOpacity, min: 0.0, max: 1.0, divisions: 100,
                    label: ''${(commonOpacity * 100).round()}%'', activeColor: colorScheme.primary,
                    thumbColor: colorScheme.primary, inactiveColor: colorScheme.surfaceContainerHighest,
                    onChanged: (value) { _updateAllElements(''opacity'', value); },
                    ), ), SizedBox( width: 50, child: Text( ''${(commonOpacity * 100).round()}%'',
                    style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold,
                    ), textAlign: TextAlign.center, ), ), ], ), ), ), ], const SizedBox(height:
                    16), if (layer != null) ...[ Text( ''${l10n.layer}:'', style:
                    TextStyle( color: colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold,
                    ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: ListTile( leading: Icon( Icons.layers, color: colorScheme.primary,
                    ), title: Text( layer[''name''] as String? ?? l10n.unnamedLayer,
                    style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.w500,
                    ), ), trailing: Row( mainAxisSize: MainAxisSize.min, children:
                    [ Icon( (layer[''isVisible''] as bool? ?? true) ? Icons.visibility
                    : Icons.visibility_off, size: 16, color: (layer[''isVisible'']
                    as bool? ?? true) ? colorScheme.primary : colorScheme.onSurfaceVariant,
                    ), const SizedBox(width: 8), Icon( (layer[''isLocked''] as bool?
                    ?? false) ? Icons.lock : Icons.lock_open, size: 16, color: (layer[''isLocked'']
                    as bool? ?? false) ? colorScheme.primary : colorScheme.onSurfaceVariant,
                    ), ], ), onTap: () { controller.selectLayer(layer[''id''] as String);
                    }, ), ), ], ], ), M3PanelStyles.buildPersistentPanelCard( context:
                    context, panelId: ''multi_selection_alignment_tools'', title:
                    l10n.alignmentOperations, defaultExpanded: false, children: [
                    Text( ''${l10n.horizontalAlignment}:'', style: TextStyle( color:
                    colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold, ),
                    ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, children:
                    [ _buildAlignmentButton( context: context, icon: Icons.align_horizontal_left,
                    tooltip: l10n.alignLeft, onPressed: () => _alignElements(''left''),
                    colorScheme: colorScheme, ), _buildAlignmentButton( context: context,
                    icon: Icons.align_horizontal_center, tooltip: l10n.alignHorizontalCenter,
                    onPressed: () => _alignElements(''centerH''), colorScheme: colorScheme,
                    ), _buildAlignmentButton( context: context, icon: Icons.align_horizontal_right,
                    tooltip: l10n.alignRight, onPressed: () => _alignElements(''right''),
                    colorScheme: colorScheme, ), _buildAlignmentButton( context: context,
                    icon: Icons.horizontal_distribute, tooltip: l10n.distributeHorizontally,
                    onPressed: selectedIds.length > 2 ? () => _distributeElements(''horizontal'')
                    : null, colorScheme: colorScheme, ), ], ), ), ), const SizedBox(height:
                    16), Text( ''${l10n.verticalAlignment}:'', style: TextStyle( color:
                    colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold, ),
                    ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, children:
                    [ _buildAlignmentButton( context: context, icon: Icons.align_vertical_top,
                    tooltip: l10n.alignTop, onPressed: () => _alignElements(''top''),
                    colorScheme: colorScheme, ), _buildAlignmentButton( context: context,
                    icon: Icons.align_vertical_center, tooltip: l10n.alignVerticalCenter,
                    onPressed: () => _alignElements(''centerV''), colorScheme: colorScheme,
                    ), _buildAlignmentButton( context: context, icon: Icons.align_vertical_bottom,
                    tooltip: l10n.alignBottom, onPressed: () => _alignElements(''bottom''),
                    colorScheme: colorScheme, ), _buildAlignmentButton( context: context,
                    icon: Icons.vertical_distribute, tooltip: l10n.distributeVertically,
                    onPressed: selectedIds.length > 2 ? () => _distributeElements(''vertical'')
                    : null, colorScheme: colorScheme, ), ], ), ), ), ], ), M3PanelStyles.buildPersistentPanelCard(
                    context: context, panelId: ''multi_selection_group_tools'', title:
                    l10n.groupOperations, defaultExpanded: false, children: [ Card(
                    elevation: 0, color: colorScheme.surfaceContainerHighest, shape:
                    RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: ListTile( leading: Icon( Icons.group, color: colorScheme.primary,
                    ), title: Text( l10n.group, style: TextStyle( color: colorScheme.onSurface,
                    fontWeight: FontWeight.bold, ), ), subtitle: Text( l10n.groupElements,
                    style: TextStyle( color: colorScheme.onSurfaceVariant, ), ), onTap:
                    () { controller.groupSelectedElements(); }, ), ), ], ), M3PanelStyles.buildPersistentPanelCard(
                    context: context, panelId: ''multi_selection_delete_tools'', title:
                    l10n.dangerZone, defaultExpanded: false, children: [ ElevatedButton.icon(
                    onPressed: () { controller.deleteSelectedElements(); }, icon:
                    Icon( Icons.delete, color: colorScheme.error, size: 18, ), label:
                    Text( ''${l10n.delete} (${selectedIds.length})'', style: textTheme.labelLarge?.copyWith(
                    color: colorScheme.error, ), ), style: ElevatedButton.styleFrom(
                    backgroundColor: colorScheme.errorContainer, foregroundColor:
                    colorScheme.error, minimumSize: const Size.fromHeight(48), ),
                    ), ], ), ], ); } void _alignElements(String alignment) { EditPageLogger.propertyPanelDebug(
                    ''多选元素对齐'
                  text_en: '${l10n.selected}: ${selectedIds.length} ${l10n.elements}'',
                    style: textTheme.titleLarge?.copyWith( fontWeight: FontWeight.bold,
                    color: colorScheme.onSurface, ), ), ], ), ), M3PanelStyles.buildPersistentPanelCard(
                    context: context, panelId: ''multi_selection_basic_properties'',
                    title: l10n.commonProperties, defaultExpanded: true, children:
                    [ Row( children: [ Expanded( child: Card( elevation: 0, color:
                    colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0), ), child: SwitchListTile(
                    title: Text( l10n.locked, style: TextStyle( color: colorScheme.onSurface,
                    fontWeight: FontWeight.bold, ), ), value: commonLocked ?? false,
                    activeColor: colorScheme.primary, onChanged: commonLocked != null
                    ? (value) { _updateAllElements(''locked'', value); } : null, secondary:
                    Icon( commonLocked == true ? Icons.lock : Icons.lock_open, color:
                    commonLocked == true ? colorScheme.primary : colorScheme.onSurfaceVariant,
                    ), dense: true, ), ), ), const SizedBox(width: 8), Expanded( child:
                    Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: SwitchListTile( title: Text( l10n.visible, style: TextStyle(
                    color: colorScheme.onSurface, fontWeight: FontWeight.bold, ),
                    ), value: !(commonHidden ?? false), activeColor: colorScheme.primary,
                    onChanged: commonHidden != null ? (value) { _updateAllElements(''hidden'',
                    !value); } : null, secondary: Icon( commonHidden == true ? Icons.visibility_off
                    : Icons.visibility, color: commonHidden == true ? colorScheme.onSurfaceVariant
                    : colorScheme.primary, ), dense: true, ), ), ), ], ), const SizedBox(height:
                    16), if (commonOpacity != null) ...[ Text( ''${l10n.opacity}:'',
                    style: TextStyle( color: colorScheme.onSurfaceVariant, fontWeight:
                    FontWeight.bold, ), ), const SizedBox(height: 8), Card( elevation:
                    0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding:
                    const EdgeInsets.all(8.0), child: Row( children: [ Expanded( child:
                    Slider( value: commonOpacity, min: 0.0, max: 1.0, divisions: 100,
                    label: ''${(commonOpacity * 100).round()}%'', activeColor: colorScheme.primary,
                    thumbColor: colorScheme.primary, inactiveColor: colorScheme.surfaceContainerHighest,
                    onChanged: (value) { _updateAllElements(''opacity'', value); },
                    ), ), SizedBox( width: 50, child: Text( ''${(commonOpacity * 100).round()}%'',
                    style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold,
                    ), textAlign: TextAlign.center, ), ), ], ), ), ), ], const SizedBox(height:
                    16), if (layer != null) ...[ Text( ''${l10n.layer}:'', style:
                    TextStyle( color: colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold,
                    ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: ListTile( leading: Icon( Icons.layers, color: colorScheme.primary,
                    ), title: Text( layer[''name''] as String? ?? l10n.unnamedLayer,
                    style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.w500,
                    ), ), trailing: Row( mainAxisSize: MainAxisSize.min, children:
                    [ Icon( (layer[''isVisible''] as bool? ?? true) ? Icons.visibility
                    : Icons.visibility_off, size: 16, color: (layer[''isVisible'']
                    as bool? ?? true) ? colorScheme.primary : colorScheme.onSurfaceVariant,
                    ), const SizedBox(width: 8), Icon( (layer[''isLocked''] as bool?
                    ?? false) ? Icons.lock : Icons.lock_open, size: 16, color: (layer[''isLocked'']
                    as bool? ?? false) ? colorScheme.primary : colorScheme.onSurfaceVariant,
                    ), ], ), onTap: () { controller.selectLayer(layer[''id''] as String);
                    }, ), ), ], ], ), M3PanelStyles.buildPersistentPanelCard( context:
                    context, panelId: ''multi_selection_alignment_tools'', title:
                    l10n.alignmentOperations, defaultExpanded: false, children: [
                    Text( ''${l10n.horizontalAlignment}:'', style: TextStyle( color:
                    colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold, ),
                    ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, children:
                    [ _buildAlignmentButton( context: context, icon: Icons.align_horizontal_left,
                    tooltip: l10n.alignLeft, onPressed: () => _alignElements(''left''),
                    colorScheme: colorScheme, ), _buildAlignmentButton( context: context,
                    icon: Icons.align_horizontal_center, tooltip: l10n.alignHorizontalCenter,
                    onPressed: () => _alignElements(''centerH''), colorScheme: colorScheme,
                    ), _buildAlignmentButton( context: context, icon: Icons.align_horizontal_right,
                    tooltip: l10n.alignRight, onPressed: () => _alignElements(''right''),
                    colorScheme: colorScheme, ), _buildAlignmentButton( context: context,
                    icon: Icons.horizontal_distribute, tooltip: l10n.distributeHorizontally,
                    onPressed: selectedIds.length > 2 ? () => _distributeElements(''horizontal'')
                    : null, colorScheme: colorScheme, ), ], ), ), ), const SizedBox(height:
                    16), Text( ''${l10n.verticalAlignment}:'', style: TextStyle( color:
                    colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold, ),
                    ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, children:
                    [ _buildAlignmentButton( context: context, icon: Icons.align_vertical_top,
                    tooltip: l10n.alignTop, onPressed: () => _alignElements(''top''),
                    colorScheme: colorScheme, ), _buildAlignmentButton( context: context,
                    icon: Icons.align_vertical_center, tooltip: l10n.alignVerticalCenter,
                    onPressed: () => _alignElements(''centerV''), colorScheme: colorScheme,
                    ), _buildAlignmentButton( context: context, icon: Icons.align_vertical_bottom,
                    tooltip: l10n.alignBottom, onPressed: () => _alignElements(''bottom''),
                    colorScheme: colorScheme, ), _buildAlignmentButton( context: context,
                    icon: Icons.vertical_distribute, tooltip: l10n.distributeVertically,
                    onPressed: selectedIds.length > 2 ? () => _distributeElements(''vertical'')
                    : null, colorScheme: colorScheme, ), ], ), ), ), ], ), M3PanelStyles.buildPersistentPanelCard(
                    context: context, panelId: ''multi_selection_group_tools'', title:
                    l10n.groupOperations, defaultExpanded: false, children: [ Card(
                    elevation: 0, color: colorScheme.surfaceContainerHighest, shape:
                    RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0),
                    ), child: ListTile( leading: Icon( Icons.group, color: colorScheme.primary,
                    ), title: Text( l10n.group, style: TextStyle( color: colorScheme.onSurface,
                    fontWeight: FontWeight.bold, ), ), subtitle: Text( l10n.groupElements,
                    style: TextStyle( color: colorScheme.onSurfaceVariant, ), ), onTap:
                    () { controller.groupSelectedElements(); }, ), ), ], ), M3PanelStyles.buildPersistentPanelCard(
                    context: context, panelId: ''multi_selection_delete_tools'', title:
                    l10n.dangerZone, defaultExpanded: false, children: [ ElevatedButton.icon(
                    onPressed: () { controller.deleteSelectedElements(); }, icon:
                    Icon( Icons.delete, color: colorScheme.error, size: 18, ), label:
                    Text( ''${l10n.delete} (${selectedIds.length})'', style: textTheme.labelLarge?.copyWith(
                    color: colorScheme.error, ), ), style: ElevatedButton.styleFrom(
                    backgroundColor: colorScheme.errorContainer, foregroundColor:
                    colorScheme.error, minimumSize: const Size.fromHeight(48), ),
                    ), ], ), ], ); } void _alignElements(String alignment) { EditPageLogger.propertyPanelDebug(
                    ''多选元素对齐'
                  file: presentation\widgets\practice\property_panels\m3_practice_property_panel_multi.dart
                  line: 102
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - presetsizeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildDropdownbuttonformfieldStringValueWidthHeightIsexpandedTrueDecorationInputdecorationBorderOutlineinputborderBorderradiusBorderradiusCircularBordersideBordersideColorColorschemeOutlineContentpaddingConstEdgeinsetsSymmetricHorizontalVerticalFilledTrueFillcolorColorschemeSurfaceItemsDropdownmenuitemValueChildTextDropdownmenuitemValueChildTextDropdownmenuitemValueCustomChildTextCustomsizeOnchangedValueIfValueNullValueOrientationConstSizedboxHeightTextPageorientationStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowChildrenExpandedChildRadiolisttileStringTitleTextPortraitValuePortraitGroupvalueOrientationActivecolorColorschemePrimaryOnchangedValueIfValueNullValueOrientationFinalMapStringDynamicUpdatesOrientationValueIfWidthHeightUpdatesWidthHeightUpdatesHeightWidthTextHeightTostringTextWidthTostringWidgetOnpagepropertieschangedUpdatesExpandedChildRadiolisttileStringTitleTextLandscapeValueLandscapeGroupvalueOrientationActivecolorColorschemePrimaryOnchangedValueIfValueNullValueOrientationFinalMapStringDynamicUpdatesOrientationValueIfWidthHeightUpdatesWidthHeightUpdatesHeightWidthTextHeightTostringTextWidthTostringWidgetOnpagepropertieschangedUpdatesConstSizedboxHeightTextDimensionsStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildEditablenumberfieldLabelWidthValueWidthSuffixMmMinMaxOnchangedValueValueTostringConstSizedboxWidthExpandedChildEditablenumberfieldLabelHeightValueHeightSuffixMmMinMaxOnchangedValueValueTostringConstSizedboxHeightTextPpisettingStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedFlexChildSliderValueDpiTodoubleMinMaxDivisionsLabelDpiTostringDpiActivecolorColorschemePrimaryThumbcolorColorschemePrimaryOnchangedValueValueTointTostringConstSizedboxWidthExpandedFlexChildEditablenumberfieldLabelPpiValueDpiTodoubleSuffixMinMaxDecimalplacesOnchangedValueValueTointTostringConstSizedboxHeightContainerPaddingConstEdgeinsetsAllDecorationBoxdecorationColorColorschemeTertiarycontainerWithvaluesAlphaBorderradiusBorderradiusCircularChildRowChildrenIconIconsColorColorschemeTertiarySizeConstSizedboxWidthExpandedChildTextCanvaspixelsizeWidthHeightDpiStyleTextstyleFontsizeColorColorschemeTertiaryBuildpersistentpanelcardContextContextPanelidTitleBackgroundcolorDefaultexpandedTrueChildrenPaddingPaddingConstEdgeinsetsSymmetricHorizontalVerticalChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowChildrenInkwellOntapAsyncFinalColorAwaitShowContextInitialcolorEnablealphaFalseIfColorNullColorChildContainerWidthHeightDecorationBoxdecorationColorBorderBorderAllColorColorschemeOutlineBorderradiusBorderradiusCircularConstSizedboxWidthTextBackgroundcolorStyleTextstyleColorColorschemeOnsurfaceBuildpersistentpanelcardContextContextPanelidTitleGridsettingsDefaultexpandedTrueChildrenPaddingPaddingConstEdgeinsetsSymmetricHorizontalVerticalChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextShowgridValueWidgetControllerStateGridvisibleActivecolorColorschemePrimaryOnchangedValueWidgetOnpagepropertieschangedGridvisibleValueWidgetControllerStateGridvisibleValueSetstateConstSizedboxHeightTextGridsizeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedFlexChildSliderValueWidgetControllerStateGridsizeMinMaxDivisionsLabelWidgetControllerStateGridsizeTostringasfixedActivecolorColorschemePrimaryThumbcolorColorschemePrimaryOnchangedValueSetstateWidgetOnpagepropertieschangedGridsizeValueWidgetControllerStateGridsizeValueConstSizedboxWidthExpandedFlexChildTextWidgetControllerStateGridsizeTostringasfixedPixelsStyleTextstyleFontweightFontweightBoldColorColorschemeOnsurfaceTextalignTextalignCenterOverrideVoidDidupdatewidgetOldwidgetSuperDidupdatewidgetOldwidgetIfWidgetPageNullOldwidgetPageWidgetPageTextWidgetPageWidthAsNumTodoubleTostringTextWidgetPageHeightAsNumTodoubleTostringTextWidgetPageDpiAsNumTointTostringStringBackgroundcolorFfffffIfWidgetPageContainskeyBackgroundWidgetPageBackgroundAsMapStringDynamicContainskeyValueBackgroundcolorWidgetPageBackgroundAsMapStringDynamicValueAsStringTextBackgroundcolorStartswithBackgroundcolorSubstringBackgroundcolorOverrideVoidDisposeRemovelistenerRemovelistenerRemovelistenerWidgetControllerRemovelistenerDisposeDisposeDisposeDisposeDisposeDisposeDisposeSuperDisposeOverrideVoidInitstateSuperInitstateTexteditingcontrollerTexteditingcontrollerTexteditingcontrollerTexteditingcontrollerFocusnodeFocusnodeFocusnodeIfWidgetPageNullTextWidgetPageWidthAsNumTodoubleTostringTextWidgetPageHeightAsNumTodoubleTostringTextWidgetPageDpiAsNumTointTostringStringBackgroundcolorFfffffIfWidgetPageContainskeyBackgroundWidgetPageBackgroundAsMapStringDynamicContainskeyValueBackgroundcolorWidgetPageBackgroundAsMapStringDynamicValueAsStringTextBackgroundcolorStartswithBackgroundcolorSubstringBackgroundcolorAddlistenerAddlistenerAddlistenerWidgetControllerAddlistenerStringDoubleWidthDoubleHeightIntDpiFinalWidthinchesWidthFinalHeightinchesHeightFinalWidthpixelsWidthinchesDpiRoundFinalHeightpixelsHeightinchesDpiRoundReturnWidthpixelsHeightpixelsApplocalizationsOfContextPixelsColorIfWidgetPageNullReturnColorsWhiteIfWidgetPageContainskeyBackgroundWidgetPageBackgroundAsMapStringDynamicContainskeyValueFinalBackgroundWidgetPageBackgroundAsMapStringDynamicFinalColorstrBackgroundValueAsStringFinalColorColorIntParseColorstrSubstringRadixReturnColorReturnColorsWhiteStringDoubleWidthDoubleHeightDoublePortraitwidthWidthDoublePortraitheightHeightIfWidthHeightPortraitwidthHeightPortraitheightWidthIfPortraitwidthAbsPortraitheightAbsReturnElseIfPortraitwidthAbsPortraitheightAbsReturnElseReturnCustomVoidSetstateVoidIfHasfocusTextVoidIfHasfocusTextVoidStringPresetStringOrientationDoubleWidthHeightSwitchPresetCaseWidthHeightBreakCaseWidthHeightBreakCaseCustomReturnDefaultReturnIfOrientationLandscapeFinalTempWidthWidthHeightHeightTempTextWidthTostringTextHeightTostringWidgetOnpagepropertieschangedWidthWidthHeightHeightVoidIfHasfocusTextVoidColorColorFinalColorhexColorRedToradixstringPadleftColorGreenToradixstringPadleftColorBlueToradixstringPadleftEditpageloggerPropertypaneldebug
                - action: create_new
                  text_zh: '${l10n.presetSize}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8.0), Card( elevation:
                    0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12.0), ), child: Padding(
                    padding: const EdgeInsets.all(8.0), child: DropdownButtonFormField<String>(
                    value: _getPageSizePreset(width, height), isExpanded: true, decoration:
                    InputDecoration( border: OutlineInputBorder( borderRadius: BorderRadius.circular(8.0),
                    borderSide: BorderSide( color: colorScheme.outline, ), ), contentPadding:
                    const EdgeInsets.symmetric( horizontal: 16.0, vertical: 12.0,
                    ), filled: true, fillColor: colorScheme.surface, ), items: [ DropdownMenuItem(
                    value: ''A4'', child: Text(l10n.a4Size), ), DropdownMenuItem(
                    value: ''A5'', child: Text(l10n.a5Size), ), DropdownMenuItem(
                    value: ''custom'', child: Text(l10n.customSize), ), ], onChanged:
                    (value) { if (value != null) { _handlePageSizePresetChange(value,
                    orientation); } }, ), ), ), const SizedBox(height: 16.0), Text(''${l10n.pageOrientation}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8.0), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(4.0), child:
                    Row( children: [ Expanded( child: RadioListTile<String>( title:
                    Text(l10n.portrait), value: ''portrait'', groupValue: orientation,
                    activeColor: colorScheme.primary, onChanged: (value) { if (value
                    != null && value != orientation) { final Map<String, dynamic>
                    updates = { ''orientation'': value }; if (width > height) { updates[''width'']
                    = height; updates[''height''] = width; _widthController.text =
                    height.toString(); _heightController.text = width.toString();
                    } widget.onPagePropertiesChanged(updates); } }, ), ), Expanded(
                    child: RadioListTile<String>( title: Text(l10n.landscape), value:
                    ''landscape'', groupValue: orientation, activeColor: colorScheme.primary,
                    onChanged: (value) { if (value != null && value != orientation)
                    { final Map<String, dynamic> updates = { ''orientation'': value
                    }; if (width < height) { updates[''width''] = height; updates[''height'']
                    = width; _widthController.text = height.toString(); _heightController.text
                    = width.toString(); } widget.onPagePropertiesChanged(updates);
                    } }, ), ), ], ), ), ), const SizedBox(height: 16.0), Text(''${l10n.dimensions}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8.0), Row( children: [ Expanded( child: EditableNumberField( label:
                    l10n.width, value: width, suffix: ''mm'', min: 10, max: 1000,
                    onChanged: (value) => _updateWidth(value.toString()), ), ), const
                    SizedBox(width: 8.0), Expanded( child: EditableNumberField( label:
                    l10n.height, value: height, suffix: ''mm'', min: 10, max: 1000,
                    onChanged: (value) => _updateHeight(value.toString()), ), ), ],
                    ), const SizedBox(height: 16.0), Text(''${l10n.ppiSetting}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8.0), Row( children: [ Expanded( flex: 3, child: Slider( value:
                    dpi.toDouble(), min: 72, max: 600, divisions: 528, label: ''${dpi.toString()}
                    DPI'', activeColor: colorScheme.primary, thumbColor: colorScheme.primary,
                    onChanged: (value) => _updateDpi(value.toInt().toString()), ),
                    ), const SizedBox(width: 8.0), Expanded( flex: 2, child: EditableNumberField(
                    label: ''PPI'', value: dpi.toDouble(), suffix: '''', min: 72,
                    max: 600, decimalPlaces: 0, onChanged: (value) => _updateDpi(value.toInt().toString()),
                    ), ), ], ), const SizedBox(height: 8.0), Container( padding: const
                    EdgeInsets.all(12.0), decoration: BoxDecoration( color: colorScheme.tertiaryContainer.withValues(alpha:
                    0.3), borderRadius: BorderRadius.circular(8.0), ), child: Row(
                    children: [ Icon(Icons.info_outline, color: colorScheme.tertiary,
                    size: 20), const SizedBox(width: 8), Expanded( child: Text( ''${l10n.canvasPixelSize}:
                    ${_calculatePixelSize(width, height, dpi)}'', style: TextStyle(
                    fontSize: 14, color: colorScheme.tertiary), ), ), ], ), ), ],
                    ), ), ], ), M3PanelStyles.buildPersistentPanelCard( context: context,
                    panelId: ''page_background_color'', title: l10n.backgroundColor,
                    defaultExpanded: true, children: [ Padding( padding: const EdgeInsets.symmetric(horizontal:
                    16.0, vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Row( children: [ InkWell( onTap: () async { final
                    color = await M3ColorPicker.show( context, initialColor: _getBackgroundColor(),
                    enableAlpha: false, ); if (color != null) { _updateBackgroundColor(color);
                    } }, child: Container( width: 40, height: 40, decoration: BoxDecoration(
                    color: _getBackgroundColor(), border: Border.all(color: colorScheme.outline),
                    borderRadius: BorderRadius.circular(8), ), ), ), const SizedBox(width:
                    16), Text( l10n.backgroundColor, style: TextStyle( color: colorScheme.onSurface,
                    ), ), ], ), ], ), ), ], ), M3PanelStyles.buildPersistentPanelCard(
                    context: context, panelId: ''page_grid_settings'', title: l10n.gridSettings,
                    defaultExpanded: true, children: [ Padding( padding: const EdgeInsets.symmetric(horizontal:
                    16.0, vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: SwitchListTile( title: Text(l10n.showGrid), value: widget.controller.state.gridVisible,
                    activeColor: colorScheme.primary, onChanged: (value) { widget.onPagePropertiesChanged({''gridVisible'':
                    value}); widget.controller.state.gridVisible = value; setState(()
                    {}); }, ), ), const SizedBox(height: 16.0), Text(''${l10n.gridSize}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8.0), Row( children: [ Expanded( flex: 3, child: Slider( value:
                    widget.controller.state.gridSize, min: 5.0, max: 500.0, divisions:
                    99, label: widget.controller.state.gridSize .toStringAsFixed(0),
                    activeColor: colorScheme.primary, thumbColor: colorScheme.primary,
                    onChanged: (value) { setState(() { widget .onPagePropertiesChanged({''gridSize'':
                    value}); widget.controller.state.gridSize = value; }); }, ), ),
                    const SizedBox(width: 8.0), Expanded( flex: 1, child: Text( ''${widget.controller.state.gridSize.toStringAsFixed(0)}
                    ${l10n.pixels}'', style: TextStyle( fontWeight: FontWeight.bold,
                    color: colorScheme.onSurface, ), textAlign: TextAlign.center,
                    ), ), ], ), ], ), ), ], ), ], ); } @override void didUpdateWidget(M3PagePropertyPanel
                    oldWidget) { super.didUpdateWidget(oldWidget); if (widget.page
                    != null && oldWidget.page != widget.page) { _widthController.text
                    = ((widget.page![''width''] as num?)?.toDouble() ?? 210.0).toString();
                    _heightController.text = ((widget.page![''height''] as num?)?.toDouble()
                    ?? 297.0).toString(); _dpiController.text = ((widget.page![''dpi'']
                    as num?)?.toInt() ?? 300).toString(); String backgroundColor =
                    ''#FFFFFF''; if (widget.page!.containsKey(''background'') && (widget.page![''background'']
                    as Map<String, dynamic>) .containsKey(''value'')) { backgroundColor
                    = (widget.page![''background''] as Map<String, dynamic>)[''value'']
                    as String; } _backgroundColorController.text = backgroundColor.startsWith(''#'')
                    ? backgroundColor.substring(1) : backgroundColor; } } @override
                    void dispose() { _widthFocusNode.removeListener(_handleWidthFocusChange);
                    _heightFocusNode.removeListener(_handleHeightFocusChange); _dpiFocusNode.removeListener(_handleDpiFocusChange);
                    widget.controller.removeListener(_handleControllerChange); _widthController.dispose();
                    _heightController.dispose(); _dpiController.dispose(); _backgroundColorController.dispose();
                    _widthFocusNode.dispose(); _heightFocusNode.dispose(); _dpiFocusNode.dispose();
                    super.dispose(); } @override void initState() { super.initState();
                    _widthController = TextEditingController(); _heightController
                    = TextEditingController(); _dpiController = TextEditingController();
                    _backgroundColorController = TextEditingController(); _widthFocusNode
                    = FocusNode(); _heightFocusNode = FocusNode(); _dpiFocusNode =
                    FocusNode(); if (widget.page != null) { _widthController.text
                    = ((widget.page![''width''] as num?)?.toDouble() ?? 210.0).toString();
                    _heightController.text = ((widget.page![''height''] as num?)?.toDouble()
                    ?? 297.0).toString(); _dpiController.text = ((widget.page![''dpi'']
                    as num?)?.toInt() ?? 300).toString(); String backgroundColor =
                    ''#FFFFFF''; if (widget.page!.containsKey(''background'') && (widget.page![''background'']
                    as Map<String, dynamic>) .containsKey(''value'')) { backgroundColor
                    = (widget.page![''background''] as Map<String, dynamic>)[''value'']
                    as String; } _backgroundColorController.text = backgroundColor.startsWith(''#'')
                    ? backgroundColor.substring(1) : backgroundColor; } _widthFocusNode.addListener(_handleWidthFocusChange);
                    _heightFocusNode.addListener(_handleHeightFocusChange); _dpiFocusNode.addListener(_handleDpiFocusChange);
                    widget.controller.addListener(_handleControllerChange); } String
                    _calculatePixelSize(double width, double height, int dpi) { final
                    widthInches = width / 25.4; final heightInches = height / 25.4;
                    final widthPixels = (widthInches * dpi).round(); final heightPixels
                    = (heightInches * dpi).round(); return ''$widthPixels × $heightPixels
                    ${AppLocalizations.of(context).pixels}''; } Color _getBackgroundColor()
                    { if (widget.page == null) { return Colors.white; } if (widget.page!.containsKey(''background'')
                    && (widget.page![''background''] as Map<String, dynamic>) .containsKey(''value''))
                    { final background = widget.page![''background''] as Map<String,
                    dynamic>; final colorStr = background[''value''] as String; final
                    color = Color(int.parse(colorStr.substring(1), radix: 16) | 0xFF000000);
                    return color; } return Colors.white; } String _getPageSizePreset(double
                    width, double height) { double portraitWidth = width; double portraitHeight
                    = height; if (width > height) { portraitWidth = height; portraitHeight
                    = width; } if ((portraitWidth - 210.0).abs() < 1 && (portraitHeight
                    - 297.0).abs() < 1) { return ''A4''; } else if ((portraitWidth
                    - 148.0).abs() < 1 && (portraitHeight - 210.0).abs() < 1) { return
                    ''A5''; } else { return ''custom''; } } void _handleControllerChange()
                    { setState(() {}); } void _handleDpiFocusChange() { if (!_dpiFocusNode.hasFocus)
                    { _updateDpi(_dpiController.text); } } void _handleHeightFocusChange()
                    { if (!_heightFocusNode.hasFocus) { _updateHeight(_heightController.text);
                    } } void _handlePageSizePresetChange(String preset, String orientation)
                    { double width, height; switch (preset) { case ''A4'': width =
                    210.0; height = 297.0; break; case ''A5'': width = 148.0; height
                    = 210.0; break; case ''custom'': return; default: return; } if
                    (orientation == ''landscape'') { final temp = width; width = height;
                    height = temp; } _widthController.text = width.toString(); _heightController.text
                    = height.toString(); widget.onPagePropertiesChanged({ ''width'':
                    width, ''height'': height, }); } void _handleWidthFocusChange()
                    { if (!_widthFocusNode.hasFocus) { _updateWidth(_widthController.text);
                    } } void _updateBackgroundColor(Color color) { final colorHex
                    = ''#${color.red.toRadixString(16).padLeft(2, ''0'')}${color.green.toRadixString(16).padLeft(2,
                    ''0'')}${color.blue.toRadixString(16).padLeft(2, ''0'')}''; EditPageLogger.propertyPanelDebug(
                    ''更新页面背景颜色'
                  text_en: '${l10n.presetSize}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8.0), Card( elevation:
                    0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(12.0), ), child: Padding(
                    padding: const EdgeInsets.all(8.0), child: DropdownButtonFormField<String>(
                    value: _getPageSizePreset(width, height), isExpanded: true, decoration:
                    InputDecoration( border: OutlineInputBorder( borderRadius: BorderRadius.circular(8.0),
                    borderSide: BorderSide( color: colorScheme.outline, ), ), contentPadding:
                    const EdgeInsets.symmetric( horizontal: 16.0, vertical: 12.0,
                    ), filled: true, fillColor: colorScheme.surface, ), items: [ DropdownMenuItem(
                    value: ''A4'', child: Text(l10n.a4Size), ), DropdownMenuItem(
                    value: ''A5'', child: Text(l10n.a5Size), ), DropdownMenuItem(
                    value: ''custom'', child: Text(l10n.customSize), ), ], onChanged:
                    (value) { if (value != null) { _handlePageSizePresetChange(value,
                    orientation); } }, ), ), ), const SizedBox(height: 16.0), Text(''${l10n.pageOrientation}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8.0), Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(4.0), child:
                    Row( children: [ Expanded( child: RadioListTile<String>( title:
                    Text(l10n.portrait), value: ''portrait'', groupValue: orientation,
                    activeColor: colorScheme.primary, onChanged: (value) { if (value
                    != null && value != orientation) { final Map<String, dynamic>
                    updates = { ''orientation'': value }; if (width > height) { updates[''width'']
                    = height; updates[''height''] = width; _widthController.text =
                    height.toString(); _heightController.text = width.toString();
                    } widget.onPagePropertiesChanged(updates); } }, ), ), Expanded(
                    child: RadioListTile<String>( title: Text(l10n.landscape), value:
                    ''landscape'', groupValue: orientation, activeColor: colorScheme.primary,
                    onChanged: (value) { if (value != null && value != orientation)
                    { final Map<String, dynamic> updates = { ''orientation'': value
                    }; if (width < height) { updates[''width''] = height; updates[''height'']
                    = width; _widthController.text = height.toString(); _heightController.text
                    = width.toString(); } widget.onPagePropertiesChanged(updates);
                    } }, ), ), ], ), ), ), const SizedBox(height: 16.0), Text(''${l10n.dimensions}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8.0), Row( children: [ Expanded( child: EditableNumberField( label:
                    l10n.width, value: width, suffix: ''mm'', min: 10, max: 1000,
                    onChanged: (value) => _updateWidth(value.toString()), ), ), const
                    SizedBox(width: 8.0), Expanded( child: EditableNumberField( label:
                    l10n.height, value: height, suffix: ''mm'', min: 10, max: 1000,
                    onChanged: (value) => _updateHeight(value.toString()), ), ), ],
                    ), const SizedBox(height: 16.0), Text(''${l10n.ppiSetting}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8.0), Row( children: [ Expanded( flex: 3, child: Slider( value:
                    dpi.toDouble(), min: 72, max: 600, divisions: 528, label: ''${dpi.toString()}
                    DPI'', activeColor: colorScheme.primary, thumbColor: colorScheme.primary,
                    onChanged: (value) => _updateDpi(value.toInt().toString()), ),
                    ), const SizedBox(width: 8.0), Expanded( flex: 2, child: EditableNumberField(
                    label: ''PPI'', value: dpi.toDouble(), suffix: '''', min: 72,
                    max: 600, decimalPlaces: 0, onChanged: (value) => _updateDpi(value.toInt().toString()),
                    ), ), ], ), const SizedBox(height: 8.0), Container( padding: const
                    EdgeInsets.all(12.0), decoration: BoxDecoration( color: colorScheme.tertiaryContainer.withValues(alpha:
                    0.3), borderRadius: BorderRadius.circular(8.0), ), child: Row(
                    children: [ Icon(Icons.info_outline, color: colorScheme.tertiary,
                    size: 20), const SizedBox(width: 8), Expanded( child: Text( ''${l10n.canvasPixelSize}:
                    ${_calculatePixelSize(width, height, dpi)}'', style: TextStyle(
                    fontSize: 14, color: colorScheme.tertiary), ), ), ], ), ), ],
                    ), ), ], ), M3PanelStyles.buildPersistentPanelCard( context: context,
                    panelId: ''page_background_color'', title: l10n.backgroundColor,
                    defaultExpanded: true, children: [ Padding( padding: const EdgeInsets.symmetric(horizontal:
                    16.0, vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Row( children: [ InkWell( onTap: () async { final
                    color = await M3ColorPicker.show( context, initialColor: _getBackgroundColor(),
                    enableAlpha: false, ); if (color != null) { _updateBackgroundColor(color);
                    } }, child: Container( width: 40, height: 40, decoration: BoxDecoration(
                    color: _getBackgroundColor(), border: Border.all(color: colorScheme.outline),
                    borderRadius: BorderRadius.circular(8), ), ), ), const SizedBox(width:
                    16), Text( l10n.backgroundColor, style: TextStyle( color: colorScheme.onSurface,
                    ), ), ], ), ], ), ), ], ), M3PanelStyles.buildPersistentPanelCard(
                    context: context, panelId: ''page_grid_settings'', title: l10n.gridSettings,
                    defaultExpanded: true, children: [ Padding( padding: const EdgeInsets.symmetric(horizontal:
                    16.0, vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: SwitchListTile( title: Text(l10n.showGrid), value: widget.controller.state.gridVisible,
                    activeColor: colorScheme.primary, onChanged: (value) { widget.onPagePropertiesChanged({''gridVisible'':
                    value}); widget.controller.state.gridVisible = value; setState(()
                    {}); }, ), ), const SizedBox(height: 16.0), Text(''${l10n.gridSize}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8.0), Row( children: [ Expanded( flex: 3, child: Slider( value:
                    widget.controller.state.gridSize, min: 5.0, max: 500.0, divisions:
                    99, label: widget.controller.state.gridSize .toStringAsFixed(0),
                    activeColor: colorScheme.primary, thumbColor: colorScheme.primary,
                    onChanged: (value) { setState(() { widget .onPagePropertiesChanged({''gridSize'':
                    value}); widget.controller.state.gridSize = value; }); }, ), ),
                    const SizedBox(width: 8.0), Expanded( flex: 1, child: Text( ''${widget.controller.state.gridSize.toStringAsFixed(0)}
                    ${l10n.pixels}'', style: TextStyle( fontWeight: FontWeight.bold,
                    color: colorScheme.onSurface, ), textAlign: TextAlign.center,
                    ), ), ], ), ], ), ), ], ), ], ); } @override void didUpdateWidget(M3PagePropertyPanel
                    oldWidget) { super.didUpdateWidget(oldWidget); if (widget.page
                    != null && oldWidget.page != widget.page) { _widthController.text
                    = ((widget.page![''width''] as num?)?.toDouble() ?? 210.0).toString();
                    _heightController.text = ((widget.page![''height''] as num?)?.toDouble()
                    ?? 297.0).toString(); _dpiController.text = ((widget.page![''dpi'']
                    as num?)?.toInt() ?? 300).toString(); String backgroundColor =
                    ''#FFFFFF''; if (widget.page!.containsKey(''background'') && (widget.page![''background'']
                    as Map<String, dynamic>) .containsKey(''value'')) { backgroundColor
                    = (widget.page![''background''] as Map<String, dynamic>)[''value'']
                    as String; } _backgroundColorController.text = backgroundColor.startsWith(''#'')
                    ? backgroundColor.substring(1) : backgroundColor; } } @override
                    void dispose() { _widthFocusNode.removeListener(_handleWidthFocusChange);
                    _heightFocusNode.removeListener(_handleHeightFocusChange); _dpiFocusNode.removeListener(_handleDpiFocusChange);
                    widget.controller.removeListener(_handleControllerChange); _widthController.dispose();
                    _heightController.dispose(); _dpiController.dispose(); _backgroundColorController.dispose();
                    _widthFocusNode.dispose(); _heightFocusNode.dispose(); _dpiFocusNode.dispose();
                    super.dispose(); } @override void initState() { super.initState();
                    _widthController = TextEditingController(); _heightController
                    = TextEditingController(); _dpiController = TextEditingController();
                    _backgroundColorController = TextEditingController(); _widthFocusNode
                    = FocusNode(); _heightFocusNode = FocusNode(); _dpiFocusNode =
                    FocusNode(); if (widget.page != null) { _widthController.text
                    = ((widget.page![''width''] as num?)?.toDouble() ?? 210.0).toString();
                    _heightController.text = ((widget.page![''height''] as num?)?.toDouble()
                    ?? 297.0).toString(); _dpiController.text = ((widget.page![''dpi'']
                    as num?)?.toInt() ?? 300).toString(); String backgroundColor =
                    ''#FFFFFF''; if (widget.page!.containsKey(''background'') && (widget.page![''background'']
                    as Map<String, dynamic>) .containsKey(''value'')) { backgroundColor
                    = (widget.page![''background''] as Map<String, dynamic>)[''value'']
                    as String; } _backgroundColorController.text = backgroundColor.startsWith(''#'')
                    ? backgroundColor.substring(1) : backgroundColor; } _widthFocusNode.addListener(_handleWidthFocusChange);
                    _heightFocusNode.addListener(_handleHeightFocusChange); _dpiFocusNode.addListener(_handleDpiFocusChange);
                    widget.controller.addListener(_handleControllerChange); } String
                    _calculatePixelSize(double width, double height, int dpi) { final
                    widthInches = width / 25.4; final heightInches = height / 25.4;
                    final widthPixels = (widthInches * dpi).round(); final heightPixels
                    = (heightInches * dpi).round(); return ''$widthPixels × $heightPixels
                    ${AppLocalizations.of(context).pixels}''; } Color _getBackgroundColor()
                    { if (widget.page == null) { return Colors.white; } if (widget.page!.containsKey(''background'')
                    && (widget.page![''background''] as Map<String, dynamic>) .containsKey(''value''))
                    { final background = widget.page![''background''] as Map<String,
                    dynamic>; final colorStr = background[''value''] as String; final
                    color = Color(int.parse(colorStr.substring(1), radix: 16) | 0xFF000000);
                    return color; } return Colors.white; } String _getPageSizePreset(double
                    width, double height) { double portraitWidth = width; double portraitHeight
                    = height; if (width > height) { portraitWidth = height; portraitHeight
                    = width; } if ((portraitWidth - 210.0).abs() < 1 && (portraitHeight
                    - 297.0).abs() < 1) { return ''A4''; } else if ((portraitWidth
                    - 148.0).abs() < 1 && (portraitHeight - 210.0).abs() < 1) { return
                    ''A5''; } else { return ''custom''; } } void _handleControllerChange()
                    { setState(() {}); } void _handleDpiFocusChange() { if (!_dpiFocusNode.hasFocus)
                    { _updateDpi(_dpiController.text); } } void _handleHeightFocusChange()
                    { if (!_heightFocusNode.hasFocus) { _updateHeight(_heightController.text);
                    } } void _handlePageSizePresetChange(String preset, String orientation)
                    { double width, height; switch (preset) { case ''A4'': width =
                    210.0; height = 297.0; break; case ''A5'': width = 148.0; height
                    = 210.0; break; case ''custom'': return; default: return; } if
                    (orientation == ''landscape'') { final temp = width; width = height;
                    height = temp; } _widthController.text = width.toString(); _heightController.text
                    = height.toString(); widget.onPagePropertiesChanged({ ''width'':
                    width, ''height'': height, }); } void _handleWidthFocusChange()
                    { if (!_widthFocusNode.hasFocus) { _updateWidth(_widthController.text);
                    } } void _updateBackgroundColor(Color color) { final colorHex
                    = ''#${color.red.toRadixString(16).padLeft(2, ''0'')}${color.green.toRadixString(16).padLeft(2,
                    ''0'')}${color.blue.toRadixString(16).padLeft(2, ''0'')}''; EditPageLogger.propertyPanelDebug(
                    ''更新页面背景颜色'
                  file: presentation\widgets\practice\property_panels\m3_practice_property_panel_page.dart
                  line: 90
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - sansSerifConstDropdownmenuitemValueSerifChildTextSerifConstDropdownmenuitemValueMonospaceChildTextMonospaceDropdownmenuitemValueSourcehansansChildTextApplocalizationsOfContextSourcehansansfontDropdownmenuitemValueSourcehanserifChildTextApplocalizationsOfContextSourcehanseriffontOnchangedValueIfValueNullFontfamilyValueConstSizedboxHeightBuildsectiontitleContextFontweightColumnCrossaxisalignmentCrossaxisalignmentStartChildrenWrapSpacingRunspacingChildrenContextLightFontweightContextNormalRegularFontweightContextBoldBoldFontweightConstSizedboxHeightRowChildrenExpandedFlexChildSliderValueFontweightMinMaxDivisionsLabelFontweightActivecolorColorschemePrimaryInactivecolorColorschemeSurfacecontainerhighestThumbcolorColorschemePrimaryOnchangedValueFinalWeightvalueValueRoundStringWeightstringIfWeightvalueWeightstringNormalElseIfWeightvalueWeightstringBoldElseWeightstringWWeightvalueFontweightWeightstringConstSizedboxWidthExpandedFlexChildDropdownbuttonformfieldStringDecorationInputdecorationLabeltextFontweightBorderConstOutlineinputborderContentpaddingConstEdgeinsetsSymmetricHorizontalVerticalValueFontweightIsexpandedTrueItemsConstDropdownmenuitemValueChildTextThinDropdownmenuitemValueChildTextExtraLightDropdownmenuitemValueChildTextLightDropdownmenuitemValueNormalChildTextRegularDropdownmenuitemValueChildTextMediumDropdownmenuitemValueChildTextSemiBoldDropdownmenuitemValueBoldChildTextBoldDropdownmenuitemValueChildTextExtraBoldDropdownmenuitemValueChildTextBlackOnchangedValueIfValueNullFontweightValueIfFontfamilySourcehansansFontfamilySourcehanserifPaddingPaddingConstEdgeinsetsOnlyTopChildRowChildrenIconIconsSizeColorColorschemePrimaryConstSizedboxWidthExpandedChildText
                - action: create_new
                  text_zh: 'Sans Serif'')), const DropdownMenuItem(value: ''serif'',
                    child: Text(''Serif'')), const DropdownMenuItem( value: ''monospace'',
                    child: Text(''Monospace'')), DropdownMenuItem( value: ''SourceHanSans'',
                    child: Text(AppLocalizations.of(context).sourceHanSansFont)),
                    DropdownMenuItem( value: ''SourceHanSerif'', child: Text( AppLocalizations.of(context).sourceHanSerifFont)),
                    ], onChanged: (value) { if (value != null) { _updateContentProperty(''fontFamily'',
                    value); } }, ), ), ], ), const SizedBox(height: 16.0), M3PanelStyles.buildSectionTitle(
                    context, l10n.fontWeight), Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Wrap( spacing: 8.0, runSpacing: 8.0, children: [ _buildFontWeightButton(context,
                    ''w300'', ''Light'', fontWeight), _buildFontWeightButton( context,
                    ''normal'', ''Regular'', fontWeight), _buildFontWeightButton(context,
                    ''bold'', ''Bold'', fontWeight), ], ), const SizedBox(height:
                    12.0), Row( children: [ Expanded( flex: 3, child: Slider( value:
                    _getFontWeightValue(fontWeight), min: 100, max: 900, divisions:
                    8, label: _getFontWeightLabel(fontWeight), activeColor: colorScheme.primary,
                    inactiveColor: colorScheme.surfaceContainerHighest, thumbColor:
                    colorScheme.primary, onChanged: (value) { final weightValue =
                    value.round(); String weightString; if (weightValue == 400) {
                    weightString = ''normal''; } else if (weightValue == 700) { weightString
                    = ''bold''; } else { weightString = ''w$weightValue''; } _updateContentProperty(''fontWeight'',
                    weightString); }, ), ), const SizedBox(width: 8.0), Expanded(
                    flex: 2, child: DropdownButtonFormField<String>( decoration: InputDecoration(
                    labelText: l10n.fontWeight, border: const OutlineInputBorder(),
                    contentPadding: const EdgeInsets.symmetric( horizontal: 12.0,
                    vertical: 8.0), ), value: fontWeight, isExpanded: true, items:
                    const [ DropdownMenuItem( value: ''w100'', child: Text(''Thin
                    (w100)'')), DropdownMenuItem( value: ''w200'', child: Text(''Extra
                    Light (w200)'')), DropdownMenuItem( value: ''w300'', child: Text(''Light
                    (w300)'')), DropdownMenuItem( value: ''normal'', child: Text(''Regular
                    (w400)'')), DropdownMenuItem( value: ''w500'', child: Text(''Medium
                    (w500)'')), DropdownMenuItem( value: ''w600'', child: Text(''Semi
                    Bold (w600)'')), DropdownMenuItem( value: ''bold'', child: Text(''Bold
                    (w700)'')), DropdownMenuItem( value: ''w800'', child: Text(''Extra
                    Bold (w800)'')), DropdownMenuItem( value: ''w900'', child: Text(''Black
                    (w900)'')), ], onChanged: (value) { if (value != null) { _updateContentProperty(''fontWeight'',
                    value); } }, ), ), ], ), if (fontFamily == ''SourceHanSans'' ||
                    fontFamily == ''SourceHanSerif'') Padding( padding: const EdgeInsets.only(top:
                    8.0), child: Row( children: [ Icon( Icons.info_outline, size:
                    16, color: colorScheme.primary, ), const SizedBox(width: 4), Expanded(
                    child: Text( ''思源字体支持更精确的字重变化'
                  text_en: 'Sans Serif'')), const DropdownMenuItem(value: ''serif'',
                    child: Text(''Serif'')), const DropdownMenuItem( value: ''monospace'',
                    child: Text(''Monospace'')), DropdownMenuItem( value: ''SourceHanSans'',
                    child: Text(AppLocalizations.of(context).sourceHanSansFont)),
                    DropdownMenuItem( value: ''SourceHanSerif'', child: Text( AppLocalizations.of(context).sourceHanSerifFont)),
                    ], onChanged: (value) { if (value != null) { _updateContentProperty(''fontFamily'',
                    value); } }, ), ), ], ), const SizedBox(height: 16.0), M3PanelStyles.buildSectionTitle(
                    context, l10n.fontWeight), Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Wrap( spacing: 8.0, runSpacing: 8.0, children: [ _buildFontWeightButton(context,
                    ''w300'', ''Light'', fontWeight), _buildFontWeightButton( context,
                    ''normal'', ''Regular'', fontWeight), _buildFontWeightButton(context,
                    ''bold'', ''Bold'', fontWeight), ], ), const SizedBox(height:
                    12.0), Row( children: [ Expanded( flex: 3, child: Slider( value:
                    _getFontWeightValue(fontWeight), min: 100, max: 900, divisions:
                    8, label: _getFontWeightLabel(fontWeight), activeColor: colorScheme.primary,
                    inactiveColor: colorScheme.surfaceContainerHighest, thumbColor:
                    colorScheme.primary, onChanged: (value) { final weightValue =
                    value.round(); String weightString; if (weightValue == 400) {
                    weightString = ''normal''; } else if (weightValue == 700) { weightString
                    = ''bold''; } else { weightString = ''w$weightValue''; } _updateContentProperty(''fontWeight'',
                    weightString); }, ), ), const SizedBox(width: 8.0), Expanded(
                    flex: 2, child: DropdownButtonFormField<String>( decoration: InputDecoration(
                    labelText: l10n.fontWeight, border: const OutlineInputBorder(),
                    contentPadding: const EdgeInsets.symmetric( horizontal: 12.0,
                    vertical: 8.0), ), value: fontWeight, isExpanded: true, items:
                    const [ DropdownMenuItem( value: ''w100'', child: Text(''Thin
                    (w100)'')), DropdownMenuItem( value: ''w200'', child: Text(''Extra
                    Light (w200)'')), DropdownMenuItem( value: ''w300'', child: Text(''Light
                    (w300)'')), DropdownMenuItem( value: ''normal'', child: Text(''Regular
                    (w400)'')), DropdownMenuItem( value: ''w500'', child: Text(''Medium
                    (w500)'')), DropdownMenuItem( value: ''w600'', child: Text(''Semi
                    Bold (w600)'')), DropdownMenuItem( value: ''bold'', child: Text(''Bold
                    (w700)'')), DropdownMenuItem( value: ''w800'', child: Text(''Extra
                    Bold (w800)'')), DropdownMenuItem( value: ''w900'', child: Text(''Black
                    (w900)'')), ], onChanged: (value) { if (value != null) { _updateContentProperty(''fontWeight'',
                    value); } }, ), ), ], ), if (fontFamily == ''SourceHanSans'' ||
                    fontFamily == ''SourceHanSerif'') Padding( padding: const EdgeInsets.only(top:
                    8.0), child: Row( children: [ Icon( Icons.info_outline, size:
                    16, color: colorScheme.primary, ), const SizedBox(width: 4), Expanded(
                    child: Text( ''思源字体支持更精确的字重变化'
                  file: presentation\widgets\practice\property_panels\m3_practice_property_panel_text.dart
                  line: 454
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - position1
                - action: create_new
                  text_zh: 位置
                  text_en: 位置
                  file: presentation\widgets\practice\property_panels\property_panel_base.dart
                  line: 29
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - xSizedboxWidthChildTextformfieldInitialvalueElementXTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalXDoubleTryparseValueIfXNullOnelementchangedElementCopywithXXConstSizedboxWidthConstTextYSizedboxWidthChildTextformfieldInitialvalueElementYTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalYDoubleTryparseValueIfYNullOnelementchangedElementCopywithYYConstDividerRowChildrenSizedboxWidthChildTextElementsizeStyleConstTextstyleFontweightFontweightBoldTextElementwidthSizedboxWidthChildTextformfieldInitialvalueElementWidthTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalWidthDoubleTryparseValueIfWidthNullWidthOnelementchangedElementCopywithWidthWidthConstSizedboxWidthTextElementheightSizedboxWidthChildTextformfieldInitialvalueElementHeightTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalHeightDoubleTryparseValueIfHeightNullHeightOnelementchangedElementCopywithHeightHeightConstDividerRowChildrenConstSizedboxWidthChildText
                - action: create_new
                  text_zh: 'X: ''), SizedBox( width: 70, child: TextFormField( initialValue:
                    element.x.toString(), keyboardType: TextInputType.number, decoration:
                    const InputDecoration( isDense: true, contentPadding: EdgeInsets.symmetric(horizontal:
                    8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value)
                    { final x = double.tryParse(value); if (x != null) { onElementChanged(element.copyWith(x:
                    x)); } }, ), ), const SizedBox(width: 8), const Text(''Y: ''),
                    SizedBox( width: 70, child: TextFormField( initialValue: element.y.toString(),
                    keyboardType: TextInputType.number, decoration: const InputDecoration(
                    isDense: true, contentPadding: EdgeInsets.symmetric(horizontal:
                    8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value)
                    { final y = double.tryParse(value); if (y != null) { onElementChanged(element.copyWith(y:
                    y)); } }, ), ), ], ), const Divider(), Row( children: [ SizedBox(
                    width: 100, child: Text( l10n.elementSize, style: const TextStyle(fontWeight:
                    FontWeight.bold), ), ), Text(''${l10n.elementWidth}: ''), SizedBox(
                    width: 70, child: TextFormField( initialValue: element.width.toString(),
                    keyboardType: TextInputType.number, decoration: const InputDecoration(
                    isDense: true, contentPadding: EdgeInsets.symmetric(horizontal:
                    8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value)
                    { final width = double.tryParse(value); if (width != null && width
                    > 0) { onElementChanged(element.copyWith(width: width)); } },
                    ), ), const SizedBox(width: 8), Text(''${l10n.elementHeight}:
                    ''), SizedBox( width: 70, child: TextFormField( initialValue:
                    element.height.toString(), keyboardType: TextInputType.number,
                    decoration: const InputDecoration( isDense: true, contentPadding:
                    EdgeInsets.symmetric(horizontal: 8, vertical: 8), border: OutlineInputBorder(),
                    ), onChanged: (value) { final height = double.tryParse(value);
                    if (height != null && height > 0) { onElementChanged(element.copyWith(height:
                    height)); } }, ), ), ], ), const Divider(), Row( children: [ const
                    SizedBox( width: 100, child: Text( ''旋转角度'
                  text_en: 'X: ''), SizedBox( width: 70, child: TextFormField( initialValue:
                    element.x.toString(), keyboardType: TextInputType.number, decoration:
                    const InputDecoration( isDense: true, contentPadding: EdgeInsets.symmetric(horizontal:
                    8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value)
                    { final x = double.tryParse(value); if (x != null) { onElementChanged(element.copyWith(x:
                    x)); } }, ), ), const SizedBox(width: 8), const Text(''Y: ''),
                    SizedBox( width: 70, child: TextFormField( initialValue: element.y.toString(),
                    keyboardType: TextInputType.number, decoration: const InputDecoration(
                    isDense: true, contentPadding: EdgeInsets.symmetric(horizontal:
                    8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value)
                    { final y = double.tryParse(value); if (y != null) { onElementChanged(element.copyWith(y:
                    y)); } }, ), ), ], ), const Divider(), Row( children: [ SizedBox(
                    width: 100, child: Text( l10n.elementSize, style: const TextStyle(fontWeight:
                    FontWeight.bold), ), ), Text(''${l10n.elementWidth}: ''), SizedBox(
                    width: 70, child: TextFormField( initialValue: element.width.toString(),
                    keyboardType: TextInputType.number, decoration: const InputDecoration(
                    isDense: true, contentPadding: EdgeInsets.symmetric(horizontal:
                    8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value)
                    { final width = double.tryParse(value); if (width != null && width
                    > 0) { onElementChanged(element.copyWith(width: width)); } },
                    ), ), const SizedBox(width: 8), Text(''${l10n.elementHeight}:
                    ''), SizedBox( width: 70, child: TextFormField( initialValue:
                    element.height.toString(), keyboardType: TextInputType.number,
                    decoration: const InputDecoration( isDense: true, contentPadding:
                    EdgeInsets.symmetric(horizontal: 8, vertical: 8), border: OutlineInputBorder(),
                    ), onChanged: (value) { final height = double.tryParse(value);
                    if (height != null && height > 0) { onElementChanged(element.copyWith(height:
                    height)); } }, ), ), ], ), const Divider(), Row( children: [ const
                    SizedBox( width: 100, child: Text( ''旋转角度'
                  file: presentation\widgets\practice\property_panels\property_panel_base.dart
                  line: 33
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - elementRotationTointTextalignTextalignRightConstDividerRowChildrenConstSizedboxWidthChildText
                - action: create_new
                  text_zh: '${element.rotation.toInt()}°'', textAlign: TextAlign.right,
                    ), ), ], ), const Divider(), Row( children: [ const SizedBox(
                    width: 100, child: Text( ''透明度'
                  text_en: '${element.rotation.toInt()}°'', textAlign: TextAlign.right,
                    ), ), ], ), const Divider(), Row( children: [ const SizedBox(
                    width: 100, child: Text( ''透明度'
                  file: presentation\widgets\practice\property_panels\property_panel_base.dart
                  line: 156
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - elementOpacityTointTextalignTextalignRightConstDividerRowChildrenSizedboxWidthChildTextLockStyleConstTextstyleFontweightFontweightBoldCheckboxValueElementIslockedOnchangedValueIfValueNullOnelementchangedElementCopywithIslockedValueTextElementIslockedLockedUnlockedConstDividerRowChildrenConstSizedboxWidthChildText
                - action: create_new
                  text_zh: '${(element.opacity * 100).toInt()}%'', textAlign: TextAlign.right,
                    ), ), ], ), const Divider(), Row( children: [ SizedBox( width:
                    100, child: Text( l10n.lock, style: const TextStyle(fontWeight:
                    FontWeight.bold), ), ), Checkbox( value: element.isLocked, onChanged:
                    (value) { if (value != null) { onElementChanged(element.copyWith(isLocked:
                    value)); } }, ), Text(element.isLocked ? l10n.locked : l10n.unlocked),
                    ], ), const Divider(), Row( children: [ const SizedBox( width:
                    100, child: Text( ''所属图层'
                  text_en: '${(element.opacity * 100).toInt()}%'', textAlign: TextAlign.right,
                    ), ), ], ), const Divider(), Row( children: [ SizedBox( width:
                    100, child: Text( l10n.lock, style: const TextStyle(fontWeight:
                    FontWeight.bold), ), ), Checkbox( value: element.isLocked, onChanged:
                    (value) { if (value != null) { onElementChanged(element.copyWith(isLocked:
                    value)); } }, ), Text(element.isLocked ? l10n.locked : l10n.unlocked),
                    ], ), const Divider(), Row( children: [ const SizedBox( width:
                    100, child: Text( ''所属图层'
                  file: presentation\widgets\practice\property_panels\property_panel_base.dart
                  line: 188
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - colorToradixstringSubstringTouppercaseConstSpacerPopupmenubuttonColorTooltip
                - action: create_new
                  text_zh: '#${color.toARGB32().toRadixString(16).substring(2).toUpperCase()}''),
                    const Spacer(), PopupMenuButton<Color>( tooltip: ''选择颜色'
                  text_en: '#${color.toARGB32().toRadixString(16).substring(2).toUpperCase()}''),
                    const Spacer(), PopupMenuButton<Color>( tooltip: ''选择颜色'
                  file: presentation\widgets\practice\property_panels\property_panel_base.dart
                  line: 285
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - stretchDropdownmenuitemValueRepeatChildTextTexturefillmoderepeatDropdownmenuitemValueCoverChildTextTexturefillmodecoverDropdownmenuitemValueContainChildTextTexturefillmodecontainOnchangedValueIfValueNullApploggerInfo
                - action: create_new
                  text_zh: 'Stretch''), ), DropdownMenuItem( value: ''repeat'', child:
                    Text(l10n.textureFillModeRepeat), ), DropdownMenuItem( value:
                    ''cover'', child: Text(l10n.textureFillModeCover), ), DropdownMenuItem(
                    value: ''contain'', child: Text(l10n.textureFillModeContain),
                    ), ], onChanged: (value) { if (value != null) { AppLogger.info(
                    ''纹理填充模式变更'
                  text_en: 'Stretch''), ), DropdownMenuItem( value: ''repeat'', child:
                    Text(l10n.textureFillModeRepeat), ), DropdownMenuItem( value:
                    ''cover'', child: Text(l10n.textureFillModeCover), ), DropdownMenuItem(
                    value: ''contain'', child: Text(l10n.textureFillModeContain),
                    ), ], onChanged: (value) { if (value != null) { AppLogger.info(
                    ''纹理填充模式变更'
                  file: presentation\widgets\practice\property_panels\collection_panels\m3_background_texture_panel.dart
                  line: 191
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - opacityStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedFlexChildSliderValueOpacityMinMaxDivisionsLabelOpacityTostringasfixedActivecolorColorschemePrimaryThumbcolorColorschemePrimaryOnchangedValueOnpropertyupdateOpacityValueConstSizedboxWidthExpandedFlexChildEditablenumberfieldLabelOpacityValueOpacitySuffixMinMaxDecimalplacesOnchangedValueOnpropertyupdateOpacityValueConstSizedboxHeightTextBackgroundcolorStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenInkwellOntapAsyncFinalColorAwaitShowContextInitialcolorBackgroundcolorEnablealphaTrueIfColorNullIfColorColorsTransparentOncontentpropertyupdateBackgroundcolorTransparentElseFinalArgbColorFinalHexcolorArgbToradixstringPadleftSubstringOncontentpropertyupdateBackgroundcolorHexcolorChildContainerWidthHeightDecorationBoxdecorationColorBackgroundcolorBorderBorderAllColorColorschemeOutlineBorderradiusBorderradiusCircularImageBackgroundcolorColorsTransparentConstDecorationimageImageAssetimageAssetsImagesPngRepeatImagerepeatRepeatNullConstSizedboxWidthTextBackgroundcolorStyleTextstyleColorColorschemeOnsurfaceClassImagepropertyselectionpanelExtendsStatelesswidgetFinalVoidcallbackOnselectfromlibraryFinalVoidcallbackOnselectfromlocalConstImagepropertyselectionpanelSuperKeyRequiredThisOnselectfromlibraryRequiredThisOnselectfromlocalOverrideWidgetBuildBuildcontextContextFinalApplocalizationsOfContextFinalThemeThemeOfContextFinalColorschemeThemeColorschemeReturnCardElevationMarginConstEdgeinsetsSymmetricHorizontalVerticalShapeRoundedrectangleborderBorderradiusBorderradiusCircularClipbehaviorClipAntialiasChildExpansiontileTitleTextImageselectionInitiallyexpandedTrueChildrenPaddingPaddingConstEdgeinsetsSymmetricHorizontalVerticalChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenFilledbuttonTonaliconIconConstIconIconsOnpressedOnselectfromlibraryLabelTextFromgalleryStyleFilledbuttonStylefromMinimumsizeConstSizeFromheightBackgroundcolorColorschemePrimarycontainerForegroundcolorColorschemeOnprimarycontainerConstSizedboxHeightFilledbuttonTonaliconIconConstIconIconsOnpressedOnselectfromlocalLabelTextFromlocalStyleFilledbuttonStylefromMinimumsizeConstSizeFromheightClassImagepropertyfitmodepanelExtendsStatelesswidgetFinalStringFitmodeFinalFunctionStringOnfitmodechangedConstImagepropertyfitmodepanelSuperKeyRequiredThisFitmodeRequiredThisOnfitmodechangedOverrideWidgetBuildBuildcontextContextFinalApplocalizationsOfContextFinalThemeThemeOfContextFinalColorschemeThemeColorschemeReturnCardElevationMarginConstEdgeinsetsSymmetricHorizontalVerticalShapeRoundedrectangleborderBorderradiusBorderradiusCircularClipbehaviorClipAntialiasChildExpansiontileTitleTextFitmodeInitiallyexpandedTrueChildrenPaddingPaddingConstEdgeinsetsSymmetricHorizontalVerticalChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildSegmentedbuttonStringSegmentsButtonsegmentStringValueContainLabelTextFitcontainIconConstIconIconsButtonsegmentStringValueCoverLabelTextFitcoverIconConstIconIconsCropButtonsegmentStringValueFillLabelTextFitfillIconConstIconIconsButtonsegmentStringValueNoneLabelTextOriginalIconConstIconIconsImageSelectedFitmodeOnselectionchangedSetStringSelectionIfSelectionIsnotemptyOnfitmodechangedSelectionFirstClassImagepropertypreviewpanelExtendsStatelesswidgetFinalStringImageurlFinalStringFitmodeFinalDoubleCroptopFinalDoubleCropbottomFinalDoubleCropleftFinalDoubleCroprightFinalBoolFliphorizontalFinalBoolFlipverticalFinalDoubleContentrotationFinalBoolIstransformappliedFinalSizeImagesizeFinalSizeRendersizeFinalFunctionSizeSizeOnimagesizeavailableConstImagepropertypreviewpanelSuperKeyRequiredThisImageurlRequiredThisFitmodeRequiredThisCroptopRequiredThisCropbottomRequiredThisCropleftRequiredThisCroprightRequiredThisFliphorizontalRequiredThisFlipverticalRequiredThisContentrotationRequiredThisIstransformappliedRequiredThisImagesizeRequiredThisRendersizeRequiredThisOnimagesizeavailableOverrideWidgetBuildBuildcontextContextFinalApplocalizationsOfContextFinalThemeThemeOfContextFinalColorschemeThemeColorschemeReturnCardElevationMarginConstEdgeinsetsSymmetricHorizontalVerticalShapeRoundedrectangleborderBorderradiusBorderradiusCircularClipbehaviorClipAntialiasChildExpansiontileTitleTextPreviewInitiallyexpandedTrueChildrenPaddingPaddingConstEdgeinsetsSymmetricHorizontalVerticalChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenContainerWidthDoubleInfinityPaddingConstEdgeinsetsAllMarginConstEdgeinsetsOnlyBottomDecorationBoxdecorationColorColorschemeTertiarycontainerWithalphaTointBorderradiusBorderradiusCircularChildTextImagepropertypanelpreviewnoticeStyleTextstyleFontsizeColorColorschemeTertiaryTextalignTextalignCenterContextWidgetBuildcontextContextFinalApplocalizationsOfContextFinalThemeThemeOfContextFinalColorschemeThemeColorschemeConstPreviewfitmodeContainReturnContainerHeightWidthDoubleInfinityDecorationBoxdecorationBorderBorderAllColorColorschemeOutlineBorderradiusBorderradiusCircularColorColorschemeSurfacecontainerhighestWithalphaTointChildImageurlIsnotemptyLayoutbuilderBuilderContextConstraintsReturnStackChildrenPositionedFillChildCliprectChildTransformTransformIdentityScaleFliphorizontalFlipverticalAlignmentAlignmentCenterChildContextContextImageurlImageurlFitmodePreviewfitmodeOnimagesizeavailableOnimagesizeavailableIfImagesizeNullRendersizeNullContextContextContainerconstraintsConstraintsCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenIconIconsSizeColorColorschemeOutlineConstSizedboxHeightTextNoimageselectedStyleTextstyleColorColorschemeOutlineWidgetRequiredBuildcontextContextRequiredStringImageurlRequiredBoxfitFitmodeRequiredFunctionSizeSizeOnimagesizeavailableFinalApplocalizationsOfContextIfImageurlStartswithFileTryStringFilepathImageurlSubstringFinalFileFileFilepathIfFileExistssyncReturnCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenConstIconIconsColorColorsRedSizeConstSizedboxHeightTextFilenotexistFilepathStyleConstTextstyleColorColorsRedTextalignTextalignCenterReturnLayoutbuilderBuilderBuildcontextContextBoxconstraintsConstraintsReturnCachedimagePathFilepathFitFitmodeErrorbuilderContextErrorStacktraceReturnCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenConstIconIconsErrorColorColorsRedSizeConstSizedboxHeightTextImageloaderrorErrorTostringSubstringMathMinErrorTostringLengthStyleConstTextstyleColorColorsRedTextalignTextalignCenterOnimageloadedSizeSizeFinalImagesizeSizeFinalRendersizeImagesizeConstraintsBiggestFitmodeBoxfitContainContainFitmodeBoxfitCoverCoverFitmodeBoxfitFillFillNoneIfContextMountedOnimagesizeavailableImagesizeRendersizeCatchEReturnCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenConstIconIconsColorColorsRedSizeConstSizedboxHeightTextImageprocessingpatherrorETostringStyleConstTextstyleColorColorsRedTextalignTextalignCenterElseReturnLayoutbuilderBuilderBuildcontextContextBoxconstraintsConstraintsFinalImageproviderNetworkimageImageurlFinalImagestreamImageproviderResolveImageconfigurationSizeConstraintsBiggestImagestreamAddlistenerImagestreamlistenerImageinfoInfoBoolFinalImagesizeSizeInfoImageWidthTodoubleInfoImageHeightTodoubleFinalRendersizeImagesizeConstraintsBiggestFitmodeBoxfitContainContainFitmodeBoxfitCoverCoverFitmodeBoxfitFillFillNoneWidgetsbindingInstanceAddpostframecallbackIfContextMountedOnimagesizeavailableImagesizeRendersizeOnerrorExceptionStacktraceEditpageloggerPropertypanelerror
                - action: create_new
                  text_zh: '${l10n.opacity}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8.0), Row( children:
                    [ Expanded( flex: 3, child: Slider( value: opacity, min: 0.0,
                    max: 1.0, divisions: 100, label: ''${(opacity * 100).toStringAsFixed(0)}%'',
                    activeColor: colorScheme.primary, thumbColor: colorScheme.primary,
                    onChanged: (value) => onPropertyUpdate(''opacity'', value), ),
                    ), const SizedBox(width: 8.0), Expanded( flex: 2, child: EditableNumberField(
                    label: l10n.opacity, value: opacity * 100, suffix: ''%'', min:
                    0, max: 100, decimalPlaces: 0, onChanged: (value) { onPropertyUpdate(''opacity'',
                    value / 100); }, ), ), ], ), const SizedBox(height: 16.0), Text(''${l10n.backgroundColor}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8.0), Row( children: [ InkWell( onTap: () async { final color
                    = await M3ColorPicker.show( context, initialColor: backgroundColor(),
                    enableAlpha: true, ); if (color != null) { if (color == Colors.transparent)
                    { onContentPropertyUpdate( ''backgroundColor'', ''transparent'');
                    } else { final argb = color.toARGB32(); final hexColor = ''#${argb.toRadixString(16).padLeft(8,
                    ''0'').substring(2)}''; onContentPropertyUpdate(''backgroundColor'',
                    hexColor); } } }, child: Container( width: 40, height: 40, decoration:
                    BoxDecoration( color: backgroundColor(), border: Border.all(color:
                    colorScheme.outline), borderRadius: BorderRadius.circular(8),
                    image: backgroundColor() == Colors.transparent ? const DecorationImage(
                    image: AssetImage( ''assets/images/transparent_bg.png''), repeat:
                    ImageRepeat.repeat, ) : null, ), ), ), const SizedBox(width: 16),
                    Text( l10n.backgroundColor, style: TextStyle( color: colorScheme.onSurface,
                    ), ), ], ), ], ), ), ], ), ); } } class ImagePropertySelectionPanel
                    extends StatelessWidget { final VoidCallback onSelectFromLibrary;
                    final VoidCallback onSelectFromLocal; const ImagePropertySelectionPanel({
                    super.key, required this.onSelectFromLibrary, required this.onSelectFromLocal,
                    }); @override Widget build(BuildContext context) { final l10n
                    = AppLocalizations.of(context); final theme = Theme.of(context);
                    final colorScheme = theme.colorScheme; return Card( elevation:
                    0, margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical:
                    4.0), shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), clipBehavior: Clip.antiAlias, child: ExpansionTile( title:
                    Text(l10n.imageSelection), initiallyExpanded: true, children:
                    [ Padding( padding: const EdgeInsets.symmetric(horizontal: 16.0,
                    vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ FilledButton.tonalIcon( icon: const Icon(Icons.collections_bookmark),
                    onPressed: onSelectFromLibrary, label: Text(l10n.fromGallery),
                    style: FilledButton.styleFrom( minimumSize: const Size.fromHeight(48),
                    backgroundColor: colorScheme.primaryContainer, foregroundColor:
                    colorScheme.onPrimaryContainer, ), ), const SizedBox(height: 8.0),
                    FilledButton.tonalIcon( icon: const Icon(Icons.photo_library),
                    onPressed: onSelectFromLocal, label: Text(l10n.fromLocal), style:
                    FilledButton.styleFrom( minimumSize: const Size.fromHeight(48),
                    ), ), ], ), ), ], ), ); } } class ImagePropertyFitModePanel extends
                    StatelessWidget { final String fitMode; final Function(String)
                    onFitModeChanged; const ImagePropertyFitModePanel({ super.key,
                    required this.fitMode, required this.onFitModeChanged, }); @override
                    Widget build(BuildContext context) { final l10n = AppLocalizations.of(context);
                    final theme = Theme.of(context); final colorScheme = theme.colorScheme;
                    return Card( elevation: 0, margin: const EdgeInsets.symmetric(horizontal:
                    8.0, vertical: 4.0), shape: RoundedRectangleBorder( borderRadius:
                    BorderRadius.circular(12.0), ), clipBehavior: Clip.antiAlias,
                    child: ExpansionTile( title: Text(l10n.fitMode), initiallyExpanded:
                    true, children: [ Padding( padding: const EdgeInsets.symmetric(horizontal:
                    16.0, vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    SegmentedButton<String>( segments: [ ButtonSegment<String>( value:
                    ''contain'', label: Text(l10n.fitContain), icon: const Icon(Icons.fit_screen),
                    ), ButtonSegment<String>( value: ''cover'', label: Text(l10n.fitCover),
                    icon: const Icon(Icons.crop), ), ButtonSegment<String>( value:
                    ''fill'', label: Text(l10n.fitFill), icon: const Icon(Icons.aspect_ratio),
                    ), ButtonSegment<String>( value: ''none'', label: Text(l10n.original),
                    icon: const Icon(Icons.image), ), ], selected: {fitMode}, onSelectionChanged:
                    (Set<String> selection) { if (selection.isNotEmpty) { onFitModeChanged(selection.first);
                    } }, ), ), ), ], ), ), ], ), ); } } class ImagePropertyPreviewPanel
                    extends StatelessWidget { final String imageUrl; final String
                    fitMode; final double cropTop; final double cropBottom; final
                    double cropLeft; final double cropRight; final bool flipHorizontal;
                    final bool flipVertical; final double contentRotation; final bool
                    isTransformApplied; final Size? imageSize; final Size? renderSize;
                    final Function(Size, Size) onImageSizeAvailable; const ImagePropertyPreviewPanel({
                    super.key, required this.imageUrl, required this.fitMode, required
                    this.cropTop, required this.cropBottom, required this.cropLeft,
                    required this.cropRight, required this.flipHorizontal, required
                    this.flipVertical, required this.contentRotation, required this.isTransformApplied,
                    required this.imageSize, required this.renderSize, required this.onImageSizeAvailable,
                    }); @override Widget build(BuildContext context) { final l10n
                    = AppLocalizations.of(context); final theme = Theme.of(context);
                    final colorScheme = theme.colorScheme; return Card( elevation:
                    0, margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical:
                    4.0), shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), clipBehavior: Clip.antiAlias, child: ExpansionTile( title:
                    Text(l10n.preview), initiallyExpanded: true, children: [ Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical:
                    8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Container( width: double.infinity, padding: const
                    EdgeInsets.all(12.0), margin: const EdgeInsets.only(bottom: 12.0),
                    decoration: BoxDecoration( color: colorScheme.tertiaryContainer
                    .withAlpha((0.3 * 255).toInt()), borderRadius: BorderRadius.circular(8.0),
                    ), child: Text( l10n.imagePropertyPanelPreviewNotice, style: TextStyle(
                    fontSize: 12, color: colorScheme.tertiary), textAlign: TextAlign.center,
                    ), ), _buildImagePreviewWithTransformBox(context), ], ), ), ],
                    ), ); } Widget _buildImagePreviewWithTransformBox(BuildContext
                    context) { final l10n = AppLocalizations.of(context); final theme
                    = Theme.of(context); final colorScheme = theme.colorScheme; const
                    previewFitMode = ''contain''; return Container( height: 240, width:
                    double.infinity, decoration: BoxDecoration( border: Border.all(color:
                    colorScheme.outline), borderRadius: BorderRadius.circular(12.0),
                    color: colorScheme.surfaceContainerHighest.withAlpha((0.5 * 255).toInt()),
                    ), child: imageUrl.isNotEmpty ? LayoutBuilder( builder: (context,
                    constraints) { return Stack( children: [ Positioned.fill( child:
                    ClipRect( child: Transform( transform: Matrix4.identity() ..scale(
                    flipHorizontal ? -1.0 : 1.0, flipVertical ? -1.0 : 1.0, ), alignment:
                    Alignment.center, child: _buildImageWithSizeListener( context:
                    context, imageUrl: imageUrl, fitMode: _getFitMode(previewFitMode),
                    onImageSizeAvailable: onImageSizeAvailable, ), ), ), ), if (imageSize
                    != null && renderSize != null) _buildTransformPreviewRect( context:
                    context, containerConstraints: constraints, ), ], ); }, ) : Center(
                    child: Column( mainAxisAlignment: MainAxisAlignment.center, children:
                    [ Icon(Icons.image_not_supported, size: 48, color: colorScheme.outline),
                    const SizedBox(height: 12), Text(l10n.noImageSelected, style:
                    TextStyle(color: colorScheme.outline)), ], ), ), ); } Widget _buildImageWithSizeListener({
                    required BuildContext context, required String imageUrl, required
                    BoxFit fitMode, required Function(Size, Size) onImageSizeAvailable,
                    }) { final l10n = AppLocalizations.of(context); if (imageUrl.startsWith(''file:
                    try { String filePath = imageUrl.substring(7); final file = File(filePath);
                    if (!file.existsSync()) { return Center( child: Column( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ const Icon(Icons.error_outline,
                    color: Colors.red, size: 40), const SizedBox(height: 8), Text(
                    l10n.fileNotExist(filePath), style: const TextStyle(color: Colors.red),
                    textAlign: TextAlign.center, ), ], ), ); } return LayoutBuilder(
                    builder: (BuildContext context, BoxConstraints constraints) {
                    return CachedImage( path: filePath, fit: fitMode, errorBuilder:
                    (context, error, stackTrace) { return Center( child: Column( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ const Icon(Icons.error,
                    color: Colors.red, size: 48), const SizedBox(height: 8), Text(
                    l10n.imageLoadError(error .toString() .substring( 0, math.min(error.toString().length,
                    50))), style: const TextStyle(color: Colors.red), textAlign: TextAlign.center,
                    ), ], ), ); }, onImageLoaded: (Size size) { final imageSize =
                    size; final renderSize = _calculateRenderSize( imageSize, constraints.biggest,
                    fitMode == BoxFit.contain ? ''contain'' : fitMode == BoxFit.cover
                    ? ''cover'' : fitMode == BoxFit.fill ? ''fill'' : ''none''); if
                    (context.mounted) { onImageSizeAvailable(imageSize, renderSize);
                    } }, ); }, ); } catch (e) { return Center( child: Column( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ const Icon(Icons.error_outline,
                    color: Colors.red, size: 40), const SizedBox(height: 8), Text(
                    l10n.imageProcessingPathError(e.toString()), style: const TextStyle(color:
                    Colors.red), textAlign: TextAlign.center, ), ], ), ); } } else
                    { return LayoutBuilder( builder: (BuildContext context, BoxConstraints
                    constraints) { final imageProvider = NetworkImage(imageUrl); final
                    imageStream = imageProvider.resolve(ImageConfiguration( size:
                    constraints.biggest, )); imageStream.addListener(ImageStreamListener(
                    (ImageInfo info, bool _) { final imageSize = Size( info.image.width.toDouble(),
                    info.image.height.toDouble(), ); final renderSize = _calculateRenderSize(
                    imageSize, constraints.biggest, fitMode == BoxFit.contain ? ''contain''
                    : fitMode == BoxFit.cover ? ''cover'' : fitMode == BoxFit.fill
                    ? ''fill'' : ''none'', ); WidgetsBinding.instance.addPostFrameCallback((_)
                    { if (context.mounted) { onImageSizeAvailable(imageSize, renderSize);
                    } }); }, onError: (exception, stackTrace) { EditPageLogger.propertyPanelError(
                    ''图像加载错误'
                  text_en: '${l10n.opacity}:'', style: const TextStyle(fontWeight:
                    FontWeight.bold)), const SizedBox(height: 8.0), Row( children:
                    [ Expanded( flex: 3, child: Slider( value: opacity, min: 0.0,
                    max: 1.0, divisions: 100, label: ''${(opacity * 100).toStringAsFixed(0)}%'',
                    activeColor: colorScheme.primary, thumbColor: colorScheme.primary,
                    onChanged: (value) => onPropertyUpdate(''opacity'', value), ),
                    ), const SizedBox(width: 8.0), Expanded( flex: 2, child: EditableNumberField(
                    label: l10n.opacity, value: opacity * 100, suffix: ''%'', min:
                    0, max: 100, decimalPlaces: 0, onChanged: (value) { onPropertyUpdate(''opacity'',
                    value / 100); }, ), ), ], ), const SizedBox(height: 16.0), Text(''${l10n.backgroundColor}:'',
                    style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height:
                    8.0), Row( children: [ InkWell( onTap: () async { final color
                    = await M3ColorPicker.show( context, initialColor: backgroundColor(),
                    enableAlpha: true, ); if (color != null) { if (color == Colors.transparent)
                    { onContentPropertyUpdate( ''backgroundColor'', ''transparent'');
                    } else { final argb = color.toARGB32(); final hexColor = ''#${argb.toRadixString(16).padLeft(8,
                    ''0'').substring(2)}''; onContentPropertyUpdate(''backgroundColor'',
                    hexColor); } } }, child: Container( width: 40, height: 40, decoration:
                    BoxDecoration( color: backgroundColor(), border: Border.all(color:
                    colorScheme.outline), borderRadius: BorderRadius.circular(8),
                    image: backgroundColor() == Colors.transparent ? const DecorationImage(
                    image: AssetImage( ''assets/images/transparent_bg.png''), repeat:
                    ImageRepeat.repeat, ) : null, ), ), ), const SizedBox(width: 16),
                    Text( l10n.backgroundColor, style: TextStyle( color: colorScheme.onSurface,
                    ), ), ], ), ], ), ), ], ), ); } } class ImagePropertySelectionPanel
                    extends StatelessWidget { final VoidCallback onSelectFromLibrary;
                    final VoidCallback onSelectFromLocal; const ImagePropertySelectionPanel({
                    super.key, required this.onSelectFromLibrary, required this.onSelectFromLocal,
                    }); @override Widget build(BuildContext context) { final l10n
                    = AppLocalizations.of(context); final theme = Theme.of(context);
                    final colorScheme = theme.colorScheme; return Card( elevation:
                    0, margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical:
                    4.0), shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), clipBehavior: Clip.antiAlias, child: ExpansionTile( title:
                    Text(l10n.imageSelection), initiallyExpanded: true, children:
                    [ Padding( padding: const EdgeInsets.symmetric(horizontal: 16.0,
                    vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ FilledButton.tonalIcon( icon: const Icon(Icons.collections_bookmark),
                    onPressed: onSelectFromLibrary, label: Text(l10n.fromGallery),
                    style: FilledButton.styleFrom( minimumSize: const Size.fromHeight(48),
                    backgroundColor: colorScheme.primaryContainer, foregroundColor:
                    colorScheme.onPrimaryContainer, ), ), const SizedBox(height: 8.0),
                    FilledButton.tonalIcon( icon: const Icon(Icons.photo_library),
                    onPressed: onSelectFromLocal, label: Text(l10n.fromLocal), style:
                    FilledButton.styleFrom( minimumSize: const Size.fromHeight(48),
                    ), ), ], ), ), ], ), ); } } class ImagePropertyFitModePanel extends
                    StatelessWidget { final String fitMode; final Function(String)
                    onFitModeChanged; const ImagePropertyFitModePanel({ super.key,
                    required this.fitMode, required this.onFitModeChanged, }); @override
                    Widget build(BuildContext context) { final l10n = AppLocalizations.of(context);
                    final theme = Theme.of(context); final colorScheme = theme.colorScheme;
                    return Card( elevation: 0, margin: const EdgeInsets.symmetric(horizontal:
                    8.0, vertical: 4.0), shape: RoundedRectangleBorder( borderRadius:
                    BorderRadius.circular(12.0), ), clipBehavior: Clip.antiAlias,
                    child: ExpansionTile( title: Text(l10n.fitMode), initiallyExpanded:
                    true, children: [ Padding( padding: const EdgeInsets.symmetric(horizontal:
                    16.0, vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), child: Padding( padding: const EdgeInsets.all(8.0), child:
                    SegmentedButton<String>( segments: [ ButtonSegment<String>( value:
                    ''contain'', label: Text(l10n.fitContain), icon: const Icon(Icons.fit_screen),
                    ), ButtonSegment<String>( value: ''cover'', label: Text(l10n.fitCover),
                    icon: const Icon(Icons.crop), ), ButtonSegment<String>( value:
                    ''fill'', label: Text(l10n.fitFill), icon: const Icon(Icons.aspect_ratio),
                    ), ButtonSegment<String>( value: ''none'', label: Text(l10n.original),
                    icon: const Icon(Icons.image), ), ], selected: {fitMode}, onSelectionChanged:
                    (Set<String> selection) { if (selection.isNotEmpty) { onFitModeChanged(selection.first);
                    } }, ), ), ), ], ), ), ], ), ); } } class ImagePropertyPreviewPanel
                    extends StatelessWidget { final String imageUrl; final String
                    fitMode; final double cropTop; final double cropBottom; final
                    double cropLeft; final double cropRight; final bool flipHorizontal;
                    final bool flipVertical; final double contentRotation; final bool
                    isTransformApplied; final Size? imageSize; final Size? renderSize;
                    final Function(Size, Size) onImageSizeAvailable; const ImagePropertyPreviewPanel({
                    super.key, required this.imageUrl, required this.fitMode, required
                    this.cropTop, required this.cropBottom, required this.cropLeft,
                    required this.cropRight, required this.flipHorizontal, required
                    this.flipVertical, required this.contentRotation, required this.isTransformApplied,
                    required this.imageSize, required this.renderSize, required this.onImageSizeAvailable,
                    }); @override Widget build(BuildContext context) { final l10n
                    = AppLocalizations.of(context); final theme = Theme.of(context);
                    final colorScheme = theme.colorScheme; return Card( elevation:
                    0, margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical:
                    4.0), shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0),
                    ), clipBehavior: Clip.antiAlias, child: ExpansionTile( title:
                    Text(l10n.preview), initiallyExpanded: true, children: [ Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical:
                    8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start,
                    children: [ Container( width: double.infinity, padding: const
                    EdgeInsets.all(12.0), margin: const EdgeInsets.only(bottom: 12.0),
                    decoration: BoxDecoration( color: colorScheme.tertiaryContainer
                    .withAlpha((0.3 * 255).toInt()), borderRadius: BorderRadius.circular(8.0),
                    ), child: Text( l10n.imagePropertyPanelPreviewNotice, style: TextStyle(
                    fontSize: 12, color: colorScheme.tertiary), textAlign: TextAlign.center,
                    ), ), _buildImagePreviewWithTransformBox(context), ], ), ), ],
                    ), ); } Widget _buildImagePreviewWithTransformBox(BuildContext
                    context) { final l10n = AppLocalizations.of(context); final theme
                    = Theme.of(context); final colorScheme = theme.colorScheme; const
                    previewFitMode = ''contain''; return Container( height: 240, width:
                    double.infinity, decoration: BoxDecoration( border: Border.all(color:
                    colorScheme.outline), borderRadius: BorderRadius.circular(12.0),
                    color: colorScheme.surfaceContainerHighest.withAlpha((0.5 * 255).toInt()),
                    ), child: imageUrl.isNotEmpty ? LayoutBuilder( builder: (context,
                    constraints) { return Stack( children: [ Positioned.fill( child:
                    ClipRect( child: Transform( transform: Matrix4.identity() ..scale(
                    flipHorizontal ? -1.0 : 1.0, flipVertical ? -1.0 : 1.0, ), alignment:
                    Alignment.center, child: _buildImageWithSizeListener( context:
                    context, imageUrl: imageUrl, fitMode: _getFitMode(previewFitMode),
                    onImageSizeAvailable: onImageSizeAvailable, ), ), ), ), if (imageSize
                    != null && renderSize != null) _buildTransformPreviewRect( context:
                    context, containerConstraints: constraints, ), ], ); }, ) : Center(
                    child: Column( mainAxisAlignment: MainAxisAlignment.center, children:
                    [ Icon(Icons.image_not_supported, size: 48, color: colorScheme.outline),
                    const SizedBox(height: 12), Text(l10n.noImageSelected, style:
                    TextStyle(color: colorScheme.outline)), ], ), ), ); } Widget _buildImageWithSizeListener({
                    required BuildContext context, required String imageUrl, required
                    BoxFit fitMode, required Function(Size, Size) onImageSizeAvailable,
                    }) { final l10n = AppLocalizations.of(context); if (imageUrl.startsWith(''file:
                    try { String filePath = imageUrl.substring(7); final file = File(filePath);
                    if (!file.existsSync()) { return Center( child: Column( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ const Icon(Icons.error_outline,
                    color: Colors.red, size: 40), const SizedBox(height: 8), Text(
                    l10n.fileNotExist(filePath), style: const TextStyle(color: Colors.red),
                    textAlign: TextAlign.center, ), ], ), ); } return LayoutBuilder(
                    builder: (BuildContext context, BoxConstraints constraints) {
                    return CachedImage( path: filePath, fit: fitMode, errorBuilder:
                    (context, error, stackTrace) { return Center( child: Column( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ const Icon(Icons.error,
                    color: Colors.red, size: 48), const SizedBox(height: 8), Text(
                    l10n.imageLoadError(error .toString() .substring( 0, math.min(error.toString().length,
                    50))), style: const TextStyle(color: Colors.red), textAlign: TextAlign.center,
                    ), ], ), ); }, onImageLoaded: (Size size) { final imageSize =
                    size; final renderSize = _calculateRenderSize( imageSize, constraints.biggest,
                    fitMode == BoxFit.contain ? ''contain'' : fitMode == BoxFit.cover
                    ? ''cover'' : fitMode == BoxFit.fill ? ''fill'' : ''none''); if
                    (context.mounted) { onImageSizeAvailable(imageSize, renderSize);
                    } }, ); }, ); } catch (e) { return Center( child: Column( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ const Icon(Icons.error_outline,
                    color: Colors.red, size: 40), const SizedBox(height: 8), Text(
                    l10n.imageProcessingPathError(e.toString()), style: const TextStyle(color:
                    Colors.red), textAlign: TextAlign.center, ), ], ), ); } } else
                    { return LayoutBuilder( builder: (BuildContext context, BoxConstraints
                    constraints) { final imageProvider = NetworkImage(imageUrl); final
                    imageStream = imageProvider.resolve(ImageConfiguration( size:
                    constraints.biggest, )); imageStream.addListener(ImageStreamListener(
                    (ImageInfo info, bool _) { final imageSize = Size( info.image.width.toDouble(),
                    info.image.height.toDouble(), ); final renderSize = _calculateRenderSize(
                    imageSize, constraints.biggest, fitMode == BoxFit.contain ? ''contain''
                    : fitMode == BoxFit.cover ? ''cover'' : fitMode == BoxFit.fill
                    ? ''fill'' : ''none'', ); WidgetsBinding.instance.addPostFrameCallback((_)
                    { if (context.mounted) { onImageSizeAvailable(imageSize, renderSize);
                    } }); }, onError: (exception, stackTrace) { EditPageLogger.propertyPanelError(
                    ''图像加载错误'
                  file: presentation\widgets\practice\property_panels\image\image_property_panel_widgets.dart
                  line: 190
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - snapshotErrorUnknownerrorStyleTextstyleColorColorschemeOnsurfacevariantFontsizeTextalignTextalignCenterFinalLoadedimageforcanvasSnapshotDataFinalRegionRefWatchSelectedregionproviderReturnColumnChildrenExpandedChildStackChildrenRegionNullRegionRegionCanvaskeyImageLoadedimageforcanvasHandleerasestartHandleeraseupdateHandleeraseendConstSizedboxIfRegionNullPositionedRightTopChildIfPositionedLeftTopChildSavestateIfSavestateIssavingContainerColorColorsChildCenterChildCardElevationColorColorschemeSurfaceShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnMainaxissizeMainaxissizeMinChildrenCircularprogressindicatorColorColorschemePrimaryConstSizedboxHeightTextSavestateProgressStyleThemeOfContextTextthemeTitlemediumCopywithColorColorschemeOnsurfaceIfSavestateProgressNullConstSizedboxHeightRowMainaxisalignmentMainaxisalignmentCenterChildrenSizedboxWidthChildLinearprogressindicatorValueSavestateProgressBackgroundcolorColorschemeSurfacecontainerhighestValuecolorAlwaysstoppedanimationColorColorschemePrimaryConstSizedboxWidthTextSavestateProgressTointStyleThemeOfContextTextthemeBodymediumCopywithColorColorschemeOnsurfacevariantWidgetStringMessageFinalColorschemeThemeOfContextColorschemeReturnContainerWidthHeightDecorationBoxdecorationColorColorschemeSurfacecontainerhighestBorderradiusBorderradiusCircularChildCenterChildColumnMainaxissizeMainaxissizeMinChildrenIconIconsColorColorschemeErrorConstSizedboxWidthTextMessageStyleTextstyleFontsizeColorColorschemeOnsurfacevariantTextalignTextalignCenterWidgetApplocalizationsFinalColorschemeThemeOfContextColorschemeReturnCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenCircularprogressindicatorStrokewidthColorColorschemePrimaryConstSizedboxHeightTextLoadingimageStyleTextstyleColorColorschemeOnsurfacevariantWidgetFinalColorschemeThemeOfContextColorschemeReturnContainerWidthHeightDecorationBoxdecorationColorColorschemeSurfacecontainerhighestBorderradiusBorderradiusCircularChildCenterChildCircularprogressindicatorColorColorschemePrimaryStrokewidthWidgetApplocalizationsFinalRegionRefWatchSelectedregionproviderIfRegionNullApploggerDebugCharactereditpanelNoSelectedRegionNotShowingThumbnailReturnConstSizedboxShrinkIfRegionCharacteridNullApploggerDebugCharactereditpanelRegionNotAssociatedWithCharacterNotShowingThumbnailReturnConstSizedboxShrinkFinalCachekeyRegionIdRegionCharacteridApploggerDebugBuildingThumbnailWithCacheKeyDataCachekeyCachekeyReturnFuturebuilderStringKeyValuekeyCachekeyFutureBuilderContextSnapshotApploggerDebugCharactereditpanelBuildingThumbnailPreviewDataHaserrorSnapshotHaserrorHasdataSnapshotHasdataConnectionstateSnapshotConnectionstateTostringIfSnapshotHaserrorApploggerErrorCharactereditpanelFailedToGetThumbnailPathErrorSnapshotErrorReturnThumbnailloaderrorIfSnapshotHasdataApploggerDebugCharactereditpanelWaitingForThumbnailPathReturnFinalThumbnailpathSnapshotDataApploggerDebugCharactereditpanelGotThumbnailPathDataPathThumbnailpathReturnFuturebuilderBoolFutureFileThumbnailpathExistsBuilderContextExistssnapshotIfExistssnapshotHaserrorApploggerErrorCharactereditpanelFailedToCheckIfThumbnailFileExistsErrorExistssnapshotErrorReturnThumbnailcheckfailedIfExistssnapshotHasdataApploggerDebugCharactereditpanelCheckingIfThumbnailFileExistsReturnFinalExistsExistssnapshotDataApploggerDebugCharactereditpanelThumbnailFileExistsDataExistsExistsIfExistsApploggerErrorCharactereditpanelThumbnailFileDoesNotExistDataPathThumbnailpathReturnThumbnailnotfoundReturnFuturebuilderIntFutureFileThumbnailpathLengthBuilderContextSizesnapshotIfSizesnapshotHaserrorApploggerErrorCharactereditpanelFailedToGetThumbnailFileSizeErrorSizesnapshotErrorReturnGetthumbnailsizeerrorIfSizesnapshotHasdataApploggerDebugCharactereditpanelGettingThumbnailFileSizeReturnFinalFilesizeSizesnapshotDataApploggerDebugCharactereditpanelThumbnailFileSizeDataFilesizeFilesizeIfFilesizeApploggerErrorCharactereditpanelThumbnailFileSizeIsDataPathThumbnailpathReturnThumbnailemptyFinalColorschemeThemeOfContextColorschemeReturnCardElevationShapeRoundedrectangleborderBorderradiusBorderradiusCircularSideBordersideColorColorschemeOutlinevariantWidthClipbehaviorClipAntialiasChildCachedimagePathThumbnailpathWidthHeightFitBoxfitCoverKeyValuekeyCachekeyErrorbuilderContextErrorStacktraceApploggerErrorCharactereditpanelFailedToLoadThumbnailErrorErrorStacktraceStacktraceDataPathThumbnailpathReturnThumbnailloaderrorWidgetApplocalizationsFinalErasestateRefWatchEraseErasestateproviderFinalColorschemeThemeOfContextColorschemeReturnContainerPaddingConstEdgeinsetsSymmetricHorizontalVerticalColorColorschemeSurfaceChildColumnMainaxissizeMainaxissizeMinChildrenRowMainaxissizeMainaxissizeMaxCrossaxisalignmentCrossaxisalignmentCenterChildrenIconIconsUndoTooltipUndoOnpressedErasestateCanundoRefReadEraseErasestateproviderNotifierUndoNullShortcutEditorshortcutsUndoIconIconsRedoTooltipRedoOnpressedErasestateCanredoRefReadEraseErasestateproviderNotifierRedoNullShortcutEditorshortcutsRedoConstSpacerIconIconsTooltipInvertmodeOnpressedRefReadEraseErasestateproviderNotifierTogglereverseIsactiveErasestateIsreversedShortcutEditorshortcutsToggleinvertIconIconsFlipTooltipImageinvertOnpressedRefReadEraseErasestateproviderNotifierToggleimageinvertIsactiveErasestateImageinvertmodeShortcutEditorshortcutsToggleimageinvertIconIconsTooltipShowcontourOnpressedRefReadEraseErasestateproviderNotifierTogglecontourIsactiveErasestateShowcontourShortcutEditorshortcutsTogglecontourConstSizedboxHeightRepaintboundaryChildContainerPaddingConstEdgeinsetsSymmetricVerticalHorizontalDecorationBoxdecorationColorColorschemeSurfacecontainerlowBorderradiusBorderradiusCircularChildRowMainaxissizeMainaxissizeMaxCrossaxisalignmentCrossaxisalignmentCenterChildrenRepaintboundaryChildTooltipMessageBrushsizeChildIconIconsBrushSizeColorColorschemeOnsurfacevariantConstSizedboxWidthConstExpandedChildContainerWidthAlignmentAlignmentCenterChildConsumerBuilderContextRefChildFinalBrushsizetextRefWatchEraseBrushsizetextproviderReturnTextBrushsizetextStyleTextstyleFontsizeColorColorschemeOnsurfacevariantConstSizedboxHeightRepaintboundaryChildContainerPaddingConstEdgeinsetsSymmetricVerticalHorizontalDecorationBoxdecorationColorColorschemeSurfacecontainerlowBorderradiusBorderradiusCircularChildRowMainaxissizeMainaxissizeMaxCrossaxisalignmentCrossaxisalignmentCenterChildrenRepaintboundaryChildTooltipMessageThresholdChildIconIconsContrastSizeColorColorschemeOnsurfacevariantConstSizedboxWidthConstExpandedChildRepaintboundaryChildContainerWidthAlignmentAlignmentCenterChildConsumerBuilderContextRefChildFinalThresholdtextRefWatchEraseThresholdtextproviderReturnTextThresholdtextStyleTextstyleFontsizeColorColorschemeOnsurfacevariantConstSizedboxHeightRepaintboundaryChildContainerPaddingConstEdgeinsetsSymmetricVerticalHorizontalDecorationBoxdecorationColorColorschemeSurfacecontainerlowBorderradiusBorderradiusCircularChildRowMainaxissizeMainaxissizeMaxCrossaxisalignmentCrossaxisalignmentCenterChildrenRepaintboundaryChildTooltipMessageNoisereductionChildIconIconsSizeColorColorschemeOnsurfacevariantConstSizedboxWidthRepaintboundaryChildConsumerBuilderContextRefChildFinalNoisereductionRefWatchEraseNoisereductionproviderReturnSwitchValueNoisereductionOnchangedValueRefReadEraseErasestateproviderNotifierTogglenoisereductionValueConstSizedboxWidthConstExpandedChildRepaintboundaryChildContainerWidthAlignmentAlignmentCenterChildConsumerBuilderContextRefChildFinalNoisereductiontextRefWatchEraseNoisereductiontextproviderReturnTextNoisereductiontextStyleTextstyleFontsizeColorNoisereductiontextColorschemeOnsurfacevariantColorschemeOnsurfacevariantWithvaluesAlphaWidgetListButtonsFinalColorschemeThemeOfContextColorschemeReturnCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildRowMainaxissizeMainaxissizeMinChildrenButtonsMapButtonFinalIsfirstButtonsIndexofButtonFinalIslastButtonsIndexofButtonButtonsLengthReturnPaddingPaddingConstEdgeinsetsSymmetricVerticalHorizontalChildTooltipMessageShortcuttooltipbuilderBuildButtonTooltipButtonShortcutChildStackChildrenIconbuttonIconIconButtonIconSizeColorButtonIsactiveColorschemePrimaryButtonOnpressedNullColorschemeOnsurfacevariantWithvaluesAlphaColorschemeOnsurfacevariantOnpressedButtonOnpressedStyleIconbuttonStylefromBackgroundcolorButtonIsactiveColorschemePrimarycontainerNullForegroundcolorButtonIsactiveColorschemeOnprimarycontainerNullShapeRoundedrectangleborderBorderradiusBorderradiusHorizontalLeftRadiusCircularIsfirstRightRadiusCircularIslastTolistDoubleDoublePathlengthIfPathlengthReturnElseIfPathlengthReturnElseIfPathlengthReturnElseReturnListMapStringDoublePathPathListMapStringDoubleSerializablepointsTryForFinalMetricInPathComputemetricsIfMetricLengthFinalPathboundsPathGetboundsSerializablepointsAddDxPathboundsCenterDxDyPathboundsCenterDyContinueFinalSteplengthMetricLengthFinalStarttangentMetricGettangentforoffsetIfStarttangentNullSerializablepointsAddDxStarttangentPositionDxDyStarttangentPositionDyForDoubleDistanceSteplengthDistanceMetricLengthDistanceSteplengthFinalTangentMetricGettangentforoffsetDistanceIfTangentNullSerializablepointsAddDxTangentPositionDxDyTangentPositionDyIfMetricLengthFinalLasttangentMetricGettangentforoffsetMetricLengthIfLasttangentNullIfSerializablepointsIsemptySerializablepointsLastDxLasttangentPositionDxSerializablepointsLastDyLasttangentPositionDySerializablepointsAddDxLasttangentPositionDxDyLasttangentPositionDyCatchEApploggerErrorFailedToExtractPointsFromPathErrorEReturnSerializablepointsStringDoubleProgressApplocalizationsIfProgressNullReturnPreparingsaveIfProgressReturnInitializingIfProgressReturnProcessingerasedataIfProgressReturnSavingtostorageIfProgressReturnProcessingimageIfProgressReturnCompletingsaveReturnSavecompleteFutureStringAsyncTryApploggerDebugGettingThumbnailPathDataRegionidWidgetSelectedregionIdCharacteridWidgetSelectedregionCharacteridFinalStringCharacteridWidgetSelectedregionCharacteridWidgetSelectedregionIdApploggerDebugThumbnailContextInfoDataWorkidWidgetWorkidPageidWidgetPageidCharacteridCharacteridFinalPathAwaitRefReadCharactercollectionproviderNotifierGetthumbnailpathCharacteridIfPathNullApploggerErrorThumbnailPathIsNullDataCharacteridCharacteridReturnNullFinalFileFilePathFinalExistsAwaitFileExistsIfExistsApploggerErrorThumbnailFileDoesNotExistDataPathPathReturnNullFinalFilesizeAwaitFileLengthIfFilesizeApploggerErrorThumbnailFileSizeIsDataPathPathReturnNullReturnPathCatchEStackApploggerErrorFailedToGetThumbnailPathErrorEStacktraceStackDataCharacteridWidgetSelectedregionCharacteridRegionidWidgetSelectedregionIdReturnNullVoidBoolIncreaseFinalErasestateRefReadEraseErasestateproviderFinalErasenotifierRefReadEraseErasestateproviderNotifierDoubleNewsizeErasestateBrushsizeIfIncreaseNewsizeEditorshortcutsBrushsizestepIfNewsizeEditorshortcutsMaxbrushsizeNewsizeEditorshortcutsMaxbrushsizeElseNewsizeEditorshortcutsBrushsizestepIfNewsizeEditorshortcutsMinbrushsizeNewsizeEditorshortcutsMinbrushsizeErasenotifierSetbrushsizeNewsizeApploggerDebugAdjustingBrushSizeDataOperationIncreaseIncreaseDecreaseOldsizeErasestateBrushsizeNewsizeNewsizeVoidRefReadEraseErasestateproviderNotifierCompletepathVoidOffsetPositionRefReadEraseErasestateproviderNotifierStartpathPositionVoidOffsetPositionOffsetDeltaRefReadEraseErasestateproviderNotifierUpdatepathPositionBoolKeyeventEventIfMountedReturnFalseIfEventLogicalkeyLogicalkeyboardkeyAltEventLogicalkeyLogicalkeyboardkeyAltleftEventLogicalkeyLogicalkeyboardkeyAltrightBoolIsdownEventIsKeydowneventBoolIsupEventIsKeyupeventIfIsdownIsupIfCurrentstateNullApploggerDebugAltKeyStateChangedDataIsdownIsdownReturnFalseIfEventIsKeydowneventHardwarekeyboardInstanceIscontrolpressedIfEventLogicalkeyLogicalkeyboardkeyEqualEventLogicalkeyLogicalkeyboardkeyAddTrueReturnTrueElseIfEventLogicalkeyLogicalkeyboardkeyMinusEventLogicalkeyLogicalkeyboardkeyUnderscoreFalseReturnTrueReturnFalseFutureVoidAsyncFinalApplocalizationsOfContextFinalValidationValidatecharacterTextIfValidationIsvalidScaffoldmessengerOfContextShowsnackbarSnackbarContentTextValidationErrorSetstateTrueReturnFinalSavenotifierRefReadCharactersavenotifierproviderNotifierFinalCollectionnotifierRefReadCharactercollectionproviderNotifierTryFinalConfirmedAwaitContextCharacterTextIfConfirmedTrueApploggerDebugUserCanceledSaveOperationCancelSavenotifierFinishsavingReturnIfMountedApploggerDebugComponentUnmountedCancelingSaveCancelSavenotifierFinishsavingReturnApploggerDebugStartingSaveOperationSavenotifierStartsavingAwaitFutureMicrotaskIfMountedReturnSavenotifierUpdateprogressFinalPathrenderdataRefReadErasePathrenderdataproviderFinalErasestateRefReadEraseErasestateproviderFinalCompletedpathsPathrenderdataCompletedpathsFinalListMapStringDynamicErasedataIfCompletedpathsIsnotemptyTryFinalPathdatafutureComputeListMapStringDynamicListMapStringDynamicPathsdataReturnPathsdataCompletedpathsMapPathFinalPointsPathPathReturnPointsPointsBrushsizePathBrushsizeBrushcolorPathBrushcolorTolistSavenotifierUpdateprogressErasedataAddallAwaitPathdatafutureCatchEApploggerErrorPathDataProcessingFailedEIfErasedataIsnotemptyFinalFirstpathErasedataFirstFinalPointsFirstpathPointsAsListMapStringDoubleApploggerDebugValidatingErasePathDataDataErasepathsErasedataLengthFirstpathbrushsizeFirstpathBrushsizeFirstpathbrushcolorFirstpathBrushcolorAsIntToradixstringFirstpathpointcountPointsLengthFirstpathsamplepointsPointsTakeMapPPDxTostringasfixedPDyTostringasfixedTolistFinalProcessingoptionsProcessingoptionsInvertedErasestateImageinvertmodeShowcontourErasestateShowcontourBrushsizeErasestateBrushsizeContrastWidgetProcessingoptionsContrastBrightnessWidgetProcessingoptionsBrightnessThresholdWidgetProcessingoptionsThresholdNoisereductionWidgetProcessingoptionsNoisereductionFinalSelectedregionRefReadSelectedregionproviderIfSelectedregionNullThrowNoregionboxedFinalUpdatedregionSelectedregionCopywithPageidWidgetPageidCharacterTextOptionsProcessingoptionsIsmodifiedFalseErasedataErasedataIsnotemptyErasedataNullTryVarProgressConstUpdateintervalDurationMillisecondsTimerPeriodicUpdateintervalTimerIfMountedTimerCancelReturnDoubleIncrementIfProgressIncrementElseIfProgressIncrementElseIncrementIfProgressProgressIncrementSavenotifierUpdateprogressProgressTrySavenotifierUpdateprogressCollectionnotifierUpdateselectedregionUpdatedregionSavenotifierUpdateprogressAwaitFutureAnyFutureSyncAsyncAwaitCollectionnotifierSavecurrentregionProcessingoptionsSavenotifierUpdateprogressFutureDelayedConstDurationSecondsThenThrowSavetimeoutOnApploggerErrorSaveTimeoutRethrowSavenotifierUpdateprogressSavenotifierFinishsavingRefReadCharacterrefreshnotifierproviderNotifierNotifyeventRefresheventtypeCharactersavedCatchEFinalNotifierRefReadCharactersavenotifierproviderNotifierNotifierSeterrorETostringRethrowCatchEApploggerErrorFailedToSaveCharacterErrorECancelSavenotifierSeterrorETostringSetstateTrueFinallyCancelFutureVoidAsyncTryProcessingoptionsOptionstouseStringSourcedescriptionIfWidgetSelectedregionCharacteridNullOptionstouseWidgetSelectedregionOptionsSourcedescription
                - action: create_new
                  text_zh: '${snapshot.error ?? l10n.unknownError}'', style: TextStyle(
                    color: colorScheme.onSurfaceVariant, fontSize: 12, ), textAlign:
                    TextAlign.center, ), ], ), ); } final loadedImageForCanvas = snapshot.data!;
                    final region = ref.watch(selectedRegionProvider); return Column(
                    children: [ _buildToolbar(l10n), Expanded( child: Stack( children:
                    [ region != null ? _OptimizedEraseLayerStack( region: region,
                    canvasKey: _canvasKey, image: loadedImageForCanvas, handleEraseStart:
                    _handleEraseStart, handleEraseUpdate: _handleEraseUpdate, handleEraseEnd:
                    _handleEraseEnd, ) : const SizedBox(), if (region != null) Positioned(
                    right: 16, top: 16, child: _buildThumbnailPreview(l10n), ), if
                    (_isEditing) Positioned( left: 16, top: 16, child: _buildCharacterInput(l10n),
                    ), ], ), ), _buildBottomButtons(saveState, l10n), ], ); }, ),
                    if (saveState.isSaving) Container( color: Colors.black54, child:
                    Center( child: Card( elevation: 4, color: colorScheme.surface,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(16),
                    ), child: Padding( padding: const EdgeInsets.all(24), child: Column(
                    mainAxisSize: MainAxisSize.min, children: [ CircularProgressIndicator(
                    color: colorScheme.primary, ), const SizedBox(height: 24), Text(
                    _getSaveStatusText(saveState.progress, l10n), style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    color: colorScheme.onSurface, ), ), if (saveState.progress !=
                    null) ...[ const SizedBox(height: 16), Row( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ SizedBox( width: 200, child:
                    LinearProgressIndicator( value: saveState.progress!, backgroundColor:
                    colorScheme.surfaceContainerHighest, valueColor: AlwaysStoppedAnimation<Color>(
                    colorScheme.primary, ), ), ), const SizedBox(width: 12), Text(
                    ''${(saveState.progress! * 100).toInt()}%'', style: Theme.of(context)
                    .textTheme .bodyMedium ?.copyWith( color: colorScheme.onSurfaceVariant,
                    ), ), ], ), ], ], ), ), ), ), ), ], ); } Widget _buildErrorWidget(String
                    message) { final colorScheme = Theme.of(context).colorScheme;
                    return Container( width: 100, height: 100, decoration: BoxDecoration(
                    color: colorScheme.surfaceContainerHighest, borderRadius: BorderRadius.circular(12),
                    ), child: Center( child: Column( mainAxisSize: MainAxisSize.min,
                    children: [ Icon(Icons.error_outline, color: colorScheme.error),
                    const SizedBox(width: 4), Text( message, style: TextStyle(fontSize:
                    12, color: colorScheme.onSurfaceVariant), textAlign: TextAlign.center,
                    ), ], ), ), ); } Widget _buildLoadingState(AppLocalizations l10n)
                    { final colorScheme = Theme.of(context).colorScheme; return Center(
                    child: Column( mainAxisAlignment: MainAxisAlignment.center, children:
                    [ CircularProgressIndicator( strokeWidth: 2, color: colorScheme.primary,
                    ), const SizedBox(height: 16), Text( l10n.loadingImage, style:
                    TextStyle(color: colorScheme.onSurfaceVariant), ), ], ), ); }
                    Widget _buildLoadingWidget() { final colorScheme = Theme.of(context).colorScheme;
                    return Container( width: 100, height: 100, decoration: BoxDecoration(
                    color: colorScheme.surfaceContainerHighest, borderRadius: BorderRadius.circular(12),
                    ), child: Center( child: CircularProgressIndicator( color: colorScheme.primary,
                    strokeWidth: 3, ), ), ); } Widget _buildThumbnailPreview(AppLocalizations
                    l10n) { final region = ref.watch(selectedRegionProvider); if (region
                    == null) { AppLogger.debug( ''CharacterEditPanel - No selected
                    region, not showing thumbnail''); return const SizedBox.shrink();
                    } if (region.characterId == null) { AppLogger.debug( ''CharacterEditPanel
                    - Region not associated with character, not showing thumbnail'');
                    return const SizedBox.shrink(); } final cacheKey = ''thumbnail_${region.id}_${region.characterId}_$_thumbnailRefreshTimestamp'';
                    AppLogger.debug(''Building thumbnail with cache key'', data: {''cacheKey'':
                    cacheKey}); return FutureBuilder<String?>( key: ValueKey(cacheKey),
                    future: _getThumbnailPath(), builder: (context, snapshot) { AppLogger.debug(''CharacterEditPanel
                    - Building thumbnail preview'', data: { ''hasError'': snapshot.hasError,
                    ''hasData'': snapshot.hasData, ''connectionState'': snapshot.connectionState.toString(),
                    }); if (snapshot.hasError) { AppLogger.error(''CharacterEditPanel
                    - Failed to get thumbnail path'', error: snapshot.error); return
                    _buildErrorWidget(l10n.thumbnailLoadError); } if (!snapshot.hasData)
                    { AppLogger.debug(''CharacterEditPanel - Waiting for thumbnail
                    path...''); return _buildLoadingWidget(); } final thumbnailPath
                    = snapshot.data!; AppLogger.debug(''CharacterEditPanel - Got thumbnail
                    path'', data: {''path'': thumbnailPath}); return FutureBuilder<bool>(
                    future: File(thumbnailPath).exists(), builder: (context, existsSnapshot)
                    { if (existsSnapshot.hasError) { AppLogger.error( ''CharacterEditPanel
                    - Failed to check if thumbnail file exists'', error: existsSnapshot.error);
                    return _buildErrorWidget(l10n.thumbnailCheckFailed); } if (!existsSnapshot.hasData)
                    { AppLogger.debug( ''CharacterEditPanel - Checking if thumbnail
                    file exists...''); return _buildLoadingWidget(); } final exists
                    = existsSnapshot.data!; AppLogger.debug(''CharacterEditPanel -
                    Thumbnail file exists'', data: {''exists'': exists}); if (!exists)
                    { AppLogger.error( ''CharacterEditPanel - Thumbnail file does
                    not exist'', data: {''path'': thumbnailPath}); return _buildErrorWidget(l10n.thumbnailNotFound);
                    } return FutureBuilder<int>( future: File(thumbnailPath).length(),
                    builder: (context, sizeSnapshot) { if (sizeSnapshot.hasError)
                    { AppLogger.error( ''CharacterEditPanel - Failed to get thumbnail
                    file size'', error: sizeSnapshot.error); return _buildErrorWidget(l10n.getThumbnailSizeError);
                    } if (!sizeSnapshot.hasData) { AppLogger.debug( ''CharacterEditPanel
                    - Getting thumbnail file size...''); return _buildLoadingWidget();
                    } final fileSize = sizeSnapshot.data!; AppLogger.debug(''CharacterEditPanel
                    - Thumbnail file size'', data: {''fileSize'': fileSize}); if (fileSize
                    == 0) { AppLogger.error( ''CharacterEditPanel - Thumbnail file
                    size is 0'', data: {''path'': thumbnailPath}); return _buildErrorWidget(l10n.thumbnailEmpty);
                    } final colorScheme = Theme.of(context).colorScheme; return Card(
                    elevation: 2, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12),
                    side: BorderSide( color: colorScheme.outlineVariant, width: 1,
                    ), ), clipBehavior: Clip.antiAlias, child: CachedImage( path:
                    thumbnailPath, width: 100, height: 100, fit: BoxFit.cover, key:
                    ValueKey(cacheKey), errorBuilder: (context, error, stackTrace)
                    { AppLogger.error( ''CharacterEditPanel - Failed to load thumbnail'',
                    error: error, stackTrace: stackTrace, data: {''path'': thumbnailPath});
                    return _buildErrorWidget(l10n.thumbnailLoadError); }, ), ); },
                    ); }, ); }, ); } Widget _buildToolbar(AppLocalizations l10n) {
                    final eraseState = ref.watch(erase.eraseStateProvider); final
                    colorScheme = Theme.of(context).colorScheme; return Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical:
                    8), color: colorScheme.surface, child: Column( mainAxisSize: MainAxisSize.min,
                    children: [ Row( mainAxisSize: MainAxisSize.max, crossAxisAlignment:
                    CrossAxisAlignment.center, children: [ _buildToolbarButtonGroup([
                    _ToolbarButton( icon: Icons.undo, tooltip: l10n.undo, onPressed:
                    eraseState.canUndo ? () => ref.read(erase.eraseStateProvider.notifier).undo()
                    : null, shortcut: EditorShortcuts.undo, ), _ToolbarButton( icon:
                    Icons.redo, tooltip: l10n.redo, onPressed: eraseState.canRedo
                    ? () => ref.read(erase.eraseStateProvider.notifier).redo() : null,
                    shortcut: EditorShortcuts.redo, ), ]), const Spacer(), _buildToolbarButtonGroup([
                    _ToolbarButton( icon: Icons.invert_colors, tooltip: l10n.invertMode,
                    onPressed: () { ref.read(erase.eraseStateProvider.notifier).toggleReverse();
                    }, isActive: eraseState.isReversed, shortcut: EditorShortcuts.toggleInvert,
                    ), _ToolbarButton( icon: Icons.flip, tooltip: l10n.imageInvert,
                    onPressed: () { ref .read(erase.eraseStateProvider.notifier) .toggleImageInvert();
                    }, isActive: eraseState.imageInvertMode, shortcut: EditorShortcuts.toggleImageInvert,
                    ), _ToolbarButton( icon: Icons.border_all, tooltip: l10n.showContour,
                    onPressed: () { ref.read(erase.eraseStateProvider.notifier).toggleContour();
                    }, isActive: eraseState.showContour, shortcut: EditorShortcuts.toggleContour,
                    ), ]), ], ), const SizedBox(height: 12), RepaintBoundary( child:
                    Container( padding: const EdgeInsets.symmetric(vertical: 6, horizontal:
                    2), decoration: BoxDecoration( color: colorScheme.surfaceContainerLow,
                    borderRadius: BorderRadius.circular(8), ), child: Row( mainAxisSize:
                    MainAxisSize.max, crossAxisAlignment: CrossAxisAlignment.center,
                    children: [ RepaintBoundary( child: Tooltip( message: l10n.brushSize,
                    child: Icon(Icons.brush, size: 16, color: colorScheme.onSurfaceVariant),
                    ), ), const SizedBox(width: 8), const Expanded( child: _BrushSizeSlider(),
                    ), Container( width: 32, alignment: Alignment.center, child: Consumer(
                    builder: (context, ref, child) { final brushSizeText = ref.watch(erase.brushSizeTextProvider);
                    return Text( brushSizeText, style: TextStyle( fontSize: 12, color:
                    colorScheme.onSurfaceVariant, ), ); }, ), ), ], ), ), ), const
                    SizedBox(height: 12), RepaintBoundary( child: Container( padding:
                    const EdgeInsets.symmetric(vertical: 6, horizontal: 2), decoration:
                    BoxDecoration( color: colorScheme.surfaceContainerLow, borderRadius:
                    BorderRadius.circular(8), ), child: Row( mainAxisSize: MainAxisSize.max,
                    crossAxisAlignment: CrossAxisAlignment.center, children: [ RepaintBoundary(
                    child: Tooltip( message: l10n.threshold, child: Icon(Icons.contrast,
                    size: 16, color: colorScheme.onSurfaceVariant), ), ), const SizedBox(width:
                    8), const Expanded( child: _ThresholdSlider(), ), RepaintBoundary(
                    child: Container( width: 32, alignment: Alignment.center, child:
                    Consumer( builder: (context, ref, child) { final thresholdText
                    = ref.watch(erase.thresholdTextProvider); return Text( thresholdText,
                    style: TextStyle( fontSize: 12, color: colorScheme.onSurfaceVariant,
                    ), ); }, ), ), ), ], ), ), ), const SizedBox(height: 12), RepaintBoundary(
                    child: Container( padding: const EdgeInsets.symmetric(vertical:
                    6, horizontal: 2), decoration: BoxDecoration( color: colorScheme.surfaceContainerLow,
                    borderRadius: BorderRadius.circular(8), ), child: Row( mainAxisSize:
                    MainAxisSize.max, crossAxisAlignment: CrossAxisAlignment.center,
                    children: [ RepaintBoundary( child: Tooltip( message: l10n.noiseReduction,
                    child: Icon(Icons.blur_on, size: 16, color: colorScheme.onSurfaceVariant),
                    ), ), const SizedBox(width: 8), RepaintBoundary( child: Consumer(
                    builder: (context, ref, child) { final noiseReduction = ref.watch(erase.noiseReductionProvider);
                    return Switch( value: noiseReduction > 0, onChanged: (value) {
                    ref .read(erase.eraseStateProvider.notifier) .toggleNoiseReduction(value);
                    }, ); }, ), ), const SizedBox(width: 8), const Expanded( child:
                    _NoiseReductionSlider(), ), RepaintBoundary( child: Container(
                    width: 32, alignment: Alignment.center, child: Consumer( builder:
                    (context, ref, child) { final noiseReductionText = ref.watch(erase.noiseReductionTextProvider);
                    return Text( noiseReductionText, style: TextStyle( fontSize: 12,
                    color: noiseReductionText != ''0.0'' ? colorScheme.onSurfaceVariant
                    : colorScheme.onSurfaceVariant .withValues(alpha: 0.5), ), );
                    }, ), ), ), ], ), ), ), ], ), ); } Widget _buildToolbarButtonGroup(List<_ToolbarButton>
                    buttons) { final colorScheme = Theme.of(context).colorScheme;
                    return Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8),
                    ), child: Row( mainAxisSize: MainAxisSize.min, children: buttons.map((button)
                    { final isFirst = buttons.indexOf(button) == 0; final isLast =
                    buttons.indexOf(button) == buttons.length - 1; return Padding(
                    padding: const EdgeInsets.symmetric(vertical: 2, horizontal: 1),
                    child: Tooltip( message: ShortcutTooltipBuilder.build(button.tooltip,
                    button.shortcut), child: Stack( children: [ IconButton( icon:
                    Icon( button.icon, size: 20, color: button.isActive ? colorScheme.primary
                    : button.onPressed == null ? colorScheme.onSurfaceVariant .withValues(alpha:
                    97) : colorScheme.onSurfaceVariant, ), onPressed: button.onPressed,
                    style: IconButton.styleFrom( backgroundColor: button.isActive
                    ? colorScheme.primaryContainer : null, foregroundColor: button.isActive
                    ? colorScheme.onPrimaryContainer : null, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.horizontal( left: Radius.circular(isFirst
                    ? 8 : 2), right: Radius.circular(isLast ? 8 : 2), ), ), ), ),
                    ], ), ), ); }).toList(), ), ); } double _calculateOptimalStepLength(double
                    pathLength) { if (pathLength <= 10) { return 0.5; } else if (pathLength
                    <= 50) { return 1.0; } else if (pathLength <= 200) { return 2.0;
                    } else { return 4.0; } } List<Map<String, double>> _extractPointsFromPath(Path
                    path) { List<Map<String, double>> serializablePoints = []; try
                    { for (final metric in path.computeMetrics()) { if (metric.length
                    == 0) { final pathBounds = path.getBounds(); serializablePoints
                    .add({''dx'': pathBounds.center.dx, ''dy'': pathBounds.center.dy});
                    continue; } final stepLength = _calculateOptimalStepLength(metric.length);
                    final startTangent = metric.getTangentForOffset(0); if (startTangent
                    != null) { serializablePoints.add( {''dx'': startTangent.position.dx,
                    ''dy'': startTangent.position.dy}); } for (double distance = stepLength;
                    distance < metric.length; distance += stepLength) { final tangent
                    = metric.getTangentForOffset(distance); if (tangent != null) {
                    serializablePoints .add({''dx'': tangent.position.dx, ''dy'':
                    tangent.position.dy}); } } if (metric.length > 0) { final lastTangent
                    = metric.getTangentForOffset(metric.length); if (lastTangent !=
                    null) { if (serializablePoints.isEmpty || serializablePoints.last[''dx'']
                    != lastTangent.position.dx || serializablePoints.last[''dy'']
                    != lastTangent.position.dy) { serializablePoints.add({ ''dx'':
                    lastTangent.position.dx, ''dy'': lastTangent.position.dy }); }
                    } } } } catch (e) { AppLogger.error(''Failed to extract points
                    from path'', error: e); } return serializablePoints; } String
                    _getSaveStatusText(double? progress, AppLocalizations l10n) {
                    if (progress == null) return l10n.preparingSave; if (progress
                    <= 0.2) return l10n.initializing; if (progress <= 0.4) return
                    l10n.processingEraseData; if (progress <= 0.6) return l10n.savingToStorage;
                    if (progress <= 0.8) return l10n.processingImage; if (progress
                    < 1.0) return l10n.completingSave; return l10n.saveComplete; }
                    Future<String?> _getThumbnailPath() async { try { AppLogger.debug(''Getting
                    thumbnail path'', data: { ''regionId'': widget.selectedRegion.id,
                    ''characterId'': widget.selectedRegion.characterId, }); final
                    String characterId = widget.selectedRegion.characterId ?? widget.selectedRegion.id;
                    AppLogger.debug(''Thumbnail context info'', data: { ''workId'':
                    widget.workId, ''pageId'': widget.pageId, ''characterId'': characterId,
                    }); final path = await ref .read(characterCollectionProvider.notifier)
                    .getThumbnailPath(characterId); if (path == null) { AppLogger.error(''Thumbnail
                    path is null'', data: {''characterId'': characterId}); return
                    null; } final file = File(path); final exists = await file.exists();
                    if (!exists) { AppLogger.error(''Thumbnail file does not exist'',
                    data: {''path'': path}); return null; } final fileSize = await
                    file.length(); if (fileSize == 0) { AppLogger.error(''Thumbnail
                    file size is 0'', data: {''path'': path}); return null; } return
                    path; } catch (e, stack) { AppLogger.error(''Failed to get thumbnail
                    path'', error: e, stackTrace: stack, data: { ''characterId'':
                    widget.selectedRegion.characterId, ''regionId'': widget.selectedRegion.id,
                    }); return null; } } void _handleChangeBrushSize(bool increase)
                    { final eraseState = ref.read(erase.eraseStateProvider); final
                    eraseNotifier = ref.read(erase.eraseStateProvider.notifier); double
                    newSize = eraseState.brushSize; if (increase) { newSize += EditorShortcuts.brushSizeStep;
                    if (newSize > EditorShortcuts.maxBrushSize) { newSize = EditorShortcuts.maxBrushSize;
                    } } else { newSize -= EditorShortcuts.brushSizeStep; if (newSize
                    < EditorShortcuts.minBrushSize) { newSize = EditorShortcuts.minBrushSize;
                    } } eraseNotifier.setBrushSize(newSize); AppLogger.debug(''Adjusting
                    brush size'', data: { ''operation'': increase ? ''increase'' :
                    ''decrease'', ''oldSize'': eraseState.brushSize, ''newSize'':
                    newSize, }); } void _handleEraseEnd() { ref.read(erase.eraseStateProvider.notifier).completePath();
                    } void _handleEraseStart(Offset position) { ref.read(erase.eraseStateProvider.notifier).startPath(position);
                    } void _handleEraseUpdate(Offset position, Offset delta) { ref.read(erase.eraseStateProvider.notifier).updatePath(position);
                    } bool _handleKeyboardEvent(KeyEvent event) { if (!mounted) return
                    false; if (event.logicalKey == LogicalKeyboardKey.alt || event.logicalKey
                    == LogicalKeyboardKey.altLeft || event.logicalKey == LogicalKeyboardKey.altRight)
                    { bool isDown = event is KeyDownEvent; bool isUp = event is KeyUpEvent;
                    if (isDown || isUp) { if (_canvasKey.currentState != null) { AppLogger.debug(''Alt
                    key state changed'', data: {''isDown'': isDown}); } } return false;
                    } if (event is KeyDownEvent && HardwareKeyboard.instance.isControlPressed)
                    { if (event.logicalKey == LogicalKeyboardKey.equal || (event.logicalKey
                    == LogicalKeyboardKey.add)) { _handleChangeBrushSize(true); return
                    true; } else if (event.logicalKey == LogicalKeyboardKey.minus
                    || event.logicalKey == LogicalKeyboardKey.underscore) { _handleChangeBrushSize(false);
                    return true; } } return false; } Future<void> _handleSave() async
                    { final l10n = AppLocalizations.of(context); final validation
                    = _CharacterInputValidator.validateCharacter( _characterController.text,
                    l10n); if (!validation.isValid) { ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(validation.error!)), ); setState(() =>
                    _isEditing = true); return; } final saveNotifier = ref.read(characterSaveNotifierProvider.notifier);
                    final collectionNotifier = ref.read(characterCollectionProvider.notifier);
                    try { final confirmed = await showM3SaveConfirmationDialog( context,
                    character: _characterController.text, ); if (confirmed != true)
                    { AppLogger.debug(''User canceled save operation''); _progressTimer?.cancel();
                    saveNotifier.finishSaving(); return; } if (!mounted) { AppLogger.debug(''Component
                    unmounted, canceling save''); _progressTimer?.cancel(); saveNotifier.finishSaving();
                    return; } AppLogger.debug(''Starting save operation''); saveNotifier.startSaving();
                    await Future.microtask(() {}); if (!mounted) return; saveNotifier.updateProgress(0.15);
                    final pathRenderData = ref.read(erase.pathRenderDataProvider);
                    final eraseState = ref.read(erase.eraseStateProvider); final completedPaths
                    = pathRenderData.completedPaths; final List<Map<String, dynamic>>
                    eraseData = []; if (completedPaths.isNotEmpty) { try { final pathDataFuture
                    = compute<List<Map<String, dynamic>>, List<Map<String, dynamic>>>(
                    (pathsData) { return pathsData; }, completedPaths.map((path) {
                    final points = _extractPointsFromPath(path.path); return { ''points'':
                    points, ''brushSize'': path.brushSize, ''brushColor'': path.brushColor.toARGB32(),
                    }; }).toList(), ); saveNotifier.updateProgress(0.2); eraseData.addAll(await
                    pathDataFuture); } catch (e) { AppLogger.error(''Path data processing
                    failed: $e''); } } if (eraseData.isNotEmpty) { final firstPath
                    = eraseData.first; final points = firstPath[''points''] as List<Map<String,
                    double>>; AppLogger.debug(''Validating erase path data'', data:
                    { ''erasePaths'': eraseData.length, ''firstPathBrushSize'': firstPath[''brushSize''],
                    ''firstPathBrushColor'': (firstPath[''brushColor''] as int).toRadixString(16),
                    ''firstPathPointCount'': points.length, ''firstPathSamplePoints'':
                    points .take(3) .map((p) => ''(${p[''dx'']?.toStringAsFixed(1)},${p[''dy'']?.toStringAsFixed(1)})'')
                    .toList(), }); } final processingOptions = ProcessingOptions(
                    inverted: eraseState.imageInvertMode, showContour: eraseState.showContour,
                    brushSize: eraseState.brushSize, contrast: widget.processingOptions.contrast,
                    brightness: widget.processingOptions.brightness, threshold: widget.processingOptions.threshold,
                    noiseReduction: widget.processingOptions.noiseReduction, ); final
                    selectedRegion = ref.read(selectedRegionProvider); if (selectedRegion
                    == null) { throw _SaveError(l10n.noRegionBoxed); } final updatedRegion
                    = selectedRegion.copyWith( pageId: widget.pageId, character: _characterController.text,
                    options: processingOptions, isModified: false, eraseData: eraseData.isNotEmpty
                    ? eraseData : null, ); try { var progress = 0.25; const updateInterval
                    = Duration(milliseconds: 24); _progressTimer = Timer.periodic(
                    updateInterval, (timer) { if (!mounted) { timer.cancel(); return;
                    } double increment; if (progress < 0.3) { increment = 0.03; }
                    else if (progress < 0.7) { increment = 0.01; } else { increment
                    = 0.005; } if (progress < 0.95) { progress += increment; saveNotifier.updateProgress(progress);
                    } }, ); try { saveNotifier.updateProgress(0.3); collectionNotifier.updateSelectedRegion(updatedRegion);
                    saveNotifier.updateProgress(0.4); await Future.any([ Future.sync(()
                    async { await collectionNotifier.saveCurrentRegion(processingOptions);
                    saveNotifier.updateProgress(0.98); }), Future.delayed(const Duration(seconds:
                    30)) .then((_) => throw _SaveError(l10n.saveTimeout)), ]); } on
                    _SaveError { AppLogger.error(''Save timeout''); rethrow; } saveNotifier.updateProgress(0.98);
                    saveNotifier.finishSaving(); ref .read(characterRefreshNotifierProvider.notifier)
                    .notifyEvent(RefreshEventType.characterSaved); } catch (e) { final
                    notifier = ref.read(characterSaveNotifierProvider.notifier); notifier.setError(e.toString());
                    rethrow; } } catch (e) { AppLogger.error(''Failed to save character'',
                    error: e); _progressTimer?.cancel(); saveNotifier.setError(e.toString());
                    setState(() => _isEditing = true); } finally { _progressTimer?.cancel();
                    } } Future<void> _initializeProcessingOptions() async { try {
                    ProcessingOptions optionsToUse; String sourceDescription; if (widget.selectedRegion.characterId
                    != null) { optionsToUse = widget.selectedRegion.options; sourceDescription
                    = ''现有区域的处理选项'
                  text_en: '${snapshot.error ?? l10n.unknownError}'', style: TextStyle(
                    color: colorScheme.onSurfaceVariant, fontSize: 12, ), textAlign:
                    TextAlign.center, ), ], ), ); } final loadedImageForCanvas = snapshot.data!;
                    final region = ref.watch(selectedRegionProvider); return Column(
                    children: [ _buildToolbar(l10n), Expanded( child: Stack( children:
                    [ region != null ? _OptimizedEraseLayerStack( region: region,
                    canvasKey: _canvasKey, image: loadedImageForCanvas, handleEraseStart:
                    _handleEraseStart, handleEraseUpdate: _handleEraseUpdate, handleEraseEnd:
                    _handleEraseEnd, ) : const SizedBox(), if (region != null) Positioned(
                    right: 16, top: 16, child: _buildThumbnailPreview(l10n), ), if
                    (_isEditing) Positioned( left: 16, top: 16, child: _buildCharacterInput(l10n),
                    ), ], ), ), _buildBottomButtons(saveState, l10n), ], ); }, ),
                    if (saveState.isSaving) Container( color: Colors.black54, child:
                    Center( child: Card( elevation: 4, color: colorScheme.surface,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(16),
                    ), child: Padding( padding: const EdgeInsets.all(24), child: Column(
                    mainAxisSize: MainAxisSize.min, children: [ CircularProgressIndicator(
                    color: colorScheme.primary, ), const SizedBox(height: 24), Text(
                    _getSaveStatusText(saveState.progress, l10n), style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    color: colorScheme.onSurface, ), ), if (saveState.progress !=
                    null) ...[ const SizedBox(height: 16), Row( mainAxisAlignment:
                    MainAxisAlignment.center, children: [ SizedBox( width: 200, child:
                    LinearProgressIndicator( value: saveState.progress!, backgroundColor:
                    colorScheme.surfaceContainerHighest, valueColor: AlwaysStoppedAnimation<Color>(
                    colorScheme.primary, ), ), ), const SizedBox(width: 12), Text(
                    ''${(saveState.progress! * 100).toInt()}%'', style: Theme.of(context)
                    .textTheme .bodyMedium ?.copyWith( color: colorScheme.onSurfaceVariant,
                    ), ), ], ), ], ], ), ), ), ), ), ], ); } Widget _buildErrorWidget(String
                    message) { final colorScheme = Theme.of(context).colorScheme;
                    return Container( width: 100, height: 100, decoration: BoxDecoration(
                    color: colorScheme.surfaceContainerHighest, borderRadius: BorderRadius.circular(12),
                    ), child: Center( child: Column( mainAxisSize: MainAxisSize.min,
                    children: [ Icon(Icons.error_outline, color: colorScheme.error),
                    const SizedBox(width: 4), Text( message, style: TextStyle(fontSize:
                    12, color: colorScheme.onSurfaceVariant), textAlign: TextAlign.center,
                    ), ], ), ), ); } Widget _buildLoadingState(AppLocalizations l10n)
                    { final colorScheme = Theme.of(context).colorScheme; return Center(
                    child: Column( mainAxisAlignment: MainAxisAlignment.center, children:
                    [ CircularProgressIndicator( strokeWidth: 2, color: colorScheme.primary,
                    ), const SizedBox(height: 16), Text( l10n.loadingImage, style:
                    TextStyle(color: colorScheme.onSurfaceVariant), ), ], ), ); }
                    Widget _buildLoadingWidget() { final colorScheme = Theme.of(context).colorScheme;
                    return Container( width: 100, height: 100, decoration: BoxDecoration(
                    color: colorScheme.surfaceContainerHighest, borderRadius: BorderRadius.circular(12),
                    ), child: Center( child: CircularProgressIndicator( color: colorScheme.primary,
                    strokeWidth: 3, ), ), ); } Widget _buildThumbnailPreview(AppLocalizations
                    l10n) { final region = ref.watch(selectedRegionProvider); if (region
                    == null) { AppLogger.debug( ''CharacterEditPanel - No selected
                    region, not showing thumbnail''); return const SizedBox.shrink();
                    } if (region.characterId == null) { AppLogger.debug( ''CharacterEditPanel
                    - Region not associated with character, not showing thumbnail'');
                    return const SizedBox.shrink(); } final cacheKey = ''thumbnail_${region.id}_${region.characterId}_$_thumbnailRefreshTimestamp'';
                    AppLogger.debug(''Building thumbnail with cache key'', data: {''cacheKey'':
                    cacheKey}); return FutureBuilder<String?>( key: ValueKey(cacheKey),
                    future: _getThumbnailPath(), builder: (context, snapshot) { AppLogger.debug(''CharacterEditPanel
                    - Building thumbnail preview'', data: { ''hasError'': snapshot.hasError,
                    ''hasData'': snapshot.hasData, ''connectionState'': snapshot.connectionState.toString(),
                    }); if (snapshot.hasError) { AppLogger.error(''CharacterEditPanel
                    - Failed to get thumbnail path'', error: snapshot.error); return
                    _buildErrorWidget(l10n.thumbnailLoadError); } if (!snapshot.hasData)
                    { AppLogger.debug(''CharacterEditPanel - Waiting for thumbnail
                    path...''); return _buildLoadingWidget(); } final thumbnailPath
                    = snapshot.data!; AppLogger.debug(''CharacterEditPanel - Got thumbnail
                    path'', data: {''path'': thumbnailPath}); return FutureBuilder<bool>(
                    future: File(thumbnailPath).exists(), builder: (context, existsSnapshot)
                    { if (existsSnapshot.hasError) { AppLogger.error( ''CharacterEditPanel
                    - Failed to check if thumbnail file exists'', error: existsSnapshot.error);
                    return _buildErrorWidget(l10n.thumbnailCheckFailed); } if (!existsSnapshot.hasData)
                    { AppLogger.debug( ''CharacterEditPanel - Checking if thumbnail
                    file exists...''); return _buildLoadingWidget(); } final exists
                    = existsSnapshot.data!; AppLogger.debug(''CharacterEditPanel -
                    Thumbnail file exists'', data: {''exists'': exists}); if (!exists)
                    { AppLogger.error( ''CharacterEditPanel - Thumbnail file does
                    not exist'', data: {''path'': thumbnailPath}); return _buildErrorWidget(l10n.thumbnailNotFound);
                    } return FutureBuilder<int>( future: File(thumbnailPath).length(),
                    builder: (context, sizeSnapshot) { if (sizeSnapshot.hasError)
                    { AppLogger.error( ''CharacterEditPanel - Failed to get thumbnail
                    file size'', error: sizeSnapshot.error); return _buildErrorWidget(l10n.getThumbnailSizeError);
                    } if (!sizeSnapshot.hasData) { AppLogger.debug( ''CharacterEditPanel
                    - Getting thumbnail file size...''); return _buildLoadingWidget();
                    } final fileSize = sizeSnapshot.data!; AppLogger.debug(''CharacterEditPanel
                    - Thumbnail file size'', data: {''fileSize'': fileSize}); if (fileSize
                    == 0) { AppLogger.error( ''CharacterEditPanel - Thumbnail file
                    size is 0'', data: {''path'': thumbnailPath}); return _buildErrorWidget(l10n.thumbnailEmpty);
                    } final colorScheme = Theme.of(context).colorScheme; return Card(
                    elevation: 2, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12),
                    side: BorderSide( color: colorScheme.outlineVariant, width: 1,
                    ), ), clipBehavior: Clip.antiAlias, child: CachedImage( path:
                    thumbnailPath, width: 100, height: 100, fit: BoxFit.cover, key:
                    ValueKey(cacheKey), errorBuilder: (context, error, stackTrace)
                    { AppLogger.error( ''CharacterEditPanel - Failed to load thumbnail'',
                    error: error, stackTrace: stackTrace, data: {''path'': thumbnailPath});
                    return _buildErrorWidget(l10n.thumbnailLoadError); }, ), ); },
                    ); }, ); }, ); } Widget _buildToolbar(AppLocalizations l10n) {
                    final eraseState = ref.watch(erase.eraseStateProvider); final
                    colorScheme = Theme.of(context).colorScheme; return Container(
                    padding: const EdgeInsets.symmetric(horizontal: 16, vertical:
                    8), color: colorScheme.surface, child: Column( mainAxisSize: MainAxisSize.min,
                    children: [ Row( mainAxisSize: MainAxisSize.max, crossAxisAlignment:
                    CrossAxisAlignment.center, children: [ _buildToolbarButtonGroup([
                    _ToolbarButton( icon: Icons.undo, tooltip: l10n.undo, onPressed:
                    eraseState.canUndo ? () => ref.read(erase.eraseStateProvider.notifier).undo()
                    : null, shortcut: EditorShortcuts.undo, ), _ToolbarButton( icon:
                    Icons.redo, tooltip: l10n.redo, onPressed: eraseState.canRedo
                    ? () => ref.read(erase.eraseStateProvider.notifier).redo() : null,
                    shortcut: EditorShortcuts.redo, ), ]), const Spacer(), _buildToolbarButtonGroup([
                    _ToolbarButton( icon: Icons.invert_colors, tooltip: l10n.invertMode,
                    onPressed: () { ref.read(erase.eraseStateProvider.notifier).toggleReverse();
                    }, isActive: eraseState.isReversed, shortcut: EditorShortcuts.toggleInvert,
                    ), _ToolbarButton( icon: Icons.flip, tooltip: l10n.imageInvert,
                    onPressed: () { ref .read(erase.eraseStateProvider.notifier) .toggleImageInvert();
                    }, isActive: eraseState.imageInvertMode, shortcut: EditorShortcuts.toggleImageInvert,
                    ), _ToolbarButton( icon: Icons.border_all, tooltip: l10n.showContour,
                    onPressed: () { ref.read(erase.eraseStateProvider.notifier).toggleContour();
                    }, isActive: eraseState.showContour, shortcut: EditorShortcuts.toggleContour,
                    ), ]), ], ), const SizedBox(height: 12), RepaintBoundary( child:
                    Container( padding: const EdgeInsets.symmetric(vertical: 6, horizontal:
                    2), decoration: BoxDecoration( color: colorScheme.surfaceContainerLow,
                    borderRadius: BorderRadius.circular(8), ), child: Row( mainAxisSize:
                    MainAxisSize.max, crossAxisAlignment: CrossAxisAlignment.center,
                    children: [ RepaintBoundary( child: Tooltip( message: l10n.brushSize,
                    child: Icon(Icons.brush, size: 16, color: colorScheme.onSurfaceVariant),
                    ), ), const SizedBox(width: 8), const Expanded( child: _BrushSizeSlider(),
                    ), Container( width: 32, alignment: Alignment.center, child: Consumer(
                    builder: (context, ref, child) { final brushSizeText = ref.watch(erase.brushSizeTextProvider);
                    return Text( brushSizeText, style: TextStyle( fontSize: 12, color:
                    colorScheme.onSurfaceVariant, ), ); }, ), ), ], ), ), ), const
                    SizedBox(height: 12), RepaintBoundary( child: Container( padding:
                    const EdgeInsets.symmetric(vertical: 6, horizontal: 2), decoration:
                    BoxDecoration( color: colorScheme.surfaceContainerLow, borderRadius:
                    BorderRadius.circular(8), ), child: Row( mainAxisSize: MainAxisSize.max,
                    crossAxisAlignment: CrossAxisAlignment.center, children: [ RepaintBoundary(
                    child: Tooltip( message: l10n.threshold, child: Icon(Icons.contrast,
                    size: 16, color: colorScheme.onSurfaceVariant), ), ), const SizedBox(width:
                    8), const Expanded( child: _ThresholdSlider(), ), RepaintBoundary(
                    child: Container( width: 32, alignment: Alignment.center, child:
                    Consumer( builder: (context, ref, child) { final thresholdText
                    = ref.watch(erase.thresholdTextProvider); return Text( thresholdText,
                    style: TextStyle( fontSize: 12, color: colorScheme.onSurfaceVariant,
                    ), ); }, ), ), ), ], ), ), ), const SizedBox(height: 12), RepaintBoundary(
                    child: Container( padding: const EdgeInsets.symmetric(vertical:
                    6, horizontal: 2), decoration: BoxDecoration( color: colorScheme.surfaceContainerLow,
                    borderRadius: BorderRadius.circular(8), ), child: Row( mainAxisSize:
                    MainAxisSize.max, crossAxisAlignment: CrossAxisAlignment.center,
                    children: [ RepaintBoundary( child: Tooltip( message: l10n.noiseReduction,
                    child: Icon(Icons.blur_on, size: 16, color: colorScheme.onSurfaceVariant),
                    ), ), const SizedBox(width: 8), RepaintBoundary( child: Consumer(
                    builder: (context, ref, child) { final noiseReduction = ref.watch(erase.noiseReductionProvider);
                    return Switch( value: noiseReduction > 0, onChanged: (value) {
                    ref .read(erase.eraseStateProvider.notifier) .toggleNoiseReduction(value);
                    }, ); }, ), ), const SizedBox(width: 8), const Expanded( child:
                    _NoiseReductionSlider(), ), RepaintBoundary( child: Container(
                    width: 32, alignment: Alignment.center, child: Consumer( builder:
                    (context, ref, child) { final noiseReductionText = ref.watch(erase.noiseReductionTextProvider);
                    return Text( noiseReductionText, style: TextStyle( fontSize: 12,
                    color: noiseReductionText != ''0.0'' ? colorScheme.onSurfaceVariant
                    : colorScheme.onSurfaceVariant .withValues(alpha: 0.5), ), );
                    }, ), ), ), ], ), ), ), ], ), ); } Widget _buildToolbarButtonGroup(List<_ToolbarButton>
                    buttons) { final colorScheme = Theme.of(context).colorScheme;
                    return Card( elevation: 0, color: colorScheme.surfaceContainerHighest,
                    shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8),
                    ), child: Row( mainAxisSize: MainAxisSize.min, children: buttons.map((button)
                    { final isFirst = buttons.indexOf(button) == 0; final isLast =
                    buttons.indexOf(button) == buttons.length - 1; return Padding(
                    padding: const EdgeInsets.symmetric(vertical: 2, horizontal: 1),
                    child: Tooltip( message: ShortcutTooltipBuilder.build(button.tooltip,
                    button.shortcut), child: Stack( children: [ IconButton( icon:
                    Icon( button.icon, size: 20, color: button.isActive ? colorScheme.primary
                    : button.onPressed == null ? colorScheme.onSurfaceVariant .withValues(alpha:
                    97) : colorScheme.onSurfaceVariant, ), onPressed: button.onPressed,
                    style: IconButton.styleFrom( backgroundColor: button.isActive
                    ? colorScheme.primaryContainer : null, foregroundColor: button.isActive
                    ? colorScheme.onPrimaryContainer : null, shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.horizontal( left: Radius.circular(isFirst
                    ? 8 : 2), right: Radius.circular(isLast ? 8 : 2), ), ), ), ),
                    ], ), ), ); }).toList(), ), ); } double _calculateOptimalStepLength(double
                    pathLength) { if (pathLength <= 10) { return 0.5; } else if (pathLength
                    <= 50) { return 1.0; } else if (pathLength <= 200) { return 2.0;
                    } else { return 4.0; } } List<Map<String, double>> _extractPointsFromPath(Path
                    path) { List<Map<String, double>> serializablePoints = []; try
                    { for (final metric in path.computeMetrics()) { if (metric.length
                    == 0) { final pathBounds = path.getBounds(); serializablePoints
                    .add({''dx'': pathBounds.center.dx, ''dy'': pathBounds.center.dy});
                    continue; } final stepLength = _calculateOptimalStepLength(metric.length);
                    final startTangent = metric.getTangentForOffset(0); if (startTangent
                    != null) { serializablePoints.add( {''dx'': startTangent.position.dx,
                    ''dy'': startTangent.position.dy}); } for (double distance = stepLength;
                    distance < metric.length; distance += stepLength) { final tangent
                    = metric.getTangentForOffset(distance); if (tangent != null) {
                    serializablePoints .add({''dx'': tangent.position.dx, ''dy'':
                    tangent.position.dy}); } } if (metric.length > 0) { final lastTangent
                    = metric.getTangentForOffset(metric.length); if (lastTangent !=
                    null) { if (serializablePoints.isEmpty || serializablePoints.last[''dx'']
                    != lastTangent.position.dx || serializablePoints.last[''dy'']
                    != lastTangent.position.dy) { serializablePoints.add({ ''dx'':
                    lastTangent.position.dx, ''dy'': lastTangent.position.dy }); }
                    } } } } catch (e) { AppLogger.error(''Failed to extract points
                    from path'', error: e); } return serializablePoints; } String
                    _getSaveStatusText(double? progress, AppLocalizations l10n) {
                    if (progress == null) return l10n.preparingSave; if (progress
                    <= 0.2) return l10n.initializing; if (progress <= 0.4) return
                    l10n.processingEraseData; if (progress <= 0.6) return l10n.savingToStorage;
                    if (progress <= 0.8) return l10n.processingImage; if (progress
                    < 1.0) return l10n.completingSave; return l10n.saveComplete; }
                    Future<String?> _getThumbnailPath() async { try { AppLogger.debug(''Getting
                    thumbnail path'', data: { ''regionId'': widget.selectedRegion.id,
                    ''characterId'': widget.selectedRegion.characterId, }); final
                    String characterId = widget.selectedRegion.characterId ?? widget.selectedRegion.id;
                    AppLogger.debug(''Thumbnail context info'', data: { ''workId'':
                    widget.workId, ''pageId'': widget.pageId, ''characterId'': characterId,
                    }); final path = await ref .read(characterCollectionProvider.notifier)
                    .getThumbnailPath(characterId); if (path == null) { AppLogger.error(''Thumbnail
                    path is null'', data: {''characterId'': characterId}); return
                    null; } final file = File(path); final exists = await file.exists();
                    if (!exists) { AppLogger.error(''Thumbnail file does not exist'',
                    data: {''path'': path}); return null; } final fileSize = await
                    file.length(); if (fileSize == 0) { AppLogger.error(''Thumbnail
                    file size is 0'', data: {''path'': path}); return null; } return
                    path; } catch (e, stack) { AppLogger.error(''Failed to get thumbnail
                    path'', error: e, stackTrace: stack, data: { ''characterId'':
                    widget.selectedRegion.characterId, ''regionId'': widget.selectedRegion.id,
                    }); return null; } } void _handleChangeBrushSize(bool increase)
                    { final eraseState = ref.read(erase.eraseStateProvider); final
                    eraseNotifier = ref.read(erase.eraseStateProvider.notifier); double
                    newSize = eraseState.brushSize; if (increase) { newSize += EditorShortcuts.brushSizeStep;
                    if (newSize > EditorShortcuts.maxBrushSize) { newSize = EditorShortcuts.maxBrushSize;
                    } } else { newSize -= EditorShortcuts.brushSizeStep; if (newSize
                    < EditorShortcuts.minBrushSize) { newSize = EditorShortcuts.minBrushSize;
                    } } eraseNotifier.setBrushSize(newSize); AppLogger.debug(''Adjusting
                    brush size'', data: { ''operation'': increase ? ''increase'' :
                    ''decrease'', ''oldSize'': eraseState.brushSize, ''newSize'':
                    newSize, }); } void _handleEraseEnd() { ref.read(erase.eraseStateProvider.notifier).completePath();
                    } void _handleEraseStart(Offset position) { ref.read(erase.eraseStateProvider.notifier).startPath(position);
                    } void _handleEraseUpdate(Offset position, Offset delta) { ref.read(erase.eraseStateProvider.notifier).updatePath(position);
                    } bool _handleKeyboardEvent(KeyEvent event) { if (!mounted) return
                    false; if (event.logicalKey == LogicalKeyboardKey.alt || event.logicalKey
                    == LogicalKeyboardKey.altLeft || event.logicalKey == LogicalKeyboardKey.altRight)
                    { bool isDown = event is KeyDownEvent; bool isUp = event is KeyUpEvent;
                    if (isDown || isUp) { if (_canvasKey.currentState != null) { AppLogger.debug(''Alt
                    key state changed'', data: {''isDown'': isDown}); } } return false;
                    } if (event is KeyDownEvent && HardwareKeyboard.instance.isControlPressed)
                    { if (event.logicalKey == LogicalKeyboardKey.equal || (event.logicalKey
                    == LogicalKeyboardKey.add)) { _handleChangeBrushSize(true); return
                    true; } else if (event.logicalKey == LogicalKeyboardKey.minus
                    || event.logicalKey == LogicalKeyboardKey.underscore) { _handleChangeBrushSize(false);
                    return true; } } return false; } Future<void> _handleSave() async
                    { final l10n = AppLocalizations.of(context); final validation
                    = _CharacterInputValidator.validateCharacter( _characterController.text,
                    l10n); if (!validation.isValid) { ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text(validation.error!)), ); setState(() =>
                    _isEditing = true); return; } final saveNotifier = ref.read(characterSaveNotifierProvider.notifier);
                    final collectionNotifier = ref.read(characterCollectionProvider.notifier);
                    try { final confirmed = await showM3SaveConfirmationDialog( context,
                    character: _characterController.text, ); if (confirmed != true)
                    { AppLogger.debug(''User canceled save operation''); _progressTimer?.cancel();
                    saveNotifier.finishSaving(); return; } if (!mounted) { AppLogger.debug(''Component
                    unmounted, canceling save''); _progressTimer?.cancel(); saveNotifier.finishSaving();
                    return; } AppLogger.debug(''Starting save operation''); saveNotifier.startSaving();
                    await Future.microtask(() {}); if (!mounted) return; saveNotifier.updateProgress(0.15);
                    final pathRenderData = ref.read(erase.pathRenderDataProvider);
                    final eraseState = ref.read(erase.eraseStateProvider); final completedPaths
                    = pathRenderData.completedPaths; final List<Map<String, dynamic>>
                    eraseData = []; if (completedPaths.isNotEmpty) { try { final pathDataFuture
                    = compute<List<Map<String, dynamic>>, List<Map<String, dynamic>>>(
                    (pathsData) { return pathsData; }, completedPaths.map((path) {
                    final points = _extractPointsFromPath(path.path); return { ''points'':
                    points, ''brushSize'': path.brushSize, ''brushColor'': path.brushColor.toARGB32(),
                    }; }).toList(), ); saveNotifier.updateProgress(0.2); eraseData.addAll(await
                    pathDataFuture); } catch (e) { AppLogger.error(''Path data processing
                    failed: $e''); } } if (eraseData.isNotEmpty) { final firstPath
                    = eraseData.first; final points = firstPath[''points''] as List<Map<String,
                    double>>; AppLogger.debug(''Validating erase path data'', data:
                    { ''erasePaths'': eraseData.length, ''firstPathBrushSize'': firstPath[''brushSize''],
                    ''firstPathBrushColor'': (firstPath[''brushColor''] as int).toRadixString(16),
                    ''firstPathPointCount'': points.length, ''firstPathSamplePoints'':
                    points .take(3) .map((p) => ''(${p[''dx'']?.toStringAsFixed(1)},${p[''dy'']?.toStringAsFixed(1)})'')
                    .toList(), }); } final processingOptions = ProcessingOptions(
                    inverted: eraseState.imageInvertMode, showContour: eraseState.showContour,
                    brushSize: eraseState.brushSize, contrast: widget.processingOptions.contrast,
                    brightness: widget.processingOptions.brightness, threshold: widget.processingOptions.threshold,
                    noiseReduction: widget.processingOptions.noiseReduction, ); final
                    selectedRegion = ref.read(selectedRegionProvider); if (selectedRegion
                    == null) { throw _SaveError(l10n.noRegionBoxed); } final updatedRegion
                    = selectedRegion.copyWith( pageId: widget.pageId, character: _characterController.text,
                    options: processingOptions, isModified: false, eraseData: eraseData.isNotEmpty
                    ? eraseData : null, ); try { var progress = 0.25; const updateInterval
                    = Duration(milliseconds: 24); _progressTimer = Timer.periodic(
                    updateInterval, (timer) { if (!mounted) { timer.cancel(); return;
                    } double increment; if (progress < 0.3) { increment = 0.03; }
                    else if (progress < 0.7) { increment = 0.01; } else { increment
                    = 0.005; } if (progress < 0.95) { progress += increment; saveNotifier.updateProgress(progress);
                    } }, ); try { saveNotifier.updateProgress(0.3); collectionNotifier.updateSelectedRegion(updatedRegion);
                    saveNotifier.updateProgress(0.4); await Future.any([ Future.sync(()
                    async { await collectionNotifier.saveCurrentRegion(processingOptions);
                    saveNotifier.updateProgress(0.98); }), Future.delayed(const Duration(seconds:
                    30)) .then((_) => throw _SaveError(l10n.saveTimeout)), ]); } on
                    _SaveError { AppLogger.error(''Save timeout''); rethrow; } saveNotifier.updateProgress(0.98);
                    saveNotifier.finishSaving(); ref .read(characterRefreshNotifierProvider.notifier)
                    .notifyEvent(RefreshEventType.characterSaved); } catch (e) { final
                    notifier = ref.read(characterSaveNotifierProvider.notifier); notifier.setError(e.toString());
                    rethrow; } } catch (e) { AppLogger.error(''Failed to save character'',
                    error: e); _progressTimer?.cancel(); saveNotifier.setError(e.toString());
                    setState(() => _isEditing = true); } finally { _progressTimer?.cancel();
                    } } Future<void> _initializeProcessingOptions() async { try {
                    ProcessingOptions optionsToUse; String sourceDescription; if (widget.selectedRegion.characterId
                    != null) { optionsToUse = widget.selectedRegion.options; sourceDescription
                    = ''现有区域的处理选项'
                  file: widgets\character_edit\m3_character_edit_panel.dart
                  line: 519
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
              - - dynamicbrushsizeTostringasfixed
                - action: create_new
                  text_zh: 笔刷大小已根据图像尺寸自动调整为 ${dynamicBrushSize.toStringAsFixed(1)}
                  text_en: 笔刷大小已根据图像尺寸自动调整为 ${dynamicBrushSize.toStringAsFixed(1)}
                  file: widgets\character_edit\m3_character_edit_panel.dart
                  line: 1633
                  context_type: ui_text_widget
                  similar_key: null
                  similarity: 0
                  approved: false
        - - ui_properties
          - !!python/object/apply:collections.OrderedDict
            - - - practiceTitle
                - action: create_new
                  text_zh: ${practice.title} (副本)
                  text_en: ${practice.title} (副本)
                  file: application\repositories\practice_repository_impl.dart
                  line: 54
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text编辑标签
                - action: create_new
                  text_zh: 编辑标签
                  text_en: 编辑标签
                  file: presentation\pages\works\components\content\items\m3_work_list_item.dart
                  line: 330
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text重置缩放
                - action: create_new
                  text_zh: 重置缩放
                  text_en: 重置缩放
                  file: presentation\widgets\common\zoomable_image_view.dart
                  line: 103
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text均匀分布元素
                - action: create_new
                  text_zh: 均匀分布元素
                  text_en: 均匀分布元素
                  file: presentation\widgets\practice\element_operations_mixin.dart
                  line: 489
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text添加复制图层中的元素
                - action: create_new
                  text_zh: 添加复制图层中的元素
                  text_en: 添加复制图层中的元素
                  file: presentation\widgets\practice\layer_management_mixin.dart
                  line: 295
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text字帖
                - action: create_new
                  text_zh: 字帖
                  text_en: 字帖
                  file: presentation\widgets\practice\optimized_save_service.dart
                  line: 165
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text基础属性
                - action: create_new
                  text_zh: 基础属性
                  text_en: 基础属性
                  file: presentation\widgets\practice\property_panels\property_panel_base.dart
                  line: 22
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text选择颜色
                - action: create_new
                  text_zh: 选择颜色
                  text_en: 选择颜色
                  file: presentation\widgets\practice\property_panels\property_panel_base.dart
                  line: 292
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text添加图片
                - action: create_new
                  text_zh: 添加图片
                  text_en: 添加图片
                  file: presentation\widgets\works\preview_mode_config.dart
                  line: 58
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text保存更改
                - action: create_new
                  text_zh: 保存更改
                  text_en: 保存更改
                  file: presentation\widgets\works\preview_mode_config.dart
                  line: 16
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text删除图片
                - action: create_new
                  text_zh: 删除图片
                  text_en: 删除图片
                  file: presentation\widgets\works\preview_mode_config.dart
                  line: 63
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text框选工具
                - action: create_new
                  text_zh: 框选工具
                  text_en: 框选工具
                  file: presentation\widgets\works\preview_mode_config.dart
                  line: 35
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text多选工具
                - action: create_new
                  text_zh: 多选工具
                  text_en: 多选工具
                  file: presentation\widgets\works\preview_mode_config.dart
                  line: 40
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text删除选中区域
                - action: create_new
                  text_zh: 删除选中区域
                  text_en: 删除选中区域
                  file: presentation\widgets\works\preview_mode_config.dart
                  line: 45
                  context_type: ui_properties
                  similar_key: null
                  similarity: 0
                  approved: false
        - - string_constants
          - !!python/object/apply:collections.OrderedDict
            - - - text准备保存
                - action: create_new
                  text_zh: 准备保存...
                  text_en: 准备保存...
                  file: presentation\dialogs\optimized_save_dialog.dart
                  line: 27
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text图片文件不存在
                - action: create_new
                  text_zh: 图片文件不存在
                  text_en: 图片文件不存在
                  file: presentation\pages\works\components\thumbnail_strip.dart
                  line: 203
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text添加元素
                - action: create_new
                  text_zh: 添加元素
                  text_en: 添加元素
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 20
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text删除元素
                - action: create_new
                  text_zh: 删除元素
                  text_en: 删除元素
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 61
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text更新元素属性
                - action: create_new
                  text_zh: 更新元素属性
                  text_en: 更新元素属性
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 103
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text移动元素
                - action: create_new
                  text_zh: 移动元素
                  text_en: 移动元素
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 194
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text调整元素大小
                - action: create_new
                  text_zh: 调整元素大小
                  text_en: 调整元素大小
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 260
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text旋转元素
                - action: create_new
                  text_zh: 旋转元素
                  text_en: 旋转元素
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 326
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text旋转组合元素
                - action: create_new
                  text_zh: 旋转组合元素
                  text_en: 旋转组合元素
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 378
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text添加图层
                - action: create_new
                  text_zh: 添加图层
                  text_en: 添加图层
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 451
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text删除图层
                - action: create_new
                  text_zh: 删除图层
                  text_en: 删除图层
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 495
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text更新图层属性
                - action: create_new
                  text_zh: 更新图层属性
                  text_en: 更新图层属性
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 526
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text重新排序图层
                - action: create_new
                  text_zh: 重新排序图层
                  text_en: 重新排序图层
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 553
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text添加页面
                - action: create_new
                  text_zh: 添加页面
                  text_en: 添加页面
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 579
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text重新排序页面
                - action: create_new
                  text_zh: 重新排序页面
                  text_en: 重新排序页面
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 605
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text更新页面属性
                - action: create_new
                  text_zh: 更新页面属性
                  text_en: 更新页面属性
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 632
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text组合元素
                - action: create_new
                  text_zh: 组合元素
                  text_en: 组合元素
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 661
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text取消组合元素
                - action: create_new
                  text_zh: 取消组合元素
                  text_en: 取消组合元素
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 721
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text应用格式刷
                - action: create_new
                  text_zh: 应用格式刷
                  text_en: 应用格式刷
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 780
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text置于顶层
                - action: create_new
                  text_zh: 置于顶层
                  text_en: 置于顶层
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 830
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text置于底层
                - action: create_new
                  text_zh: 置于底层
                  text_en: 置于底层
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 858
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text上移一层
                - action: create_new
                  text_zh: 上移一层
                  text_en: 上移一层
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 886
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text下移一层
                - action: create_new
                  text_zh: 下移一层
                  text_en: 下移一层
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 914
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text粘贴元素
                - action: create_new
                  text_zh: 粘贴元素
                  text_en: 粘贴元素
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 941
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text删除所有图层
                - action: create_new
                  text_zh: 删除所有图层
                  text_en: 删除所有图层
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 985
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - text删除页面
                - action: create_new
                  text_zh: 删除页面
                  text_en: 删除页面
                  file: presentation\widgets\practice\undo_operations.dart
                  line: 1016
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
              - - translateTranslate
                - action: create_new
                  text_zh: translate', // 'translate' 或
                  text_en: translate', // 'translate' 或
                  file: presentation\widgets\practice\guideline_alignment\guideline_manager.dart
                  line: 220
                  context_type: string_constants
                  similar_key: null
                  similarity: 0
                  approved: false
