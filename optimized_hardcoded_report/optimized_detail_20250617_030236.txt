=== 优化硬编码文本详细报告 ===

=== 可复用现有ARB键的硬编码文本 ===


=== 需新建ARB键的硬编码文本 ===

--- ERROR_MESSAGES (497 个) ---
文件: main.dart, 行: 109
硬编码文本: "严重错误：应用启动失败: $e"
建议新键: errorE
代码行: debugPrint('严重错误：应用启动失败: $e');
----------------------------------------
文件: application\providers\service_providers.dart, 行: 89
硬编码文本: "正在创建 PracticeStorageService 实例..."
建议新键: errorPracticestorageservice实例
代码行: debugPrint('正在创建 PracticeStorageService 实例...');
----------------------------------------
文件: application\providers\service_providers.dart, 行: 91
硬编码文本: "PracticeStorageService 实例创建成功"
建议新键: errorPracticestorageservice
代码行: debugPrint('PracticeStorageService 实例创建成功');
----------------------------------------
文件: application\providers\service_providers.dart, 行: 105
硬编码文本: "正在创建 PracticeService 实例"
建议新键: errorPracticeservice实例
代码行: debugPrint('正在创建 PracticeService 实例');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 48
硬编码文本: "练习不存在"
建议新键: error1
代码行: throw ArgumentError('练习不存在');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 77
硬编码文本: "获取练习失败: $e"
建议新键: errorE1
代码行: debugPrint('获取练习失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 97
硬编码文本: "处理单个练习实体失败: $e"
建议新键: errorE2
代码行: debugPrint('处理单个练习实体失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 104
硬编码文本: "获取所有练习失败: $e"
建议新键: errorE3
代码行: debugPrint('获取所有练习失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 124
硬编码文本: "处理单个练习实体标签失败: $e"
建议新键: errorE4
代码行: debugPrint('处理单个练习实体标签失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 131
硬编码文本: "获取所有标签失败: $e"
建议新键: errorE5
代码行: debugPrint('获取所有标签失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 147
硬编码文本: "检查标题是否存在: $title, 排除ID: $excludeId"
建议新键: errorTitleExcludeid
代码行: debugPrint('检查标题是否存在: $title, 排除ID: $excludeId');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 159
硬编码文本: "标题"
建议新键: errorTitle
代码行: debugPrint('标题 "$title" ${exists ? "已存在" : "不存在"}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 163
硬编码文本: "检查标题是否存在失败: $e"
建议新键: errorE6
代码行: debugPrint('检查标题是否存在失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 204
硬编码文本: "成功解析页面数据：${pages.length} 个页面"
建议新键: errorPagesLength
代码行: debugPrint('成功解析页面数据：${pages.length} 个页面');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 206
硬编码文本: "解析pages字段失败：不是有效的列表"
建议新键: error2
代码行: debugPrint('解析pages字段失败：不是有效的列表');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 209
硬编码文本: "解析pages字段失败: $e"
建议新键: errorE7
代码行: debugPrint('解析pages字段失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 231
硬编码文本: "成功解析页面数据：${pages.length} 个页面"
建议新键: errorPagesLength1
代码行: debugPrint('成功解析页面数据：${pages.length} 个页面');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 255
硬编码文本: "加载字帖失败: $e"
建议新键: errorE8
代码行: debugPrint('加载字帖失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 266
硬编码文本: "生成查询参数: $queryParams"
建议新键: errorQueryparams
代码行: debugPrint('生成查询参数: $queryParams');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 269
硬编码文本: "查询结果数量: ${list.length}"
建议新键: errorListLength
代码行: debugPrint('查询结果数量: ${list.length}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 274
硬编码文本: "数据库中总共有 $totalCount 条练习记录"
建议新键: errorTotalcount
代码行: debugPrint('数据库中总共有 $totalCount 条练习记录');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 276
硬编码文本: "⚠️ 警告: 数据库中没有任何练习记录，请先创建练习"
建议新键: warning
代码行: debugPrint('⚠️ 警告: 数据库中没有任何练习记录，请先创建练习');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 278
硬编码文本: "⚠️ 警告: 数据库中有记录，但当前过滤条件没有匹配的结果"
建议新键: warning1
代码行: debugPrint('⚠️ 警告: 数据库中有记录，但当前过滤条件没有匹配的结果');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 293
硬编码文本: "处理查询结果中的单个练习实体失败: $e"
建议新键: errorE9
代码行: debugPrint('处理查询结果中的单个练习实体失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 300
硬编码文本: "查询练习失败: $e"
建议新键: errorE10
代码行: debugPrint('查询练习失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 312
硬编码文本: "查询字帖: $field $operator $value"
建议新键: errorFieldOperatorValue
代码行: debugPrint('查询字帖: $field $operator $value');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 326
硬编码文本: "查询结果: ${results.length} 条记录"
建议新键: errorResultsLength
代码行: debugPrint('查询结果: ${results.length} 条记录');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 330
硬编码文本: "查询字帖失败: $e"
建议新键: errorE11
代码行: debugPrint('查询字帖失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 339
硬编码文本: "=== PracticeRepositoryImpl.save 开始 === [ID=${practice.id}]"
建议新键: errorPracticerepositoryimplSave开始IdPracticeId
代码行: debugPrint('=== PracticeRepositoryImpl.save 开始 === [ID=${practice.id}]');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 340
硬编码文本: "调用堆栈: ${StackTrace.current}"
建议新键: errorStacktraceCurrent
代码行: debugPrint('调用堆栈: ${StackTrace.current}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 344
硬编码文本: "转换为JSON成功, JSON包含 ${json.length} 个字段"
建议新键: errorJsonLength
代码行: debugPrint('转换为JSON成功, JSON包含 ${json.length} 个字段');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 350
硬编码文本: "数据准备完成，字段: ${preparedData.keys.join("
建议新键: error字段PrepareddataKeysJoin
代码行: debugPrint('数据准备完成，字段: ${preparedData.keys.join(', ')}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 352
硬编码文本: "开始调用 _db.save($_table, ${practice.id}, ...)"
建议新键: errorSavePracticeId
代码行: debugPrint('开始调用 _db.save($_table, ${practice.id}, ...)');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 354
硬编码文本: "调用 _db.save 成功"
建议新键: error调用SaveSuccess
代码行: debugPrint('调用 _db.save 成功');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 363
硬编码文本: "验证成功，数据已保存到数据库: ${savedData["
建议新键: errorSaveddata
代码行: debugPrint('验证成功，数据已保存到数据库: ${savedData['title']}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 365
硬编码文本: "=== PracticeRepositoryImpl.save 完成 === [ID=${practice.id}]"
建议新键: errorPracticerepositoryimplSaveCompletedIdPracticeId
代码行: debugPrint('=== PracticeRepositoryImpl.save 完成 === [ID=${practice.id}]');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 368
硬编码文本: "错误: 保存实体失败: $e"
建议新键: errorE12
代码行: debugPrint('错误: 保存实体失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 369
硬编码文本: "错误堆栈: ${e is Error ? e.stackTrace :"
建议新键: eIsErrorEStacktrace
代码行: debugPrint('错误堆栈: ${e is Error ? e.stackTrace : ''}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 377
硬编码文本: "saveMany: 开始保存 ${practices.length} 个实体"
建议新键: errorSavemanyPracticesLength
代码行: debugPrint('saveMany: 开始保存 ${practices.length} 个实体');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 382
硬编码文本: "saveMany: 处理ID=${p.id}的实体"
建议新键: errorSavemanyPId
代码行: debugPrint('saveMany: 处理ID=${p.id}的实体');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 387
硬编码文本: "saveMany: 批量保存成功"
建议新键: errorSavemany
代码行: debugPrint('saveMany: 批量保存成功');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 390
硬编码文本: "saveMany失败: $e"
建议新键: errorE13
代码行: debugPrint('saveMany失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 417
硬编码文本: "缩略图数据: ${thumbnail != null ?"
建议新键: errorThumbnailNull
代码行: debugPrint('缩略图数据: ${thumbnail != null ? '已生成' : '无缩略图'}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 422
硬编码文本: "新建字帖，设置 createTime=$now"
建议新键: errorSettingsCreatetimeNow
代码行: debugPrint('新建字帖，设置 createTime=$now');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 425
硬编码文本: "现有字帖，尝试获取原有 createTime..."
建议新键: errorCreatetime
代码行: debugPrint('现有字帖，尝试获取原有 createTime...');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 428
硬编码文本: "警告: 无法获取现有字帖数据 [ID=$id]"
建议新键: warningIdId
代码行: debugPrint('警告: 无法获取现有字帖数据 [ID=$id]');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 434
硬编码文本: "使用原有的 createTime: ${existingPractice["
建议新键: errorCreatetimeExistingpractice
代码行: debugPrint('使用原有的 createTime: ${existingPractice['createTime']}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 438
硬编码文本: "无法获取原有createTime，使用当前时间作为fallback: $now"
建议新键: errorNow
代码行: debugPrint('无法获取原有createTime，使用当前时间作为fallback: $now');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 443
硬编码文本: "=== savePracticeRaw 开始调用 _db.set 方法 ==="
建议新键: errorSavepracticerawSet方法
代码行: debugPrint('=== savePracticeRaw 开始调用 _db.set 方法 ===');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 444
硬编码文本: "参数: _table=$_table, practiceId=$practiceId"
建议新键: error参数PracticeidPracticeid
代码行: debugPrint('参数: _table=$_table, practiceId=$practiceId');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 445
硬编码文本: "数据内容: ${data.keys.join("
建议新键: errorDataKeysJoin
代码行: debugPrint('数据内容: ${data.keys.join(', ')}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 448
硬编码文本: "_db.set 调用成功"
建议新键: errorSet
代码行: debugPrint('_db.set 调用成功');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 450
硬编码文本: "错误: _db.set 调用失败: $e"
建议新键: errorSetE
代码行: debugPrint('错误: _db.set 调用失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 451
硬编码文本: "错误堆栈: ${e is Error ? e.stackTrace :"
建议新键: eIsErrorEStacktrace1
代码行: debugPrint('错误堆栈: ${e is Error ? e.stackTrace : ''}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 454
硬编码文本: "savePracticeRaw: 已保存数据到数据库，ID=$practiceId"
建议新键: errorSavepracticerawIdPracticeid
代码行: debugPrint('savePracticeRaw: 已保存数据到数据库，ID=$practiceId');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 457
硬编码文本: "开始验证数据是否已保存..."
建议新键: error3
代码行: debugPrint('开始验证数据是否已保存...');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 462
硬编码文本: "数据保存失败，无法在数据库中找到记录: $practiceId"
建议新键: errorPracticeid
代码行: throw Exception('数据保存失败，无法在数据库中找到记录: $practiceId');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 464
硬编码文本: "数据保存验证成功: ${savedData["
建议新键: errorSaveddata1
代码行: debugPrint('数据保存验证成功: ${savedData['title']}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 477
硬编码文本: "保存字帖失败: $e"
建议新键: errorE14
代码行: debugPrint('保存字帖失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 508
硬编码文本: "updateFavoriteStatus: 找不到ID=$id的记录"
建议新键: errorUpdatefavoritestatus
代码行: debugPrint('updateFavoriteStatus: 找不到ID=$id的记录');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 520
硬编码文本: "updateFavoriteStatus: 成功更新收藏状态"
建议新键: errorUpdatefavoritestatus1
代码行: debugPrint('updateFavoriteStatus: 成功更新收藏状态');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 523
硬编码文本: "updateFavoriteStatus失败: $e"
建议新键: errorE15
代码行: debugPrint('updateFavoriteStatus失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 539
硬编码文本: "添加关键词筛选条件: title LIKE %${filter.keyword}%"
建议新键: errorTitleLikeFilterKeyword
代码行: debugPrint('添加关键词筛选条件: title LIKE %${filter.keyword}%');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 547
硬编码文本: "添加标签筛选条件: tags LIKE %$tag%"
建议新键: errorTagsLikeTag
代码行: debugPrint('添加标签筛选条件: tags LIKE %$tag%');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 554
硬编码文本: "添加状态筛选条件: status=${filter.status}"
建议新键: errorStatusFilterStatus
代码行: debugPrint('添加状态筛选条件: status=${filter.status}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 579
硬编码文本: "添加收藏筛选条件: isFavorite=1 (使用条件格式)"
建议新键: errorIsfavorite
代码行: debugPrint('添加收藏筛选条件: isFavorite=1 (使用条件格式)');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 580
硬编码文本: "⚠️ 注意: 如果没有收藏的练习，带有isFavorite=1条件的查询将不返回结果"
建议新键: error注意
代码行: debugPrint('⚠️ 注意: 如果没有收藏的练习，带有isFavorite=1条件的查询将不返回结果');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 591
硬编码文本: "设置排序: ${query["
建议新键: errorQuery
代码行: debugPrint('设置排序: ${query['orderBy']}');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 598
硬编码文本: "最终查询参数: $query"
建议新键: errorQuery1
代码行: debugPrint('最终查询参数: $query');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 611
硬编码文本: "_prepareForSave: 开始处理JSON数据，共 ${json.length} 个字段"
建议新键: error共JsonLength
代码行: debugPrint('_prepareForSave: 开始处理JSON数据，共 ${json.length} 个字段');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 617
硬编码文本: "_prepareForSave: 移除status字段，数据库中不存在该列"
建议新键: error4
代码行: debugPrint('_prepareForSave: 移除status字段，数据库中不存在该列');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 628
硬编码文本: "_prepareForSave: isFavorite字段不存在，设为默认值0"
建议新键: error5
代码行: debugPrint('_prepareForSave: isFavorite字段不存在，设为默认值0');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 640
硬编码文本: "_prepareForSave: tags字段已经是字符串"
建议新键: error6
代码行: debugPrint('_prepareForSave: tags字段已经是字符串');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 643
硬编码文本: "_prepareForSave: tags字段类型未知，设为空字符串"
建议新键: error7
代码行: debugPrint('_prepareForSave: tags字段类型未知，设为空字符串');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 647
硬编码文本: "_prepareForSave: 转换tags字段失败: $e，设为空字符串"
建议新键: errorE16
代码行: debugPrint('_prepareForSave: 转换tags字段失败: $e，设为空字符串');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 653
硬编码文本: "_prepareForSave: tags字段不存在，设为空列表"
建议新键: error8
代码行: debugPrint('_prepareForSave: tags字段不存在，设为空列表');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 665
硬编码文本: "_prepareForSave: pages字段已经是字符串"
建议新键: error9
代码行: debugPrint('_prepareForSave: pages字段已经是字符串');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 668
硬编码文本: "_prepareForSave: pages字段类型未知，设为空字符串"
建议新键: error10
代码行: debugPrint('_prepareForSave: pages字段类型未知，设为空字符串');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 672
硬编码文本: "_prepareForSave: 转换pages字段失败: $e，设为空字符串"
建议新键: errorE17
代码行: debugPrint('_prepareForSave: 转换pages字段失败: $e，设为空字符串');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 678
硬编码文本: "_prepareForSave: pages字段不存在，设为空列表"
建议新键: error11
代码行: debugPrint('_prepareForSave: pages字段不存在，设为空列表');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 705
硬编码文本: "解析tags字段失败: $e"
建议新键: errorE18
代码行: debugPrint('解析tags字段失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 731
硬编码文本: "解析pages字段失败: $e"
建议新键: errorE19
代码行: debugPrint('解析pages字段失败: $e');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 748
硬编码文本: "_processDbData: isFavorite字段不存在，设为默认值false"
建议新键: error12
代码行: debugPrint('_processDbData: isFavorite字段不存在，设为默认值false');
----------------------------------------
文件: application\repositories\practice_repository_impl.dart, 行: 754
硬编码文本: "_processDbData: status字段不存在于数据库，设为默认值active"
建议新键: error13
代码行: debugPrint('_processDbData: status字段不存在于数据库，设为默认值active');
----------------------------------------
文件: application\services\library_import_service.dart, 行: 32
硬编码文本: "目录不存在：$dirPath"
建议新键: errorDirpath
代码行: throw Exception('目录不存在：$dirPath');
----------------------------------------
文件: application\services\library_import_service.dart, 行: 75
硬编码文本: "文件不存在：$filePath"
建议新键: errorFilepath
代码行: throw Exception('文件不存在：$filePath');
----------------------------------------
文件: application\services\library_import_service.dart, 行: 87
硬编码文本: "不支持的文件类型：$mimeType"
建议新键: errorMimetype
代码行: throw Exception('不支持的文件类型：$mimeType');
----------------------------------------
文件: application\services\library_import_service.dart, 行: 106
硬编码文本: "生成缩略图失败"
建议新键: error14
代码行: throw Exception('生成缩略图失败');
----------------------------------------
文件: application\services\library_service.dart, 行: 57
硬编码文本: "项目不存在：$id"
建议新键: errorId
代码行: throw Exception('项目不存在：$id');
----------------------------------------
文件: application\services\character\character_service.dart, 行: 611
硬编码文本: "保存图像文件失败: $e"
建议新键: errorE20
代码行: throw Exception('保存图像文件失败: $e');
----------------------------------------
文件: application\services\character\character_service.dart, 行: 641
硬编码文本: "更新字符失败: $e"
建议新键: errorE21
代码行: throw Exception('更新字符失败: $e');
----------------------------------------
文件: application\services\image\character_image_processor.dart, 行: 93
硬编码文本: "预览区域无效"
建议新键: error15
代码行: throw ImageProcessingException('预览区域无效');
----------------------------------------
文件: application\services\image\character_image_processor.dart, 行: 99
硬编码文本: "图像解码失败"
建议新键: error16
代码行: throw ImageProcessingException('图像解码失败');
----------------------------------------
文件: application\services\image\character_image_processor.dart, 行: 180
硬编码文本: "处理区域无效"
建议新键: error17
代码行: throw ImageProcessingException('处理区域无效');
----------------------------------------
文件: application\services\image\character_image_processor.dart, 行: 188
硬编码文本: "图像解码失败"
建议新键: error18
代码行: throw ImageProcessingException('图像解码失败');
----------------------------------------
文件: application\services\image\character_image_processor.dart, 行: 559
硬编码文本: "没有轮廓点"
建议新键: error19
代码行: throw Exception('没有轮廓点');
----------------------------------------
文件: application\services\image\character_image_processor.dart, 行: 579
硬编码文本: "无法计算有效的轮廓边界"
建议新键: error20
代码行: throw Exception('无法计算有效的轮廓边界');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 36
硬编码文本: "=== PracticeService.createPractice 开始 ==="
建议新键: errorPracticeserviceCreatepractice开始
代码行: debugPrint('=== PracticeService.createPractice 开始 ===');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 37
硬编码文本: "参数: title=$title, tags=$tags, status=$status"
建议新键: error参数TitleTitleTagsTagsStatusStatus
代码行: debugPrint('参数: title=$title, tags=$tags, status=$status');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 44
硬编码文本: "已创建实体，生成的ID=${practice.id}, 准备调用 _repository.save..."
建议新键: errorPracticeIdSave
代码行: debugPrint('已创建实体，生成的ID=${practice.id}, 准备调用 _repository.save...');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 48
硬编码文本: "_repository.save 调用成功，返回ID=${result.id}"
建议新键: errorSaveResultId
代码行: debugPrint('_repository.save 调用成功，返回ID=${result.id}');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 49
硬编码文本: "=== PracticeService.createPractice 完成 ==="
建议新键: errorPracticeserviceCreatepracticeCompleted
代码行: debugPrint('=== PracticeService.createPractice 完成 ===');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 52
硬编码文本: "错误: createPractice 失败 - $e"
建议新键: errorCreatepracticeFailedE
代码行: debugPrint('错误: createPractice 失败 - $e');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 121
硬编码文本: "=== PracticeService.savePractice 开始 ==="
建议新键: errorPracticeserviceSavepractice开始
代码行: debugPrint('=== PracticeService.savePractice 开始 ===');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 127
硬编码文本: "检测到空 ID，将创建新字帖"
建议新键: errorId1
代码行: debugPrint('检测到空 ID，将创建新字帖');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 132
硬编码文本: "创建完成，新ID=${newPractice.id}"
建议新键: errorNewpracticeId
代码行: debugPrint('创建完成，新ID=${newPractice.id}');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 136
硬编码文本: "检测到页面数据，将更新页面"
建议新键: error21
代码行: debugPrint('检测到页面数据，将更新页面');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 138
硬编码文本: "准备保存更新后的实体，调用 _repository.save..."
建议新键: error调用Save
代码行: debugPrint('准备保存更新后的实体，调用 _repository.save...');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 140
硬编码文本: "_repository.save 调用成功，返回ID=${result.id}"
建议新键: errorSaveResultId1
代码行: debugPrint('_repository.save 调用成功，返回ID=${result.id}');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 144
硬编码文本: "准备保存缩略图, 大小=${thumbnail.length} 字节"
建议新键: error大小ThumbnailLength字节
代码行: debugPrint('准备保存缩略图, 大小=${thumbnail.length} 字节');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 146
硬编码文本: "压缩后缩略图大小=${compressedThumbnail.length} 字节"
建议新键: errorCompressedthumbnailLength字节
代码行: debugPrint('压缩后缩略图大小=${compressedThumbnail.length} 字节');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 149
硬编码文本: "已保存新字帖缩略图到文件系统: ${result.id}"
建议新键: errorResultId
代码行: debugPrint('已保存新字帖缩略图到文件系统: ${result.id}');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 152
硬编码文本: "=== PracticeService.savePractice 完成(更新页面分支) ==="
建议新键: errorPracticeserviceSavepracticeCompleted
代码行: debugPrint('=== PracticeService.savePractice 完成(更新页面分支) ===');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 158
硬编码文本: "准备保存缩略图, 大小=${thumbnail.length} 字节"
建议新键: error大小ThumbnailLength字节1
代码行: debugPrint('准备保存缩略图, 大小=${thumbnail.length} 字节');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 160
硬编码文本: "压缩后缩略图大小=${compressedThumbnail.length} 字节"
建议新键: errorCompressedthumbnailLength字节1
代码行: debugPrint('压缩后缩略图大小=${compressedThumbnail.length} 字节');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 163
硬编码文本: "已保存新字帖缩略图到文件系统: ${newPractice.id}"
建议新键: errorNewpracticeId1
代码行: debugPrint('已保存新字帖缩略图到文件系统: ${newPractice.id}');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 166
硬编码文本: "=== PracticeService.savePractice 完成(无页面分支) ==="
建议新键: errorPracticeserviceSavepracticeCompleted1
代码行: debugPrint('=== PracticeService.savePractice 完成(无页面分支) ===');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 171
硬编码文本: "检测到现有ID=$id，将更新字帖"
建议新键: errorId2
代码行: debugPrint('检测到现有ID=$id，将更新字帖');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 174
硬编码文本: "错误: 无法找到ID=$id的字帖"
建议新键: error22
代码行: debugPrint('错误: 无法找到ID=$id的字帖');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 175
硬编码文本: "无法找到指定的字帖: $id"
建议新键: errorId3
代码行: throw Exception('无法找到指定的字帖: $id');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 187
硬编码文本: "创建了更新后的实体, 准备调用 _repository.save..."
建议新键: errorSave
代码行: debugPrint('创建了更新后的实体, 准备调用 _repository.save...');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 191
硬编码文本: "_repository.save 调用成功，返回ID=${result.id}"
建议新键: errorSaveResultId2
代码行: debugPrint('_repository.save 调用成功，返回ID=${result.id}');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 195
硬编码文本: "准备保存缩略图, 大小=${thumbnail.length} 字节"
建议新键: error大小ThumbnailLength字节2
代码行: debugPrint('准备保存缩略图, 大小=${thumbnail.length} 字节');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 197
硬编码文本: "压缩后缩略图大小=${compressedThumbnail.length} 字节"
建议新键: errorCompressedthumbnailLength字节2
代码行: debugPrint('压缩后缩略图大小=${compressedThumbnail.length} 字节');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 199
硬编码文本: "已保存现有字帖缩略图到文件系统: ${result.id}"
建议新键: errorResultId1
代码行: debugPrint('已保存现有字帖缩略图到文件系统: ${result.id}');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 202
硬编码文本: "=== PracticeService.savePractice 完成(更新字帖分支) ==="
建议新键: errorPracticeserviceSavepracticeCompleted2
代码行: debugPrint('=== PracticeService.savePractice 完成(更新字帖分支) ===');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 234
硬编码文本: "已保存缩略图到文件系统: $practiceId"
建议新键: errorPracticeid1
代码行: debugPrint('已保存缩略图到文件系统: $practiceId');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 253
硬编码文本: "PracticeService.toggleFavorite 开始: ID=$id"
建议新键: errorPracticeserviceTogglefavorite开始IdId
代码行: debugPrint('PracticeService.toggleFavorite 开始: ID=$id');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 256
硬编码文本: "获取字帖结果: ${practice != null ?"
建议新键: errorPracticeNull
代码行: debugPrint('获取字帖结果: ${practice != null ? '成功' : '未找到字帖'}');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 260
硬编码文本: "当前收藏状态: ${practice.isFavorite}"
建议新键: errorPracticeIsfavorite
代码行: debugPrint('当前收藏状态: ${practice.isFavorite}');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 264
硬编码文本: "新的收藏状态: $newFavoriteStatus"
建议新键: errorNewfavoritestatus
代码行: debugPrint('新的收藏状态: $newFavoriteStatus');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 272
硬编码文本: "使用轻量级方法更新收藏状态成功"
建议新键: error23
代码行: debugPrint('使用轻量级方法更新收藏状态成功');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 276
硬编码文本: "轻量级方法失败，尝试完整保存"
建议新键: error24
代码行: debugPrint('轻量级方法失败，尝试完整保存');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 281
硬编码文本: "保存结果: 成功"
建议新键: errorSuccess
代码行: debugPrint('保存结果: 成功');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 313
硬编码文本: "警告: 无法解码缩略图，将使用原始数据"
建议新键: warning2
代码行: debugPrint('警告: 无法解码缩略图，将使用原始数据');
----------------------------------------
文件: application\services\practice\practice_service.dart, 行: 346
硬编码文本: "文件大小: ${originalBytes.length} -> ${jpgBytes.length} 字节"
建议新键: errorOriginalbytesLengthJpgbytesLength字节
代码行: debugPrint('文件大小: ${originalBytes.length} -> ${jpgBytes.length} 字节');
----------------------------------------
文件: application\services\storage\work_storage_service.dart, 行: 118
硬编码文本: "文件不存在"
建议新键: error25
代码行: throw FileSystemException('文件不存在', path);
----------------------------------------
文件: application\services\storage\work_storage_service.dart, 行: 127
硬编码文本: "文件不存在"
建议新键: error26
代码行: throw FileSystemException('文件不存在', path);
----------------------------------------
文件: application\services\storage\work_storage_service.dart, 行: 198
硬编码文本: "封面导入图保存失败"
建议新键: error27
代码行: throw FileSystemException('封面导入图保存失败', targetPath);
----------------------------------------
文件: application\services\storage\work_storage_service.dart, 行: 242
硬编码文本: "封面缩略图保存失败"
建议新键: error28
代码行: throw FileSystemException('封面缩略图保存失败', targetPath);
----------------------------------------
文件: application\services\work\work_image_service.dart, 行: 255
硬编码文本: "源文件不存在"
建议新键: error29
代码行: throw FileSystemException('源文件不存在', file.path);
----------------------------------------
文件: application\services\work\work_image_service.dart, 行: 469
硬编码文本: "源文件不存在"
建议新键: error30
代码行: throw FileSystemException('源文件不存在', image.path);
----------------------------------------
文件: application\services\work\work_image_service.dart, 行: 669
硬编码文本: "源图片不存在"
建议新键: error31
代码行: throw FileSystemException('源图片不存在', importedPath);
----------------------------------------
文件: application\services\work\work_service.dart, 行: 132
硬编码文本: "图片文件不能为空"
建议新键: error32
代码行: if (files.isEmpty) throw ArgumentError('图片文件不能为空');
----------------------------------------
文件: application\services\work\work_service.dart, 行: 267
硬编码文本: "作品不存在: $workId"
建议新键: errorWorkid
代码行: throw Exception('作品不存在: $workId');
----------------------------------------
文件: domain\enums\app_language.dart, 行: 55
硬编码文本: "AppLanguage.fromString: 从字符串"
建议新键: errorApplanguageFromstring
代码行: debugPrint('AppLanguage.fromString: 从字符串 "$value" 解析语言设置');
----------------------------------------
文件: domain\enums\app_language.dart, 行: 62
硬编码文本: "AppLanguage.fromString: 解析结果: $result"
建议新键: errorApplanguageFromstringResult
代码行: debugPrint('AppLanguage.fromString: 解析结果: $result');
----------------------------------------
文件: domain\models\character\processing_result.dart, 行: 123
硬编码文本: "处理结果反序列化失败: $e"
建议新键: errorE22
代码行: debugPrint('处理结果反序列化失败: $e');
----------------------------------------
文件: infrastructure\backup\backup_service.dart, 行: 372
硬编码文本: "备份文件不存在: $backupPath"
建议新键: errorBackuppath
代码行: throw Exception('备份文件不存在: $backupPath');
----------------------------------------
文件: infrastructure\backup\backup_service.dart, 行: 787
硬编码文本: "备份中未找到应用数据目录"
建议新键: error33
代码行: throw Exception('备份中未找到应用数据目录');
----------------------------------------
文件: infrastructure\backup\backup_service.dart, 行: 865
硬编码文本: "备份中未找到数据库目录"
建议新键: error34
代码行: throw Exception('备份中未找到数据库目录');
----------------------------------------
文件: infrastructure\backup\backup_service.dart, 行: 877
硬编码文本: "备份中未找到数据库文件"
建议新键: error35
代码行: orElse: () => throw Exception('备份中未找到数据库文件'),
----------------------------------------
文件: infrastructure\backup\backup_service.dart, 行: 928
硬编码文本: "数据库恢复需要重启应用"
建议新键: error36
代码行: throw NeedsRestartException('数据库恢复需要重启应用');
----------------------------------------
文件: infrastructure\cache\implementations\disk_cache.dart, 行: 84
硬编码文本: "初始化磁盘缓存失败: $e"
建议新键: errorE23
代码行: debugPrint('初始化磁盘缓存失败: $e');
----------------------------------------
文件: infrastructure\cache\implementations\disk_cache.dart, 行: 119
硬编码文本: "读取缓存文件失败: $e"
建议新键: errorE24
代码行: debugPrint('读取缓存文件失败: $e');
----------------------------------------
文件: infrastructure\cache\implementations\disk_cache.dart, 行: 154
硬编码文本: "写入缓存文件失败: $e"
建议新键: errorE25
代码行: debugPrint('写入缓存文件失败: $e');
----------------------------------------
文件: infrastructure\cache\implementations\disk_cache.dart, 行: 171
硬编码文本: "删除缓存文件失败: $e"
建议新键: errorE26
代码行: debugPrint('删除缓存文件失败: $e');
----------------------------------------
文件: infrastructure\cache\implementations\disk_cache.dart, 行: 189
硬编码文本: "清空缓存目录失败: $e"
建议新键: errorE27
代码行: debugPrint('清空缓存目录失败: $e');
----------------------------------------
文件: infrastructure\cache\implementations\disk_cache.dart, 行: 273
硬编码文本: "清理缓存失败: $e"
建议新键: errorE28
代码行: debugPrint('清理缓存失败: $e');
----------------------------------------
文件: infrastructure\cache\services\cache_manager.dart, 行: 25
硬编码文本: "已清除所有缓存"
建议新键: error37
代码行: debugPrint('已清除所有缓存');
----------------------------------------
文件: infrastructure\cache\services\cache_manager.dart, 行: 38
硬编码文本: "已启动缓存监控，间隔: ${interval.inMinutes}分钟"
建议新键: error间隔IntervalInminutes分钟
代码行: debugPrint('已启动缓存监控，间隔: ${interval.inMinutes}分钟');
----------------------------------------
文件: infrastructure\cache\services\cache_manager.dart, 行: 52
硬编码文本: "当前缓存总大小: ${(totalSize / (1024 * 1024)).toStringAsFixed(2)}MB"
建议新键: errorTotalsizeTostringasfixedMb
代码行: debugPrint('当前缓存总大小: ${(totalSize / (1024 * 1024)).toStringAsFixed(2)}MB');
----------------------------------------
文件: infrastructure\cache\services\cache_manager.dart, 行: 57
硬编码文本: "缓存大小超过阈值，开始清理"
建议新键: error38
代码行: debugPrint('缓存大小超过阈值，开始清理');
----------------------------------------
文件: infrastructure\cache\services\cache_manager.dart, 行: 61
硬编码文本: "检查内存使用失败: $e"
建议新键: errorE29
代码行: debugPrint('检查内存使用失败: $e');
----------------------------------------
文件: infrastructure\cache\services\cache_manager.dart, 行: 78
硬编码文本: "已清理缓存: $cache"
建议新键: errorCache
代码行: debugPrint('已清理缓存: $cache');
----------------------------------------
文件: infrastructure\cache\services\cache_manager.dart, 行: 81
硬编码文本: "清理缓存失败: $e"
建议新键: errorE30
代码行: debugPrint('清理缓存失败: $e');
----------------------------------------
文件: infrastructure\cache\services\cache_manager.dart, 行: 93
硬编码文本: "获取缓存大小失败: $e"
建议新键: errorE31
代码行: debugPrint('获取缓存大小失败: $e');
----------------------------------------
文件: infrastructure\logging\edit_page_logger_extension.dart, 行: 245
硬编码文本: "EditPageLogger.fileOpsError: 日志记录失败: $e, 原始消息: $message"
建议新键: errorEditpageloggerFileopserrorEMessage
代码行: debugPrint('EditPageLogger.fileOpsError: 日志记录失败: $e, 原始消息: $message');
----------------------------------------
文件: infrastructure\persistence\sqlite\database_restore_handler.dart, 行: 148
硬编码文本: "无法恢复数据库文件: $e, $renameError, $storageError"
建议新键: errorERenameerrorStorageerror
代码行: throw Exception('无法恢复数据库文件: $e, $renameError, $storageError');
----------------------------------------
文件: infrastructure\persistence\sqlite\sqlite_database.dart, 行: 64
硬编码文本: "统计查询失败: $e"
建议新键: errorE32
代码行: debugPrint('统计查询失败: $e');
----------------------------------------
文件: infrastructure\persistence\sqlite\sqlite_database.dart, 行: 161
硬编码文本: "查询失败: $e"
建议新键: errorE33
代码行: debugPrint('查询失败: $e');
----------------------------------------
文件: infrastructure\persistence\sqlite\sqlite_database.dart, 行: 186
硬编码文本: "SQLiteDatabase.save: 开始保存数据到 $table, id=$id"
建议新键: errorSqlitedatabaseSaveTableIdId
代码行: debugPrint('SQLiteDatabase.save: 开始保存数据到 $table, id=$id');
----------------------------------------
文件: infrastructure\persistence\sqlite\sqlite_database.dart, 行: 199
硬编码文本: "SQLiteDatabase.save: 记录已存在，执行更新"
建议新键: errorSqlitedatabaseSave
代码行: debugPrint('SQLiteDatabase.save: 记录已存在，执行更新');
----------------------------------------
文件: infrastructure\persistence\sqlite\sqlite_database.dart, 行: 206
硬编码文本: "SQLiteDatabase.save: 更新完成，影响行数: $updateCount"
建议新键: errorSqlitedatabaseSaveUpdatecount
代码行: debugPrint('SQLiteDatabase.save: 更新完成，影响行数: $updateCount');
----------------------------------------
文件: infrastructure\persistence\sqlite\sqlite_database.dart, 行: 209
硬编码文本: "SQLiteDatabase.save: 记录不存在，执行插入"
建议新键: errorSqlitedatabaseSave1
代码行: debugPrint('SQLiteDatabase.save: 记录不存在，执行插入');
----------------------------------------
文件: infrastructure\persistence\sqlite\sqlite_database.dart, 行: 215
硬编码文本: "SQLiteDatabase.save: 插入完成"
建议新键: errorSqlitedatabaseSave2
代码行: debugPrint('SQLiteDatabase.save: 插入完成');
----------------------------------------
文件: infrastructure\persistence\sqlite\sqlite_database.dart, 行: 227
硬编码文本: "SQLiteDatabase.save: 保存后无法验证数据，记录不存在: $id"
建议新键: errorSqlitedatabaseSaveId
代码行: throw Exception('SQLiteDatabase.save: 保存后无法验证数据，记录不存在: $id');
----------------------------------------
文件: infrastructure\persistence\sqlite\sqlite_database.dart, 行: 229
硬编码文本: "SQLiteDatabase.save: 数据保存成功，已验证 $table.$id"
建议新键: errorSqlitedatabaseSaveTableId
代码行: debugPrint('SQLiteDatabase.save: 数据保存成功，已验证 $table.$id');
----------------------------------------
文件: infrastructure\persistence\sqlite\sqlite_database.dart, 行: 231
硬编码文本: "SQLiteDatabase.save: 保存失败: $e"
建议新键: errorSqlitedatabaseSaveE
代码行: debugPrint('SQLiteDatabase.save: 保存失败: $e');
----------------------------------------
文件: infrastructure\persistence\sqlite\sqlite_database.dart, 行: 559
硬编码文本: "数据库降级不支持"
建议新键: error39
代码行: throw Exception('数据库降级不支持'),
----------------------------------------
文件: infrastructure\storage\local_storage.dart, 行: 32
硬编码文本: "源文件不存在"
建议新键: error40
代码行: throw FileSystemException('源文件不存在', sourcePath);
----------------------------------------
文件: infrastructure\storage\local_storage.dart, 行: 183
硬编码文本: "文件不存在"
建议新键: error41
代码行: throw FileSystemException('文件不存在', filePath);
----------------------------------------
文件: infrastructure\storage\local_storage.dart, 行: 204
硬编码文本: "文件不存在"
建议新键: error42
代码行: throw FileSystemException('文件不存在', filePath);
----------------------------------------
文件: infrastructure\storage\local_storage.dart, 行: 265
硬编码文本: "源文件不存在"
建议新键: error43
代码行: throw FileSystemException('源文件不存在', sourcePath);
----------------------------------------
文件: infrastructure\storage\local_storage.dart, 行: 297
硬编码文本: "文件不存在"
建议新键: error44
代码行: throw FileSystemException('文件不存在', filePath);
----------------------------------------
文件: infrastructure\storage\local_storage.dart, 行: 320
硬编码文本: "源文件不存在"
建议新键: error45
代码行: throw FileSystemException('源文件不存在', oldPath);
----------------------------------------
文件: presentation\app.dart, 行: 47
硬编码文本: "【系统语言】操作系统语言检测: $platformLocale"
建议新键: errorPlatformlocale
代码行: debugPrint('【系统语言】操作系统语言检测: $platformLocale');
----------------------------------------
文件: presentation\app.dart, 行: 55
硬编码文本: "【系统语言】检测到中文系统语言，设置为: zh"
建议新键: errorZh
代码行: debugPrint('【系统语言】检测到中文系统语言，设置为: zh');
----------------------------------------
文件: presentation\app.dart, 行: 58
硬编码文本: "【系统语言】检测到英文系统语言，设置为: en"
建议新键: errorEn
代码行: debugPrint('【系统语言】检测到英文系统语言，设置为: en');
----------------------------------------
文件: presentation\app.dart, 行: 62
硬编码文本: "【系统语言】未检测到支持的系统语言，默认使用中文"
建议新键: error46
代码行: debugPrint('【系统语言】未检测到支持的系统语言，默认使用中文');
----------------------------------------
文件: presentation\app.dart, 行: 85
硬编码文本: "【系统语言】当前用户语言设置: $userLanguage"
建议新键: errorUserlanguage
代码行: debugPrint('【系统语言】当前用户语言设置: $userLanguage');
----------------------------------------
文件: presentation\app.dart, 行: 92
硬编码文本: "【系统语言】最终使用的语言: ${finalLocale?.languageCode ??"
建议新键: errorFinallocaleLanguagecode
代码行: debugPrint('【系统语言】最终使用的语言: ${finalLocale?.languageCode ?? "null"}');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 10
硬编码文本: "开始复制选中元素..."
建议新键: error47
代码行: debugPrint('开始复制选中元素...');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 12
硬编码文本: "复制结果: ${clipboardElement != null ?"
建议新键: errorClipboardelementNull
代码行: debugPrint('复制结果: ${clipboardElement != null ? '成功' : '失败'}');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 15
硬编码文本: "复制的元素类型: ${clipboardElement["
建议新键: errorClipboardelement
代码行: debugPrint('复制的元素类型: ${clipboardElement['type']}');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 29
硬编码文本: "======= 剪贴板详细检查 ======="
建议新键: error48
代码行: debugPrint('======= 剪贴板详细检查 =======');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 33
硬编码文本: "内部剪贴板内容类型: ${clipboardElement["
建议新键: errorClipboardelement1
代码行: debugPrint('内部剪贴板内容类型: ${clipboardElement['type']}');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 38
硬编码文本: "字符IDs: ${clipboardElement["
建议新键: errorClipboardelement2
代码行: debugPrint('字符IDs: ${clipboardElement['characterIds']}');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 42
硬编码文本: "字符ID: ${clipboardElement["
建议新键: errorClipboardelement3
代码行: debugPrint('字符ID: ${clipboardElement['data']['characterId']}');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 46
硬编码文本: "图库项目IDs: ${clipboardElement["
建议新键: errorClipboardelement4
代码行: debugPrint('图库项目IDs: ${clipboardElement['itemIds']}');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 48
硬编码文本: "图片URL: ${clipboardElement["
建议新键: errorClipboardelement5
代码行: debugPrint('图片URL: ${clipboardElement['imageUrl']}');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 53
硬编码文本: "内部剪贴板完整内容: $clipboardElement"
建议新键: errorClipboardelement6
代码行: debugPrint('内部剪贴板完整内容: $clipboardElement');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 56
硬编码文本: "内部剪贴板为空"
建议新键: error49
代码行: debugPrint('内部剪贴板为空');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 59
硬编码文本: "======= 剪贴板检查结束 ======="
建议新键: error50
代码行: debugPrint('======= 剪贴板检查结束 =======');
----------------------------------------
文件: presentation\pages\practices\clipboard_enhancements.dart, 行: 83
硬编码文本: "剪贴板监控错误: $e"
建议新键: errorE34
代码行: debugPrint('剪贴板监控错误: $e');
----------------------------------------
文件: presentation\pages\practices\m3_practice_edit_page.dart, 行: 2895
硬编码文本: "🎨 网格显示切换: $oldValue → ${_controller.state.gridVisible}"
建议新键: errorOldvalueStateGridvisible
代码行: debugPrint('🎨 网格显示切换: $oldValue → ${_controller.state.gridVisible}');
----------------------------------------
文件: presentation\pages\practices\m3_practice_edit_page.dart, 行: 2896
硬编码文本: "🎨 网格大小: ${_controller.state.gridSize}"
建议新键: errorStateGridsize
代码行: debugPrint('🎨 网格大小: ${_controller.state.gridSize}');
----------------------------------------
文件: presentation\pages\practices\m3_practice_edit_page.dart, 行: 2901
硬编码文本: "🎨 调用 triggerGridSettingsChange()"
建议新键: error调用Triggergridsettingschange
代码行: debugPrint('🎨 调用 triggerGridSettingsChange()');
----------------------------------------
文件: presentation\pages\practices\m3_practice_edit_page.dart, 行: 2905
硬编码文本: "🎨 调用 setState() 强制重建UI"
建议新键: error调用Setstate
代码行: debugPrint('🎨 调用 setState() 强制重建UI');
----------------------------------------
文件: presentation\pages\practices\m3_practice_edit_page.dart, 行: 2908
硬编码文本: "🎨 网格切换完成"
建议新键: error51
代码行: debugPrint('🎨 网格切换完成');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_gesture_handler.dart, 行: 540
硬编码文本: "【平移】handlePanUpdate: 警告 - 偏移量包含NaN值！"
建议新键: 平移HandlepanupdateWarning
代码行: debugPrint('【平移】handlePanUpdate: 警告 - 偏移量包含NaN值！');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_gesture_handler.dart, 行: 557
硬编码文本: "【平移】handlePanUpdate: 回调后，偏移量=$_elementStartPosition"
建议新键: error平移Handlepanupdate
代码行: debugPrint('【平移】handlePanUpdate: 回调后，偏移量=$_elementStartPosition');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_gesture_handler.dart, 行: 686
硬编码文本: "【选择】handleTapUp: 点击已选中元素，取消选中: $id"
建议新键: errorSelectHandletapupId
代码行: debugPrint('【选择】handleTapUp: 点击已选中元素，取消选中: $id');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_gesture_handler.dart, 行: 737
硬编码文本: "【选择】handleTapUp: 点击空白区域，清除选择"
建议新键: errorSelectHandletapup
代码行: debugPrint('【选择】handleTapUp: 点击空白区域，清除选择');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_structure_listener.dart, 行: 52
硬编码文本: "📡 CanvasStructureListener: 层级处理器错误 - $type: $e"
建议新键: errorCanvasstructurelistenerTypeE
代码行: debugPrint('📡 CanvasStructureListener: 层级处理器错误 - $type: $e');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_structure_listener.dart, 行: 87
硬编码文本: "📟 CanvasStructureListener: 已释放资源"
建议新键: errorCanvasstructurelistener
代码行: debugPrint('📟 CanvasStructureListener: 已释放资源');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_structure_listener.dart, 行: 99
硬编码文本: "📡 CanvasStructureListener: 注册层级处理器 - $type"
建议新键: errorCanvasstructurelistenerType
代码行: debugPrint('📡 CanvasStructureListener: 注册层级处理器 - $type');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_structure_listener.dart, 行: 105
硬编码文本: "📡 CanvasStructureListener: 取消注册层级处理器 - $type"
建议新键: errorCanvasstructurelistenerType1
代码行: debugPrint('📡 CanvasStructureListener: 取消注册层级处理器 - $type');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_structure_listener.dart, 行: 161
硬编码文本: "📡 StaticBackground: 处理页面背景变化"
建议新键: errorStaticbackground
代码行: debugPrint('📡 StaticBackground: 处理页面背景变化');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_structure_listener.dart, 行: 163
硬编码文本: "📡 StaticBackground: 处理网格设置变化"
建议新键: errorStaticbackground1
代码行: debugPrint('📡 StaticBackground: 处理网格设置变化');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_structure_listener.dart, 行: 170
硬编码文本: "📡 Content: 处理元素变化 - ${event.elements.length} 个元素"
建议新键: errorContentEventElementsLength
代码行: debugPrint('📡 Content: 处理元素变化 - ${event.elements.length} 个元素');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_structure_listener.dart, 行: 172
硬编码文本: "📡 Content: 处理图层可见性变化"
建议新键: errorContent
代码行: debugPrint('📡 Content: 处理图层可见性变化');
----------------------------------------
文件: presentation\pages\practices\widgets\canvas_structure_listener.dart, 行: 190
硬编码文本: "📡 Interaction: 处理工具变化 - ${event.newTool}"
建议新键: errorInteractionEventNewtool
代码行: debugPrint('📡 Interaction: 处理工具变化 - ${event.newTool}');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_controller.dart, 行: 106
硬编码文本: "取消通知计时器失败: $e"
建议新键: errorE35
代码行: debugPrint('取消通知计时器失败: $e');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_controller.dart, 行: 112
硬编码文本: "关闭stream controller失败: $e"
建议新键: errorE36
代码行: debugPrint('关闭stream controller失败: $e');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_controller.dart, 行: 118
硬编码文本: "dispose dirty tracker失败: $e"
建议新键: errorDisposeDirtyE
代码行: debugPrint('dispose dirty tracker失败: $e');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_controller.dart, 行: 124
硬编码文本: "dispose rebuild manager失败: $e"
建议新键: errorDisposeRebuildE
代码行: debugPrint('dispose rebuild manager失败: $e');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_controller.dart, 行: 131
硬编码文本: "移除拖拽状态监听器失败: $e"
建议新键: errorE37
代码行: debugPrint('移除拖拽状态监听器失败: $e');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_controller.dart, 行: 134
硬编码文本: "ContentRenderController dispose过程中发生异常: $e"
建议新键: errorContentrendercontrollerE
代码行: debugPrint('ContentRenderController dispose过程中发生异常: $e');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_controller.dart, 行: 160
硬编码文本: "警告：ContentRenderController super.dispose()可能未能成功调用"
建议新键: warningContentrendercontrollerSuperDispose
代码行: debugPrint('警告：ContentRenderController super.dispose()可能未能成功调用');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_layer.dart, 行: 237
硬编码文本: "dispose cache manager失败: $e"
建议新键: errorDisposeCacheE
代码行: debugPrint('dispose cache manager失败: $e');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_layer.dart, 行: 240
硬编码文本: "ContentRenderLayer dispose过程中发生异常: $e"
建议新键: errorContentrenderlayerE
代码行: debugPrint('ContentRenderLayer dispose过程中发生异常: $e');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_layer.dart, 行: 248
硬编码文本: "ContentRenderLayer super.dispose()调用失败: $disposeError"
建议新键: errorContentrenderlayerSuperDisposeDisposeerror
代码行: debugPrint('ContentRenderLayer super.dispose()调用失败: $disposeError');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_layer.dart, 行: 254
硬编码文本: "ContentRenderLayer 最终super.dispose()调用失败: $finalError"
建议新键: errorContentrenderlayerDisposeFinalerror
代码行: debugPrint('ContentRenderLayer 最终super.dispose()调用失败: $finalError');
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_layer.dart, 行: 264
硬编码文本: "警告：ContentRenderLayer super.dispose()可能未能成功调用"
建议新键: warningContentrenderlayerSuperDispose
代码行: debugPrint('警告：ContentRenderLayer super.dispose()可能未能成功调用');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 69
硬编码文本: "🎯 DragOperationManager: 取消拖拽操作"
建议新键: errorDragoperationmanager
代码行: debugPrint('🎯 DragOperationManager: 取消拖拽操作');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 98
硬编码文本: "🎯 DragOperationManager: 拖拽取消处理失败 - $e"
建议新键: errorDragoperationmanagerE
代码行: debugPrint('🎯 DragOperationManager: 拖拽取消处理失败 - $e');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 117
硬编码文本: "🎯 DragOperationManager: 已释放资源"
建议新键: errorDragoperationmanager1
代码行: debugPrint('🎯 DragOperationManager: 已释放资源');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 128
硬编码文本: "🎯 DragOperationManager: 结束拖拽操作"
建议新键: errorDragoperationmanager2
代码行: debugPrint('🎯 DragOperationManager: 结束拖拽操作');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 134
硬编码文本: "🎯 DragOperationManager: 拖拽结束处理失败 - $e"
建议新键: errorDragoperationmanagerE1
代码行: debugPrint('🎯 DragOperationManager: 拖拽结束处理失败 - $e');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 157
硬编码文本: "🎯 DragOperationManager: 开始拖拽操作"
建议新键: errorDragoperationmanager3
代码行: debugPrint('🎯 DragOperationManager: 开始拖拽操作');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 174
硬编码文本: "🎯 DragOperationManager: 拖拽操作启动失败 - $e"
建议新键: errorDragoperationmanagerE2
代码行: debugPrint('🎯 DragOperationManager: 拖拽操作启动失败 - $e');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 217
硬编码文本: "🎯 DragOperationManager: 拖拽更新失败 - $e"
建议新键: errorDragoperationmanagerE3
代码行: debugPrint('🎯 DragOperationManager: 拖拽更新失败 - $e');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 223
硬编码文本: "🎯 DragOperationManager: 应用最终位置"
建议新键: errorDragoperationmanager4
代码行: debugPrint('🎯 DragOperationManager: 应用最终位置');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 288
硬编码文本: "🎯 网格吸附: $elementId 从 ($x, $y) 到 ($snappedX, $snappedY)"
建议新键: errorElementid从XY到SnappedxSnappedy
代码行: debugPrint('🎯 网格吸附: $elementId 从 ($x, $y) 到 ($snappedX, $snappedY)');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 299
硬编码文本: "🎯 DragOperationManager: 创建撤销/重做操作"
建议新键: errorDragoperationmanager5
代码行: debugPrint('🎯 DragOperationManager: 创建撤销/重做操作');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 307
硬编码文本: "🎯 DragOperationManager: 执行Dragging阶段"
建议新键: errorDragoperationmanager6
代码行: debugPrint('🎯 DragOperationManager: 执行Dragging阶段');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 326
硬编码文本: "🎯 DragOperationManager: 执行PostDrag阶段"
建议新键: errorDragoperationmanager7
代码行: debugPrint('🎯 DragOperationManager: 执行PostDrag阶段');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 352
硬编码文本: "🎯 DragOperationManager: PostDrag阶段异常 - $e"
建议新键: errorDragoperationmanagerE4
代码行: debugPrint('🎯 DragOperationManager: PostDrag阶段异常 - $e');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 360
硬编码文本: "🎯 DragOperationManager: 执行PreDrag阶段"
建议新键: errorDragoperationmanager8
代码行: debugPrint('🎯 DragOperationManager: 执行PreDrag阶段');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 407
硬编码文本: "🎯 DragOperationManager: 初始化完成"
建议新键: errorDragoperationmanager9
代码行: debugPrint('🎯 DragOperationManager: 初始化完成');
----------------------------------------
文件: presentation\pages\practices\widgets\drag_operation_manager.dart, 行: 431
硬编码文本: "🎯 DragOperationManager: 已创建 ${elementsList.length} 个元素快照"
建议新键: errorDragoperationmanagerElementslistLength
代码行: debugPrint('🎯 DragOperationManager: 已创建 ${elementsList.length} 个元素快照');
----------------------------------------
文件: presentation\pages\works\components\filter\date_range_filter_section.dart, 行: 60
硬编码文本: "点击删除按钮"
建议新键: error52
代码行: _logger.info('点击删除按钮');
----------------------------------------
文件: presentation\pages\works\components\filter\date_range_filter_section.dart, 行: 109
硬编码文本: "应用日期范围 - 开始: $_startDate, 结束: $_endDate"
建议新键: error开始结束
代码行: _logger.fine('应用日期范围 - 开始: $_startDate, 结束: $_endDate');
----------------------------------------
文件: presentation\pages\works\components\filter\date_range_filter_section.dart, 行: 203
硬编码文本: "选择预设: $preset, selected: $selected"
建议新键: errorPresetSelectedSelected
代码行: _logger.fine('选择预设: $preset, selected: $selected');
----------------------------------------
文件: presentation\providers\character\character_collection_provider.dart, 行: 142
硬编码文本: "当前页面ID未设置，无法创建选区"
建议新键: error53
代码行: throw Exception('当前页面ID未设置，无法创建选区');
----------------------------------------
文件: presentation\providers\character\character_collection_provider.dart, 行: 145
硬编码文本: "当前页面图像未设置，无法创建选区"
建议新键: error54
代码行: throw Exception('当前页面图像未设置，无法创建选区');
----------------------------------------
文件: presentation\providers\character\character_collection_provider.dart, 行: 148
硬编码文本: "选区尺寸过小，最小尺寸为20x20"
建议新键: error55
代码行: throw Exception('选区尺寸过小，最小尺寸为20x20');
----------------------------------------
文件: presentation\providers\character\character_collection_provider.dart, 行: 451
硬编码文本: "页面图像未设置，无法加载选区数据"
建议新键: error56
代码行: throw Exception('页面图像未设置，无法加载选区数据');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 148
硬编码文本: "PracticeListViewModel: 已经在加载中，跳过"
建议新键: errorPracticelistviewmodel跳过
代码行: debugPrint('PracticeListViewModel: 已经在加载中，跳过');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 152
硬编码文本: "PracticeListViewModel: 开始加载练习数据，设置isLoading=true"
建议新键: errorPracticelistviewmodelTrue
代码行: debugPrint('PracticeListViewModel: 开始加载练习数据，设置isLoading=true');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 167
硬编码文本: "PracticeListViewModel: 调用 _practiceService.queryPractices"
建议新键: errorPracticelistviewmodel调用Querypractices
代码行: debugPrint('PracticeListViewModel: 调用 _practiceService.queryPractices');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 168
硬编码文本: "PracticeListViewModel: 详细过滤条件: ${filter.toJson()}"
建议新键: errorPracticelistviewmodelFilterTojson
代码行: debugPrint('PracticeListViewModel: 详细过滤条件: ${filter.toJson()}');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 170
硬编码文本: "PracticeListViewModel: 查询结果数量: ${practicesResult.length}"
建议新键: errorPracticelistviewmodelPracticesresultLength
代码行: debugPrint('PracticeListViewModel: 查询结果数量: ${practicesResult.length}');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 172
硬编码文本: "PracticeListViewModel: ⚠️ 没有找到匹配的练习数据，检查过滤条件或数据库"
建议新键: errorPracticelistviewmodel
代码行: debugPrint('PracticeListViewModel: ⚠️ 没有找到匹配的练习数据，检查过滤条件或数据库');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 176
硬编码文本: "PracticeListViewModel: 调用 _practiceService.count"
建议新键: errorPracticelistviewmodel调用Count
代码行: debugPrint('PracticeListViewModel: 调用 _practiceService.count');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 178
硬编码文本: "PracticeListViewModel: 总记录数: $totalCount"
建议新键: errorPracticelistviewmodelTotalcount
代码行: debugPrint('PracticeListViewModel: 总记录数: $totalCount');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 200
硬编码文本: "PracticeListViewModel: 转换练习实体失败: $e"
建议新键: errorPracticelistviewmodelE
代码行: debugPrint('PracticeListViewModel: 转换练习实体失败: $e');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 201
硬编码文本: "PracticeListViewModel: 错误堆栈: $stack"
建议新键: errorPracticelistviewmodelStack
代码行: debugPrint('PracticeListViewModel: 错误堆栈: $stack');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 210
硬编码文本: "PracticeListViewModel: ⚠️ 没有找到收藏的练习数据，考虑关闭收藏过滤器"
建议新键: errorPracticelistviewmodel1
代码行: debugPrint('PracticeListViewModel: ⚠️ 没有找到收藏的练习数据，考虑关闭收藏过滤器');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 220
硬编码文本: "PracticeListViewModel: 持久化当前状态"
建议新键: errorPracticelistviewmodel2
代码行: debugPrint('PracticeListViewModel: 持久化当前状态');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 223
硬编码文本: "PracticeListViewModel: 加载练习失败: $e"
建议新键: errorPracticelistviewmodelE1
代码行: debugPrint('PracticeListViewModel: 加载练习失败: $e');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 224
硬编码文本: "PracticeListViewModel: 错误堆栈: $stackTrace"
建议新键: errorPracticelistviewmodelStacktrace
代码行: debugPrint('PracticeListViewModel: 错误堆栈: $stackTrace');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 237
硬编码文本: "PracticeListViewModel: 重置过滤器"
建议新键: errorPracticelistviewmodel3
代码行: debugPrint('PracticeListViewModel: 重置过滤器');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 341
硬编码文本: "PracticeListViewModel: 过滤器未变更，跳过更新"
建议新键: errorPracticelistviewmodel4
代码行: debugPrint('PracticeListViewModel: 过滤器未变更，跳过更新');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 491
硬编码文本: "PracticeListViewModel: 开始初始化数据..."
建议新键: errorPracticelistviewmodel5
代码行: debugPrint('PracticeListViewModel: 开始初始化数据...');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 495
硬编码文本: "PracticeListViewModel: 已恢复状态，过滤条件：${savedState.filter}"
建议新键: errorPracticelistviewmodelSavedstateFilter
代码行: debugPrint('PracticeListViewModel: 已恢复状态，过滤条件：${savedState.filter}');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 513
硬编码文本: "PracticeListViewModel: 开始加载练习数据（强制刷新）"
建议新键: errorPracticelistviewmodel6
代码行: debugPrint('PracticeListViewModel: 开始加载练习数据（强制刷新）');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 516
硬编码文本: "PracticeListViewModel: 初始化失败: $e"
建议新键: errorPracticelistviewmodelE2
代码行: debugPrint('PracticeListViewModel: 初始化失败: $e');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 517
硬编码文本: "PracticeListViewModel: 错误堆栈: $stack"
建议新键: errorPracticelistviewmodelStack1
代码行: debugPrint('PracticeListViewModel: 错误堆栈: $stack');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 529
硬编码文本: "PracticeListViewModel: 尝试重新加载练习数据"
建议新键: errorPracticelistviewmodel7
代码行: debugPrint('PracticeListViewModel: 尝试重新加载练习数据');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 532
硬编码文本: "PracticeListViewModel: 重试加载失败: $loadError"
建议新键: errorPracticelistviewmodelLoaderror
代码行: debugPrint('PracticeListViewModel: 重试加载失败: $loadError');
----------------------------------------
文件: presentation\viewmodels\practice_list_view_model.dart, 行: 533
硬编码文本: "PracticeListViewModel: 错误堆栈: $loadStack"
建议新键: errorPracticelistviewmodelLoadstack
代码行: debugPrint('PracticeListViewModel: 错误堆栈: $loadStack');
----------------------------------------
文件: presentation\viewmodels\work_import_view_model.dart, 行: 101
硬编码文本: "没有找到有效的图片文件"
建议新键: error57
代码行: throw Exception('没有找到有效的图片文件');
----------------------------------------
文件: presentation\widgets\character_collection\regions_painter.dart, 行: 82
硬编码文本: "区域绘制失败: ${region.id}, error: $e\n$stack"
建议新键: regionIdErrorENStack
代码行: debugPrint('区域绘制失败: ${region.id}, error: $e\n$stack');
----------------------------------------
文件: presentation\widgets\character_collection\regions_painter.dart, 行: 86
硬编码文本: "RegionsPainter绘制失败: $e\n$stack"
建议新键: errorENStack
代码行: debugPrint('RegionsPainter绘制失败: $e\n$stack');
----------------------------------------
文件: presentation\widgets\image\cached_image.dart, 行: 102
硬编码文本: "缓存图像数据失败: $e"
建议新键: errorE38
代码行: debugPrint('缓存图像数据失败: $e');
----------------------------------------
文件: presentation\widgets\library\m3_library_browsing_panel.dart, 行: 615
硬编码文本: "文件不存在或无法访问: $filePath"
建议新键: errorFilepath1
代码行: throw Exception('文件不存在或无法访问: $filePath');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 107
硬编码文本: "绘制异常：$e"
建议新键: errorE39
代码行: debugPrint('绘制异常：$e');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 186
硬编码文本: "🎨 CollectionPainter: 绘制字符背景色 ${position.backgroundColor}"
建议新键: errorCollectionpainterPositionBackgroundcolor
代码行: debugPrint('🎨 CollectionPainter: 绘制字符背景色 ${position.backgroundColor}');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 336
硬编码文本: "没有字符图像数据"
建议新键: error58
代码行: debugPrint('没有字符图像数据');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 351
硬编码文本: "尝试查找索引键1: $index"
建议新键: errorIndex
代码行: debugPrint('尝试查找索引键1: $index');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 380
硬编码文本: "找到characterImages子键: $characterImages"
建议新键: errorCharacterimages
代码行: debugPrint('找到characterImages子键: $characterImages');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 389
硬编码文本: "没有找到字符"
建议新键: error59
代码行: debugPrint('没有找到字符 "$char" (索引: $index) 的图像');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 392
硬编码文本: "获取字符图像失败: $e"
建议新键: errorE40
代码行: debugPrint('获取字符图像失败: $e');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 401
硬编码文本: "🔄 开始加载纹理: $path (缓存键: $cacheKey)"
建议新键: errorPathCachekey
代码行: debugPrint('🔄 开始加载纹理: $path (缓存键: $cacheKey)');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 436
硬编码文本: "✅ 纹理加载成功并缓存: $cacheKey (${image.width}x${image.height})"
建议新键: errorCachekeyImageWidthXImageHeight
代码行: debugPrint('✅ 纹理加载成功并缓存: $cacheKey (${image.width}x${image.height})');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 440
硬编码文本: "❌ 加载纹理失败: $e, 路径: $path"
建议新键: errorE路径Path
代码行: debugPrint('❌ 加载纹理失败: $e, 路径: $path');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 488
硬编码文本: "加载字符图像失败: $e"
建议新键: errorE41
代码行: debugPrint('加载字符图像失败: $e');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 516
硬编码文本: "🔑 生成纹理缓存键: $cacheKey"
建议新键: errorCachekey
代码行: debugPrint('🔑 生成纹理缓存键: $cacheKey');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 532
硬编码文本: "⚠️ 同步获取纹理缓存图像时出错: $e"
建议新键: errorE42
代码行: debugPrint('⚠️ 同步获取纹理缓存图像时出错: $e');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 561
硬编码文本: "❌ 纹理绘制错误: $e\n$stack"
建议新键: errorENStack1
代码行: debugPrint('❌ 纹理绘制错误: $e\n$stack');
----------------------------------------
文件: presentation\widgets\practice\collection_painter.dart, 行: 603
硬编码文本: "从内存缓存中找到图像: $cacheKey"
建议新键: errorCachekey1
代码行: debugPrint('从内存缓存中找到图像: $cacheKey');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 42
硬编码文本: "显示导出对话框"
建议新键: error60
代码行: debugPrint('显示导出对话框');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 72
硬编码文本: "导出对话框返回结果: $result"
建议新键: errorResult
代码行: debugPrint('导出对话框返回结果: $result');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 78
硬编码文本: "错误: 导出对话框返回的结果缺少必要的键"
建议新键: error61
代码行: debugPrint('错误: 导出对话框返回的结果缺少必要的键');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 113
硬编码文本: "开始导出PDF"
建议新键: error62
代码行: debugPrint('开始导出PDF');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 119
硬编码文本: "导出PDF的额外参数: $extraParams"
建议新键: errorExtraparams
代码行: debugPrint('导出PDF的额外参数: $extraParams');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 129
硬编码文本: "PDF导出结果: ${pdfPath != null ?"
建议新键: errorPdfpathNull
代码行: debugPrint('PDF导出结果: ${pdfPath != null ? "成功" : "失败"}, 路径: $pdfPath');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 135
硬编码文本: "检查导出的PDF文件是否存在: $exists"
建议新键: errorExists
代码行: debugPrint('检查导出的PDF文件是否存在: $exists');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 139
硬编码文本: "导出的PDF文件大小: $fileSize 字节"
建议新键: errorFilesize字节
代码行: debugPrint('导出的PDF文件大小: $fileSize 字节');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 173
硬编码文本: "开始导出图片, 格式: ${exportType.name}"
建议新键: error格式ExporttypeName
代码行: debugPrint('开始导出图片, 格式: ${exportType.name}');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 186
硬编码文本: "导出的图片 ${i + 1}: ${imagePaths[i]}"
建议新键: errorIImagepathsI
代码行: debugPrint('导出的图片 ${i + 1}: ${imagePaths[i]}');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 195
硬编码文本: "检查导出的第一个图片文件是否存在: $exists"
建议新键: errorExists1
代码行: debugPrint('检查导出的第一个图片文件是否存在: $exists');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 199
硬编码文本: "导出的第一个图片文件大小: $fileSize 字节"
建议新键: errorFilesize字节1
代码行: debugPrint('导出的第一个图片文件大小: $fileSize 字节');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 228
硬编码文本: "导出过程中发生异常: $e"
建议新键: errorE43
代码行: debugPrint('导出过程中发生异常: $e');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 229
硬编码文本: "异常堆栈: $stack"
建议新键: errorStack
代码行: debugPrint('异常堆栈: $stack');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 237
硬编码文本: "=== 导出字帖过程结束 ==="
建议新键: error63
代码行: debugPrint('=== 导出字帖过程结束 ===');
----------------------------------------
文件: presentation\widgets\practice\file_operations.dart, 行: 268
硬编码文本: "渲染进度: $current/$total"
建议新键: errorCurrentTotal
代码行: debugPrint('渲染进度: $current/$total');
----------------------------------------
文件: presentation\widgets\practice\file_operations_mixin.dart, 行: 37
硬编码文本: "检查标题是否存在时出错: $e"
建议新键: errorE44
代码行: debugPrint('检查标题是否存在时出错: $e');
----------------------------------------
文件: presentation\widgets\practice\file_operations_mixin.dart, 行: 90
硬编码文本: "加载字帖失败: $e"
建议新键: errorE45
代码行: debugPrint('加载字帖失败: $e');
----------------------------------------
文件: presentation\widgets\practice\file_operations_mixin.dart, 行: 117
硬编码文本: "开始保存字帖: $saveTitle, ID: $practiceId"
建议新键: errorSavetitleIdPracticeid
代码行: debugPrint('开始保存字帖: $saveTitle, ID: $practiceId');
----------------------------------------
文件: presentation\widgets\practice\file_operations_mixin.dart, 行: 120
硬编码文本: "缩略图生成完成: ${thumbnail != null ?"
建议新键: errorThumbnailNull1
代码行: debugPrint('缩略图生成完成: ${thumbnail != null ? '${thumbnail.length} 字节' : '无缩略图'}');
----------------------------------------
文件: presentation\widgets\practice\file_operations_mixin.dart, 行: 174
硬编码文本: "字帖保存成功: $saveTitle, ID: $practiceId"
建议新键: errorSavetitleIdPracticeid1
代码行: debugPrint('字帖保存成功: $saveTitle, ID: $practiceId');
----------------------------------------
文件: presentation\widgets\practice\file_operations_mixin.dart, 行: 177
硬编码文本: "保存字帖失败: $e"
建议新键: errorE46
代码行: debugPrint('保存字帖失败: $e');
----------------------------------------
文件: presentation\widgets\practice\file_operations_mixin.dart, 行: 199
硬编码文本: "开始另存为新字帖: $title"
建议新键: errorTitle1
代码行: debugPrint('开始另存为新字帖: $title');
----------------------------------------
文件: presentation\widgets\practice\file_operations_mixin.dart, 行: 202
硬编码文本: "缩略图生成完成: ${thumbnail != null ?"
建议新键: errorThumbnailNull2
代码行: debugPrint('缩略图生成完成: ${thumbnail != null ? '${thumbnail.length} 字节' : '无缩略图'}');
----------------------------------------
文件: presentation\widgets\practice\file_operations_mixin.dart, 行: 256
硬编码文本: "字帖另存为成功: $title, ID: $practiceId"
建议新键: errorTitleIdPracticeid
代码行: debugPrint('字帖另存为成功: $title, ID: $practiceId');
----------------------------------------
文件: presentation\widgets\practice\file_operations_mixin.dart, 行: 259
硬编码文本: "另存为字帖失败: $e"
建议新键: errorE47
代码行: debugPrint('另存为字帖失败: $e');
----------------------------------------
文件: presentation\widgets\practice\file_operations_mixin.dart, 行: 349
硬编码文本: "生成缩略图失败: $e"
建议新键: errorE48
代码行: debugPrint('生成缩略图失败: $e');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 188
硬编码文本: "🎯 Canvas性能优化效果最终报告"
建议新键: error64
代码行: print('🎯 Canvas性能优化效果最终报告');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 334
硬编码文本: "📊 会话时长: ${sessionDuration.inMinutes}分${sessionDuration.inSeconds % 60}秒"
建议新键: errorSessiondurationInminutes分SessiondurationInseconds秒
代码行: print('📊 会话时长: ${sessionDuration.inMinutes}分${sessionDuration.inSeconds % 60}秒');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 337
硬编码文本: "🎯 帧性能指标:"
建议新键: error65
代码行: print('🎯 帧性能指标:');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 338
硬编码文本: "平均FPS: ${frame["
建议新键: errorFrame
代码行: print('   平均FPS: ${frame['averageFPS'].toStringAsFixed(1)} (目标: ${frame['targetFPS']})');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 339
硬编码文本: "平均帧时间: ${frame["
建议新键: errorFrame1
代码行: print('   平均帧时间: ${frame['averageFrameTime_ms'].toStringAsFixed(2)}ms');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 340
硬编码文本: "卡顿率: ${frame["
建议新键: errorFrame2
代码行: print('   卡顿率: ${frame['jankRate'].toStringAsFixed(1)}%');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 341
硬编码文本: "FPS效率: ${frame["
建议新键: errorFrame3
代码行: print('   FPS效率: ${frame['fpsEfficiency'].toStringAsFixed(1)}%');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 344
硬编码文本: "🔔 通知性能指标:"
建议新键: error66
代码行: print('🔔 通知性能指标:');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 345
硬编码文本: "总通知数: ${notification["
建议新键: errorNotification
代码行: print('   总通知数: ${notification['totalNotifications']}');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 346
硬编码文本: "节流通知率: ${notification["
建议新键: errorNotification1
代码行: print('   节流通知率: ${notification['throttledRate'].toStringAsFixed(1)}%');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 347
硬编码文本: "智能分发率: ${notification["
建议新键: errorNotification2
代码行: print('   智能分发率: ${notification['intelligentRate'].toStringAsFixed(1)}%');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 348
硬编码文本: "回退通知率: ${notification["
建议新键: errorNotification3
代码行: print('   回退通知率: ${notification['fallbackRate'].toStringAsFixed(1)}%');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 349
硬编码文本: "平均处理时间: ${notification["
建议新键: errorNotification4
代码行: print('   平均处理时间: ${notification['averageProcessingTime_us'].toStringAsFixed(0)}μs');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 352
硬编码文本: "🔄 重建性能指标:"
建议新键: error67
代码行: print('🔄 重建性能指标:');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 353
硬编码文本: "总重建数: ${rebuild["
建议新键: errorRebuild
代码行: print('   总重建数: ${rebuild['totalRebuilds']}');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 354
硬编码文本: "优化重建率: ${rebuild["
建议新键: errorRebuild1
代码行: print('   优化重建率: ${rebuild['optimizedRate'].toStringAsFixed(1)}%');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 355
硬编码文本: "平均重建时间: ${rebuild["
建议新键: errorRebuild2
代码行: print('   平均重建时间: ${rebuild['averageRebuildTime_ms'].toStringAsFixed(2)}ms');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 358
硬编码文本: "⭐ 优化效率总评:"
建议新键: error68
代码行: print('⭐ 优化效率总评:');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 359
硬编码文本: "帧效率: ${efficiency["
建议新键: errorEfficiency
代码行: print('   帧效率: ${efficiency['frameEfficiency'].toStringAsFixed(1)}%');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 360
硬编码文本: "通知效率: ${efficiency["
建议新键: errorEfficiency1
代码行: print('   通知效率: ${efficiency['notificationEfficiency'].toStringAsFixed(1)}%');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 361
硬编码文本: "重建效率: ${efficiency["
建议新键: errorEfficiency2
代码行: print('   重建效率: ${efficiency['rebuildEfficiency'].toStringAsFixed(1)}%');
----------------------------------------
文件: presentation\widgets\practice\optimization_metrics_collector.dart, 行: 362
硬编码文本: "综合评分: ${efficiency["
建议新键: errorEfficiency3
代码行: print('   综合评分: ${efficiency['overallEfficiency'].toStringAsFixed(1)}% - ${efficiency['grade']}');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 417
硬编码文本: "⚙️ SelfAdaptivePerformanceOptimizer: 应用新配置"
建议新键: errorSelfadaptiveperformanceoptimizer
代码行: print('⚙️ SelfAdaptivePerformanceOptimizer: 应用新配置');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 418
硬编码文本: "配置详情: ${newConfig.toJson()}"
建议新键: errorNewconfigTojson
代码行: print('   配置详情: ${newConfig.toJson()}');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 494
硬编码文本: "🔄 SelfAdaptivePerformanceOptimizer: 重置为默认配置"
建议新键: errorSelfadaptiveperformanceoptimizer1
代码行: print('🔄 SelfAdaptivePerformanceOptimizer: 重置为默认配置');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 495
硬编码文本: "配置详情: ${_config.toJson()}"
建议新键: errorTojson
代码行: print('   配置详情: ${_config.toJson()}');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 528
硬编码文本: "📱 SelfAdaptivePerformanceOptimizer: 设置设备性能等级为 $level"
建议新键: errorSelfadaptiveperformanceoptimizerLevel
代码行: print('📱 SelfAdaptivePerformanceOptimizer: 设置设备性能等级为 $level');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 529
硬编码文本: "应用配置: ${_config.toJson()}"
建议新键: errorTojson1
代码行: print('   应用配置: ${_config.toJson()}');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 593
硬编码文本: "⚠️ SelfAdaptivePerformanceOptimizer: 检测到性能压力，降低配置"
建议新键: errorSelfadaptiveperformanceoptimizer2
代码行: print('⚠️ SelfAdaptivePerformanceOptimizer: 检测到性能压力，降低配置');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 612
硬编码文本: "✅ SelfAdaptivePerformanceOptimizer: 性能良好，恢复正常配置"
建议新键: errorSelfadaptiveperformanceoptimizer3
代码行: print('✅ SelfAdaptivePerformanceOptimizer: 性能良好，恢复正常配置');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 653
硬编码文本: "✅ SelfAdaptivePerformanceOptimizer: 内存压力恢复正常，恢复配置"
建议新键: errorSelfadaptiveperformanceoptimizer4
代码行: print('✅ SelfAdaptivePerformanceOptimizer: 内存压力恢复正常，恢复配置');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 683
硬编码文本: "优化配置: ${memoryOptimizedConfig.toJson()}"
建议新键: errorMemoryoptimizedconfigTojson
代码行: print('   优化配置: ${memoryOptimizedConfig.toJson()}');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 723
硬编码文本: "⏱️ SelfAdaptivePerformanceOptimizer: 移除帧率限制"
建议新键: errorSelfadaptiveperformanceoptimizer5
代码行: print('⏱️ SelfAdaptivePerformanceOptimizer: 移除帧率限制');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 779
硬编码文本: "🔍 SelfAdaptivePerformanceOptimizer: 检测到设备性能等级为 $detectedLevel"
建议新键: errorSelfadaptiveperformanceoptimizerDetectedlevel
代码行: print('🔍 SelfAdaptivePerformanceOptimizer: 检测到设备性能等级为 $detectedLevel');
----------------------------------------
文件: presentation\widgets\practice\performance_optimizer.dart, 行: 782
硬编码文本: "应用配置: ${_config.toJson()}"
建议新键: errorTojson2
代码行: print('   应用配置: ${_config.toJson()}');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 41
硬编码文本: "无法获取渲染对象"
建议新键: error69
代码行: debugPrint('无法获取渲染对象');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 61
硬编码文本: "无法将图像转换为字节数据"
建议新键: error70
代码行: debugPrint('无法将图像转换为字节数据');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 64
硬编码文本: "从 RepaintBoundary 捕获图像失败: $e"
建议新键: error从RepaintboundaryE
代码行: debugPrint('从 RepaintBoundary 捕获图像失败: $e');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 65
硬编码文本: "堆栈跟踪: $stack"
建议新键: errorStack1
代码行: debugPrint('堆栈跟踪: $stack');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 84
硬编码文本: "检查标题是否存在时出错: $e"
建议新键: errorE49
代码行: debugPrint('检查标题是否存在时出错: $e');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 119
硬编码文本: "加载字帖失败: $e"
建议新键: errorE50
代码行: debugPrint('加载字帖失败: $e');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 150
硬编码文本: "开始另存为新字帖: $title"
建议新键: errorTitle2
代码行: debugPrint('开始另存为新字帖: $title');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 176
硬编码文本: "字帖另存为成功: $title, ID: $currentPracticeId"
建议新键: errorTitleIdCurrentpracticeid
代码行: debugPrint('字帖另存为成功: $title, ID: $currentPracticeId');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 179
硬编码文本: "另存为字帖失败: $e"
建议新键: errorE51
代码行: debugPrint('另存为字帖失败: $e');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 217
硬编码文本: "开始保存字帖: $saveTitle, ID: $currentPracticeId"
建议新键: errorSavetitleIdCurrentpracticeid
代码行: debugPrint('开始保存字帖: $saveTitle, ID: $currentPracticeId');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 243
硬编码文本: "字帖保存成功: $saveTitle, ID: $currentPracticeId"
建议新键: errorSavetitleIdCurrentpracticeid1
代码行: debugPrint('字帖保存成功: $saveTitle, ID: $currentPracticeId');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 246
硬编码文本: "保存字帖失败: $e"
建议新键: errorE52
代码行: debugPrint('保存字帖失败: $e');
----------------------------------------
文件: presentation\widgets\practice\practice_persistence_mixin.dart, 行: 328
硬编码文本: "生成缩略图失败: $e"
建议新键: errorE53
代码行: debugPrint('生成缩略图失败: $e');
----------------------------------------
文件: presentation\widgets\practice\texture_manager.dart, 行: 33
硬编码文本: "📊 纹理缓存统计信息"
建议新键: error71
代码行: debugPrint('📊 纹理缓存统计信息');
----------------------------------------
文件: presentation\widgets\practice\texture_manager.dart, 行: 57
硬编码文本: "❌ 纹理路径为空"
建议新键: error72
代码行: debugPrint('❌ 纹理路径为空');
----------------------------------------
文件: presentation\widgets\practice\texture_manager.dart, 行: 69
硬编码文本: "✅ 从缓存加载纹理: $fileId"
建议新键: errorFileid
代码行: debugPrint('✅ 从缓存加载纹理: $fileId');
----------------------------------------
文件: presentation\widgets\practice\texture_manager.dart, 行: 75
硬编码文本: "⏳ 纹理正在加载中: $fileId"
建议新键: errorFileid1
代码行: debugPrint('⏳ 纹理正在加载中: $fileId');
----------------------------------------
文件: presentation\widgets\practice\texture_manager.dart, 行: 103
硬编码文本: "✅ 从文件系统加载纹理成功: $fileId (${image.width}x${image.height})"
建议新键: errorFileidImageWidthXImageHeight
代码行: debugPrint('✅ 从文件系统加载纹理成功: $fileId (${image.width}x${image.height})');
----------------------------------------
文件: presentation\widgets\practice\texture_manager.dart, 行: 107
硬编码文本: "❌ 从文件系统加载纹理失败: $e"
建议新键: errorE54
代码行: debugPrint('❌ 从文件系统加载纹理失败: $e');
----------------------------------------
文件: presentation\widgets\practice\texture_manager.dart, 行: 142
硬编码文本: "✅ 从存储服务加载纹理成功: $fileId (${image.width}x${image.height})"
建议新键: errorFileidImageWidthXImageHeight1
代码行: debugPrint('✅ 从存储服务加载纹理成功: $fileId (${image.width}x${image.height})');
----------------------------------------
文件: presentation\widgets\practice\texture_manager.dart, 行: 150
硬编码文本: "❌ 使用服务加载纹理失败: $e"
建议新键: errorE55
代码行: debugPrint('❌ 使用服务加载纹理失败: $e');
----------------------------------------
文件: presentation\widgets\practice\texture_manager.dart, 行: 154
硬编码文本: "❌ 无法加载纹理: $path"
建议新键: errorPath
代码行: debugPrint('❌ 无法加载纹理: $path');
----------------------------------------
文件: presentation\widgets\practice\thumbnail_generator.dart, 行: 30
硬编码文本: "页面背景颜色: $bgColorStr"
建议新键: errorBgcolorstr
代码行: debugPrint('页面背景颜色: $bgColorStr');
----------------------------------------
文件: presentation\widgets\practice\thumbnail_generator.dart, 行: 37
硬编码文本: "页面元素数量: ${elements.length}"
建议新键: errorElementsLength
代码行: debugPrint('页面元素数量: ${elements.length}');
----------------------------------------
文件: presentation\widgets\practice\thumbnail_generator.dart, 行: 45
硬编码文本: "缩放比例: $scale (原始尺寸: ${pageWidth}x$pageHeight)"
建议新键: errorScalePagewidthXPageheight
代码行: debugPrint('缩放比例: $scale (原始尺寸: ${pageWidth}x$pageHeight)');
----------------------------------------
文件: presentation\widgets\practice\thumbnail_generator.dart, 行: 134
硬编码文本: "绘制标题: $title"
建议新键: errorTitle3
代码行: debugPrint('绘制标题: $title');
----------------------------------------
文件: presentation\widgets\practice\thumbnail_generator.dart, 行: 200
硬编码文本: "集字元素字符数量: ${characters.length}"
建议新键: errorCharactersLength
代码行: debugPrint('集字元素字符数量: ${characters.length}');
----------------------------------------
文件: presentation\widgets\practice\thumbnail_generator.dart, 行: 211
硬编码文本: "集字元素尺寸: ${width}x$height, 字体大小: $fontSize, 字体颜色: $fontColor"
建议新键: errorWidthXHeightFontsizeFontcolor
代码行: debugPrint('集字元素尺寸: ${width}x$height, 字体大小: $fontSize, 字体颜色: $fontColor');
----------------------------------------
文件: presentation\widgets\practice\thumbnail_generator.dart, 行: 232
硬编码文本: "集字元素文本: $text"
建议新键: errorText
代码行: debugPrint('集字元素文本: $text');
----------------------------------------
文件: presentation\widgets\practice\thumbnail_generator.dart, 行: 279
硬编码文本: "绘制集字元素失败: $e"
建议新键: errorE56
代码行: debugPrint('绘制集字元素失败: $e');
----------------------------------------
文件: presentation\widgets\practice\thumbnail_generator.dart, 行: 280
硬编码文本: "堆栈跟踪: $stack"
建议新键: errorStack2
代码行: debugPrint('堆栈跟踪: $stack');
----------------------------------------
文件: presentation\widgets\practice\thumbnail_generator.dart, 行: 323
硬编码文本: "绘制组合元素失败: $e"
建议新键: errorE57
代码行: debugPrint('绘制组合元素失败: $e');
----------------------------------------
文件: presentation\widgets\practice\thumbnail_generator.dart, 行: 414
硬编码文本: "绘制文本元素失败: $e"
建议新键: errorE58
代码行: debugPrint('绘制文本元素失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 987
硬编码文本: "ExportDialog: 开始导出文件"
建议新键: errorExportdialog
代码行: debugPrint('ExportDialog: 开始导出文件');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 990
硬编码文本: "ExportDialog: 错误 - 未选择导出位置"
建议新键: exportdialogError
代码行: debugPrint('ExportDialog: 错误 - 未选择导出位置');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 998
硬编码文本: "ExportDialog: 用户输入的文件名:"
建议新键: errorExportdialog1
代码行: debugPrint('ExportDialog: 用户输入的文件名: "$fileName"');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1001
硬编码文本: "ExportDialog: 错误 - 文件名为空"
建议新键: exportdialogError1
代码行: debugPrint('ExportDialog: 错误 - 文件名为空');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1011
硬编码文本: "ExportDialog: 错误 - 文件名包含非法字符"
建议新键: exportdialogError2
代码行: debugPrint('ExportDialog: 错误 - 文件名包含非法字符');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1021
硬编码文本: "ExportDialog: 导出目录不存在，尝试创建: $_outputPath"
建议新键: errorExportdialog2
代码行: debugPrint('ExportDialog: 导出目录不存在，尝试创建: $_outputPath');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1024
硬编码文本: "ExportDialog: 成功创建导出目录"
建议新键: errorExportdialog3
代码行: debugPrint('ExportDialog: 成功创建导出目录');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1026
硬编码文本: "ExportDialog: 创建导出目录失败: $e"
建议新键: errorExportdialogE
代码行: debugPrint('ExportDialog: 创建导出目录失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1065
硬编码文本: "ExportDialog: 导出回调返回值: $result"
建议新键: errorExportdialogResult
代码行: debugPrint('ExportDialog: 导出回调返回值: $result');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1066
硬编码文本: "ExportDialog: 关闭导出对话框并返回结果"
建议新键: errorExportdialog4
代码行: debugPrint('ExportDialog: 关闭导出对话框并返回结果');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1131
硬编码文本: "预览生成失败: $e"
建议新键: errorE59
代码行: debugPrint('预览生成失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1187
硬编码文本: "ExportDialog: 开始初始化默认导出路径"
建议新键: errorExportdialog5
代码行: debugPrint('ExportDialog: 开始初始化默认导出路径');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1193
硬编码文本: "ExportDialog: 获取Downloads目录失败: $e"
建议新键: errorExportdialogE1
代码行: debugPrint('ExportDialog: 获取Downloads目录失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1198
硬编码文本: "ExportDialog: 获取Documents目录也失败: $e2"
建议新键: errorExportdialog6
代码行: debugPrint('ExportDialog: 获取Documents目录也失败: $e2');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1203
硬编码文本: "ExportDialog: 获取临时目录也失败: $e3"
建议新键: errorExportdialog7
代码行: debugPrint('ExportDialog: 获取临时目录也失败: $e3');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1211
硬编码文本: "ExportDialog: 无法获取任何默认路径，用户需要手动选择"
建议新键: errorExportdialog8
代码行: debugPrint('ExportDialog: 无法获取任何默认路径，用户需要手动选择');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1215
硬编码文本: "ExportDialog: 获取到默认路径: ${directory.path}"
建议新键: errorExportdialogDirectoryPath
代码行: debugPrint('ExportDialog: 获取到默认路径: ${directory.path}');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1219
硬编码文本: "ExportDialog: 目录是否存在: $exists"
建议新键: errorExportdialogExists
代码行: debugPrint('ExportDialog: 目录是否存在: $exists');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1225
硬编码文本: "ExportDialog: 目录写入权限测试成功"
建议新键: errorExportdialog9
代码行: debugPrint('ExportDialog: 目录写入权限测试成功');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1227
硬编码文本: "ExportDialog: 测试文件已删除"
建议新键: errorExportdialog10
代码行: debugPrint('ExportDialog: 测试文件已删除');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1229
硬编码文本: "ExportDialog: 目录写入权限测试失败: $e"
建议新键: errorExportdialogE2
代码行: debugPrint('ExportDialog: 目录写入权限测试失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1238
硬编码文本: "ExportDialog: 获取默认路径失败: $e"
建议新键: errorExportdialogE3
代码行: debugPrint('ExportDialog: 获取默认路径失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1239
硬编码文本: "ExportDialog: 堆栈跟踪: $stack"
建议新键: errorExportdialogStack
代码行: debugPrint('ExportDialog: 堆栈跟踪: $stack');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1246
硬编码文本: "ExportDialog: 开始选择导出目录"
建议新键: errorExportdialog11
代码行: debugPrint('ExportDialog: 开始选择导出目录');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1248
硬编码文本: "ExportDialog: 用户选择的目录: $selectedDirectory"
建议新键: errorExportdialogSelecteddirectory
代码行: debugPrint('ExportDialog: 用户选择的目录: $selectedDirectory');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1253
硬编码文本: "ExportDialog: 选择的目录是否存在: $exists"
建议新键: errorExportdialogExists1
代码行: debugPrint('ExportDialog: 选择的目录是否存在: $exists');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1259
硬编码文本: "ExportDialog: 选择的目录写入权限测试成功"
建议新键: errorExportdialog12
代码行: debugPrint('ExportDialog: 选择的目录写入权限测试成功');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1261
硬编码文本: "ExportDialog: 测试文件已删除"
建议新键: errorExportdialog13
代码行: debugPrint('ExportDialog: 测试文件已删除');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1263
硬编码文本: "ExportDialog: 选择的目录写入权限测试失败: $e"
建议新键: errorExportdialogE4
代码行: debugPrint('ExportDialog: 选择的目录写入权限测试失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1270
硬编码文本: "ExportDialog: 用户取消了目录选择"
建议新键: errorExportdialog14
代码行: debugPrint('ExportDialog: 用户取消了目录选择');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1273
硬编码文本: "ExportDialog: 选择目录失败: $e"
建议新键: errorExportdialogE5
代码行: debugPrint('ExportDialog: 选择目录失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 1274
硬编码文本: "ExportDialog: 堆栈跟踪: $stack"
建议新键: errorExportdialogStack1
代码行: debugPrint('ExportDialog: 堆栈跟踪: $stack');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 27
硬编码文本: "错误: 输出路径为空"
建议新键: error73
代码行: debugPrint('错误: 输出路径为空');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 33
硬编码文本: "检查文件系统权限..."
建议新键: error74
代码行: debugPrint('检查文件系统权限...');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 37
硬编码文本: "文件系统权限检查通过"
建议新键: error75
代码行: debugPrint('文件系统权限检查通过');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 39
硬编码文本: "文件系统权限检查失败: $e"
建议新键: errorE60
代码行: debugPrint('文件系统权限检查失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 40
硬编码文本: "尝试创建目录并再次检查权限..."
建议新键: error76
代码行: debugPrint('尝试创建目录并再次检查权限...');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 46
硬编码文本: "创建目录: $outputPath"
建议新键: errorOutputpath
代码行: debugPrint('创建目录: $outputPath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 52
硬编码文本: "错误: 无法创建目录: $outputPath"
建议新键: errorOutputpath1
代码行: debugPrint('错误: 无法创建目录: $outputPath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 56
硬编码文本: "目录已准备好: $outputPath"
建议新键: errorOutputpath2
代码行: debugPrint('目录已准备好: $outputPath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 64
硬编码文本: "渲染进度: $current/$total"
建议新键: errorCurrentTotal1
代码行: debugPrint('渲染进度: $current/$total');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 70
硬编码文本: "错误: 未能渲染任何页面"
建议新键: error77
代码行: debugPrint('错误: 未能渲染任何页面');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 74
硬编码文本: "成功渲染 ${pageImages.length} 个页面"
建议新键: errorPageimagesLength
代码行: debugPrint('成功渲染 ${pageImages.length} 个页面');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 88
硬编码文本: "保存图片文件到: $filePath"
建议新键: errorFilepath2
代码行: debugPrint('保存图片文件到: $filePath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 95
硬编码文本: "文件已存在，先删除: $filePath"
建议新键: errorFilepath3
代码行: debugPrint('文件已存在，先删除: $filePath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 100
硬编码文本: "开始写入图片文件: $filePath"
建议新键: errorFilepath4
代码行: debugPrint('开始写入图片文件: $filePath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 106
硬编码文本: "图片文件保存成功: $filePath (大小: $fileSize 字节)"
建议新键: errorFilepath大小Filesize字节
代码行: debugPrint('图片文件保存成功: $filePath (大小: $fileSize 字节)');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 111
硬编码文本: "文件读取测试成功: ${readTest.length} 字节"
建议新键: errorReadtestLength字节
代码行: debugPrint('文件读取测试成功: ${readTest.length} 字节');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 113
硬编码文本: "文件读取测试失败: $e"
建议新键: errorE61
代码行: debugPrint('文件读取测试失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 118
硬编码文本: "错误: 文件写入后不存在: $filePath"
建议新键: errorFilepath5
代码行: debugPrint('错误: 文件写入后不存在: $filePath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 121
硬编码文本: "保存图片文件失败: $e"
建议新键: errorE62
代码行: debugPrint('保存图片文件失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 122
硬编码文本: "堆栈跟踪: $stack"
建议新键: errorStack3
代码行: debugPrint('堆栈跟踪: $stack');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 126
硬编码文本: "导出完成，成功导出 ${exportedFiles.length} 个文件"
建议新键: errorExportedfilesLength
代码行: debugPrint('导出完成，成功导出 ${exportedFiles.length} 个文件');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 129
硬编码文本: "导出图片失败: $e"
建议新键: errorE63
代码行: debugPrint('导出图片失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 130
硬编码文本: "堆栈跟踪: $stack"
建议新键: errorStack4
代码行: debugPrint('堆栈跟踪: $stack');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 146
硬编码文本: "错误: 输出路径为空"
建议新键: error78
代码行: debugPrint('错误: 输出路径为空');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 152
硬编码文本: "检查文件系统权限..."
建议新键: error79
代码行: debugPrint('检查文件系统权限...');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 156
硬编码文本: "文件系统权限检查通过"
建议新键: error80
代码行: debugPrint('文件系统权限检查通过');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 158
硬编码文本: "文件系统权限检查失败: $e"
建议新键: errorE64
代码行: debugPrint('文件系统权限检查失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 159
硬编码文本: "尝试创建目录并再次检查权限..."
建议新键: error81
代码行: debugPrint('尝试创建目录并再次检查权限...');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 165
硬编码文本: "创建目录: $outputPath"
建议新键: errorOutputpath3
代码行: debugPrint('创建目录: $outputPath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 171
硬编码文本: "错误: 无法创建目录: $outputPath"
建议新键: errorOutputpath4
代码行: debugPrint('错误: 无法创建目录: $outputPath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 175
硬编码文本: "目录已准备好: $outputPath"
建议新键: errorOutputpath5
代码行: debugPrint('目录已准备好: $outputPath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 186
硬编码文本: "使用页面格式: $pageFormat, 朝向: ${isLandscape ?"
建议新键: errorPageformat朝向Islandscape
代码行: debugPrint('使用页面格式: $pageFormat, 朝向: ${isLandscape ? "横向" : "纵向"}');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 196
硬编码文本: "导出所有页面: ${pageIndices.length}页"
建议新键: errorPageindicesLength页
代码行: debugPrint('导出所有页面: ${pageIndices.length}页');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 203
硬编码文本: "只导出当前页面: 第${currentPage + 1}页"
建议新键: error第Currentpage页
代码行: debugPrint('只导出当前页面: 第${currentPage + 1}页');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 210
硬编码文本: "导出自定义范围页面: $pageRange => ${pageIndices.length}页"
建议新键: errorPagerangePageindicesLength页
代码行: debugPrint('导出自定义范围页面: $pageRange => ${pageIndices.length}页');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 221
硬编码文本: "警告: 未指定有效页面范围，默认使用第一页"
建议新键: warning3
代码行: debugPrint('警告: 未指定有效页面范围，默认使用第一页');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 241
硬编码文本: "适配策略: $fitPolicy"
建议新键: errorFitpolicy
代码行: debugPrint('适配策略: $fitPolicy');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 247
硬编码文本: "警告: 跳过无效的页面索引: $pageIndex (超出范围)"
建议新键: warningPageindex
代码行: debugPrint('警告: 跳过无效的页面索引: $pageIndex (超出范围)');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 258
硬编码文本: "成功渲染第 ${pageIndex + 1} 页"
建议新键: errorPageindex页
代码行: debugPrint('成功渲染第 ${pageIndex + 1} 页');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 260
硬编码文本: "警告: 未能渲染第 ${pageIndex + 1} 页，跳过"
建议新键: warningPageindex页跳过
代码行: debugPrint('警告: 未能渲染第 ${pageIndex + 1} 页，跳过');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 265
硬编码文本: "错误: 未能渲染任何页面"
建议新键: error82
代码行: debugPrint('错误: 未能渲染任何页面');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 269
硬编码文本: "成功渲染 ${pageImages.length} 个页面"
建议新键: errorPageimagesLength1
代码行: debugPrint('成功渲染 ${pageImages.length} 个页面');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 279
硬编码文本: "添加第 ${pageIndex + 1} 页到PDF: ${image.length} 字节"
建议新键: errorPageindexImageLength字节
代码行: debugPrint('添加第 ${pageIndex + 1} 页到PDF: ${image.length} 字节');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 303
硬编码文本: "应用适配策略: $fitPolicy"
建议新键: errorFitpolicy1
代码行: debugPrint('应用适配策略: $fitPolicy');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 340
硬编码文本: "创建目录: $outputPath"
建议新键: errorOutputpath6
代码行: debugPrint('创建目录: $outputPath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 346
硬编码文本: "错误: 无法创建目录: $outputPath"
建议新键: errorOutputpath7
代码行: debugPrint('错误: 无法创建目录: $outputPath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 350
硬编码文本: "目录已准备好: $outputPath"
建议新键: errorOutputpath8
代码行: debugPrint('目录已准备好: $outputPath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 354
硬编码文本: "保存PDF文件到: $filePath"
建议新键: errorFilepath6
代码行: debugPrint('保存PDF文件到: $filePath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 361
硬编码文本: "PDF生成完成: ${pdfBytes.length} 字节"
建议新键: errorPdfbytesLength字节
代码行: debugPrint('PDF生成完成: ${pdfBytes.length} 字节');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 365
硬编码文本: "文件已存在，先删除: $filePath"
建议新键: errorFilepath7
代码行: debugPrint('文件已存在，先删除: $filePath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 370
硬编码文本: "开始写入PDF文件: $filePath"
建议新键: errorFilepath8
代码行: debugPrint('开始写入PDF文件: $filePath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 376
硬编码文本: "PDF文件保存成功: $filePath (大小: $fileSize 字节)"
建议新键: errorFilepath大小Filesize字节1
代码行: debugPrint('PDF文件保存成功: $filePath (大小: $fileSize 字节)');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 381
硬编码文本: "文件读取测试成功: ${readTest.length} 字节"
建议新键: errorReadtestLength字节1
代码行: debugPrint('文件读取测试成功: ${readTest.length} 字节');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 383
硬编码文本: "文件读取测试失败: $e"
建议新键: errorE65
代码行: debugPrint('文件读取测试失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 388
硬编码文本: "错误: PDF文件写入后不存在: $filePath"
建议新键: errorFilepath9
代码行: debugPrint('错误: PDF文件写入后不存在: $filePath');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 392
硬编码文本: "保存PDF文件失败: $e"
建议新键: errorE66
代码行: debugPrint('保存PDF文件失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 393
硬编码文本: "堆栈跟踪: $stack"
建议新键: errorStack5
代码行: debugPrint('堆栈跟踪: $stack');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 397
硬编码文本: "导出PDF失败: $e"
建议新键: errorE67
代码行: debugPrint('导出PDF失败: $e');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 398
硬编码文本: "堆栈跟踪: $stack"
建议新键: errorStack6
代码行: debugPrint('堆栈跟踪: $stack');
----------------------------------------
文件: presentation\widgets\practice\export\export_service.dart, 行: 448
硬编码文本: "解析页面范围失败: $e"
建议新键: errorE68
代码行: debugPrint('解析页面范围失败: $e');
----------------------------------------
文件: presentation\widgets\practice\property_panels\vertical_column_justified_text.dart, 行: 74
硬编码文本: "竖排文本列: 垂直对齐=$verticalAlign, 列对齐=$columnAlignment"
建议新键: errorVerticalalignColumnalignment
代码行: developer.log('竖排文本列: 垂直对齐=$verticalAlign, 列对齐=$columnAlignment');
----------------------------------------
文件: presentation\widgets\practice\property_panels\collection_panels\m3_background_texture_panel.dart, 行: 812
硬编码文本: "图片文件为空"
建议新键: error83
代码行: throw Exception('图片文件为空');
----------------------------------------
文件: presentation\widgets\practice\property_panels\collection_panels\m3_background_texture_panel.dart, 行: 824
硬编码文本: "无法加载纹理图片: $e"
建议新键: errorE69
代码行: throw Exception('无法加载纹理图片: $e');
----------------------------------------
文件: utils\focus\focus_persistence.dart, 行: 38
硬编码文本: "已恢复优先级焦点到: ${node.debugLabel ??"
建议新键: errorNodeDebuglabel
代码行: debugPrint('已恢复优先级焦点到: ${node.debugLabel ?? '未命名节点'}');
----------------------------------------
文件: utils\keyboard\keyboard_utils.dart, 行: 170
硬编码文本: "⌨️ Alt键状态强制同步: $systemAltState"
建议新键: errorSystemaltstate
代码行: print('⌨️ Alt键状态强制同步: $systemAltState');
----------------------------------------
文件: widgets\character_edit\character_edit_canvas.dart, 行: 709
硬编码文本: "轮廓处理超时"
建议新键: error84
代码行: throw Exception('轮廓处理超时');
----------------------------------------
文件: widgets\character_edit\character_edit_canvas.dart, 行: 731
硬编码文本: "无法将图像转换为字节数组"
建议新键: error85
代码行: throw Exception('无法将图像转换为字节数组');
----------------------------------------

--- UI_TEXT_WIDGET (116 个) ---
文件: main.dart, 行: 106
硬编码文本: "应用启动失败: $e"
建议新键: e
代码行: AppLogger.fatal('应用启动失败', error: e, stackTrace: stack, tag: 'App');
----------------------------------------
文件: presentation\pages\home_page.dart, 行: 24
硬编码文本: "字体测试工具"
建议新键: text1
代码行: child: const Text('字体测试工具'),
----------------------------------------
文件: presentation\pages\home_page.dart, 行: 24
硬编码文本: "字体测试工具"
建议新键: text2
代码行: child: const Text('字体测试工具'),
----------------------------------------
文件: presentation\pages\home_page.dart, 行: 31
硬编码文本: "字体粗细测试工具"
建议新键: text3
代码行: child: const Text('字体粗细测试工具'),
----------------------------------------
文件: presentation\pages\home_page.dart, 行: 31
硬编码文本: "字体粗细测试工具"
建议新键: text4
代码行: child: const Text('字体粗细测试工具'),
----------------------------------------
文件: presentation\pages\home_page.dart, 行: 13
硬编码文本: "Home Page')), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ const Text('Home Page', style: TextStyle(fontSize: 24)), const SizedBox(height: 32), ElevatedButton( onPressed: () { context.go(AppRoutes.fontTester); }, child: const Text('字体测试工具"
建议新键: homePageBodyCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenConstTextHomePageStyleTextstyleFontsizeConstSizedboxHeightElevatedbuttonOnpressedContextGoApproutesFonttesterChildConstText
代码行: appBar: AppBar(title: const Text('Home Page')),
----------------------------------------
文件: presentation\pages\home_page.dart, 行: 30
硬编码文本: "字体粗细测试工具"
建议新键: text5
代码行: },
----------------------------------------
文件: presentation\pages\home_page.dart, 行: 12
硬编码文本: "Home Page')), body: Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ const Text('Home Page', style: TextStyle(fontSize: 24)), const SizedBox(height: 32), ElevatedButton( onPressed: () { context.go(AppRoutes.fontTester); }, child: const Text('字体测试工具"
建议新键: homePageBodyCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenConstTextHomePageStyleTextstyleFontsizeConstSizedboxHeightElevatedbuttonOnpressedContextGoApproutesFonttesterChildConstText1
代码行: return Scaffold(
----------------------------------------
文件: presentation\pages\characters\components\m3_character_detail_panel.dart, 行: 231
硬编码文本: "${l10n.characterDetailLoadError}: $error', style: TextStyle(color: theme.colorScheme.error), ), ), ), ), ); } @override void dispose() { _tagController.dispose(); super.dispose(); } Future<void> _addTag(CharacterView character, String tag) async { try { final characterService = ref.read(characterServiceProvider); await characterService.addTag(character.id, tag); ref.invalidate(characterDetailProvider(widget.characterId)); } catch (e) { if (mounted) { final l10n = AppLocalizations.of(context); ScaffoldMessenger.of(context).showSnackBar( SnackBar( content: Text(l10n.tagAddError(e.toString())), backgroundColor: Theme.of(context).colorScheme.error, ), ); } } } Widget _buildFormatSelector( WidgetRef ref, ThemeData theme, int selectedIndex, AppLocalizations l10n, ) { final detailState = ref.watch(characterDetailProvider(widget.characterId)); return detailState.maybeWhen( data: (state) { if (state == null) return const SizedBox.shrink(); final formats = state.availableFormats; if (formats.isEmpty) return const SizedBox.shrink(); return SizedBox( height: 60, child: ListView.builder( scrollDirection: Axis.horizontal, itemCount: formats.length, itemBuilder: (context, index) { final format = formats[index]; final isSelected = index == selectedIndex; return FutureBuilder<String>( future: format.resolvePath(widget.characterId), builder: (context, snapshot) { return GestureDetector( onTap: () { setState(() { selectedFormat = index; }); }, child: Container( width: 60, height: 60, margin: const EdgeInsets.only(right: 8), decoration: BoxDecoration( border: Border.all( color: isSelected ? theme.colorScheme.primary : theme.colorScheme.outline, width: isSelected ? 2 : 1, ), borderRadius: BorderRadius.circular(4), ), child: snapshot.hasData ? _buildFormatThumbnailWithTooltip( snapshot.data!, format) : const Center( child: SizedBox( width: 20, height: 20, child: CircularProgressIndicator( strokeWidth: 2, ), ), ), ), ); }, ); }, ), ); }, orElse: () => const SizedBox.shrink(), ); } Widget _buildFormatThumbnailWithTooltip(String imagePath, dynamic format) { final extension = imagePath.toLowerCase().split('.').last; final isSvg = extension == 'svg'; final l10n = AppLocalizations.of(context); return FutureBuilder<ImageDimensions?>( future: Future.value( const ImageDimensions(width: 300, height: 300, isSvg: false)), builder: (context, snapshot) { String tooltipText = _getFormatTooltip(format); tooltipText += '\n${l10n.dimensions}: 300×300 px'; return Tooltip( message: tooltipText, waitDuration: const Duration(milliseconds: 500), showDuration: const Duration(seconds: 5), textStyle: const TextStyle( fontSize: 14, color: Colors.white, ), decoration: BoxDecoration( color: Colors.black87, borderRadius: BorderRadius.circular(4), ), child: Stack( fit: StackFit.expand, children: [ if (isSvg) SvgPicture.file( File(imagePath), fit: BoxFit.contain, placeholderBuilder: (context) => const Icon(Icons.image), ) else Image.file( File(imagePath), fit: BoxFit.contain, errorBuilder: (context, error, stackTrace) { return const Icon(Icons.broken_image); }, ), ], ), ); }, ); } Widget _buildHeader( WidgetRef ref, ThemeData theme, CharacterView character, AppLocalizations l10n, ) { final startSectionWidgets = [ Text( character.character, style: theme.textTheme.headlineMedium?.copyWith( fontWeight: FontWeight.bold, ), overflow: TextOverflow.ellipsis, ), ]; final endSectionWidgets = <Widget>[]; if (widget.onToggleFavorite != null) { endSectionWidgets.add( IconButton( icon: Icon( character.isFavorite ? Icons.favorite : Icons.favorite_border, color: character.isFavorite ? theme.colorScheme.error : theme.colorScheme.onSurface, ), onPressed: () async { widget.onToggleFavorite?.call(); }, tooltip: character.isFavorite ? l10n.removeFavorite : l10n.addFavorite, constraints: const BoxConstraints( minWidth: 40, minHeight: 40, ), padding: EdgeInsets.zero, visualDensity: VisualDensity.compact, ), ); } if (widget.onEdit != null) { endSectionWidgets.add( IconButton( icon: const Icon(Icons.edit), onPressed: () { final characterView = ref .read(characterDetailProvider(widget.characterId)) .value ?.character; if (characterView != null) { Navigator.of(context).pushNamed( AppRoutes.characterCollection, arguments: { 'workId': characterView.workId, 'pageId': characterView.pageId, 'characterId': characterView.id, }, ); } else { widget.onEdit?.call(); } }, tooltip: l10n.edit, constraints: const BoxConstraints( minWidth: 40, minHeight: 40, ), padding: EdgeInsets.zero, visualDensity: VisualDensity.compact, ), ); } if (widget.onClose != null) { endSectionWidgets.add( IconButton( icon: const Icon(Icons.close), onPressed: widget.onClose, tooltip: l10n.cancel, constraints: const BoxConstraints( minWidth: 40, minHeight: 40, ), padding: EdgeInsets.zero, visualDensity: VisualDensity.compact, ), ); } return AdaptiveRow( startSection: startSectionWidgets, endSection: endSectionWidgets, sectionSpacing: 8.0, itemSpacing: 4.0, ); } Widget _buildImagePreview( ThemeData theme, CharacterView character, String? imagePath, AppLocalizations l10n, ) { return Container( alignment: Alignment.center, decoration: BoxDecoration( color: theme.colorScheme.surfaceContainerHighest .withAlpha(77), borderRadius: BorderRadius.circular(8), ), child: imagePath != null && imagePath.isNotEmpty ? ClipRRect( borderRadius: BorderRadius.circular(8), child: ZoomableImageView( imagePath: imagePath, enableMouseWheel: true, minScale: 0.5, maxScale: 5.0, showControls: true, errorBuilder: (context, error, stackTrace) { return Column( mainAxisAlignment: MainAxisAlignment.center, children: [ Icon( Icons.broken_image, size: 48, color: theme.colorScheme.error, ), const SizedBox(height: 16), Text( l10n.imageLoadError(error.toString()), style: TextStyle(color: theme.colorScheme.error), ), ], ); }, loadingBuilder: (context) { return Center( child: CircularProgressIndicator( color: theme.colorScheme.primary, strokeWidth: 2, ), ); }, ), ) : Column( mainAxisAlignment: MainAxisAlignment.center, children: [ Icon( Icons.image_not_supported, size: 48, color: theme.colorScheme.onSurfaceVariant, ), const SizedBox(height: 16), Text( l10n.noCharacters, style: TextStyle(color: theme.colorScheme.onSurfaceVariant), ), ], ), ); } Widget _buildInfoItem( ThemeData theme, { required String title, required String content, required IconData iconData, }) { return Padding( padding: const EdgeInsets.only(bottom: AppSizes.spacingMedium), child: Row( crossAxisAlignment: CrossAxisAlignment.start, children: [ SizedBox( width: 20, height: 20, child: Icon( iconData, size: 20, color: theme.colorScheme.primary, ), ), const SizedBox(width: 8), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( title, style: theme.textTheme.bodySmall?.copyWith( color: theme.colorScheme.onSurfaceVariant, ), overflow: TextOverflow.ellipsis, ), Text( content, style: theme.textTheme.bodyMedium, overflow: TextOverflow.ellipsis, maxLines: 3, ), ], ), ), ], ), ); } Widget _buildInfoItemWithButton( ThemeData theme, { required String title, required String content, required IconData iconData, required IconData buttonIcon, required String buttonTooltip, required VoidCallback onButtonPressed, }) { return Padding( padding: const EdgeInsets.only(bottom: AppSizes.spacingMedium), child: Row( crossAxisAlignment: CrossAxisAlignment.start, children: [ SizedBox( width: 20, height: 20, child: Icon( iconData, size: 20, color: theme.colorScheme.primary, ), ), const SizedBox(width: 8), Expanded( child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( title, style: theme.textTheme.bodySmall?.copyWith( color: theme.colorScheme.onSurfaceVariant, ), overflow: TextOverflow.ellipsis, ), Row( children: [ Expanded( child: Text( content, style: theme.textTheme.bodyMedium, overflow: TextOverflow.ellipsis, maxLines: 2, ), ), IconButton( icon: Icon( buttonIcon, size: 18, color: theme.colorScheme.primary, ), onPressed: onButtonPressed, tooltip: buttonTooltip, constraints: const BoxConstraints( minWidth: 32, minHeight: 32, ), padding: EdgeInsets.zero, visualDensity: VisualDensity.compact, ), ], ), ], ), ), ], ), ); } String _formatDateTime(DateTime dateTime) { return DateFormat('yyyy-MM-dd HH:mm').format(dateTime); } String _getFormatTooltip(dynamic format) { final l10n = AppLocalizations.of(context); try { String formatTypeName; switch (format.format) { case CharacterImageType.original: formatTypeName = l10n.original; break; case CharacterImageType.binary: formatTypeName = l10n.characterDetailFormatBinary; break; case CharacterImageType.thumbnail: formatTypeName = l10n.characterDetailFormatThumbnail; break; case CharacterImageType.squareBinary: formatTypeName = l10n.characterDetailFormatSquareBinary; break; case CharacterImageType.squareTransparent: formatTypeName = l10n.characterDetailFormatSquareTransparent; break; case CharacterImageType.transparent: formatTypeName = l10n.characterDetailFormatTransparent; break; case CharacterImageType.outline: formatTypeName = l10n.characterDetailFormatOutline; break; case CharacterImageType.squareOutline: formatTypeName = l10n.characterDetailFormatSquareOutline; break; default: formatTypeName = format.format.toString(); } String extension; switch (format.format) { case CharacterImageType.outline: case CharacterImageType.squareOutline: extension = 'SVG'; break; default: extension = 'PNG'; break; } return '${format.name}\n${l10n.formatType}: $formatTypeName\n${l10n.fileExtension}: $extension\n${l10n.characterDetailFormatDescription}: ${format.description}'; } catch (e) { return '图片格式信息"
建议新键: characterdetailloaderrorErrorStyleTextstyleColorThemeColorschemeErrorOverrideVoidDisposeDisposeSuperDisposeFutureVoidCharacterviewCharacterStringTagAsyncTryFinalCharacterserviceRefReadCharacterserviceproviderAwaitCharacterserviceAddtagCharacterIdTagRefInvalidateCharacterdetailproviderWidgetCharacteridCatchEIfMountedFinalApplocalizationsOfContextScaffoldmessengerOfContextShowsnackbarSnackbarContentTextTagadderrorETostringBackgroundcolorThemeOfContextColorschemeErrorWidgetWidgetrefRefThemedataThemeIntSelectedindexApplocalizationsFinalDetailstateRefWatchCharacterdetailproviderWidgetCharacteridReturnDetailstateMaybewhenDataStateIfStateNullReturnConstSizedboxShrinkFinalFormatsStateAvailableformatsIfFormatsIsemptyReturnConstSizedboxShrinkReturnSizedboxHeightChildListviewBuilderScrolldirectionAxisHorizontalItemcountFormatsLengthItembuilderContextIndexFinalFormatFormatsIndexFinalIsselectedIndexSelectedindexReturnFuturebuilderStringFutureFormatResolvepathWidgetCharacteridBuilderContextSnapshotReturnGesturedetectorOntapSetstateSelectedformatIndexChildContainerWidthHeightMarginConstEdgeinsetsOnlyRightDecorationBoxdecorationBorderBorderAllColorIsselectedThemeColorschemePrimaryThemeColorschemeOutlineWidthIsselectedBorderradiusBorderradiusCircularChildSnapshotHasdataSnapshotDataFormatConstCenterChildSizedboxWidthHeightChildCircularprogressindicatorStrokewidthOrelseConstSizedboxShrinkWidgetStringImagepathDynamicFormatFinalExtensionImagepathTolowercaseSplitLastFinalIssvgExtensionSvgFinalApplocalizationsOfContextReturnFuturebuilderImagedimensionsFutureFutureValueConstImagedimensionsWidthHeightIssvgFalseBuilderContextSnapshotStringTooltiptextFormatTooltiptextNDimensionsPxReturnTooltipMessageTooltiptextWaitdurationConstDurationMillisecondsShowdurationConstDurationSecondsTextstyleConstTextstyleFontsizeColorColorsWhiteDecorationBoxdecorationColorColorsBorderradiusBorderradiusCircularChildStackFitStackfitExpandChildrenIfIssvgSvgpictureFileFileImagepathFitBoxfitContainPlaceholderbuilderContextConstIconIconsImageElseImageFileFileImagepathFitBoxfitContainErrorbuilderContextErrorStacktraceReturnConstIconIconsWidgetWidgetrefRefThemedataThemeCharacterviewCharacterApplocalizationsFinalStartsectionwidgetsTextCharacterCharacterStyleThemeTextthemeHeadlinemediumCopywithFontweightFontweightBoldOverflowTextoverflowEllipsisFinalEndsectionwidgetsWidgetIfWidgetOntogglefavoriteNullEndsectionwidgetsAddIconbuttonIconIconCharacterIsfavoriteIconsFavoriteIconsColorCharacterIsfavoriteThemeColorschemeErrorThemeColorschemeOnsurfaceOnpressedAsyncWidgetOntogglefavoriteCallTooltipCharacterIsfavoriteRemovefavoriteAddfavoriteConstraintsConstBoxconstraintsMinwidthMinheightPaddingEdgeinsetsZeroVisualdensityVisualdensityCompactIfWidgetOneditNullEndsectionwidgetsAddIconbuttonIconConstIconIconsEditOnpressedFinalCharacterviewRefReadCharacterdetailproviderWidgetCharacteridValueCharacterIfCharacterviewNullNavigatorOfContextPushnamedApproutesCharactercollectionArgumentsWorkidCharacterviewWorkidPageidCharacterviewPageidCharacteridCharacterviewIdElseWidgetOneditCallTooltipEditConstraintsConstBoxconstraintsMinwidthMinheightPaddingEdgeinsetsZeroVisualdensityVisualdensityCompactIfWidgetOncloseNullEndsectionwidgetsAddIconbuttonIconConstIconIconsCloseOnpressedWidgetOncloseTooltipCancelConstraintsConstBoxconstraintsMinwidthMinheightPaddingEdgeinsetsZeroVisualdensityVisualdensityCompactReturnAdaptiverowStartsectionStartsectionwidgetsEndsectionEndsectionwidgetsSectionspacingItemspacingWidgetThemedataThemeCharacterviewCharacterStringImagepathApplocalizationsReturnContainerAlignmentAlignmentCenterDecorationBoxdecorationColorThemeColorschemeSurfacecontainerhighestWithalphaBorderradiusBorderradiusCircularChildImagepathNullImagepathIsnotemptyCliprrectBorderradiusBorderradiusCircularChildZoomableimageviewImagepathImagepathEnablemousewheelTrueMinscaleMaxscaleShowcontrolsTrueErrorbuilderContextErrorStacktraceReturnColumnMainaxisalignmentMainaxisalignmentCenterChildrenIconIconsSizeColorThemeColorschemeErrorConstSizedboxHeightTextImageloaderrorErrorTostringStyleTextstyleColorThemeColorschemeErrorLoadingbuilderContextReturnCenterChildCircularprogressindicatorColorThemeColorschemePrimaryStrokewidthColumnMainaxisalignmentMainaxisalignmentCenterChildrenIconIconsSizeColorThemeColorschemeOnsurfacevariantConstSizedboxHeightTextNocharactersStyleTextstyleColorThemeColorschemeOnsurfacevariantWidgetThemedataThemeRequiredStringTitleRequiredStringContentRequiredIcondataIcondataReturnPaddingPaddingConstEdgeinsetsOnlyBottomAppsizesSpacingmediumChildRowCrossaxisalignmentCrossaxisalignmentStartChildrenSizedboxWidthHeightChildIconIcondataSizeColorThemeColorschemePrimaryConstSizedboxWidthExpandedChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenTextTitleStyleThemeTextthemeBodysmallCopywithColorThemeColorschemeOnsurfacevariantOverflowTextoverflowEllipsisTextContentStyleThemeTextthemeBodymediumOverflowTextoverflowEllipsisMaxlinesWidgetThemedataThemeRequiredStringTitleRequiredStringContentRequiredIcondataIcondataRequiredIcondataButtoniconRequiredStringButtontooltipRequiredVoidcallbackOnbuttonpressedReturnPaddingPaddingConstEdgeinsetsOnlyBottomAppsizesSpacingmediumChildRowCrossaxisalignmentCrossaxisalignmentStartChildrenSizedboxWidthHeightChildIconIcondataSizeColorThemeColorschemePrimaryConstSizedboxWidthExpandedChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenTextTitleStyleThemeTextthemeBodysmallCopywithColorThemeColorschemeOnsurfacevariantOverflowTextoverflowEllipsisRowChildrenExpandedChildTextContentStyleThemeTextthemeBodymediumOverflowTextoverflowEllipsisMaxlinesIconbuttonIconIconButtoniconSizeColorThemeColorschemePrimaryOnpressedOnbuttonpressedTooltipButtontooltipConstraintsConstBoxconstraintsMinwidthMinheightPaddingEdgeinsetsZeroVisualdensityVisualdensityCompactStringDatetimeDatetimeReturnDateformatYyyyMmDdHhMmFormatDatetimeStringDynamicFormatFinalApplocalizationsOfContextTryStringFormattypenameSwitchFormatFormatCaseCharacterimagetypeOriginalFormattypenameOriginalBreakCaseCharacterimagetypeBinaryFormattypenameCharacterdetailformatbinaryBreakCaseCharacterimagetypeThumbnailFormattypenameCharacterdetailformatthumbnailBreakCaseCharacterimagetypeSquarebinaryFormattypenameCharacterdetailformatsquarebinaryBreakCaseCharacterimagetypeSquaretransparentFormattypenameCharacterdetailformatsquaretransparentBreakCaseCharacterimagetypeTransparentFormattypenameCharacterdetailformattransparentBreakCaseCharacterimagetypeOutlineFormattypenameCharacterdetailformatoutlineBreakCaseCharacterimagetypeSquareoutlineFormattypenameCharacterdetailformatsquareoutlineBreakDefaultFormattypenameFormatFormatTostringStringExtensionSwitchFormatFormatCaseCharacterimagetypeOutlineCaseCharacterimagetypeSquareoutlineExtensionSvgBreakDefaultExtensionPngBreakReturnFormatNameNFormattypeFormattypenameNFileextensionExtensionNCharacterdetailformatdescriptionFormatDescriptionCatchEReturn
代码行: onPressed: () => _showAddTagDialog(character, l10n),
----------------------------------------
文件: presentation\pages\library\m3_library_management_page.dart, 行: 135
硬编码文本: "${l10n.selectedCount(ref.read(libraryManagementProvider).selectedItems.length)} 已复制到剪贴板"
建议新键: selectedcountRefReadLibrarymanagementproviderSelecteditemsLength
代码行: /// 处理复制选中项目
----------------------------------------
文件: presentation\pages\library\m3_library_management_page.dart, 行: 152
硬编码文本: "${l10n.selectedCount(ref.read(libraryManagementProvider).selectedItems.length)} 已剪切到剪贴板"
建议新键: selectedcountRefReadLibrarymanagementproviderSelecteditemsLength1
代码行: ),
----------------------------------------
文件: presentation\pages\library\components\library_category_panel.dart, 行: 150
硬编码文本: "($count)', style: theme.textTheme.bodySmall, ), onTap: () => notifier.selectCategory(null), ); } Widget _buildCategoryItem( BuildContext context, LibraryCategory category, String? selectedCategoryId, LibraryManagementNotifier notifier, Map<String, int> itemCounts, int indentLevel, ) { final theme = Theme.of(context); final l10n = AppLocalizations.of(context); final hasChildren = category.children.isNotEmpty; final count = itemCounts[category.id] ?? 0; if (!_expandedCategories.containsKey(category.id)) { _expandedCategories[category.id] = false; } final isExpanded = _expandedCategories[category.id] ?? false; return Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ DragTarget<LibraryItemDragData>( onAcceptWithDetails: (data) { final state = ref.read(libraryManagementProvider); if (state.isBatchMode && state.selectedItems.isNotEmpty) { for (final itemId in state.selectedItems) { notifier.addItemToCategory(itemId, category.id); } ScaffoldMessenger.of(context).showSnackBar( SnackBar( content: Text( '已将${state.selectedItems.length}个项目添加到"
建议新键: countStyleThemeTextthemeBodysmallOntapNotifierSelectcategoryNullWidgetBuildcontextContextLibrarycategoryCategoryStringSelectedcategoryidLibrarymanagementnotifierNotifierMapStringIntItemcountsIntIndentlevelFinalThemeThemeOfContextFinalApplocalizationsOfContextFinalHaschildrenCategoryChildrenIsnotemptyFinalCountItemcountsCategoryIdIfContainskeyCategoryIdCategoryIdFalseFinalIsexpandedCategoryIdFalseReturnColumnCrossaxisalignmentCrossaxisalignmentStartChildrenDragtargetLibraryitemdragdataOnacceptwithdetailsDataFinalStateRefReadLibrarymanagementproviderIfStateIsbatchmodeStateSelecteditemsIsnotemptyForFinalItemidInStateSelecteditemsNotifierAdditemtocategoryItemidCategoryIdScaffoldmessengerOfContextShowsnackbarSnackbarContentText已将StateSelecteditemsLength
代码行: return widget.useFixedHeight
----------------------------------------
文件: presentation\pages\main\m3_main_window.dart, 行: 367
硬编码文本: "Page not implemented')), ); } }, ); } void _cleanupUnusedSections() { final currentIndex = ref.read(globalNavigationProvider).currentSectionIndex; final lastIndex = _lastSelectedIndex; WidgetsBinding.instance.addPostFrameCallback((_) { if (!mounted) return; final sectionsToRemove = <int>{}; for (final index in _initializedSections) { if (index == currentIndex || index == lastIndex) continue; if (_shouldCleanupSection(index)) { sectionsToRemove.add(index); } } if (mounted && sectionsToRemove.isNotEmpty) { setState(() { _initializedSections.removeAll(sectionsToRemove); }); AppLogger.info( '清理未使用的功能区"
建议新键: pageNotImplementedVoidFinalCurrentindexRefReadGlobalnavigationproviderCurrentsectionindexFinalLastindexWidgetsbindingInstanceAddpostframecallbackIfMountedReturnFinalSectionstoremoveIntForFinalIndexInIfIndexCurrentindexIndexLastindexContinueIfIndexSectionstoremoveAddIndexIfMountedSectionstoremoveIsnotemptySetstateRemoveallSectionstoremoveApploggerInfo
代码行: }
----------------------------------------
文件: presentation\pages\practices\m3_practice_edit_page.dart, 行: 817
硬编码文本: "Unsupported element type')); } } else { panel = const Center(child: Text('Selected element not found')); } } else { panel = M3PracticePropertyPanel.forMultiSelection( controller: _controller, selectedIds: _controller.state.selectedElementIds, onElementPropertiesChanged: (properties) { for (final id in _controller.state.selectedElementIds) { _controller.updateElementProperties(id, properties); } }, ); } return PersistentResizablePanel( panelId: 'practice_edit_right_panel_properties', initialWidth: 400, minWidth: 300, maxWidth: 800, isLeftPanel: false, child: panel, ); }, ); } Future<bool> _checkClipboardContent() async { if (_clipboardElement != null) { final type = _clipboardElement?['type']; AppLogger.debug( '检查剪贴板: 内部剪贴板有内容"
建议新键: unsupportedElementTypeElsePanelConstCenterChildTextSelectedElementNotFoundElsePanelFormultiselectionControllerSelectedidsStateSelectedelementidsOnelementpropertieschangedPropertiesForFinalIdInStateSelectedelementidsUpdateelementpropertiesIdPropertiesReturnPersistentresizablepanelPanelidInitialwidthMinwidthMaxwidthIsleftpanelFalseChildPanelFutureBoolAsyncIfNullFinalTypeTypeApploggerDebug
代码行: maxWidth: 800,
----------------------------------------
文件: presentation\pages\practices\m3_practice_edit_page.dart, 行: 2241
硬编码文本: "${l10n.saveFailure}: ${e.toString()}')), ); } } } Future<bool> _savePractice() async { final l10n = AppLocalizations.of(context); if (_controller.state.pages.isEmpty) { if (!mounted) return false; ScaffoldMessenger.of(context).showSnackBar( SnackBar(content: Text(l10n.cannotSaveNoPages)), ); return false; } final scaffoldMessenger = ScaffoldMessenger.of(context); if (!_controller.isSaved) { await _saveAsNewPractice(); return true; } try { AppLogger.info( '开始保存字帖"
建议新键: savefailureETostringFutureBoolAsyncFinalApplocalizationsOfContextIfStatePagesIsemptyIfMountedReturnFalseScaffoldmessengerOfContextShowsnackbarSnackbarContentTextCannotsavenopagesReturnFalseFinalScaffoldmessengerScaffoldmessengerOfContextIfIssavedAwaitReturnTrueTryApploggerInfo
代码行: // If user cancels, don't leave
----------------------------------------
文件: presentation\pages\practices\m3_practice_edit_page.dart, 行: 2351
硬编码文本: "${l10n.saveFailure}: ${e.toString()}')), ); } return false; } } void _selectAllElements() { if (_controller.state.currentPageIndex < 0 || _controller.state.currentPageIndex >= _controller.state.pages.length) { return; } final elements = _controller.state.currentPageElements; if (elements.isEmpty) return; final ids = <String>[]; for (final element in elements) { final id = element['id'] as String; final layerId = element['layerId'] as String?; if (layerId == null || !_controller.state.isLayerLocked(layerId)) { ids.add(id); } } _controller.selectElements(ids); } void _sendElementToBack() { PracticeEditUtils.sendElementToBack(_controller); if (_canvasKey.currentState == null || !_canvasKey.currentState!.context.mounted) { setState(() {}); } } void _setupCanvasReference() { AppLogger.debug( '画布引用将由画布组件自身设置"
建议新键: savefailureETostringReturnFalseVoidIfStateCurrentpageindexStateCurrentpageindexStatePagesLengthReturnFinalElementsStateCurrentpageelementsIfElementsIsemptyReturnFinalIdsStringForFinalElementInElementsFinalIdElementIdAsStringFinalLayeridElementLayeridAsStringIfLayeridNullStateIslayerlockedLayeridIdsAddIdSelectelementsIdsVoidPracticeeditutilsSendelementtobackIfCurrentstateNullCurrentstateContextMountedSetstateVoidApploggerDebug
代码行: AppLogger.debug(
----------------------------------------
文件: presentation\pages\practices\widgets\content_render_layer.dart, 行: 802
硬编码文本: "Unknown element type: $type')), ); } final renderTime = DateTime.now().difference(renderStart).inMilliseconds; if (renderTime > 8) { EditPageLogger.performanceWarning('渲染性能警告"
建议新键: unknownElementTypeTypeFinalRendertimeDatetimeNowDifferenceRenderstartInmillisecondsIfRendertimeEditpageloggerPerformancewarning
代码行: for (int i = 0; i < oldLayers.length; i++) {
----------------------------------------
文件: presentation\pages\practices\widgets\free_control_points.dart, 行: 586
硬编码文本: "$index', style: const TextStyle( color: Colors.white, fontSize: 8, fontWeight: FontWeight.bold, ), ), ), ), ), ), ), ), ); } Widget _buildTransparentDragLayer() { const padding = 5.0; final dragWidth = _currentWidth + padding * 2; final dragHeight = _currentHeight + padding * 2; final centerX = _currentX + _currentWidth / 2; final centerY = _currentY + _currentHeight / 2; final dragLeft = centerX - dragWidth / 2; final dragTop = centerY - dragHeight / 2; return Positioned( left: dragLeft, top: dragTop, width: dragWidth, height: dragHeight, child: MouseRegion( cursor: SystemMouseCursors.move, child: GestureDetector( behavior: HitTestBehavior.translucent, onPanStart: (details) { EditPageLogger.canvasDebug('控制点主导：开始平移操作"
建议新键: indexStyleConstTextstyleColorColorsWhiteFontsizeFontweightFontweightBoldWidgetConstPaddingFinalDragwidthPaddingFinalDragheightPaddingFinalCenterxFinalCenteryFinalDragleftCenterxDragwidthFinalDragtopCenteryDragheightReturnPositionedLeftDragleftTopDragtopWidthDragwidthHeightDragheightChildMouseregionCursorSystemmousecursorsMoveChildGesturedetectorBehaviorHittestbehaviorTranslucentOnpanstartDetailsEditpageloggerCanvasdebug
代码行: _isResizeOperation(index) ? 'resize' : 'translate',
----------------------------------------
文件: presentation\pages\practices\widgets\m3_practice_edit_canvas.dart, 行: 596
硬编码文本: "No pages available', style: Theme.of(context).textTheme.bodyLarge, ), ); } final currentPage = controller.state.currentPage; if (currentPage == null) { return Center( child: Text( 'Current page does not exist', style: Theme.of(context).textTheme.bodyLarge, ), ); } final elements = controller.state.currentPageElements; return perf.PerformanceOverlay( showOverlay: DragConfig.showPerformanceOverlay, child: _buildPageContent(currentPage, elements, colorScheme), ); } Widget _buildLayerWidget(RenderLayerType layerType, LayerConfig config) { return buildLayerWidget(layerType, config); } Widget _buildPageContent( Map<String, dynamic> page, List<Map<String, dynamic>> elements, ColorScheme colorScheme, ) { _contentRenderController.initializeElements(elements); final pageSize = ElementUtils.calculatePixelSize(page); final pageKey = '${page['width']}_${page['height']}_${page['orientation']}_${page['dpi']}'; if (_lastPageKey != null && _lastPageKey != pageKey) { WidgetsBinding.instance.addPostFrameCallback((_) { if (mounted && !_isDisposed) { _fitPageToScreen(); } }); } _lastPageKey = pageKey; return Stack( children: [ Container( color: colorScheme.inverseSurface .withAlpha(26), child: RepaintBoundary( key: const ValueKey('interactive_viewer_repaint_boundary'), child: InteractiveViewer( boundaryMargin: const EdgeInsets.all(double.infinity), panEnabled: !(_isDragging || _dragStateManager.isDragging || _isReadyForDrag), scaleEnabled: true, minScale: 0.1, maxScale: 15.0, scaleFactor: 600.0, transformationController: widget.transformationController, onInteractionStart: (ScaleStartDetails details) {}, onInteractionUpdate: (ScaleUpdateDetails details) { }, onInteractionEnd: (ScaleEndDetails details) { final scale = widget.transformationController.value.getMaxScaleOnAxis(); widget.controller.zoomTo(scale); }, constrained: false, child: DragTarget<String>( onWillAcceptWithDetails: (data) { return ['text', 'image', 'collection'].contains(data.data); }, onAcceptWithDetails: (data) { _handleElementDrop(data.data, data.offset); }, builder: (context, candidateData, rejectedData) { return GestureDetector( behavior: HitTestBehavior.deferToChild, onTapDown: (details) { if (shouldHandleAnySpecialGesture(elements)) { _isReadyForDrag = true; } else { _isReadyForDrag = false; } }, onTapUp: (details) { _isReadyForDrag = false; _gestureHandler.handleTapUp( details, elements.cast< Map<String, dynamic>>()); _debugCanvasState('元素选择后"
建议新键: noPagesAvailableStyleThemeOfContextTextthemeBodylargeFinalCurrentpageControllerStateCurrentpageIfCurrentpageNullReturnCenterChildTextCurrentPageDoesNotExistStyleThemeOfContextTextthemeBodylargeFinalElementsControllerStateCurrentpageelementsReturnPerfPerformanceoverlayShowoverlayDragconfigShowperformanceoverlayChildCurrentpageElementsColorschemeWidgetRenderlayertypeLayertypeLayerconfigConfigReturnBuildlayerwidgetLayertypeConfigWidgetMapStringDynamicPageListMapStringDynamicElementsColorschemeColorschemeInitializeelementsElementsFinalPagesizeElementutilsCalculatepixelsizePageFinalPagekeyPageWidthPageHeightPageOrientationPageDpiIfNullPagekeyWidgetsbindingInstanceAddpostframecallbackIfMountedPagekeyReturnStackChildrenContainerColorColorschemeInversesurfaceWithalphaChildRepaintboundaryKeyConstValuekeyChildInteractiveviewerBoundarymarginConstEdgeinsetsAllDoubleInfinityPanenabledIsdraggingScaleenabledTrueMinscaleMaxscaleScalefactorTransformationcontrollerWidgetTransformationcontrollerOninteractionstartScalestartdetailsDetailsOninteractionupdateScaleupdatedetailsDetailsOninteractionendScaleenddetailsDetailsFinalScaleWidgetTransformationcontrollerValueGetmaxscaleonaxisWidgetControllerZoomtoScaleConstrainedFalseChildDragtargetStringOnwillacceptwithdetailsDataReturnTextImageCollectionContainsDataDataOnacceptwithdetailsDataDataDataDataOffsetBuilderContextCandidatedataRejecteddataReturnGesturedetectorBehaviorHittestbehaviorDefertochildOntapdownDetailsIfShouldhandleanyspecialgestureElementsTrueElseFalseOntapupDetailsFalseHandletapupDetailsElementsCastMapStringDynamic
代码行: 'optimization': 'avoid_trigger_setstate',
----------------------------------------
文件: presentation\pages\practices\widgets\m3_practice_edit_canvas.dart, 行: 926
硬编码文本: "当前工具: ${widget.controller.state.currentTool}"
建议新键: widgetControllerStateCurrenttool
代码行: // 处理手势取消
----------------------------------------
文件: presentation\pages\practices\widgets\m3_practice_edit_canvas.dart, 行: 951
硬编码文本: "选择模式"
建议新键: text6
代码行: .none, // Allow control points to extend beyond page boundaries
----------------------------------------
文件: presentation\pages\practices\widgets\m3_practice_edit_canvas.dart, 行: 1018
硬编码文本: "${(widget.transformationController.value.getMaxScaleOnAxis() * 100).toInt()}%', overflow: TextOverflow.ellipsis, style: TextStyle( color: colorScheme.onSurfaceVariant, fontSize: 12, fontWeight: FontWeight.bold, ), ), ), ], ), ), ], ), ), ), ], ); } void _debugCanvasState(String context) { final panEnabled = !(_isDragging || _dragStateManager.isDragging || _isReadyForDrag); EditPageLogger.canvasDebug( '画布状态检查"
建议新键: widgetTransformationcontrollerValueGetmaxscaleonaxisTointOverflowTextoverflowEllipsisStyleTextstyleColorColorschemeOnsurfacevariantFontsizeFontweightFontweightBoldVoidStringContextFinalPanenabledIsdraggingEditpageloggerCanvasdebug
代码行: // Selection mode indicator
----------------------------------------
文件: presentation\pages\settings\components\backup_settings.dart, 行: 87
硬编码文本: "1'), ), DropdownMenuItem( value: 3, child: Text('3'), ), DropdownMenuItem( value: 5, child: Text('5'), ), DropdownMenuItem( value: 10, child: Text('10'), ), ], onChanged: (value) { if (value != null) { ref .read(backupSettingsProvider.notifier) .setKeepBackupCount(value); } }, ), ), if (backupSettings.lastBackupTime != null) ListTile( title: Text(l10n.lastBackupTime), subtitle: Text( DateFormat.yMd().add_Hm().format(backupSettings.lastBackupTime!), ), ), const SizedBox(height: AppSizes.p16), Wrap( spacing: AppSizes.p8, runSpacing: AppSizes.p8, alignment: WrapAlignment.spaceEvenly, children: [ ElevatedButton.icon( icon: const Icon(Icons.backup), label: Text(l10n.createBackup), onPressed: () async { await _showCreateBackupDialog(context, ref); }, ), ElevatedButton.icon( icon: const Icon(Icons.restore), label: Text(l10n.restoreBackup), onPressed: () async { await _showRestoreBackupDialog(context, ref); }, ), ElevatedButton.icon( icon: const Icon(Icons.upload_file), label: Text(l10n.importBackup), onPressed: () async { await _importBackup(context, ref); }, ), ElevatedButton.icon( icon: const Icon(Icons.download), label: Text(l10n.exportBackup), onPressed: () async { await _showExportBackupDialog(context, ref); }, ), ], ), const SizedBox(height: AppSizes.p16), Text( l10n.backupList, style: Theme.of(context).textTheme.titleMedium, ), const SizedBox(height: AppSizes.p8), backupList.when( data: (backups) => _buildBackupList(context, ref, backups), loading: () => const Center(child: CircularProgressIndicator()), error: (error, stack) => Text('${l10n.loadFailed}: $error'), ), ], ); } Widget _buildBackupList( BuildContext context, WidgetRef ref, List<BackupInfo> backups) { final l10n = AppLocalizations.of(context); if (backups.isEmpty) { return Padding( padding: const EdgeInsets.all(AppSizes.p16), child: Center( child: Text(l10n.noBackups), ), ); } return ListView.builder( shrinkWrap: true, physics: const NeverScrollableScrollPhysics(), itemCount: backups.length, itemBuilder: (context, index) { final backup = backups[index]; return Card( margin: const EdgeInsets.symmetric(vertical: 4), child: ListTile( title: Text(backup.fileName), subtitle: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ if (backup.description != null && backup.description != backup.fileName) Text( backup.description!, style: const TextStyle(fontWeight: FontWeight.bold), ), Text( DateFormat.yMd().add_Hm().format(backup.creationTime), ), Text( FileSizeFormatter.format(backup.size), ), ], ), trailing: Row( mainAxisSize: MainAxisSize.min, children: [ IconButton( icon: const Icon(Icons.restore), tooltip: l10n.restore, onPressed: () async { final result = await _showRestoreConfirmDialog(context); if (result != null && result.confirmed) { if (context.mounted) { showDialog( context: context, barrierDismissible: false, builder: (context) => AlertDialog( content: Column( mainAxisSize: MainAxisSize.min, children: [ const CircularProgressIndicator(), const SizedBox(height: AppSizes.p16), Text(l10n.restoringBackup), ], ), ), ); } final autoRestart = result.autoRestart; final currentContext = context; AppLogger.info('用户选择的自动重启选项"
建议新键: dropdownmenuitemValueChildTextDropdownmenuitemValueChildTextDropdownmenuitemValueChildTextOnchangedValueIfValueNullRefReadBackupsettingsproviderNotifierSetkeepbackupcountValueIfBackupsettingsLastbackuptimeNullListtileTitleTextLastbackuptimeSubtitleTextDateformatYmdFormatBackupsettingsLastbackuptimeConstSizedboxHeightAppsizesWrapSpacingAppsizesRunspacingAppsizesAlignmentWrapalignmentSpaceevenlyChildrenElevatedbuttonIconIconConstIconIconsBackupLabelTextCreatebackupOnpressedAsyncAwaitContextRefElevatedbuttonIconIconConstIconIconsRestoreLabelTextRestorebackupOnpressedAsyncAwaitContextRefElevatedbuttonIconIconConstIconIconsLabelTextImportbackupOnpressedAsyncAwaitContextRefElevatedbuttonIconIconConstIconIconsDownloadLabelTextExportbackupOnpressedAsyncAwaitContextRefConstSizedboxHeightAppsizesTextBackuplistStyleThemeOfContextTextthemeTitlemediumConstSizedboxHeightAppsizesBackuplistWhenDataBackupsContextRefBackupsLoadingConstCenterChildCircularprogressindicatorErrorErrorStackTextLoadfailedErrorWidgetBuildcontextContextWidgetrefRefListBackupinfoBackupsFinalApplocalizationsOfContextIfBackupsIsemptyReturnPaddingPaddingConstEdgeinsetsAllAppsizesChildCenterChildTextNobackupsReturnListviewBuilderShrinkwrapTruePhysicsConstNeverscrollablescrollphysicsItemcountBackupsLengthItembuilderContextIndexFinalBackupBackupsIndexReturnCardMarginConstEdgeinsetsSymmetricVerticalChildListtileTitleTextBackupFilenameSubtitleColumnCrossaxisalignmentCrossaxisalignmentStartChildrenIfBackupDescriptionNullBackupDescriptionBackupFilenameTextBackupDescriptionStyleConstTextstyleFontweightFontweightBoldTextDateformatYmdFormatBackupCreationtimeTextFilesizeformatterFormatBackupSizeTrailingRowMainaxissizeMainaxissizeMinChildrenIconbuttonIconConstIconIconsRestoreTooltipRestoreOnpressedAsyncFinalResultAwaitContextIfResultNullResultConfirmedIfContextMountedShowdialogContextContextBarrierdismissibleFalseBuilderContextAlertdialogContentColumnMainaxissizeMainaxissizeMinChildrenConstCircularprogressindicatorConstSizedboxHeightAppsizesTextRestoringbackupFinalAutorestartResultAutorestartFinalCurrentcontextContextApploggerInfo
代码行: DropdownMenuItem(
----------------------------------------
文件: presentation\pages\works\m3_work_browse_page.dart, 行: 333
硬编码文本: "Failed to delete: ${e.toString()}'))); } } } Future<void> _handleTagEdited(BuildContext context, String workId) async { final l10n = AppLocalizations.of(context); try { final work = ref.read(workBrowseProvider).works.firstWhere((w) => w.id == workId); final allTags = ref .read(workBrowseProvider) .works .expand((work) => work.tags) .toSet() .toList(); final result = await showDialog<List<String>>( context: context, builder: (context) => M3WorkTagEditDialog( tags: work.tags, suggestedTags: allTags, onSaved: (newTags) { Navigator.of(context).pop(newTags); }, ), barrierDismissible: false, ); if (result != null) { AppLogger.debug('更新作品标签"
建议新键: failedToDeleteETostringFutureVoidBuildcontextContextStringWorkidAsyncFinalApplocalizationsOfContextTryFinalWorkRefReadWorkbrowseproviderWorksFirstwhereWWIdWorkidFinalAlltagsRefReadWorkbrowseproviderWorksExpandWorkWorkTagsTosetTolistFinalResultAwaitShowdialogListStringContextContextBuilderContextTagsWorkTagsSuggestedtagsAlltagsOnsavedNewtagsNavigatorOfContextPopNewtagsBarrierdismissibleFalseIfResultNullApploggerDebug
代码行: .read(workBrowseProvider.notifier)
----------------------------------------
文件: presentation\pages\works\components\thumbnail_strip.dart, 行: 278
硬编码文本: "${index + 1}', style: const TextStyle( color: Colors.white, fontSize: 12, ), ), ), ), if (isSelected) Positioned( top: 4, right: 4, child: Container( padding: const EdgeInsets.all(2), decoration: BoxDecoration( color: theme.colorScheme.primary, shape: BoxShape.circle, ), child: const Icon( Icons.check, size: 12, color: Colors.white, ), ), ), if (isSelected && widget.onRemove != null) Positioned( bottom: 4, right: 4, child: IconButton.filled( onPressed: () { HapticFeedback.lightImpact(); widget.onRemove!(index); }, icon: const Icon(Icons.close, size: 16), style: IconButton.styleFrom( backgroundColor: theme.colorScheme.error, foregroundColor: theme.colorScheme.onError, padding: const EdgeInsets.all(4), minimumSize: const Size(24, 24), tapTargetSize: MaterialTapTargetSize.shrinkWrap, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(AppSizes.xxs), ), ), ), ), if (widget.isEditable && !_isDragging) Positioned( right: 4, bottom: isSelected && widget.onRemove != null ? 32 : 4, child: Container( padding: const EdgeInsets.all(2), decoration: BoxDecoration( color: theme.colorScheme.surfaceContainerHighest .withValues(alpha: 0.8), borderRadius: BorderRadius.circular(2), ), child: Icon( Icons.drag_indicator, size: 16, color: theme.colorScheme.onSurfaceVariant, ), ), ), if (!fileExists) Center( child: Tooltip( message: errorMessage, child: Column( mainAxisSize: MainAxisSize.min, children: [ Icon( Icons.circle_rounded, size: 24, color: theme.colorScheme.surface, ), if (attemptCount > 0 && attemptCount < _maxRetryAttempts) const SizedBox( width: 16, height: 16, child: CircularProgressIndicator(strokeWidth: 2), ), ], ), ), ), ], ), ), ), ); } Future<void> _checkImageFiles() async { _retryTimer?.cancel(); bool hasFailures = false; for (final image in widget.images) { try { final path = widget.pathResolver(image); try { final file = File(path); if (await file.exists()) { final randomAccessFile = await file.open(mode: FileMode.read); try { await randomAccessFile.read(4); _fileStatus[path] = _FileStatus( exists: true, lastModified: await file.lastModified(), ); } finally { await randomAccessFile.close(); } } else { final status = _fileStatus[path]; final attempts = status?.checkAttempts ?? 0; _fileStatus[path] = _FileStatus(exists: false) ..checkAttempts = attempts + 1; if (attempts < _maxRetryAttempts) { hasFailures = true; } } } catch (e) { AppLogger.debug( 'File exists but not accessible yet', tag: 'ThumbnailStrip', data: {'path': path, 'error': e.toString()}, ); final status = _fileStatus[path]; final attempts = status?.checkAttempts ?? 0; _fileStatus[path] = _FileStatus(exists: false) ..checkAttempts = attempts + 1; if (attempts < _maxRetryAttempts) { hasFailures = true; } } } catch (e) { _fileStatus[widget.pathResolver(image)] = _FileStatus(exists: false); hasFailures = true; } } if (mounted) setState(() {}); if (hasFailures) { _retryTimer = Timer(const Duration(milliseconds: 500), () { if (mounted) _checkImageFiles(); }); } } void _handlePointerSignal(PointerSignalEvent event) { AppLogger.debug('收到指针信号事件: ${event.runtimeType}"
建议新键: indexStyleConstTextstyleColorColorsWhiteFontsizeIfIsselectedPositionedTopRightChildContainerPaddingConstEdgeinsetsAllDecorationBoxdecorationColorThemeColorschemePrimaryShapeBoxshapeCircleChildConstIconIconsCheckSizeColorColorsWhiteIfIsselectedWidgetOnremoveNullPositionedBottomRightChildIconbuttonFilledOnpressedHapticfeedbackLightimpactWidgetOnremoveIndexIconConstIconIconsCloseSizeStyleIconbuttonStylefromBackgroundcolorThemeColorschemeErrorForegroundcolorThemeColorschemeOnerrorPaddingConstEdgeinsetsAllMinimumsizeConstSizeTaptargetsizeMaterialtaptargetsizeShrinkwrapShapeRoundedrectangleborderBorderradiusBorderradiusCircularAppsizesXxsIfWidgetIseditablePositionedRightBottomIsselectedWidgetOnremoveNullChildContainerPaddingConstEdgeinsetsAllDecorationBoxdecorationColorThemeColorschemeSurfacecontainerhighestWithvaluesAlphaBorderradiusBorderradiusCircularChildIconIconsSizeColorThemeColorschemeOnsurfacevariantIfFileexistsCenterChildTooltipMessageErrormessageChildColumnMainaxissizeMainaxissizeMinChildrenIconIconsSizeColorThemeColorschemeSurfaceIfAttemptcountAttemptcountConstSizedboxWidthHeightChildCircularprogressindicatorStrokewidthFutureVoidAsyncCancelBoolHasfailuresFalseForFinalImageInWidgetImagesTryFinalPathWidgetPathresolverImageTryFinalFileFilePathIfAwaitFileExistsFinalRandomaccessfileAwaitFileOpenModeFilemodeReadTryAwaitRandomaccessfileReadPathExistsTrueLastmodifiedAwaitFileLastmodifiedFinallyAwaitRandomaccessfileCloseElseFinalStatusPathFinalAttemptsStatusCheckattemptsPathExistsFalseCheckattemptsAttemptsIfAttemptsHasfailuresTrueCatchEApploggerDebugFileExistsButNotAccessibleYetTagThumbnailstripDataPathPathErrorETostringFinalStatusPathFinalAttemptsStatusCheckattemptsPathExistsFalseCheckattemptsAttemptsIfAttemptsHasfailuresTrueCatchEWidgetPathresolverImageExistsFalseHasfailuresTrueIfMountedSetstateIfHasfailuresTimerConstDurationMillisecondsIfMountedVoidPointersignaleventEventApploggerDebugEventRuntimetype
代码行: borderRadius: BorderRadius.circular(2),
----------------------------------------
文件: presentation\widgets\date_range_picker.dart, 行: 181
硬编码文本: "快捷选择"
建议新键: text7
代码行: Text(
----------------------------------------
文件: presentation\widgets\font_tester.dart, 行: 11
硬编码文本: "字体测试工具"
建议新键: text8
代码行: title: const Text('字体测试工具'),
----------------------------------------
文件: presentation\widgets\font_tester.dart, 行: 11
硬编码文本: "字体测试工具"
建议新键: text9
代码行: title: const Text('字体测试工具'),
----------------------------------------
文件: presentation\widgets\font_tester.dart, 行: 10
硬编码文本: "字体测试工具"
建议新键: text10
代码行: appBar: AppBar(
----------------------------------------
文件: presentation\widgets\font_tester.dart, 行: 17
硬编码文本: "字体测试工具"
建议新键: text11
代码行: children: [
----------------------------------------
文件: presentation\widgets\font_tester.dart, 行: 22
硬编码文本: "这个工具用于测试不同字体的显示效果。每种字体都会显示相同的文本，包括英文、数字和中文。特别测试了字重从w100到w900的完整范围，以验证字体是否正确响应字重变化。"
建议新键: text12
代码行: const SizedBox(height: 16),
----------------------------------------
文件: presentation\widgets\font_tester.dart, 行: 37
硬编码文本: "注意事项:"
建议新键: text13
代码行: children: [
----------------------------------------
文件: presentation\widgets\font_tester.dart, 行: 42
硬编码文本: "1. 思源黑体和思源宋体是可变字体，理论上支持w100-w900的全部字重。"
建议新键: text14
代码行: SizedBox(height: 4),
----------------------------------------
文件: presentation\widgets\font_tester.dart, 行: 45
硬编码文本: "2. 如果字重变化不明显，可能是因为字体文件未正确注册或Flutter对可变字体的支持有限制。"
建议新键: text15
代码行: ),
----------------------------------------
文件: presentation\widgets\font_tester.dart, 行: 48
硬编码文本: "3. 系统默认字体通常只支持有限的字重变化（如normal和bold）。"
建议新键: text16
代码行: ),
----------------------------------------
文件: presentation\widgets\font_tester.dart, 行: 115
硬编码文本: "字重范围测试 (w100-w900)"
建议新键: text17
代码行: crossAxisAlignment: CrossAxisAlignment.start,
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 11
硬编码文本: "字体粗细测试工具"
建议新键: text18
代码行: title: const Text('字体粗细测试工具'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 11
硬编码文本: "字体粗细测试工具"
建议新键: text19
代码行: title: const Text('字体粗细测试工具'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 136
硬编码文本: "思源黑体 (SourceHanSans):"
建议新键: sourcehansans
相似键: sourceHanSansFont (相似度: 0.79)
代码行: Text('思源黑体 (SourceHanSans):'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 137
硬编码文本: "- 文件: assets/fonts/chinese/SourceHanSansCN-VF.otf"
建议新键: fileAssetsFontsChineseSourcehansanscnVfOtf
代码行: Text('- 文件: assets/fonts/chinese/SourceHanSansCN-VF.otf'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 138
硬编码文本: "- 类型: 可变字体 (Variable Font)"
建议新键: 类型VariableFont
代码行: Text('- 类型: 可变字体 (Variable Font)'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 139
硬编码文本: "- 字重轴: wght (100-900)"
建议新键: wght
代码行: Text('- 字重轴: wght (100-900)'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 141
硬编码文本: "思源宋体 (SourceHanSerif):"
建议新键: sourcehanserif
相似键: sourceHanSerifFont (相似度: 0.80)
代码行: Text('思源宋体 (SourceHanSerif):'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 142
硬编码文本: "- 文件: assets/fonts/chinese/SourceHanSerifCN-VF.otf"
建议新键: fileAssetsFontsChineseSourcehanserifcnVfOtf
代码行: Text('- 文件: assets/fonts/chinese/SourceHanSerifCN-VF.otf'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 143
硬编码文本: "- 类型: 可变字体 (Variable Font)"
建议新键: 类型VariableFont1
代码行: Text('- 类型: 可变字体 (Variable Font)'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 144
硬编码文本: "- 字重轴: wght (100-900)"
建议新键: wght1
代码行: Text('- 字重轴: wght (100-900)'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 150
硬编码文本: "1. Flutter引擎对可变字体的支持不完整"
建议新键: text20
代码行: Text('1. Flutter引擎对可变字体的支持不完整'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 151
硬编码文本: "2. 字体文件的字重轴未被正确识别"
建议新键: text21
代码行: Text('2. 字体文件的字重轴未被正确识别'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 152
硬编码文本: "3. 字体注册方式不正确"
建议新键: text22
代码行: Text('3. 字体注册方式不正确'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 153
硬编码文本: "4. 平台特定的字体渲染限制"
建议新键: text23
代码行: Text('4. 平台特定的字体渲染限制'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 159
硬编码文本: "1. 使用不同的字体家族名称注册同一字体文件的不同字重"
建议新键: text24
代码行: Text('1. 使用不同的字体家族名称注册同一字体文件的不同字重'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 160
硬编码文本: "2. 使用非可变字体的多个字重文件"
建议新键: text25
代码行: Text('2. 使用非可变字体的多个字重文件'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 161
硬编码文本: "3. 使用fontVariations属性直接设置字重轴的值"
建议新键: text26
代码行: Text('3. 使用fontVariations属性直接设置字重轴的值'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 162
硬编码文本: "4. 在应用中提供字体粗细预览，帮助用户选择合适的字重"
建议新键: text27
代码行: Text('4. 在应用中提供字体粗细预览，帮助用户选择合适的字重'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 18
硬编码文本: "字体粗细测试工具"
建议新键: text28
代码行: const Text(
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 23
硬编码文本: "这个工具专门用于测试思源黑体和思源宋体的字重变化。我们测试了不同的字重注册方式和渲染方式，以找出为什么只有两种粗细变化生效。"
建议新键: text29
代码行: const Text(
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 118
硬编码文本: "字体文件信息"
建议新键: text30
代码行: Widget _buildInfoSection() {
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 133
硬编码文本: "思源黑体 (SourceHanSans):"
建议新键: sourcehansans1
相似键: sourceHanSansFont (相似度: 0.79)
代码行: child: const Column(
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 134
硬编码文本: "- 文件: assets/fonts/chinese/SourceHanSansCN-VF.otf"
建议新键: fileAssetsFontsChineseSourcehansanscnVfOtf1
代码行: crossAxisAlignment: CrossAxisAlignment.start,
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 136
硬编码文本: "- 类型: 可变字体 (Variable Font)"
建议新键: 类型VariableFont2
代码行: Text('思源黑体 (SourceHanSans):'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 137
硬编码文本: "- 字重轴: wght (100-900)"
建议新键: wght2
代码行: Text('- 文件: assets/fonts/chinese/SourceHanSansCN-VF.otf'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 138
硬编码文本: "思源宋体 (SourceHanSerif):"
建议新键: sourcehanserif1
相似键: sourceHanSerifFont (相似度: 0.80)
代码行: Text('- 类型: 可变字体 (Variable Font)'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 139
硬编码文本: "- 文件: assets/fonts/chinese/SourceHanSerifCN-VF.otf"
建议新键: fileAssetsFontsChineseSourcehanserifcnVfOtf1
代码行: Text('- 字重轴: wght (100-900)'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 141
硬编码文本: "- 类型: 可变字体 (Variable Font)"
建议新键: 类型VariableFont3
代码行: Text('思源宋体 (SourceHanSerif):'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 142
硬编码文本: "- 字重轴: wght (100-900)"
建议新键: wght3
代码行: Text('- 文件: assets/fonts/chinese/SourceHanSerifCN-VF.otf'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 143
硬编码文本: "注意: Flutter对可变字体的支持可能有限制。如果字重变化不明显，可能是因为:"
建议新键: 注意
代码行: Text('- 类型: 可变字体 (Variable Font)'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 147
硬编码文本: "1. Flutter引擎对可变字体的支持不完整"
建议新键: text31
代码行: '注意: Flutter对可变字体的支持可能有限制。如果字重变化不明显，可能是因为:',
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 148
硬编码文本: "2. 字体文件的字重轴未被正确识别"
建议新键: text32
代码行: style: TextStyle(fontWeight: FontWeight.bold),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 148
硬编码文本: "3. 字体注册方式不正确"
建议新键: text33
代码行: style: TextStyle(fontWeight: FontWeight.bold),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 150
硬编码文本: "4. 平台特定的字体渲染限制"
建议新键: text34
代码行: Text('1. Flutter引擎对可变字体的支持不完整'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 151
硬编码文本: "可能的解决方案:"
建议新键: text35
代码行: Text('2. 字体文件的字重轴未被正确识别'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 155
硬编码文本: "1. 使用不同的字体家族名称注册同一字体文件的不同字重"
建议新键: text36
代码行: Text(
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 157
硬编码文本: "2. 使用非可变字体的多个字重文件"
建议新键: text37
代码行: style: TextStyle(fontWeight: FontWeight.bold),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 157
硬编码文本: "3. 使用fontVariations属性直接设置字重轴的值"
建议新键: text38
代码行: style: TextStyle(fontWeight: FontWeight.bold),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 159
硬编码文本: "4. 在应用中提供字体粗细预览，帮助用户选择合适的字重"
建议新键: text39
代码行: Text('1. 使用不同的字体家族名称注册同一字体文件的不同字重'),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 207
硬编码文本: "永曰月明清风 ABC 123"
建议新键: abc
代码行: border: Border.all(color: Colors.grey.shade300),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 241
硬编码文本: "永曰月明清风 ABC 123"
建议新键: abc1
代码行: border: Border.all(color: Colors.grey.shade300),
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 10
硬编码文本: "字体粗细测试工具"
建议新键: text40
代码行: appBar: AppBar(
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 17
硬编码文本: "字体粗细测试工具"
建议新键: text41
代码行: children: [
----------------------------------------
文件: presentation\widgets\font_weight_tester.dart, 行: 22
硬编码文本: "这个工具专门用于测试思源黑体和思源宋体的字重变化。我们测试了不同的字重注册方式和渲染方式，以找出为什么只有两种粗细变化生效。"
建议新键: text42
代码行: const SizedBox(height: 16),
----------------------------------------
文件: presentation\widgets\character_collection\m3_image_view.dart, 行: 470
硬编码文本: "${AppLocalizations.of(context).imageLoadError}: ${error.toString()}', style: const TextStyle(color: Colors.red), textAlign: TextAlign.center, ), ], ), ); } Widget _buildImageFrame( BuildContext context, Widget child, int? frame, bool wasSynchronouslyLoaded, ) { if (frame != null) { if (!wasSynchronouslyLoaded) { WidgetsBinding.instance.addPostFrameCallback((_) { if (!_mounted) return; final imageState = ref.read(workImageProvider); final currentImageId = '${imageState.workId}-${imageState.currentPageId}'; if (_lastImageId != currentImageId) { _handleImageLoaded(imageState); } }); } return AnimatedSwitcher( duration: const Duration(milliseconds: 200), child: child, ); } return Center( child: Column( mainAxisSize: MainAxisSize.min, children: [ const CircularProgressIndicator(strokeWidth: 2), const SizedBox(height: 16), Text( AppLocalizations.of(context).loadingImage, style: const TextStyle(color: Colors.grey), ), ], ), ); } Widget _buildImageLayer( WorkImageState imageState, List<CharacterRegion> regions, Size viewportSize, List<String> selectedIds, ) { final toolMode = ref.watch(toolModeProvider); final isPanMode = toolMode == Tool.pan; final isSelectMode = toolMode == Tool.select; final characterCollection = ref.watch(characterCollectionProvider); return Stack( fit: StackFit.expand, children: [ InteractiveViewer( constrained: false, transformationController: _transformationController, minScale: 0.1, maxScale: 10.0, scaleEnabled: true, panEnabled: _altKeyNotifier.value || isPanMode, boundaryMargin: const EdgeInsets.all(double.infinity), onInteractionStart: _handleInteractionStart, onInteractionUpdate: _handleInteractionUpdate, onInteractionEnd: _handleInteractionEnd, alignment: Alignment.topLeft, child: Listener( child: Stack( children: [ Image.memory( imageState.imageData!, fit: BoxFit.contain, alignment: Alignment.topLeft, filterQuality: FilterQuality.high, gaplessPlayback: true, frameBuilder: _buildImageFrame, errorBuilder: _buildErrorWidget, ), if (_transformer != null && regions.isNotEmpty) Positioned.fill( child: GestureDetector( onTapUp: _onTapUp, onPanStart: isPanMode || _isAltKeyPressed ? _handlePanStart : _handleSelectionStart, onPanUpdate: isPanMode || _isAltKeyPressed ? _handlePanUpdate : _handleSelectionUpdate, onPanEnd: isPanMode || _isAltKeyPressed ? _handlePanEnd : _handleSelectionEnd, child: CustomPaint( painter: RegionsPainter( regions: regions, transformer: _transformer!, hoveredId: _hoveredRegionId, adjustingRegionId: _adjustingRegionId, currentTool: toolMode, isAdjusting: characterCollection.isAdjusting, selectedIds: selectedIds, ), ), ), ), if (_isAdjusting && _adjustingRegionId != null) Positioned.fill( child: ValueListenableBuilder<bool>( valueListenable: _altKeyNotifier, builder: (context, isAltPressed, child) { return MouseRegion( cursor: isAltPressed ? SystemMouseCursors.move : _getCursor(), onHover: (event) { final handleIndex = _getHandleIndexFromPosition( event.localPosition); setState(() { _activeHandleIndex = handleIndex; }); }, onExit: (_) { setState(() { _activeHandleIndex = null; }); }, child: GestureDetector( behavior: HitTestBehavior .opaque, onTapUp: _onTapUp, onPanStart: isAltPressed ? _handlePanStart : _handleAdjustmentPanStart, onPanUpdate: isAltPressed ? _handlePanUpdate : _handleAdjustmentPanUpdate, onPanEnd: isAltPressed ? _handlePanEnd : _handleAdjustmentPanEnd, child: CustomPaint( painter: AdjustableRegionPainter( region: _originalRegion!, transformer: _transformer!, isActive: true, isAdjusting: true, activeHandleIndex: _activeHandleIndex, currentRotation: _currentRotation, guideLines: _guideLines, viewportRect: _adjustingRect, ), ), ), ); }, ), ), if (isSelectMode && !_isAdjusting) Positioned.fill( child: ValueListenableBuilder<bool>( valueListenable: _altKeyNotifier, builder: (context, isAltPressed, child) { return MouseRegion( cursor: isAltPressed ? SystemMouseCursors.move : SystemMouseCursors.precise, child: GestureDetector( onTapUp: _onTapUp, onPanStart: isAltPressed ? _handlePanStart : _handleSelectionStart, onPanUpdate: isAltPressed ? _handlePanUpdate : _handleSelectionUpdate, onPanEnd: isAltPressed ? _handlePanEnd : _handleSelectionEnd, child: CustomPaint( painter: ActiveSelectionPainter( startPoint: _selectionStart ?? Offset.zero, endPoint: _selectionCurrent ?? Offset.zero, viewportSize: _transformer?.viewportSize ?? Size.zero, isActive: _selectionStart != null, ), ), ), ); }, ), ), ], ), ), ), ], ); } Widget _buildSelectionToolLayer() { if (!_isInSelectionMode || _selectionStart == null) { return const SizedBox.shrink(); } return GestureDetector( onPanUpdate: (details) { setState(() { _selectionCurrent = details.localPosition; }); }, onPanEnd: (details) { if (_selectionStart != null && _selectionCurrent != null) { _handleSelectionEnd(details); } }, child: CustomPaint( painter: ActiveSelectionPainter( startPoint: _selectionStart!, endPoint: _selectionCurrent ?? _selectionStart!, viewportSize: _transformer!.viewportSize, ), ), ); } Widget _buildUILayer() { return Stack( children: [ if (_hasCompletedSelection && _lastCompletedSelection != null) Positioned( left: _lastCompletedSelection!.left, top: _lastCompletedSelection!.top - 40, child: SelectionToolbar( onConfirm: () { _confirmSelection(); }, onCancel: () { _cancelSelection(); }, onDelete: () { }, ), ), if (_isAdjusting && _adjustingRect != null) Positioned( left: _calculateIndicatorPosition().dx, top: _calculateIndicatorPosition().dy, child: AnimatedOpacity( duration: const Duration(milliseconds: 150), opacity: _activeHandleIndex != null ? 1.0 : 0.7, child: Container( padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 4), decoration: BoxDecoration( color: Colors.white, borderRadius: BorderRadius.circular(4), boxShadow: [ BoxShadow( color: Colors.black.withAlpha(26), blurRadius: 4, offset: const Offset(0, 2), ), ], border: Border.all( color: _activeHandleIndex != null ? Colors.blue : Colors.blue.withAlpha(179), width: 1, ), ), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Row( mainAxisSize: MainAxisSize.min, children: [ const Icon( Icons.straighten, size: 14, color: Colors.blue, ), const SizedBox(width: 4), Text( '${_adjustingRect!.width.round()}×${_adjustingRect!.height.round()}', style: const TextStyle( color: Colors.blue, fontWeight: FontWeight.w600, fontSize: 13, ), ), ], ), if (_currentRotation != 0) Padding( padding: const EdgeInsets.only(top: 2), child: Row( mainAxisSize: MainAxisSize.min, children: [ const Icon( Icons.rotate_right, size: 14, color: Colors.blue, ), const SizedBox(width: 4), Text( '${(_currentRotation * 180 / math.pi).round()}°', style: const TextStyle( color: Colors.blue, fontWeight: FontWeight.w600, fontSize: 13, ), ), ], ), ), ], ), ), ), ), ], ); } double _calculateAngle(Offset center, Offset point) { return (point - center).direction; } List<Offset> _calculateGuideLines(Rect rect) { final guides = <Offset>[]; guides.add(Offset(rect.center.dx, 0)); guides.add(Offset(rect.center.dx, _transformer!.viewportSize.height)); guides.add(Offset(0, rect.center.dy)); guides.add(Offset(_transformer!.viewportSize.width, rect.center.dy)); if (rect.height < 20) { guides.add(Offset(0, rect.top)); guides.add(Offset(_transformer!.viewportSize.width, rect.top)); } if (rect.width < 20) { guides.add(Offset(rect.left, 0)); guides.add(Offset(rect.left, _transformer!.viewportSize.height)); } return guides; } Offset _calculateIndicatorPosition() { if (_adjustingRect == null) return Offset.zero; const padding = 8.0; final viewportSize = _transformer?.viewportSize ?? Size.zero; var x = _adjustingRect!.right + padding; var y = _adjustingRect!.top; if (x + 120 > viewportSize.width) { x = _adjustingRect!.left - padding - 120; } if (y < padding) { y = padding; } if (y + 50 > viewportSize.height) { y = viewportSize.height - 50; } if (_currentRotation != 0) { final rotationDegrees = (_currentRotation * 180 / math.pi) % 360; if (rotationDegrees > 45 && rotationDegrees < 135) { y = math.max(y, _adjustingRect!.bottom + padding); } else if (rotationDegrees > 225 && rotationDegrees < 315) { y = math.min(y, _adjustingRect!.top - 50 - padding); } } return Offset(x, y); } void _cancelAdjustment() { AppLogger.debug('取消选区调整 (_cancelAdjustment called)"
建议新键: applocalizationsOfContextImageloaderrorErrorTostringStyleConstTextstyleColorColorsRedTextalignTextalignCenterWidgetBuildcontextContextWidgetChildIntFrameBoolWassynchronouslyloadedIfFrameNullIfWassynchronouslyloadedWidgetsbindingInstanceAddpostframecallbackIfReturnFinalImagestateRefReadWorkimageproviderFinalCurrentimageidImagestateWorkidImagestateCurrentpageidIfCurrentimageidImagestateReturnAnimatedswitcherDurationConstDurationMillisecondsChildChildReturnCenterChildColumnMainaxissizeMainaxissizeMinChildrenConstCircularprogressindicatorStrokewidthConstSizedboxHeightTextApplocalizationsOfContextLoadingimageStyleConstTextstyleColorColorsGreyWidgetWorkimagestateImagestateListCharacterregionRegionsSizeViewportsizeListStringSelectedidsFinalToolmodeRefWatchToolmodeproviderFinalIspanmodeToolmodeToolPanFinalIsselectmodeToolmodeToolSelectFinalCharactercollectionRefWatchCharactercollectionproviderReturnStackFitStackfitExpandChildrenInteractiveviewerConstrainedFalseTransformationcontrollerMinscaleMaxscaleScaleenabledTruePanenabledValueIspanmodeBoundarymarginConstEdgeinsetsAllDoubleInfinityOninteractionstartOninteractionupdateOninteractionendAlignmentAlignmentTopleftChildListenerChildStackChildrenImageMemoryImagestateImagedataFitBoxfitContainAlignmentAlignmentTopleftFilterqualityFilterqualityHighGaplessplaybackTrueFramebuilderErrorbuilderIfNullRegionsIsnotemptyPositionedFillChildGesturedetectorOntapupOnpanstartIspanmodeOnpanupdateIspanmodeOnpanendIspanmodeChildCustompaintPainterRegionspainterRegionsRegionsTransformerHoveredidAdjustingregionidCurrenttoolToolmodeIsadjustingCharactercollectionIsadjustingSelectedidsSelectedidsIfNullPositionedFillChildValuelistenablebuilderBoolValuelistenableBuilderContextIsaltpressedChildReturnMouseregionCursorIsaltpressedSystemmousecursorsMoveOnhoverEventFinalHandleindexEventLocalpositionSetstateHandleindexOnexitSetstateNullChildGesturedetectorBehaviorHittestbehaviorOpaqueOntapupOnpanstartIsaltpressedOnpanupdateIsaltpressedOnpanendIsaltpressedChildCustompaintPainterAdjustableregionpainterRegionTransformerIsactiveTrueIsadjustingTrueActivehandleindexCurrentrotationGuidelinesViewportrectIfIsselectmodePositionedFillChildValuelistenablebuilderBoolValuelistenableBuilderContextIsaltpressedChildReturnMouseregionCursorIsaltpressedSystemmousecursorsMoveSystemmousecursorsPreciseChildGesturedetectorOntapupOnpanstartIsaltpressedOnpanupdateIsaltpressedOnpanendIsaltpressedChildCustompaintPainterActiveselectionpainterStartpointOffsetZeroEndpointOffsetZeroViewportsizeViewportsizeSizeZeroIsactiveNullWidgetIfNullReturnConstSizedboxShrinkReturnGesturedetectorOnpanupdateDetailsSetstateDetailsLocalpositionOnpanendDetailsIfNullNullDetailsChildCustompaintPainterActiveselectionpainterStartpointEndpointViewportsizeViewportsizeWidgetReturnStackChildrenIfNullPositionedLeftLeftTopTopChildSelectiontoolbarOnconfirmOncancelOndeleteIfNullPositionedLeftDxTopDyChildAnimatedopacityDurationConstDurationMillisecondsOpacityNullChildContainerPaddingConstEdgeinsetsSymmetricHorizontalVerticalDecorationBoxdecorationColorColorsWhiteBorderradiusBorderradiusCircularBoxshadowBoxshadowColorColorsBlackWithalphaBlurradiusOffsetConstOffsetBorderBorderAllColorNullColorsBlueColorsBlueWithalphaWidthChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowMainaxissizeMainaxissizeMinChildrenConstIconIconsStraightenSizeColorColorsBlueConstSizedboxWidthTextWidthRoundHeightRoundStyleConstTextstyleColorColorsBlueFontweightFontweightFontsizeIfPaddingPaddingConstEdgeinsetsOnlyTopChildRowMainaxissizeMainaxissizeMinChildrenConstIconIconsSizeColorColorsBlueConstSizedboxWidthTextMathPiRoundStyleConstTextstyleColorColorsBlueFontweightFontweightFontsizeDoubleOffsetCenterOffsetPointReturnPointCenterDirectionListOffsetRectRectFinalGuidesOffsetGuidesAddOffsetRectCenterDxGuidesAddOffsetRectCenterDxViewportsizeHeightGuidesAddOffsetRectCenterDyGuidesAddOffsetViewportsizeWidthRectCenterDyIfRectHeightGuidesAddOffsetRectTopGuidesAddOffsetViewportsizeWidthRectTopIfRectWidthGuidesAddOffsetRectLeftGuidesAddOffsetRectLeftViewportsizeHeightReturnGuidesOffsetIfNullReturnOffsetZeroConstPaddingFinalViewportsizeViewportsizeSizeZeroVarXRightPaddingVarYTopIfXViewportsizeWidthXLeftPaddingIfYPaddingYPaddingIfYViewportsizeHeightYViewportsizeHeightIfFinalRotationdegreesMathPiIfRotationdegreesRotationdegreesYMathMaxYBottomPaddingElseIfRotationdegreesRotationdegreesYMathMinYTopPaddingReturnOffsetXYVoidApploggerDebugCalled
代码行: final dx = position.dx - center.dx;
----------------------------------------
文件: presentation\widgets\common\zoomable_image_view.dart, 行: 137
硬编码文本: "无法加载图片"
建议新键: text43
代码行: } else {
----------------------------------------
文件: presentation\widgets\forms\work_form.dart, 行: 345
硬编码文本: "键盘快捷键:"
建议新键: text44
代码行: // Tool field
----------------------------------------
文件: presentation\widgets\forms\work_form.dart, 行: 348
硬编码文本: "Ctrl+T: 标题 Ctrl+A: 作者 Ctrl+R: 备注\n"
建议新键: ctrlTTitleCtrlA作者CtrlR备注N
代码行: _buildToolField(),
----------------------------------------
文件: presentation\widgets\pagination\pagination_controls.dart, 行: 67
硬编码文本: "$currentPage / $totalPages 页 (共$totalItems条)"
建议新键: currentpageTotalpages页共
代码行: ),
----------------------------------------
文件: presentation\widgets\practice\m3_page_thumbnail_strip.dart, 行: 291
硬编码文本: "${index + 1}', style: TextStyle( color: isSelected ? colorScheme.onPrimary : colorScheme.onSurfaceVariant, fontSize: 12, fontWeight: FontWeight.bold, ), ), ), ), ], ), ), ), ); }, ); } Widget _buildSimplePageList(BuildContext context) { final colorScheme = Theme.of(context).colorScheme; return ListView.builder( scrollDirection: Axis.horizontal, controller: _scrollController, padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8), itemCount: widget.pages.length, itemBuilder: (context, index) { final page = widget.pages[index]; final isSelected = index == widget.currentPageIndex; return Padding( padding: const EdgeInsets.only(right: 16), child: GestureDetector( onTap: () { EditPageLogger.editPageDebug( '页面缩略图选择(简单列表)"
建议新键: indexStyleTextstyleColorIsselectedColorschemeOnprimaryColorschemeOnsurfacevariantFontsizeFontweightFontweightBoldWidgetBuildcontextContextFinalColorschemeThemeOfContextColorschemeReturnListviewBuilderScrolldirectionAxisHorizontalControllerPaddingConstEdgeinsetsSymmetricHorizontalVerticalItemcountWidgetPagesLengthItembuilderContextIndexFinalPageWidgetPagesIndexFinalIsselectedIndexWidgetCurrentpageindexReturnPaddingPaddingConstEdgeinsetsOnlyRightChildGesturedetectorOntapEditpageloggerEditpagedebug
代码行: : colorScheme.surfaceContainerHighest
----------------------------------------
文件: presentation\widgets\practice\m3_practice_layer_panel.dart, 行: 455
硬编码文本: "Layer: $layerName', style: const TextStyle(fontWeight: FontWeight.bold), ), ], ), actions: [ TextButton( onPressed: () => Navigator.of(context).pop(false), child: Text(l10n.cancel), ), FilledButton( onPressed: () => Navigator.of(context).pop(true), style: FilledButton.styleFrom( backgroundColor: Theme.of(context).colorScheme.error, ), child: Text(l10n.delete), ), ], ), ); if (result == true) { EditPageLogger.propertyPanelDebug( '确认删除图层"
建议新键: layerLayernameStyleConstTextstyleFontweightFontweightBoldActionsTextbuttonOnpressedNavigatorOfContextPopFalseChildTextCancelFilledbuttonOnpressedNavigatorOfContextPopTrueStyleFilledbuttonStylefromBackgroundcolorThemeOfContextColorschemeErrorChildTextDeleteIfResultTrueEditpageloggerPropertypaneldebug
代码行: textStyle: const TextStyle(fontSize: 14),
----------------------------------------
文件: presentation\widgets\practice\m3_top_navigation_bar.dart, 行: 104
硬编码文本: "${l10n.save} (Ctrl+S)'), onPressed: () => _savePractice(context, l10n), ), ], ), const VerticalDivider(indent: 8, endIndent: 8), Row( mainAxisSize: MainAxisSize.min, children: [ IconButton( icon: const Icon(Icons.save_as), tooltip: '${l10n.saveAs} (Ctrl+Shift+S)', onPressed: () => _saveAs(context, l10n), ), const SizedBox(width: AppSizes.s), IconButton( icon: const Icon(Icons.file_download), tooltip: '${l10n.export} (Ctrl+E)', onPressed: () => _exportPractice(context, l10n), ), ], ), const VerticalDivider(indent: 8, endIndent: 8), Row( mainAxisSize: MainAxisSize.min, children: [ IconButton( icon: Icon( showThumbnails ? Icons.view_carousel : Icons.view_carousel_outlined, ), tooltip: showThumbnails ? '${l10n.hideThumbnails} (Ctrl+O)' : '${l10n.showThumbnails} (Ctrl+O)', onPressed: () => onThumbnailToggle(!showThumbnails), style: IconButton.styleFrom( foregroundColor: showThumbnails ? colorScheme.tertiary : colorScheme.primary, ), ), ], ), ], ); } Future<void> _editTitle(BuildContext context, AppLocalizations l10n) async { final currentTitle = controller.practiceTitle; EditPageLogger.editPageDebug( '开始编辑标题"
建议新键: saveCtrlSOnpressedContextConstVerticaldividerIndentEndindentRowMainaxissizeMainaxissizeMinChildrenIconbuttonIconConstIconIconsTooltipSaveasCtrlShiftSOnpressedContextConstSizedboxWidthAppsizesSIconbuttonIconConstIconIconsTooltipExportCtrlEOnpressedContextConstVerticaldividerIndentEndindentRowMainaxissizeMainaxissizeMinChildrenIconbuttonIconIconShowthumbnailsIconsIconsTooltipShowthumbnailsHidethumbnailsCtrlOShowthumbnailsCtrlOOnpressedOnthumbnailtoggleShowthumbnailsStyleIconbuttonStylefromForegroundcolorShowthumbnailsColorschemeTertiaryColorschemePrimaryFutureVoidBuildcontextContextApplocalizationsAsyncFinalCurrenttitleControllerPracticetitleEditpageloggerEditpagedebug
代码行: isPreviewMode ? colorScheme.tertiary : colorScheme.primary,
----------------------------------------
文件: presentation\widgets\practice\memory_efficient_element_representation.dart, 行: 228
硬编码文本: "$itemCount items', style: TextStyle( fontSize: 10, color: Colors.green.withOpacity(0.8), ), ), ], ), ); } Future<ElementRepresentation?> _createCompressedRepresentation( String elementId, Map<String, dynamic> elementData, ) async { final widget = await _createElementWidget(elementData, compressed: true); if (widget == null) return null; _memoryOptimizedCount++; final originalSize = _estimateElementSize(elementData); final optimizedSize = (originalSize * _compressionQuality).round(); _compressionSavedBytes += (originalSize - optimizedSize); return ElementRepresentation( elementId: elementId, mode: ElementRepresentationMode.compressed, widget: widget, metadata: ElementMetadata( originalSize: originalSize, optimizedSize: optimizedSize, compressionRatio: _compressionQuality, generationTime: DateTime.now(), ), ); } Future<Widget?> _createElementWidget(Map<String, dynamic> elementData, {bool compressed = false}) async { return Container( width: 100, height: 100, color: Colors.blue.withOpacity(0.1), child: const Center( child: Text('Element'), ), ); } Future<ElementRepresentation?> _createFullRepresentation( String elementId, Map<String, dynamic> elementData, ) async { final widget = await _createElementWidget(elementData); if (widget == null) return null; return ElementRepresentation( elementId: elementId, mode: ElementRepresentationMode.full, widget: widget, metadata: ElementMetadata( originalSize: _estimateElementSize(elementData), optimizedSize: _estimateElementSize(elementData), compressionRatio: 1.0, generationTime: DateTime.now(), ), ); } Widget _createGenericPreview(Map<String, dynamic> elementData) { final elementType = elementData['type'] as String? ?? 'Element'; return Container( width: _previewDimension.toDouble(), height: _previewDimension.toDouble(), decoration: BoxDecoration( border: Border.all(color: Colors.grey.withOpacity(0.3)), borderRadius: BorderRadius.circular(4), color: Colors.grey.withOpacity(0.1), ), child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ Icon( Icons.widgets, size: 32, color: Colors.grey.withOpacity(0.7), ), const SizedBox(height: 4), Text( elementType, style: TextStyle( fontSize: 10, color: Colors.grey.withOpacity(0.8), ), ), ], ), ); } Future<Widget?> _createImagePreview(Map<String, dynamic> elementData) async { final imagePath = elementData['imagePath'] as String?; if (imagePath == null) return null; try { final image = await _resourceLoader.loadImage( imagePath, priority: LoadPriority.background, strategy: LoadingStrategy.memoryOptimized, ); if (image == null) return null; return Container( width: _previewDimension.toDouble(), height: _previewDimension.toDouble(), decoration: BoxDecoration( border: Border.all(color: Colors.grey.withOpacity(0.3)), borderRadius: BorderRadius.circular(4), ), child: ClipRRect( borderRadius: BorderRadius.circular(4), child: RawImage( image: image, fit: BoxFit.cover, width: _previewDimension.toDouble(), height: _previewDimension.toDouble(), ), ), ); } catch (e) { if (kDebugMode) { debugPrint('❌ Failed to create image preview: $e'); } return _createGenericPreview(elementData); } } Future<ElementRepresentation?> _createPreviewRepresentation( String elementId, Map<String, dynamic> elementData, ) async { final elementType = elementData['type'] as String? ?? 'unknown'; Widget? previewWidget; switch (elementType) { case 'image': previewWidget = await _createImagePreview(elementData); break; case 'text': previewWidget = _createTextPreview(elementData); break; case 'collection': previewWidget = _createCollectionPreview(elementData); break; default: previewWidget = _createGenericPreview(elementData); break; } if (previewWidget == null) return null; _previewGeneratedCount++; final originalSize = _estimateElementSize(elementData); final optimizedSize = originalSize ~/ 4; return ElementRepresentation( elementId: elementId, mode: ElementRepresentationMode.preview, widget: previewWidget, metadata: ElementMetadata( originalSize: originalSize, optimizedSize: optimizedSize, compressionRatio: optimizedSize / originalSize, generationTime: DateTime.now(), ), ); } Future<ElementRepresentation?> _createProxyRepresentation( String elementId, Map<String, dynamic> elementData, ) async { final proxyWidget = _createProxyWidget(elementId, elementData); final originalSize = _estimateElementSize(elementData); const proxySize = 1024; return ElementRepresentation( elementId: elementId, mode: ElementRepresentationMode.proxy, widget: proxyWidget, metadata: ElementMetadata( originalSize: originalSize, optimizedSize: proxySize, compressionRatio: proxySize / originalSize, generationTime: DateTime.now(), ), ); } Widget _createProxyWidget( String elementId, Map<String, dynamic> elementData) { return GestureDetector( onTap: () => _loadFullRepresentation(elementId, elementData), child: Container( width: _previewDimension.toDouble(), height: _previewDimension.toDouble(), decoration: BoxDecoration( border: Border.all(color: Colors.orange.withOpacity(0.3)), borderRadius: BorderRadius.circular(4), color: Colors.orange.withOpacity(0.1), ), child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ Icon( Icons.cloud_download, size: 32, color: Colors.orange.withOpacity(0.7), ), const SizedBox(height: 4), Text( 'Tap to load', style: TextStyle( fontSize: 10, color: Colors.orange.withOpacity(0.8), ), ), ], ), ), ); } Widget _createTextPreview(Map<String, dynamic> elementData) { final text = elementData['text'] as String? ?? 'Text Element'; final truncatedText = text.length > 50 ? '${text.substring(0, 50)}...' : text; return Container( width: _previewDimension.toDouble(), height: (_previewDimension / 2).toDouble(), padding: const EdgeInsets.all(4), decoration: BoxDecoration( border: Border.all(color: Colors.blue.withOpacity(0.3)), borderRadius: BorderRadius.circular(4), color: Colors.blue.withOpacity(0.1), ), child: Text( truncatedText, style: const TextStyle(fontSize: 10), overflow: TextOverflow.ellipsis, maxLines: 3, ), ); } ElementRepresentationMode _determineOptimalRepresentationMode( String elementType, Map<String, dynamic> elementData, MemoryStats memoryStats, ) { final estimatedSize = _estimateElementSize(elementData); final memoryPressure = memoryStats.pressureRatio; if (memoryPressure > 0.8) { return estimatedSize > _largeElementThreshold ? ElementRepresentationMode.proxy : ElementRepresentationMode.compressed; } if (memoryPressure > 0.6) { return estimatedSize > _largeElementThreshold ? ElementRepresentationMode.compressed : ElementRepresentationMode.preview; } if (estimatedSize > _largeElementThreshold * 2) { return ElementRepresentationMode.compressed; } return ElementRepresentationMode.full; } int _estimateElementSize(Map<String, dynamic> elementData) { final elementType = elementData['type'] as String? ?? 'unknown'; switch (elementType) { case 'image': final width = (elementData['width'] as num?)?.toDouble() ?? 100; final height = (elementData['height'] as num?)?.toDouble() ?? 100; return (width * height * 4).round(); case 'text': final text = elementData['text'] as String? ?? ''; return text.length * 2; case 'collection': final items = elementData['items'] as List? ?? []; return items.length * 1024; default: return 1024; } } Future<ElementRepresentation?> _generateRepresentation( String elementId, Map<String, dynamic> elementData, ElementRepresentationMode? mode, ) async { final elementType = elementData['type'] as String? ?? 'unknown'; final memoryStats = _memoryManager.memoryStats; final representationMode = mode ?? _determineOptimalRepresentationMode( elementType, elementData, memoryStats, ); switch (representationMode) { case ElementRepresentationMode.full: return await _createFullRepresentation(elementId, elementData); case ElementRepresentationMode.preview: return await _createPreviewRepresentation(elementId, elementData); case ElementRepresentationMode.compressed: return await _createCompressedRepresentation(elementId, elementData); case ElementRepresentationMode.proxy: return await _createProxyRepresentation(elementId, elementData); case ElementRepresentationMode.adaptive: return await _createAdaptiveRepresentation(elementId, elementData); } } void _initializeRepresentationSystem() { _memoryManager.addListener(_onMemoryStateChanged); if (kDebugMode) { debugPrint('💾 MemoryEfficientElementRepresentation: Initialized'); } } Future<void> _loadFullRepresentation( String elementId, Map<String, dynamic> elementData) async { await createRepresentation( elementId, elementData, mode: ElementRepresentationMode.full, forceRegenerate: true, ); } void _onMemoryStateChanged() { final memoryStats = _memoryManager.memoryStats; if (memoryStats.pressureRatio > 0.8) { _optimizeExistingRepresentations(); } } void _optimizeExistingRepresentations() { final representationsToOptimize = _representations.entries .where((entry) => entry.value.mode == ElementRepresentationMode.full) .take(5) .toList(); for (final entry in representationsToOptimize) { final elementId = entry.key; Future(() async { _representations.remove(elementId); }); } } Future<ElementRepresentation?> _waitForLoadingCompletion( String elementId) async { while (_loadingElements.contains(elementId)) { await Future.delayed(const Duration(milliseconds: 100)); } return _representations[elementId]; } void _throttledNotifyListeners({ required String operation, Map<String, dynamic>? data, }) { final now = DateTime.now(); if (now.difference(_lastNotificationTime) >= _notificationThrottle) { _lastNotificationTime = now; EditPageLogger.performanceInfo( '内存高效表示管理器通知"
建议新键: itemcountItemsStyleTextstyleFontsizeColorColorsGreenWithopacityFutureElementrepresentationStringElementidMapStringDynamicElementdataAsyncFinalWidgetAwaitElementdataCompressedTrueIfWidgetNullReturnNullFinalOriginalsizeElementdataFinalOptimizedsizeOriginalsizeRoundOriginalsizeOptimizedsizeReturnElementrepresentationElementidElementidModeElementrepresentationmodeCompressedWidgetWidgetMetadataElementmetadataOriginalsizeOriginalsizeOptimizedsizeOptimizedsizeCompressionratioGenerationtimeDatetimeNowFutureWidgetMapStringDynamicElementdataBoolCompressedFalseAsyncReturnContainerWidthHeightColorColorsBlueWithopacityChildConstCenterChildTextElementFutureElementrepresentationStringElementidMapStringDynamicElementdataAsyncFinalWidgetAwaitElementdataIfWidgetNullReturnNullReturnElementrepresentationElementidElementidModeElementrepresentationmodeFullWidgetWidgetMetadataElementmetadataOriginalsizeElementdataOptimizedsizeElementdataCompressionratioGenerationtimeDatetimeNowWidgetMapStringDynamicElementdataFinalElementtypeElementdataTypeAsStringElementReturnContainerWidthTodoubleHeightTodoubleDecorationBoxdecorationBorderBorderAllColorColorsGreyWithopacityBorderradiusBorderradiusCircularColorColorsGreyWithopacityChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenIconIconsWidgetsSizeColorColorsGreyWithopacityConstSizedboxHeightTextElementtypeStyleTextstyleFontsizeColorColorsGreyWithopacityFutureWidgetMapStringDynamicElementdataAsyncFinalImagepathElementdataImagepathAsStringIfImagepathNullReturnNullTryFinalImageAwaitLoadimageImagepathPriorityLoadpriorityBackgroundStrategyLoadingstrategyMemoryoptimizedIfImageNullReturnNullReturnContainerWidthTodoubleHeightTodoubleDecorationBoxdecorationBorderBorderAllColorColorsGreyWithopacityBorderradiusBorderradiusCircularChildCliprrectBorderradiusBorderradiusCircularChildRawimageImageImageFitBoxfitCoverWidthTodoubleHeightTodoubleCatchEIfKdebugmodeDebugprintFailedToCreateImagePreviewEReturnElementdataFutureElementrepresentationStringElementidMapStringDynamicElementdataAsyncFinalElementtypeElementdataTypeAsStringUnknownWidgetPreviewwidgetSwitchElementtypeCaseImagePreviewwidgetAwaitElementdataBreakCaseTextPreviewwidgetElementdataBreakCaseCollectionPreviewwidgetElementdataBreakDefaultPreviewwidgetElementdataBreakIfPreviewwidgetNullReturnNullFinalOriginalsizeElementdataFinalOptimizedsizeOriginalsizeReturnElementrepresentationElementidElementidModeElementrepresentationmodePreviewWidgetPreviewwidgetMetadataElementmetadataOriginalsizeOriginalsizeOptimizedsizeOptimizedsizeCompressionratioOptimizedsizeOriginalsizeGenerationtimeDatetimeNowFutureElementrepresentationStringElementidMapStringDynamicElementdataAsyncFinalProxywidgetElementidElementdataFinalOriginalsizeElementdataConstProxysizeReturnElementrepresentationElementidElementidModeElementrepresentationmodeProxyWidgetProxywidgetMetadataElementmetadataOriginalsizeOriginalsizeOptimizedsizeProxysizeCompressionratioProxysizeOriginalsizeGenerationtimeDatetimeNowWidgetStringElementidMapStringDynamicElementdataReturnGesturedetectorOntapElementidElementdataChildContainerWidthTodoubleHeightTodoubleDecorationBoxdecorationBorderBorderAllColorColorsOrangeWithopacityBorderradiusBorderradiusCircularColorColorsOrangeWithopacityChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenIconIconsSizeColorColorsOrangeWithopacityConstSizedboxHeightTextTapToLoadStyleTextstyleFontsizeColorColorsOrangeWithopacityWidgetMapStringDynamicElementdataFinalTextElementdataTextAsStringTextElementFinalTruncatedtextTextLengthTextSubstringTextReturnContainerWidthTodoubleHeightTodoublePaddingConstEdgeinsetsAllDecorationBoxdecorationBorderBorderAllColorColorsBlueWithopacityBorderradiusBorderradiusCircularColorColorsBlueWithopacityChildTextTruncatedtextStyleConstTextstyleFontsizeOverflowTextoverflowEllipsisMaxlinesElementrepresentationmodeStringElementtypeMapStringDynamicElementdataMemorystatsMemorystatsFinalEstimatedsizeElementdataFinalMemorypressureMemorystatsPressureratioIfMemorypressureReturnEstimatedsizeElementrepresentationmodeProxyElementrepresentationmodeCompressedIfMemorypressureReturnEstimatedsizeElementrepresentationmodeCompressedElementrepresentationmodePreviewIfEstimatedsizeReturnElementrepresentationmodeCompressedReturnElementrepresentationmodeFullIntMapStringDynamicElementdataFinalElementtypeElementdataTypeAsStringUnknownSwitchElementtypeCaseImageFinalWidthElementdataWidthAsNumTodoubleFinalHeightElementdataHeightAsNumTodoubleReturnWidthHeightRoundCaseTextFinalTextElementdataTextAsStringReturnTextLengthCaseCollectionFinalItemsElementdataItemsAsListReturnItemsLengthDefaultReturnFutureElementrepresentationStringElementidMapStringDynamicElementdataElementrepresentationmodeModeAsyncFinalElementtypeElementdataTypeAsStringUnknownFinalMemorystatsMemorystatsFinalRepresentationmodeModeElementtypeElementdataMemorystatsSwitchRepresentationmodeCaseElementrepresentationmodeFullReturnAwaitElementidElementdataCaseElementrepresentationmodePreviewReturnAwaitElementidElementdataCaseElementrepresentationmodeCompressedReturnAwaitElementidElementdataCaseElementrepresentationmodeProxyReturnAwaitElementidElementdataCaseElementrepresentationmodeAdaptiveReturnAwaitElementidElementdataVoidAddlistenerIfKdebugmodeDebugprintMemoryefficientelementrepresentationInitializedFutureVoidStringElementidMapStringDynamicElementdataAsyncAwaitCreaterepresentationElementidElementdataModeElementrepresentationmodeFullForceregenerateTrueVoidFinalMemorystatsMemorystatsIfMemorystatsPressureratioVoidFinalRepresentationstooptimizeEntriesWhereEntryEntryValueModeElementrepresentationmodeFullTakeTolistForFinalEntryInRepresentationstooptimizeFinalElementidEntryKeyFutureAsyncRemoveElementidFutureElementrepresentationStringElementidAsyncWhileContainsElementidAwaitFutureDelayedConstDurationMillisecondsReturnElementidVoidRequiredStringOperationMapStringDynamicDataFinalNowDatetimeNowIfNowDifferenceNowEditpageloggerPerformanceinfo
代码行: final memoryStats = _memoryManager.memoryStats;
----------------------------------------
文件: presentation\widgets\practice\performance_monitor.dart, 行: 608
硬编码文本: "拖拽帧率: ${currentFps.toString()} FPS"
建议新键: currentfpsTostringFps
代码行: // Track widget rebuild
----------------------------------------
文件: presentation\widgets\practice\performance_monitor.dart, 行: 618
硬编码文本: "平均帧率: ${avgFps.toStringAsFixed(1)} FPS"
建议新键: avgfpsTostringasfixedFps
代码行: class _PerformanceOverlayState extends State<PerformanceOverlay> {
----------------------------------------
文件: presentation\widgets\practice\performance_monitor.dart, 行: 623
硬编码文本: "更新次数: $updateCount (批量: $batchUpdateCount)"
建议新键: updatecount批量Batchupdatecount
代码行: children: [
----------------------------------------
文件: presentation\widgets\practice\performance_monitor.dart, 行: 629
硬编码文本: "平均更新时间: ${avgUpdateTime.toStringAsFixed(2)}ms"
建议新键: avgupdatetimeTostringasfixedMs
代码行: child: _buildPerformanceDisplay(),
----------------------------------------
文件: presentation\widgets\practice\performance_monitor.dart, 行: 637
硬编码文本: "拖拽元素: $elementCount"
建议新键: elementcount
代码行: _monitor.removeListener(_onPerformanceUpdate);
----------------------------------------
文件: presentation\widgets\practice\performance_monitor.dart, 行: 648
硬编码文本: "⚠️ 性能警告: 帧率过低"
建议新键: text45
代码行: Widget _buildDragPerformanceInfo() {
----------------------------------------
文件: presentation\widgets\practice\text_renderer.dart, 行: 858
硬编码文本: "暂无内容"
建议新键: text46
代码行: maxHeight: constraints.maxHeight,
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 229
硬编码文本: "${l10n.exportType}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8), Wrap( spacing: 8, children: ExportType.values.map((type) { return ChoiceChip( label: Text(type.name), selected: _exportType == type, onSelected: (selected) { if (selected) { setState(() { _exportType = type; }); _generatePreview(); } }, ); }).toList(), ), ], ); } Widget _buildFileNameInput() { final l10n = AppLocalizations.of(context); return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [ Text('${l10n.fileName}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8), TextField( controller: _fileNameController, decoration: InputDecoration( hintText: _getFileNameHint(), border: const OutlineInputBorder(), suffixText: _exportType == ExportType.pdf ? '.pdf' : (_exportType == ExportType.jpg ? '.jpg' : '.png'), ), ), ], ); } Widget _buildFitPolicySelector() { final l10n = AppLocalizations.of(context); return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [ Text('${l10n.fitMode}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8), Row( children: [ Expanded( child: RadioListTile<PdfFitPolicy>( title: Text(l10n.fitWidth), value: PdfFitPolicy.width, groupValue: _fitPolicy, contentPadding: EdgeInsets.zero, dense: true, onChanged: (value) { setState(() { _fitPolicy = value!; }); _generatePreview(); }, ), ), Expanded( child: RadioListTile<PdfFitPolicy>( title: Text(l10n.fitHeight), value: PdfFitPolicy.height, groupValue: _fitPolicy, contentPadding: EdgeInsets.zero, dense: true, onChanged: (value) { setState(() { _fitPolicy = value!; }); _generatePreview(); }, ), ), ], ), RadioListTile<PdfFitPolicy>( title: Text(l10n.fitContain), value: PdfFitPolicy.contain, groupValue: _fitPolicy, contentPadding: EdgeInsets.zero, dense: true, onChanged: (value) { setState(() { _fitPolicy = value!; }); _generatePreview(); }, ), ], ); } Widget _buildMarginInput(String label, int index) { final l10n = AppLocalizations.of(context); final controller = TextEditingController(text: _margins[index].toStringAsFixed(1)); void updateMargin(double value) { final newValue = value < 0 ? 0.0 : value; setState(() { _margins[index] = newValue; controller.text = newValue.toStringAsFixed(1); controller.selection = TextSelection.fromPosition( TextPosition(offset: controller.text.length), ); }); _generatePreview(); } return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [ Text(label), const SizedBox(height: 4), Row( children: [ Expanded( child: TextField( decoration: InputDecoration( border: const OutlineInputBorder(), contentPadding: const EdgeInsets.symmetric(horizontal: 8, vertical: 8), suffixText: l10n.centimeter, ), keyboardType: const TextInputType.numberWithOptions(decimal: true), textAlign: TextAlign.center, controller: controller, onChanged: (value) { try { final newValue = double.parse(value); if (newValue >= 0) { setState(() { _margins[index] = newValue; }); _generatePreview(); } } catch (e) { } }, ), ), Column( mainAxisSize: MainAxisSize.min, mainAxisAlignment: MainAxisAlignment.center, children: [ IconButton( icon: const Icon(Icons.arrow_drop_up), padding: EdgeInsets.zero, constraints: const BoxConstraints(), iconSize: 20, onPressed: () { updateMargin(_margins[index] + 0.1); }, ), IconButton( icon: const Icon(Icons.arrow_drop_down), padding: EdgeInsets.zero, constraints: const BoxConstraints(), iconSize: 20, onPressed: () { updateMargin(_margins[index] - 0.1); }, ), ], ), ], ), ], ); } Widget _buildMarginsInput() { final l10n = AppLocalizations.of(context); return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [ Text('${l10n.pageMargins}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8), Row( children: [ Expanded( child: _buildMarginInput(l10n.marginTop, 0), ), const SizedBox(width: 8), Expanded( child: _buildMarginInput(l10n.marginRight, 1), ), const SizedBox(width: 8), Expanded( child: _buildMarginInput(l10n.marginBottom, 2), ), const SizedBox(width: 8), Expanded( child: _buildMarginInput(l10n.marginLeft, 3), ), ], ), ], ); } Widget _buildOrientationSelector() { final l10n = AppLocalizations.of(context); return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [ Text('${l10n.pageOrientation}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8), CheckboxListTile( title: Row( children: [ const Icon(Icons.auto_fix_high), const SizedBox(width: 8), Text(AppLocalizations.of(context).autoDetectPageOrientation), ], ), value: _autoDetectOrientation, contentPadding: EdgeInsets.zero, dense: true, onChanged: (value) { setState(() { _autoDetectOrientation = value!; if (_autoDetectOrientation) { _updateOrientation(); } }); _generatePreview(); }, ), const SizedBox(height: 8), Row( children: [ Expanded( child: RadioListTile<bool>( title: Row( children: [ const Icon(Icons.stay_current_portrait), const SizedBox(width: 8), Flexible( child: Text( l10n.portrait, overflow: TextOverflow.ellipsis, ), ), ], ), value: false, groupValue: _isLandscape, contentPadding: EdgeInsets.zero, dense: true, onChanged: _autoDetectOrientation ? null : (value) { setState(() { _isLandscape = value!; }); _generatePreview(); }, ), ), Expanded( child: RadioListTile<bool>( title: Row( children: [ const Icon(Icons.stay_current_landscape), const SizedBox(width: 8), Flexible( child: Text( l10n.landscape, overflow: TextOverflow.ellipsis, ), ), ], ), value: true, groupValue: _isLandscape, contentPadding: EdgeInsets.zero, dense: true, onChanged: _autoDetectOrientation ? null : (value) { setState(() { _isLandscape = value!; }); _generatePreview(); }, ), ), ], ), if (_autoDetectOrientation) Padding( padding: const EdgeInsets.only(top: 8.0), child: Container( padding: const EdgeInsets.all(8.0), decoration: BoxDecoration( color: Colors.blue.shade50, borderRadius: BorderRadius.circular(4.0), border: Border.all(color: Colors.blue.shade200), ), child: Row( children: [ Icon( Icons.info_outline, size: 16, color: Colors.blue.shade700, ), const SizedBox(width: 8), Expanded( child: Text( '${l10n.autoDetect}: ${_isLandscape ? l10n.landscape : l10n.portrait}', style: TextStyle( fontSize: 12, color: Colors.blue.shade700, ), ), ), ], ), ), ), ], ); } Widget _buildOutputPathSelector() { final l10n = AppLocalizations.of(context); return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [ Text('${l10n.location}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8), Row( children: [ Expanded( child: Container( padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8), decoration: BoxDecoration( border: Border.all(color: Colors.grey), borderRadius: BorderRadius.circular(4), ), child: Text( _outputPath ?? l10n.selectExportLocation, overflow: TextOverflow.ellipsis, ), ), ), const SizedBox(width: 8), ElevatedButton( onPressed: _selectDirectory, child: Text(l10n.browse), ), ], ), ], ); } Widget _buildPageRangeSelector() { final l10n = AppLocalizations.of(context); return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [ Text('${l10n.pageRange}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8), Row( children: [ Expanded( child: RadioListTile<PageRangeType>( title: Text(l10n.allPages), value: PageRangeType.all, groupValue: _pageRangeType, contentPadding: EdgeInsets.zero, dense: true, onChanged: (value) { setState(() { _pageRangeType = value!; }); if (_autoDetectOrientation) { _updateOrientation(); } _generatePreview(); }, ), ), Expanded( child: RadioListTile<PageRangeType>( title: Text(l10n.currentPage), value: PageRangeType.current, groupValue: _pageRangeType, contentPadding: EdgeInsets.zero, dense: true, onChanged: (value) { setState(() { _pageRangeType = value!; }); if (_pageRangeType == PageRangeType.current && _autoDetectOrientation) { _updateOrientation(); } _generatePreview(); }, ), ), ], ), RadioListTile<PageRangeType>( title: Row( children: [ Text('${l10n.customRange} '), Expanded( child: TextField( controller: _pageRangeController, decoration: InputDecoration( hintText: l10n.exportDialogRangeExample, isDense: true, contentPadding: const EdgeInsets.symmetric( horizontal: 8, vertical: 8, ), ), enabled: _pageRangeType == PageRangeType.custom, onChanged: (_) => _generatePreview(), ), ), ], ), value: PageRangeType.custom, groupValue: _pageRangeType, contentPadding: EdgeInsets.zero, dense: true, onChanged: (value) { setState(() { _pageRangeType = value!; }); if (_autoDetectOrientation) { _updateOrientation(); } _generatePreview(); }, ), ], ); } Widget _buildPageSizeSelector() { final l10n = AppLocalizations.of(context); final pageFormatMap = { 'A3': PdfPageFormat.a3, 'A4': PdfPageFormat.a4, 'A5': PdfPageFormat.a5, 'A6': PdfPageFormat.a6, 'Letter': PdfPageFormat.letter, 'Legal': PdfPageFormat.legal, }; return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [ Text('${l10n.pageSize}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8), DropdownButtonFormField<PdfPageFormat>( value: _pageFormat, decoration: const InputDecoration( border: OutlineInputBorder(), contentPadding: EdgeInsets.symmetric(horizontal: 12, vertical: 12), ), items: pageFormatMap.entries.map((entry) { final double widthCm = entry.value.width / PdfPageFormat.cm; final double heightCm = entry.value.height / PdfPageFormat.cm; return DropdownMenuItem<PdfPageFormat>( value: entry.value, child: Text( '${entry.key} (${widthCm.toStringAsFixed(1)} × ${heightCm.toStringAsFixed(1)} ${l10n.centimeter})', overflow: TextOverflow.ellipsis, ), ); }).toList(), onChanged: (value) { if (value != null) { setState(() { _pageFormat = value; }); _generatePreview(); } }, ), ], ); } Widget _buildPixelRatioSelector() { final l10n = AppLocalizations.of(context); return Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.start, children: [ Text('${l10n.outputQuality}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8), Row( children: [ Expanded( child: Slider( value: _pixelRatio, min: 1.0, max: 3.0, divisions: 2, label: _getPixelRatioLabel(), onChanged: (value) { setState(() { _pixelRatio = value; }); _generatePreview(); }, ), ), Text(_getPixelRatioLabel()), ], ), ], ); } Widget _buildPreviewArea() { final l10n = AppLocalizations.of(context); return Container( padding: const EdgeInsets.all(16), decoration: BoxDecoration( color: Colors.grey.shade200, borderRadius: BorderRadius.circular(8), ), child: Column( mainAxisSize: MainAxisSize.min, crossAxisAlignment: CrossAxisAlignment.stretch, children: [ Row( mainAxisAlignment: MainAxisAlignment.center, children: [ Text( l10n.preview, style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16), ), if (widget.pageCount > 1 && _pagePreviewCache.isNotEmpty) Text( l10n.previewPage( _previewPageIndex + 1, widget.pageCount, ), style: const TextStyle(fontSize: 14), ), ], ), const SizedBox(height: 16), SizedBox( height: 350, child: _isLoadingPreview ? const Center(child: CircularProgressIndicator()) : _previewImage != null ? Center( child: _exportType == ExportType.pdf ? AspectRatio( aspectRatio: _getEffectivePageFormat().width / _getEffectivePageFormat().height, child: Container( decoration: BoxDecoration( color: Colors.white, boxShadow: [ BoxShadow( color: Colors.grey.withAlpha(128), spreadRadius: 1, blurRadius: 5, offset: const Offset(0, 3), ), ], ), child: Padding( padding: EdgeInsets.fromLTRB( _margins[3] * 10, _margins[0] * 10, _margins[1] * 10, _margins[2] * 10, ), child: Image.memory( _previewImage!, fit: _getFitFromPolicy(), ), ), ), ) : Image.memory( _previewImage!, fit: BoxFit.contain, ), ) : Center( child: Text(l10n.canNotPreview), ), ), const SizedBox(height: 8), if (_exportType == ExportType.pdf) Center( child: Text( l10n.exportDimensions( _getEffectivePageFormat().width / PdfPageFormat.cm, _getEffectivePageFormat().height / PdfPageFormat.cm, _isLandscape ? l10n.landscape : l10n.portrait, ), style: const TextStyle(fontSize: 12), ), ), if (widget.pageCount > 1) Padding( padding: const EdgeInsets.only(top: 8.0), child: Row( mainAxisAlignment: MainAxisAlignment.center, children: [ IconButton( icon: const Icon(Icons.arrow_back), tooltip: l10n.previousPage, onPressed: _previewPageIndex > 0 ? () => _switchPreviewPage(_previewPageIndex - 1) : null, ), Text('${_previewPageIndex + 1} / ${widget.pageCount}'), IconButton( icon: const Icon(Icons.arrow_forward), tooltip: l10n.nextPage, onPressed: _previewPageIndex < widget.pageCount - 1 ? () => _switchPreviewPage(_previewPageIndex + 1) : null, ), ], ), ), ], ), ); } bool _detectPageOrientation(int pageIndex) { if (widget.controller == null) { return false; } try { final pages = widget.controller!.state.pages; if (pageIndex < 0 || pageIndex >= pages.length) { return false; } final page = pages[pageIndex]; if (page.containsKey('orientation')) { final orientation = page['orientation'] as String?; if (orientation != null && orientation.isNotEmpty) { return orientation.toLowerCase() == 'landscape'; } } final width = (page['width'] as num?)?.toDouble() ?? 210.0; final height = (page['height'] as num?)?.toDouble() ?? 297.0; return width > height; } catch (e) { EditPageLogger.rendererError( '检测页面方向失败"
建议新键: dialogExporttypeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightWrapSpacingChildrenExporttypeValuesMapTypeReturnChoicechipLabelTextTypeNameSelectedTypeOnselectedSelectedIfSelectedSetstateTypeTolistWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextFilenameStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightTextfieldControllerDecorationInputdecorationHinttextBorderConstOutlineinputborderSuffixtextExporttypePdfPdfExporttypeJpgJpgPngWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextFitmodeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildRadiolisttilePdffitpolicyTitleTextFitwidthValuePdffitpolicyWidthGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueExpandedChildRadiolisttilePdffitpolicyTitleTextFitheightValuePdffitpolicyHeightGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueRadiolisttilePdffitpolicyTitleTextFitcontainValuePdffitpolicyContainGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueWidgetStringLabelIntIndexFinalApplocalizationsOfContextFinalControllerTexteditingcontrollerTextIndexTostringasfixedVoidUpdatemarginDoubleValueFinalNewvalueValueValueSetstateIndexNewvalueControllerTextNewvalueTostringasfixedControllerSelectionTextselectionFrompositionTextpositionOffsetControllerTextLengthReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextLabelConstSizedboxHeightRowChildrenExpandedChildTextfieldDecorationInputdecorationBorderConstOutlineinputborderContentpaddingConstEdgeinsetsSymmetricHorizontalVerticalSuffixtextCentimeterKeyboardtypeConstTextinputtypeNumberwithoptionsDecimalTrueTextalignTextalignCenterControllerControllerOnchangedValueTryFinalNewvalueDoubleParseValueIfNewvalueSetstateIndexNewvalueCatchEColumnMainaxissizeMainaxissizeMinMainaxisalignmentMainaxisalignmentCenterChildrenIconbuttonIconConstIconIconsPaddingEdgeinsetsZeroConstraintsConstBoxconstraintsIconsizeOnpressedUpdatemarginIndexIconbuttonIconConstIconIconsPaddingEdgeinsetsZeroConstraintsConstBoxconstraintsIconsizeOnpressedUpdatemarginIndexWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextPagemarginsStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildMargintopConstSizedboxWidthExpandedChildMarginrightConstSizedboxWidthExpandedChildMarginbottomConstSizedboxWidthExpandedChildMarginleftWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextPageorientationStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightCheckboxlisttileTitleRowChildrenConstIconIconsConstSizedboxWidthTextApplocalizationsOfContextAutodetectpageorientationValueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueIfConstSizedboxHeightRowChildrenExpandedChildRadiolisttileBoolTitleRowChildrenConstIconIconsConstSizedboxWidthFlexibleChildTextPortraitOverflowTextoverflowEllipsisValueFalseGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedNullValueSetstateValueExpandedChildRadiolisttileBoolTitleRowChildrenConstIconIconsConstSizedboxWidthFlexibleChildTextLandscapeOverflowTextoverflowEllipsisValueTrueGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedNullValueSetstateValueIfPaddingPaddingConstEdgeinsetsOnlyTopChildContainerPaddingConstEdgeinsetsAllDecorationBoxdecorationColorColorsBlueBorderradiusBorderradiusCircularBorderBorderAllColorColorsBlueChildRowChildrenIconIconsSizeColorColorsBlueConstSizedboxWidthExpandedChildTextAutodetectLandscapePortraitStyleTextstyleFontsizeColorColorsBlueWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextLocationStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildContainerPaddingConstEdgeinsetsSymmetricHorizontalVerticalDecorationBoxdecorationBorderBorderAllColorColorsGreyBorderradiusBorderradiusCircularChildTextSelectexportlocationOverflowTextoverflowEllipsisConstSizedboxWidthElevatedbuttonOnpressedChildTextBrowseWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextPagerangeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildRadiolisttilePagerangetypeTitleTextAllpagesValuePagerangetypeAllGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueIfExpandedChildRadiolisttilePagerangetypeTitleTextCurrentpageValuePagerangetypeCurrentGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueIfPagerangetypeCurrentRadiolisttilePagerangetypeTitleRowChildrenTextCustomrangeExpandedChildTextfieldControllerDecorationInputdecorationHinttextExportdialograngeexampleIsdenseTrueContentpaddingConstEdgeinsetsSymmetricHorizontalVerticalEnabledPagerangetypeCustomOnchangedValuePagerangetypeCustomGroupvalueContentpaddingEdgeinsetsZeroDenseTrueOnchangedValueSetstateValueIfWidgetFinalApplocalizationsOfContextFinalPageformatmapPdfpageformatPdfpageformatPdfpageformatPdfpageformatLetterPdfpageformatLetterLegalPdfpageformatLegalReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextPagesizeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightDropdownbuttonformfieldPdfpageformatValueDecorationConstInputdecorationBorderOutlineinputborderContentpaddingEdgeinsetsSymmetricHorizontalVerticalItemsPageformatmapEntriesMapEntryFinalDoubleWidthcmEntryValueWidthPdfpageformatCmFinalDoubleHeightcmEntryValueHeightPdfpageformatCmReturnDropdownmenuitemPdfpageformatValueEntryValueChildTextEntryKeyWidthcmTostringasfixedHeightcmTostringasfixedCentimeterOverflowTextoverflowEllipsisTolistOnchangedValueIfValueNullSetstateValueWidgetFinalApplocalizationsOfContextReturnColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStartChildrenTextOutputqualityStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildSliderValueMinMaxDivisionsLabelOnchangedValueSetstateValueTextWidgetFinalApplocalizationsOfContextReturnContainerPaddingConstEdgeinsetsAllDecorationBoxdecorationColorColorsGreyBorderradiusBorderradiusCircularChildColumnMainaxissizeMainaxissizeMinCrossaxisalignmentCrossaxisalignmentStretchChildrenRowMainaxisalignmentMainaxisalignmentCenterChildrenTextPreviewStyleConstTextstyleFontweightFontweightBoldFontsizeIfWidgetPagecountIsnotemptyTextPreviewpageWidgetPagecountStyleConstTextstyleFontsizeConstSizedboxHeightSizedboxHeightChildConstCenterChildCircularprogressindicatorNullCenterChildExporttypePdfAspectratioAspectratioWidthHeightChildContainerDecorationBoxdecorationColorColorsWhiteBoxshadowBoxshadowColorColorsGreyWithalphaSpreadradiusBlurradiusOffsetConstOffsetChildPaddingPaddingEdgeinsetsFromltrbChildImageMemoryFitImageMemoryFitBoxfitContainCenterChildTextCannotpreviewConstSizedboxHeightIfExporttypePdfCenterChildTextExportdimensionsWidthPdfpageformatCmHeightPdfpageformatCmLandscapePortraitStyleConstTextstyleFontsizeIfWidgetPagecountPaddingPaddingConstEdgeinsetsOnlyTopChildRowMainaxisalignmentMainaxisalignmentCenterChildrenIconbuttonIconConstIconIconsTooltipPreviouspageOnpressedNullTextWidgetPagecountIconbuttonIconConstIconIconsTooltipNextpageOnpressedWidgetPagecountNullBoolIntPageindexIfWidgetControllerNullReturnFalseTryFinalPagesWidgetControllerStatePagesIfPageindexPageindexPagesLengthReturnFalseFinalPagePagesPageindexIfPageContainskeyOrientationFinalOrientationPageOrientationAsStringIfOrientationNullOrientationIsnotemptyReturnOrientationTolowercaseLandscapeFinalWidthPageWidthAsNumTodoubleFinalHeightPageHeightAsNumTodoubleReturnWidthHeightCatchEEditpageloggerRenderererror
代码行: Future.microtask(() {
----------------------------------------
文件: presentation\widgets\practice\export\export_dialog.dart, 行: 993
硬编码文本: "${l10n.createExportDirectoryFailed}: $e')), ); return; } } setState(() { _isExporting = true; }); final extraParams = <String, dynamic>{}; if (_exportType == ExportType.pdf) { final pageFormat = _getEffectivePageFormat(); extraParams['pageFormat'] = pageFormat; extraParams['pageRangeType'] = _pageRangeType; if (_pageRangeType == PageRangeType.current) { extraParams['currentPage'] = widget.currentPageIndex; } else if (_pageRangeType == PageRangeType.custom) { extraParams['pageRange'] = _pageRangeController.text; } extraParams['margins'] = _margins; extraParams['fitPolicy'] = _fitPolicy; } debugPrint( 'ExportDialog: 调用导出回调, 路径=$_outputPath, 类型=${_exportType.name}, 文件名=$fileName, 像素比例=$_pixelRatio, 额外参数=$extraParams"
建议新键: dialogCreateexportdirectoryfailedEReturnSetstateTrueFinalExtraparamsStringDynamicIfExporttypePdfFinalPageformatExtraparamsPageformatPageformatExtraparamsPagerangetypeIfPagerangetypeCurrentExtraparamsCurrentpageWidgetCurrentpageindexElseIfPagerangetypeCustomExtraparamsPagerangeTextExtraparamsMarginsExtraparamsFitpolicyDebugprintExportdialog路径类型NameFilenameExtraparams
代码行: );
----------------------------------------
文件: presentation\widgets\practice\property_panels\m3_practice_property_panel_base.dart, 行: 172
硬编码文本: "0%', style: textTheme.bodySmall), Text('50%', style: textTheme.bodySmall), Text('100%', style: textTheme.bodySmall), ], ), ], ); }, ), ], ), ), ], ); } Widget m3ExpansionTile({ required BuildContext context, required String title, List<Widget> children = const <Widget>[], bool initiallyExpanded = false, }) { final colorScheme = Theme.of(context).colorScheme; final textTheme = Theme.of(context).textTheme; return Material( color: Colors.transparent, child: Theme( data: Theme.of(context).copyWith( dividerColor: Colors.transparent, ), child: ExpansionTile( title: Text( title, style: textTheme.titleMedium?.copyWith( color: colorScheme.onSurface, ), ), initiallyExpanded: initiallyExpanded, collapsedIconColor: colorScheme.onSurfaceVariant, iconColor: colorScheme.primary, backgroundColor: colorScheme.surfaceContainerLow, collapsedBackgroundColor: colorScheme.surfaceContainerLow, childrenPadding: EdgeInsets.zero, children: children, ), ), ); } Widget _buildOptimizedNumberField({ required BuildContext context, required String label, required double value, String? suffix, required Function(double) onChanged, }) { final colorScheme = Theme.of(context).colorScheme; final textTheme = Theme.of(context).textTheme; final String key = label; final String valueStr = value.toStringAsFixed(0); if (!_numberControllers.containsKey(key)) { _numberControllers[key] = TextEditingController(text: valueStr); } else { if (_numberControllers[key]!.text != valueStr) { WidgetsBinding.instance.addPostFrameCallback((_) { if (_numberControllers.containsKey(key)) { _numberControllers[key]!.value = TextEditingValue( text: valueStr, selection: _numberControllers[key]!.selection, ); } }); } } return Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( label, style: textTheme.bodyMedium?.copyWith( color: colorScheme.onSurfaceVariant, ), ), const SizedBox(height: 4.0), TextField( controller: _numberControllers[key], keyboardType: TextInputType.number, decoration: InputDecoration( isDense: true, contentPadding: const EdgeInsets.symmetric( horizontal: 12.0, vertical: 8.0, ), border: OutlineInputBorder( borderRadius: BorderRadius.circular(8.0), borderSide: BorderSide( color: colorScheme.outline, ), ), enabledBorder: OutlineInputBorder( borderRadius: BorderRadius.circular(8.0), borderSide: BorderSide( color: colorScheme.outline, ), ), focusedBorder: OutlineInputBorder( borderRadius: BorderRadius.circular(8.0), borderSide: BorderSide( color: colorScheme.primary, width: 2.0, ), ), suffixText: suffix, ), onChanged: (text) { if (_debounceTimer?.isActive ?? false) { _debounceTimer!.cancel(); } if (text == _lastProcessedValue) { return; } EditPageLogger.propertyPanelDebug( '数字输入字段变更"
建议新键: styleTextthemeBodysmallTextStyleTextthemeBodysmallTextStyleTextthemeBodysmallWidgetRequiredBuildcontextContextRequiredStringTitleListWidgetChildrenConstWidgetBoolInitiallyexpandedFalseFinalColorschemeThemeOfContextColorschemeFinalTextthemeThemeOfContextTextthemeReturnMaterialColorColorsTransparentChildThemeDataThemeOfContextCopywithDividercolorColorsTransparentChildExpansiontileTitleTextTitleStyleTextthemeTitlemediumCopywithColorColorschemeOnsurfaceInitiallyexpandedInitiallyexpandedCollapsediconcolorColorschemeOnsurfacevariantIconcolorColorschemePrimaryBackgroundcolorColorschemeSurfacecontainerlowCollapsedbackgroundcolorColorschemeSurfacecontainerlowChildrenpaddingEdgeinsetsZeroChildrenChildrenWidgetRequiredBuildcontextContextRequiredStringLabelRequiredDoubleValueStringSuffixRequiredFunctionDoubleOnchangedFinalColorschemeThemeOfContextColorschemeFinalTextthemeThemeOfContextTextthemeFinalStringKeyLabelFinalStringValuestrValueTostringasfixedIfContainskeyKeyKeyTexteditingcontrollerTextValuestrElseIfKeyTextValuestrWidgetsbindingInstanceAddpostframecallbackIfContainskeyKeyKeyValueTexteditingvalueTextValuestrSelectionKeySelectionReturnColumnCrossaxisalignmentCrossaxisalignmentStartChildrenTextLabelStyleTextthemeBodymediumCopywithColorColorschemeOnsurfacevariantConstSizedboxHeightTextfieldControllerKeyKeyboardtypeTextinputtypeNumberDecorationInputdecorationIsdenseTrueContentpaddingConstEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderBorderradiusBorderradiusCircularBordersideBordersideColorColorschemeOutlineEnabledborderOutlineinputborderBorderradiusBorderradiusCircularBordersideBordersideColorColorschemeOutlineFocusedborderOutlineinputborderBorderradiusBorderradiusCircularBordersideBordersideColorColorschemePrimaryWidthSuffixtextSuffixOnchangedTextIfIsactiveFalseCancelIfTextReturnEditpageloggerPropertypaneldebug
代码行: ),
----------------------------------------
文件: presentation\widgets\practice\property_panels\m3_practice_property_panel_group.dart, 行: 170
硬编码文本: "${l10n.name}:', style: const TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ), ), subtitle: Text( name, style: TextStyle( fontSize: 16, color: colorScheme.onSurface, fontWeight: FontWeight.w500, ), ), trailing: IconButton( icon: const Icon(Icons.edit), tooltip: l10n.rename, onPressed: _startEditingName, ), ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: ListTile( title: Text( '${l10n.elements}:', style: const TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ), ), subtitle: Text( '${children.length} ${l10n.elements}', style: TextStyle( fontSize: 16, color: colorScheme.onSurface, fontWeight: FontWeight.w500, ), ), ), ), const SizedBox(height: 8), if (layer != null) Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: ListTile( title: Text( '${l10n.layer}:', style: const TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ), ), subtitle: Text( layer['name'] as String? ?? l10n.layer1, style: TextStyle( fontSize: 16, color: colorScheme.onSurface, fontWeight: FontWeight.w500, ), ), trailing: IconButton( icon: const Icon(Icons.launch), tooltip: l10n.selectTargetLayer, onPressed: () { if (layerId != null) { widget.controller.selectLayer(layerId); } }, ), ), ), ], ), ), ), const SizedBox(height: 8), Card( margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0), ), child: Padding( padding: const EdgeInsets.all(16.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Row( children: [ Icon( Icons.visibility, size: 20, color: colorScheme.primary, ), const SizedBox(width: 8), Text( l10n.stateAndDisplay, style: textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold, color: colorScheme.onSurface, ), ), ], ), const SizedBox(height: 16), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: SwitchListTile( title: Text( l10n.locked, style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold, ), ), value: isLocked, activeColor: colorScheme.primary, onChanged: (value) { _updateElementProperty('locked', value); }, secondary: Icon( isLocked ? Icons.lock : Icons.lock_open, color: isLocked ? colorScheme.primary : colorScheme.onSurfaceVariant, ), ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: SwitchListTile( title: Text( l10n.visible, style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold, ), ), value: !isHidden, activeColor: colorScheme.primary, onChanged: (value) { _updateElementProperty('hidden', !value); }, secondary: Icon( isHidden ? Icons.visibility_off : Icons.visibility, color: isHidden ? colorScheme.onSurfaceVariant : colorScheme.primary, ), ), ), const SizedBox(height: 16), Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Text( '${l10n.opacity}:', style: const TextStyle( fontWeight: FontWeight.bold, ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding: const EdgeInsets.all(8.0), child: Row( children: [ Expanded( child: Slider( value: opacity, min: 0.0, max: 1.0, divisions: 100, label: '${(opacity * 100).round()}%', activeColor: colorScheme.primary, thumbColor: colorScheme.primary, onChanged: (value) { _updateElementProperty('opacity', value); }, ), ), SizedBox( width: 50, child: Text( '${(opacity * 100).round()}%', style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold, ), textAlign: TextAlign.center, ), ), ], ), ), ), ], ), ], ), ), ), const SizedBox(height: 8), Card( margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0), ), child: Padding( padding: const EdgeInsets.all(16.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Row( children: [ Icon( Icons.category, size: 20, color: colorScheme.primary, ), const SizedBox(width: 8), Text( l10n.groupOperations, style: textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold, color: colorScheme.onSurface, ), ), ], ), const SizedBox(height: 16), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding: const EdgeInsets.all(8.0), child: Column( children: [ ListTile( leading: Icon( Icons.edit, color: colorScheme.primary, ), title: Text( l10n.editGroupContents, style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold, ), ), subtitle: Text( l10n.editGroupContentsDescription, style: TextStyle( color: colorScheme.onSurfaceVariant, ), ), onTap: () { _enterGroupEditMode(); }, ), const Divider(), ListTile( leading: Icon( Icons.unfold_more, color: colorScheme.primary, ), title: Text( l10n.ungroup, style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold, ), ), subtitle: Text( l10n.ungroupDescription, style: TextStyle( color: colorScheme.onSurfaceVariant, ), ), onTap: () { _ungroupElements(); }, ), ], ), ), ), ], ), ), ), const SizedBox(height: 8), Card( margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0), ), child: Padding( padding: const EdgeInsets.all(16.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Row( children: [ Icon( Icons.delete_outline, size: 20, color: colorScheme.error, ), const SizedBox(width: 8), Text( l10n.dangerZone, style: textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold, color: colorScheme.error, ), ), ], ), const SizedBox(height: 16), ElevatedButton.icon( onPressed: () { _deleteGroup(); }, icon: Icon( Icons.delete, color: colorScheme.error, size: 18, ), label: Text( l10n.deleteGroup, style: textTheme.labelLarge?.copyWith( color: colorScheme.error, ), ), style: ElevatedButton.styleFrom( backgroundColor: colorScheme.errorContainer, foregroundColor: colorScheme.error, minimumSize: const Size.fromHeight(48), ), ), ], ), ), ), if (children.isNotEmpty) ...[ const SizedBox(height: 8), Card( margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0), elevation: 0, color: colorScheme.surfaceContainerLow, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0), ), child: Padding( padding: const EdgeInsets.all(16.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Row( children: [ Icon( Icons.format_list_bulleted, size: 20, color: colorScheme.primary, ), const SizedBox(width: 8), Text( l10n.groupElements, style: textTheme.titleMedium?.copyWith( fontWeight: FontWeight.bold, color: colorScheme.onSurface, ), ), ], ), const SizedBox(height: 16), ListView.builder( shrinkWrap: true, physics: const NeverScrollableScrollPhysics(), itemCount: children.length, itemBuilder: (context, index) { final element = children[index]; final elementName = element['name'] as String? ?? l10n.unnamedElement; final type = element['type'] as String; final isHidden = element['hidden'] as bool? ?? false; final isLocked = element['locked'] as bool? ?? false; final opacity = (element['opacity'] as num?)?.toDouble() ?? 1.0; IconData iconData; switch (type) { case 'text': iconData = Icons.text_fields; break; case 'image': iconData = Icons.image; break; case 'collection': iconData = Icons.font_download; break; case 'group': iconData = Icons.group_work; break; default: iconData = Icons.crop_square; } return Card( margin: const EdgeInsets.symmetric( vertical: 2, horizontal: 0), elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8), ), child: ListTile( leading: Icon( iconData, color: colorScheme.onSurfaceVariant, ), title: Text( elementName, overflow: TextOverflow.ellipsis, style: textTheme.bodyMedium?.copyWith( color: colorScheme.onSurface, fontWeight: FontWeight.w500, ), ), subtitle: Text( '${l10n.opacity}: ${(opacity * 100).round()}%', style: textTheme.bodySmall?.copyWith( color: colorScheme.onSurfaceVariant, ), ), trailing: Row( mainAxisSize: MainAxisSize.min, children: [ Icon( isHidden ? Icons.visibility_off : Icons.visibility, size: 16, color: isHidden ? colorScheme.onSurfaceVariant : colorScheme.primary, ), const SizedBox(width: 8), Icon( isLocked ? Icons.lock : Icons.lock_open, size: 16, color: isLocked ? colorScheme.primary : colorScheme.onSurfaceVariant, ), ], ), ), ); }, ), ], ), ), ), ], ], ); } @override void didUpdateWidget(_M3GroupPropertyPanelContent oldWidget) { super.didUpdateWidget(oldWidget); if (oldWidget.element['id'] != widget.element['id']) { final name = widget.element['name'] as String? ?? 'Group'; _nameController.text = name; _isEditingName = false; } } @override void dispose() { _nameFocusNode.removeListener(_onFocusChange); _nameController.dispose(); _nameFocusNode.dispose(); super.dispose(); } @override void initState() { super.initState(); final name = widget.element['name'] as String? ?? 'Group'; _nameController = TextEditingController(text: name); _nameFocusNode = FocusNode(); _nameFocusNode.addListener(_onFocusChange); } void _applyNameChange() { final newName = _nameController.text.trim(); final groupId = widget.element['id'] as String; final oldName = widget.element['name'] as String? ?? 'Group'; if (newName.isNotEmpty && newName != oldName) { EditPageLogger.propertyPanelDebug( '分组名称修改"
建议新键: nameStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextNameStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightTrailingIconbuttonIconConstIconIconsEditTooltipRenameOnpressedConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileTitleTextElementsStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextChildrenLengthElementsStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightConstSizedboxHeightIfLayerNullCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileTitleTextLayerStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextLayerNameAsStringStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightTrailingIconbuttonIconConstIconIconsLaunchTooltipSelecttargetlayerOnpressedIfLayeridNullWidgetControllerSelectlayerLayeridConstSizedboxHeightCardMarginConstEdgeinsetsSymmetricHorizontalVerticalElevationColorColorschemeSurfacecontainerlowShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowChildrenIconIconsVisibilitySizeColorColorschemePrimaryConstSizedboxWidthTextStateanddisplayStyleTextthemeTitlemediumCopywithFontweightFontweightBoldColorColorschemeOnsurfaceConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextLockedStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldValueIslockedActivecolorColorschemePrimaryOnchangedValueLockedValueSecondaryIconIslockedIconsLockIconsColorIslockedColorschemePrimaryColorschemeOnsurfacevariantConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextVisibleStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldValueIshiddenActivecolorColorschemePrimaryOnchangedValueHiddenValueSecondaryIconIshiddenIconsIconsVisibilityColorIshiddenColorschemeOnsurfacevariantColorschemePrimaryConstSizedboxHeightColumnCrossaxisalignmentCrossaxisalignmentStartChildrenTextOpacityStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowChildrenExpandedChildSliderValueOpacityMinMaxDivisionsLabelOpacityRoundActivecolorColorschemePrimaryThumbcolorColorschemePrimaryOnchangedValueOpacityValueSizedboxWidthChildTextOpacityRoundStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldTextalignTextalignCenterConstSizedboxHeightCardMarginConstEdgeinsetsSymmetricHorizontalVerticalElevationColorColorschemeSurfacecontainerlowShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowChildrenIconIconsCategorySizeColorColorschemePrimaryConstSizedboxWidthTextGroupoperationsStyleTextthemeTitlemediumCopywithFontweightFontweightBoldColorColorschemeOnsurfaceConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnChildrenListtileLeadingIconIconsEditColorColorschemePrimaryTitleTextEditgroupcontentsStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldSubtitleTextEditgroupcontentsdescriptionStyleTextstyleColorColorschemeOnsurfacevariantOntapConstDividerListtileLeadingIconIconsColorColorschemePrimaryTitleTextUngroupStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldSubtitleTextUngroupdescriptionStyleTextstyleColorColorschemeOnsurfacevariantOntapConstSizedboxHeightCardMarginConstEdgeinsetsSymmetricHorizontalVerticalElevationColorColorschemeSurfacecontainerlowShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowChildrenIconIconsSizeColorColorschemeErrorConstSizedboxWidthTextDangerzoneStyleTextthemeTitlemediumCopywithFontweightFontweightBoldColorColorschemeErrorConstSizedboxHeightElevatedbuttonIconOnpressedIconIconIconsDeleteColorColorschemeErrorSizeLabelTextDeletegroupStyleTextthemeLabellargeCopywithColorColorschemeErrorStyleElevatedbuttonStylefromBackgroundcolorColorschemeErrorcontainerForegroundcolorColorschemeErrorMinimumsizeConstSizeFromheightIfChildrenIsnotemptyConstSizedboxHeightCardMarginConstEdgeinsetsSymmetricHorizontalVerticalElevationColorColorschemeSurfacecontainerlowShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowChildrenIconIconsSizeColorColorschemePrimaryConstSizedboxWidthTextGroupelementsStyleTextthemeTitlemediumCopywithFontweightFontweightBoldColorColorschemeOnsurfaceConstSizedboxHeightListviewBuilderShrinkwrapTruePhysicsConstNeverscrollablescrollphysicsItemcountChildrenLengthItembuilderContextIndexFinalElementChildrenIndexFinalElementnameElementNameAsStringUnnamedelementFinalTypeElementTypeAsStringFinalIshiddenElementHiddenAsBoolFalseFinalIslockedElementLockedAsBoolFalseFinalOpacityElementOpacityAsNumTodoubleIcondataIcondataSwitchTypeCaseTextIcondataIconsBreakCaseImageIcondataIconsImageBreakCaseCollectionIcondataIconsBreakCaseGroupIcondataIconsBreakDefaultIcondataIconsReturnCardMarginConstEdgeinsetsSymmetricVerticalHorizontalElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileLeadingIconIcondataColorColorschemeOnsurfacevariantTitleTextElementnameOverflowTextoverflowEllipsisStyleTextthemeBodymediumCopywithColorColorschemeOnsurfaceFontweightFontweightSubtitleTextOpacityOpacityRoundStyleTextthemeBodysmallCopywithColorColorschemeOnsurfacevariantTrailingRowMainaxissizeMainaxissizeMinChildrenIconIshiddenIconsIconsVisibilitySizeColorIshiddenColorschemeOnsurfacevariantColorschemePrimaryConstSizedboxWidthIconIslockedIconsLockIconsSizeColorIslockedColorschemePrimaryColorschemeOnsurfacevariantOverrideVoidDidupdatewidgetOldwidgetSuperDidupdatewidgetOldwidgetIfOldwidgetElementIdWidgetElementIdFinalNameWidgetElementNameAsStringGroupTextNameFalseOverrideVoidDisposeRemovelistenerDisposeDisposeSuperDisposeOverrideVoidInitstateSuperInitstateFinalNameWidgetElementNameAsStringGroupTexteditingcontrollerTextNameFocusnodeAddlistenerVoidFinalNewnameTextTrimFinalGroupidWidgetElementIdAsStringFinalOldnameWidgetElementNameAsStringGroupIfNewnameIsnotemptyNewnameOldnameEditpageloggerPropertypaneldebug
代码行: child: ListTile(
----------------------------------------
文件: presentation\widgets\practice\property_panels\m3_practice_property_panel_layer.dart, 行: 141
硬编码文本: "${l10n.name}:', style: const TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ), ), subtitle: Text( name, style: TextStyle( fontSize: 16, color: colorScheme.onSurface, fontWeight: FontWeight.w500, ), ), trailing: IconButton( icon: const Icon(Icons.edit), tooltip: l10n.rename, onPressed: _startEditingName, ), ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: ListTile( title: Text( '${l10n.position}:', style: const TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ), ), subtitle: Text( '$layerPosition / $totalLayers', style: TextStyle( fontSize: 16, color: colorScheme.onSurface, fontWeight: FontWeight.w500, ), ), ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: ListTile( title: Text( '${l10n.elements}:', style: const TextStyle( fontWeight: FontWeight.bold, fontSize: 14, ), ), subtitle: Text( '$elementCount ${l10n.elements}', style: TextStyle( fontSize: 16, color: colorScheme.onSurface, fontWeight: FontWeight.w500, ), ), ), ), ], ), const SizedBox(height: 8), M3PanelStyles.buildPersistentPanelCard( context: context, panelId: 'layer_state_display', title: l10n.stateAndDisplay, defaultExpanded: true, children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: SwitchListTile( title: Text( l10n.visible, style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold, ), ), value: isVisible, activeColor: colorScheme.primary, onChanged: (value) { EditPageLogger.propertyPanelDebug( '图层可见性变更"
建议新键: nameStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextNameStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightTrailingIconbuttonIconConstIconIconsEditTooltipRenameOnpressedConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileTitleTextPositionStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextLayerpositionTotallayersStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileTitleTextElementsStyleConstTextstyleFontweightFontweightBoldFontsizeSubtitleTextElementcountElementsStyleTextstyleFontsizeColorColorschemeOnsurfaceFontweightFontweightConstSizedboxHeightBuildpersistentpanelcardContextContextPanelidTitleStateanddisplayDefaultexpandedTrueChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextVisibleStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldValueIsvisibleActivecolorColorschemePrimaryOnchangedValueEditpageloggerPropertypaneldebug
代码行: borderRadius: BorderRadius.circular(8.0),
----------------------------------------
文件: presentation\widgets\practice\property_panels\m3_practice_property_panel_layer.dart, 行: 310
硬编码文本: "${l10n.opacity}:', style: const TextStyle( fontWeight: FontWeight.bold, ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding: const EdgeInsets.all(8.0), child: Row( children: [ Expanded( child: Slider( value: opacity, min: 0.0, max: 1.0, divisions: 100, label: '${(opacity * 100).round()}%', activeColor: colorScheme.primary, thumbColor: colorScheme.primary, onChanged: (value) { EditPageLogger.propertyPanelDebug( '图层不透明度变更"
建议新键: opacityStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowChildrenExpandedChildSliderValueOpacityMinMaxDivisionsLabelOpacityRoundActivecolorColorschemePrimaryThumbcolorColorschemePrimaryOnchangedValueEditpageloggerPropertypaneldebug
代码行: const SizedBox(height: 16),
----------------------------------------
文件: presentation\widgets\practice\property_panels\m3_practice_property_panel_layer.dart, 行: 356
硬编码文本: "${(opacity * 100).round()}%', style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold, ), textAlign: TextAlign.center, ), ), ], ), ), ), ], ), ], ), const SizedBox(height: 8), M3PanelStyles.buildPersistentPanelCard( context: context, panelId: 'layer_operations', title: l10n.layerOperations, defaultExpanded: true, children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding: const EdgeInsets.all(8.0), child: SingleChildScrollView( scrollDirection: Axis.horizontal, child: Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: [ _buildActionButton( context: context, icon: Icons.vertical_align_top, label: l10n.bringToFront, tooltip: l10n.bringLayerToFront, onPressed: isTopLayer ? null : () => _moveLayer('top'), colorScheme: colorScheme, textTheme: textTheme, ), _buildActionButton( context: context, icon: Icons.arrow_upward, label: l10n.moveUp, tooltip: l10n.moveLayerUp, onPressed: isTopLayer ? null : () => _moveLayer('up'), colorScheme: colorScheme, textTheme: textTheme, ), _buildActionButton( context: context, icon: Icons.arrow_downward, label: l10n.moveDown, tooltip: l10n.moveLayerDown, onPressed: isBottomLayer ? null : () => _moveLayer('down'), colorScheme: colorScheme, textTheme: textTheme, ), _buildActionButton( context: context, icon: Icons.vertical_align_bottom, label: l10n.sendToBack, tooltip: l10n.sendToBack, onPressed: isBottomLayer ? null : () => _moveLayer('bottom'), colorScheme: colorScheme, textTheme: textTheme, ), ], ), ), ), ), const SizedBox(height: 16), Center( child: SizedBox( width: double.infinity, child: ElevatedButton.icon( onPressed: () => _confirmDeleteLayer(context), icon: Icon( Icons.delete, color: colorScheme.error, size: 18, ), label: Text( l10n.deleteLayer, style: textTheme.labelLarge?.copyWith( color: colorScheme.error, ), ), style: ElevatedButton.styleFrom( backgroundColor: colorScheme.errorContainer, foregroundColor: colorScheme.error, minimumSize: const Size.fromHeight(48), ), ), ), ), ], ), if (elementCount > 0) ...[ const SizedBox(height: 8), M3PanelStyles.buildPersistentPanelCard( context: context, panelId: 'layer_elements', title: l10n.layerElements, defaultExpanded: true, children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding: const EdgeInsets.all(8.0), child: Row( mainAxisAlignment: MainAxisAlignment.spaceBetween, children: [ Text( '${l10n.total}: $elementCount ${l10n.elements}', style: TextStyle( color: colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold, ), ), Row( children: [ IconButton( icon: const Icon(Icons.visibility), tooltip: l10n.showHideAllElements, onPressed: () => _toggleAllElementsVisibility(elementsInLayer), iconSize: 20, ), IconButton( icon: const Icon(Icons.lock_outline), tooltip: l10n.lockUnlockAllElements, onPressed: () => _toggleAllElementsLock(elementsInLayer), iconSize: 20, ), ], ), ], ), ), ), const Divider(), _buildLayerElementsList(elementsInLayer, context), ], ), ], ], ); } @override void didUpdateWidget(_M3LayerPropertyPanelContent oldWidget) { super.didUpdateWidget(oldWidget); if (oldWidget.layer['id'] != widget.layer['id']) { final name = widget.layer['name'] as String? ?? 'Layer 1'; _nameController.text = name; _isEditingName = false; } } @override void dispose() { _nameFocusNode.removeListener(_onFocusChange); _nameController.dispose(); _nameFocusNode.dispose(); _elementNameController.dispose(); _elementNameFocusNode.dispose(); super.dispose(); } @override void initState() { super.initState(); final name = widget.layer['name'] as String? ?? 'Layer 1'; _nameController = TextEditingController(text: name); _nameFocusNode = FocusNode(); _nameFocusNode.addListener(_onFocusChange); } void _applyElementNameChange() { if (_editingElementId != null) { final newName = _elementNameController.text.trim(); if (newName.isNotEmpty) { widget.controller .updateElementProperties(_editingElementId!, {'name': newName}); } setState(() { _editingElementId = null; }); } } void _applyNameChange() { final newName = _nameController.text.trim(); final oldName = widget.layer['name'] as String? ?? 'Layer 1'; EditPageLogger.propertyPanelDebug( '图层名称变更"
建议新键: opacityRoundStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldTextalignTextalignCenterConstSizedboxHeightBuildpersistentpanelcardContextContextPanelidTitleLayeroperationsDefaultexpandedTrueChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildSinglechildscrollviewScrolldirectionAxisHorizontalChildRowMainaxisalignmentMainaxisalignmentSpaceevenlyChildrenContextContextIconIconsLabelBringtofrontTooltipBringlayertofrontOnpressedIstoplayerNullTopColorschemeColorschemeTextthemeTextthemeContextContextIconIconsLabelMoveupTooltipMovelayerupOnpressedIstoplayerNullUpColorschemeColorschemeTextthemeTextthemeContextContextIconIconsLabelMovedownTooltipMovelayerdownOnpressedIsbottomlayerNullDownColorschemeColorschemeTextthemeTextthemeContextContextIconIconsLabelSendtobackTooltipSendtobackOnpressedIsbottomlayerNullBottomColorschemeColorschemeTextthemeTextthemeConstSizedboxHeightCenterChildSizedboxWidthDoubleInfinityChildElevatedbuttonIconOnpressedContextIconIconIconsDeleteColorColorschemeErrorSizeLabelTextDeletelayerStyleTextthemeLabellargeCopywithColorColorschemeErrorStyleElevatedbuttonStylefromBackgroundcolorColorschemeErrorcontainerForegroundcolorColorschemeErrorMinimumsizeConstSizeFromheightIfElementcountConstSizedboxHeightBuildpersistentpanelcardContextContextPanelidTitleLayerelementsDefaultexpandedTrueChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowMainaxisalignmentMainaxisalignmentSpacebetweenChildrenTextTotalElementcountElementsStyleTextstyleColorColorschemeOnsurfacevariantFontweightFontweightBoldRowChildrenIconbuttonIconConstIconIconsVisibilityTooltipShowhideallelementsOnpressedElementsinlayerIconsizeIconbuttonIconConstIconIconsTooltipLockunlockallelementsOnpressedElementsinlayerIconsizeConstDividerElementsinlayerContextOverrideVoidDidupdatewidgetOldwidgetSuperDidupdatewidgetOldwidgetIfOldwidgetLayerIdWidgetLayerIdFinalNameWidgetLayerNameAsStringLayerTextNameFalseOverrideVoidDisposeRemovelistenerDisposeDisposeDisposeDisposeSuperDisposeOverrideVoidInitstateSuperInitstateFinalNameWidgetLayerNameAsStringLayerTexteditingcontrollerTextNameFocusnodeAddlistenerVoidIfNullFinalNewnameTextTrimIfNewnameIsnotemptyWidgetControllerUpdateelementpropertiesNameNewnameSetstateNullVoidFinalNewnameTextTrimFinalOldnameWidgetLayerNameAsStringLayerEditpageloggerPropertypaneldebug
代码行: ),
----------------------------------------
文件: presentation\widgets\practice\property_panels\m3_practice_property_panel_multi.dart, 行: 102
硬编码文本: "${l10n.selected}: ${selectedIds.length} ${l10n.elements}', style: textTheme.titleLarge?.copyWith( fontWeight: FontWeight.bold, color: colorScheme.onSurface, ), ), ], ), ), M3PanelStyles.buildPersistentPanelCard( context: context, panelId: 'multi_selection_basic_properties', title: l10n.commonProperties, defaultExpanded: true, children: [ Row( children: [ Expanded( child: Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: SwitchListTile( title: Text( l10n.locked, style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold, ), ), value: commonLocked ?? false, activeColor: colorScheme.primary, onChanged: commonLocked != null ? (value) { _updateAllElements('locked', value); } : null, secondary: Icon( commonLocked == true ? Icons.lock : Icons.lock_open, color: commonLocked == true ? colorScheme.primary : colorScheme.onSurfaceVariant, ), dense: true, ), ), ), const SizedBox(width: 8), Expanded( child: Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: SwitchListTile( title: Text( l10n.visible, style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold, ), ), value: !(commonHidden ?? false), activeColor: colorScheme.primary, onChanged: commonHidden != null ? (value) { _updateAllElements('hidden', !value); } : null, secondary: Icon( commonHidden == true ? Icons.visibility_off : Icons.visibility, color: commonHidden == true ? colorScheme.onSurfaceVariant : colorScheme.primary, ), dense: true, ), ), ), ], ), const SizedBox(height: 16), if (commonOpacity != null) ...[ Text( '${l10n.opacity}:', style: TextStyle( color: colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold, ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding: const EdgeInsets.all(8.0), child: Row( children: [ Expanded( child: Slider( value: commonOpacity, min: 0.0, max: 1.0, divisions: 100, label: '${(commonOpacity * 100).round()}%', activeColor: colorScheme.primary, thumbColor: colorScheme.primary, inactiveColor: colorScheme.surfaceContainerHighest, onChanged: (value) { _updateAllElements('opacity', value); }, ), ), SizedBox( width: 50, child: Text( '${(commonOpacity * 100).round()}%', style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold, ), textAlign: TextAlign.center, ), ), ], ), ), ), ], const SizedBox(height: 16), if (layer != null) ...[ Text( '${l10n.layer}:', style: TextStyle( color: colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold, ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: ListTile( leading: Icon( Icons.layers, color: colorScheme.primary, ), title: Text( layer['name'] as String? ?? l10n.unnamedLayer, style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.w500, ), ), trailing: Row( mainAxisSize: MainAxisSize.min, children: [ Icon( (layer['isVisible'] as bool? ?? true) ? Icons.visibility : Icons.visibility_off, size: 16, color: (layer['isVisible'] as bool? ?? true) ? colorScheme.primary : colorScheme.onSurfaceVariant, ), const SizedBox(width: 8), Icon( (layer['isLocked'] as bool? ?? false) ? Icons.lock : Icons.lock_open, size: 16, color: (layer['isLocked'] as bool? ?? false) ? colorScheme.primary : colorScheme.onSurfaceVariant, ), ], ), onTap: () { controller.selectLayer(layer['id'] as String); }, ), ), ], ], ), M3PanelStyles.buildPersistentPanelCard( context: context, panelId: 'multi_selection_alignment_tools', title: l10n.alignmentOperations, defaultExpanded: false, children: [ Text( '${l10n.horizontalAlignment}:', style: TextStyle( color: colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold, ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding: const EdgeInsets.all(8.0), child: Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: [ _buildAlignmentButton( context: context, icon: Icons.align_horizontal_left, tooltip: l10n.alignLeft, onPressed: () => _alignElements('left'), colorScheme: colorScheme, ), _buildAlignmentButton( context: context, icon: Icons.align_horizontal_center, tooltip: l10n.alignHorizontalCenter, onPressed: () => _alignElements('centerH'), colorScheme: colorScheme, ), _buildAlignmentButton( context: context, icon: Icons.align_horizontal_right, tooltip: l10n.alignRight, onPressed: () => _alignElements('right'), colorScheme: colorScheme, ), _buildAlignmentButton( context: context, icon: Icons.horizontal_distribute, tooltip: l10n.distributeHorizontally, onPressed: selectedIds.length > 2 ? () => _distributeElements('horizontal') : null, colorScheme: colorScheme, ), ], ), ), ), const SizedBox(height: 16), Text( '${l10n.verticalAlignment}:', style: TextStyle( color: colorScheme.onSurfaceVariant, fontWeight: FontWeight.bold, ), ), const SizedBox(height: 8), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: Padding( padding: const EdgeInsets.all(8.0), child: Row( mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: [ _buildAlignmentButton( context: context, icon: Icons.align_vertical_top, tooltip: l10n.alignTop, onPressed: () => _alignElements('top'), colorScheme: colorScheme, ), _buildAlignmentButton( context: context, icon: Icons.align_vertical_center, tooltip: l10n.alignVerticalCenter, onPressed: () => _alignElements('centerV'), colorScheme: colorScheme, ), _buildAlignmentButton( context: context, icon: Icons.align_vertical_bottom, tooltip: l10n.alignBottom, onPressed: () => _alignElements('bottom'), colorScheme: colorScheme, ), _buildAlignmentButton( context: context, icon: Icons.vertical_distribute, tooltip: l10n.distributeVertically, onPressed: selectedIds.length > 2 ? () => _distributeElements('vertical') : null, colorScheme: colorScheme, ), ], ), ), ), ], ), M3PanelStyles.buildPersistentPanelCard( context: context, panelId: 'multi_selection_group_tools', title: l10n.groupOperations, defaultExpanded: false, children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8.0), ), child: ListTile( leading: Icon( Icons.group, color: colorScheme.primary, ), title: Text( l10n.group, style: TextStyle( color: colorScheme.onSurface, fontWeight: FontWeight.bold, ), ), subtitle: Text( l10n.groupElements, style: TextStyle( color: colorScheme.onSurfaceVariant, ), ), onTap: () { controller.groupSelectedElements(); }, ), ), ], ), M3PanelStyles.buildPersistentPanelCard( context: context, panelId: 'multi_selection_delete_tools', title: l10n.dangerZone, defaultExpanded: false, children: [ ElevatedButton.icon( onPressed: () { controller.deleteSelectedElements(); }, icon: Icon( Icons.delete, color: colorScheme.error, size: 18, ), label: Text( '${l10n.delete} (${selectedIds.length})', style: textTheme.labelLarge?.copyWith( color: colorScheme.error, ), ), style: ElevatedButton.styleFrom( backgroundColor: colorScheme.errorContainer, foregroundColor: colorScheme.error, minimumSize: const Size.fromHeight(48), ), ), ], ), ], ); } void _alignElements(String alignment) { EditPageLogger.propertyPanelDebug( '多选元素对齐"
建议新键: selectedSelectedidsLengthElementsStyleTextthemeTitlelargeCopywithFontweightFontweightBoldColorColorschemeOnsurfaceBuildpersistentpanelcardContextContextPanelidTitleCommonpropertiesDefaultexpandedTrueChildrenRowChildrenExpandedChildCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextLockedStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldValueCommonlockedFalseActivecolorColorschemePrimaryOnchangedCommonlockedNullValueLockedValueNullSecondaryIconCommonlockedTrueIconsLockIconsColorCommonlockedTrueColorschemePrimaryColorschemeOnsurfacevariantDenseTrueConstSizedboxWidthExpandedChildCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextVisibleStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldValueCommonhiddenFalseActivecolorColorschemePrimaryOnchangedCommonhiddenNullValueHiddenValueNullSecondaryIconCommonhiddenTrueIconsIconsVisibilityColorCommonhiddenTrueColorschemeOnsurfacevariantColorschemePrimaryDenseTrueConstSizedboxHeightIfCommonopacityNullTextOpacityStyleTextstyleColorColorschemeOnsurfacevariantFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowChildrenExpandedChildSliderValueCommonopacityMinMaxDivisionsLabelCommonopacityRoundActivecolorColorschemePrimaryThumbcolorColorschemePrimaryInactivecolorColorschemeSurfacecontainerhighestOnchangedValueOpacityValueSizedboxWidthChildTextCommonopacityRoundStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldTextalignTextalignCenterConstSizedboxHeightIfLayerNullTextLayerStyleTextstyleColorColorschemeOnsurfacevariantFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileLeadingIconIconsLayersColorColorschemePrimaryTitleTextLayerNameAsStringUnnamedlayerStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightTrailingRowMainaxissizeMainaxissizeMinChildrenIconLayerIsvisibleAsBoolTrueIconsVisibilityIconsSizeColorLayerIsvisibleAsBoolTrueColorschemePrimaryColorschemeOnsurfacevariantConstSizedboxWidthIconLayerIslockedAsBoolFalseIconsLockIconsSizeColorLayerIslockedAsBoolFalseColorschemePrimaryColorschemeOnsurfacevariantOntapControllerSelectlayerLayerIdAsStringBuildpersistentpanelcardContextContextPanelidTitleAlignmentoperationsDefaultexpandedFalseChildrenTextHorizontalalignmentStyleTextstyleColorColorschemeOnsurfacevariantFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowMainaxisalignmentMainaxisalignmentSpaceevenlyChildrenContextContextIconIconsTooltipAlignleftOnpressedLeftColorschemeColorschemeContextContextIconIconsTooltipAlignhorizontalcenterOnpressedCenterhColorschemeColorschemeContextContextIconIconsTooltipAlignrightOnpressedRightColorschemeColorschemeContextContextIconIconsTooltipDistributehorizontallyOnpressedSelectedidsLengthHorizontalNullColorschemeColorschemeConstSizedboxHeightTextVerticalalignmentStyleTextstyleColorColorschemeOnsurfacevariantFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowMainaxisalignmentMainaxisalignmentSpaceevenlyChildrenContextContextIconIconsTooltipAligntopOnpressedTopColorschemeColorschemeContextContextIconIconsTooltipAlignverticalcenterOnpressedCentervColorschemeColorschemeContextContextIconIconsTooltipAlignbottomOnpressedBottomColorschemeColorschemeContextContextIconIconsTooltipDistributeverticallyOnpressedSelectedidsLengthVerticalNullColorschemeColorschemeBuildpersistentpanelcardContextContextPanelidTitleGroupoperationsDefaultexpandedFalseChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildListtileLeadingIconIconsGroupColorColorschemePrimaryTitleTextGroupStyleTextstyleColorColorschemeOnsurfaceFontweightFontweightBoldSubtitleTextGroupelementsStyleTextstyleColorColorschemeOnsurfacevariantOntapControllerGroupselectedelementsBuildpersistentpanelcardContextContextPanelidTitleDangerzoneDefaultexpandedFalseChildrenElevatedbuttonIconOnpressedControllerDeleteselectedelementsIconIconIconsDeleteColorColorschemeErrorSizeLabelTextDeleteSelectedidsLengthStyleTextthemeLabellargeCopywithColorColorschemeErrorStyleElevatedbuttonStylefromBackgroundcolorColorschemeErrorcontainerForegroundcolorColorschemeErrorMinimumsizeConstSizeFromheightVoidStringAlignmentEditpageloggerPropertypaneldebug
代码行: ),
----------------------------------------
文件: presentation\widgets\practice\property_panels\m3_practice_property_panel_page.dart, 行: 90
硬编码文本: "${l10n.presetSize}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8.0), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0), ), child: Padding( padding: const EdgeInsets.all(8.0), child: DropdownButtonFormField<String>( value: _getPageSizePreset(width, height), isExpanded: true, decoration: InputDecoration( border: OutlineInputBorder( borderRadius: BorderRadius.circular(8.0), borderSide: BorderSide( color: colorScheme.outline, ), ), contentPadding: const EdgeInsets.symmetric( horizontal: 16.0, vertical: 12.0, ), filled: true, fillColor: colorScheme.surface, ), items: [ DropdownMenuItem( value: 'A4', child: Text(l10n.a4Size), ), DropdownMenuItem( value: 'A5', child: Text(l10n.a5Size), ), DropdownMenuItem( value: 'custom', child: Text(l10n.customSize), ), ], onChanged: (value) { if (value != null) { _handlePageSizePresetChange(value, orientation); } }, ), ), ), const SizedBox(height: 16.0), Text('${l10n.pageOrientation}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8.0), Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0), ), child: Padding( padding: const EdgeInsets.all(4.0), child: Row( children: [ Expanded( child: RadioListTile<String>( title: Text(l10n.portrait), value: 'portrait', groupValue: orientation, activeColor: colorScheme.primary, onChanged: (value) { if (value != null && value != orientation) { final Map<String, dynamic> updates = { 'orientation': value }; if (width > height) { updates['width'] = height; updates['height'] = width; _widthController.text = height.toString(); _heightController.text = width.toString(); } widget.onPagePropertiesChanged(updates); } }, ), ), Expanded( child: RadioListTile<String>( title: Text(l10n.landscape), value: 'landscape', groupValue: orientation, activeColor: colorScheme.primary, onChanged: (value) { if (value != null && value != orientation) { final Map<String, dynamic> updates = { 'orientation': value }; if (width < height) { updates['width'] = height; updates['height'] = width; _widthController.text = height.toString(); _heightController.text = width.toString(); } widget.onPagePropertiesChanged(updates); } }, ), ), ], ), ), ), const SizedBox(height: 16.0), Text('${l10n.dimensions}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8.0), Row( children: [ Expanded( child: EditableNumberField( label: l10n.width, value: width, suffix: 'mm', min: 10, max: 1000, onChanged: (value) => _updateWidth(value.toString()), ), ), const SizedBox(width: 8.0), Expanded( child: EditableNumberField( label: l10n.height, value: height, suffix: 'mm', min: 10, max: 1000, onChanged: (value) => _updateHeight(value.toString()), ), ), ], ), const SizedBox(height: 16.0), Text('${l10n.ppiSetting}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8.0), Row( children: [ Expanded( flex: 3, child: Slider( value: dpi.toDouble(), min: 72, max: 600, divisions: 528, label: '${dpi.toString()} DPI', activeColor: colorScheme.primary, thumbColor: colorScheme.primary, onChanged: (value) => _updateDpi(value.toInt().toString()), ), ), const SizedBox(width: 8.0), Expanded( flex: 2, child: EditableNumberField( label: 'PPI', value: dpi.toDouble(), suffix: '', min: 72, max: 600, decimalPlaces: 0, onChanged: (value) => _updateDpi(value.toInt().toString()), ), ), ], ), const SizedBox(height: 8.0), Container( padding: const EdgeInsets.all(12.0), decoration: BoxDecoration( color: colorScheme.tertiaryContainer.withValues(alpha: 0.3), borderRadius: BorderRadius.circular(8.0), ), child: Row( children: [ Icon(Icons.info_outline, color: colorScheme.tertiary, size: 20), const SizedBox(width: 8), Expanded( child: Text( '${l10n.canvasPixelSize}: ${_calculatePixelSize(width, height, dpi)}', style: TextStyle( fontSize: 14, color: colorScheme.tertiary), ), ), ], ), ), ], ), ), ], ), M3PanelStyles.buildPersistentPanelCard( context: context, panelId: 'page_background_color', title: l10n.backgroundColor, defaultExpanded: true, children: [ Padding( padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Row( children: [ InkWell( onTap: () async { final color = await M3ColorPicker.show( context, initialColor: _getBackgroundColor(), enableAlpha: false, ); if (color != null) { _updateBackgroundColor(color); } }, child: Container( width: 40, height: 40, decoration: BoxDecoration( color: _getBackgroundColor(), border: Border.all(color: colorScheme.outline), borderRadius: BorderRadius.circular(8), ), ), ), const SizedBox(width: 16), Text( l10n.backgroundColor, style: TextStyle( color: colorScheme.onSurface, ), ), ], ), ], ), ), ], ), M3PanelStyles.buildPersistentPanelCard( context: context, panelId: 'page_grid_settings', title: l10n.gridSettings, defaultExpanded: true, children: [ Padding( padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0), ), child: SwitchListTile( title: Text(l10n.showGrid), value: widget.controller.state.gridVisible, activeColor: colorScheme.primary, onChanged: (value) { widget.onPagePropertiesChanged({'gridVisible': value}); widget.controller.state.gridVisible = value; setState(() {}); }, ), ), const SizedBox(height: 16.0), Text('${l10n.gridSize}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8.0), Row( children: [ Expanded( flex: 3, child: Slider( value: widget.controller.state.gridSize, min: 5.0, max: 500.0, divisions: 99, label: widget.controller.state.gridSize .toStringAsFixed(0), activeColor: colorScheme.primary, thumbColor: colorScheme.primary, onChanged: (value) { setState(() { widget .onPagePropertiesChanged({'gridSize': value}); widget.controller.state.gridSize = value; }); }, ), ), const SizedBox(width: 8.0), Expanded( flex: 1, child: Text( '${widget.controller.state.gridSize.toStringAsFixed(0)} ${l10n.pixels}', style: TextStyle( fontWeight: FontWeight.bold, color: colorScheme.onSurface, ), textAlign: TextAlign.center, ), ), ], ), ], ), ), ], ), ], ); } @override void didUpdateWidget(M3PagePropertyPanel oldWidget) { super.didUpdateWidget(oldWidget); if (widget.page != null && oldWidget.page != widget.page) { _widthController.text = ((widget.page!['width'] as num?)?.toDouble() ?? 210.0).toString(); _heightController.text = ((widget.page!['height'] as num?)?.toDouble() ?? 297.0).toString(); _dpiController.text = ((widget.page!['dpi'] as num?)?.toInt() ?? 300).toString(); String backgroundColor = '#FFFFFF'; if (widget.page!.containsKey('background') && (widget.page!['background'] as Map<String, dynamic>) .containsKey('value')) { backgroundColor = (widget.page!['background'] as Map<String, dynamic>)['value'] as String; } _backgroundColorController.text = backgroundColor.startsWith('#') ? backgroundColor.substring(1) : backgroundColor; } } @override void dispose() { _widthFocusNode.removeListener(_handleWidthFocusChange); _heightFocusNode.removeListener(_handleHeightFocusChange); _dpiFocusNode.removeListener(_handleDpiFocusChange); widget.controller.removeListener(_handleControllerChange); _widthController.dispose(); _heightController.dispose(); _dpiController.dispose(); _backgroundColorController.dispose(); _widthFocusNode.dispose(); _heightFocusNode.dispose(); _dpiFocusNode.dispose(); super.dispose(); } @override void initState() { super.initState(); _widthController = TextEditingController(); _heightController = TextEditingController(); _dpiController = TextEditingController(); _backgroundColorController = TextEditingController(); _widthFocusNode = FocusNode(); _heightFocusNode = FocusNode(); _dpiFocusNode = FocusNode(); if (widget.page != null) { _widthController.text = ((widget.page!['width'] as num?)?.toDouble() ?? 210.0).toString(); _heightController.text = ((widget.page!['height'] as num?)?.toDouble() ?? 297.0).toString(); _dpiController.text = ((widget.page!['dpi'] as num?)?.toInt() ?? 300).toString(); String backgroundColor = '#FFFFFF'; if (widget.page!.containsKey('background') && (widget.page!['background'] as Map<String, dynamic>) .containsKey('value')) { backgroundColor = (widget.page!['background'] as Map<String, dynamic>)['value'] as String; } _backgroundColorController.text = backgroundColor.startsWith('#') ? backgroundColor.substring(1) : backgroundColor; } _widthFocusNode.addListener(_handleWidthFocusChange); _heightFocusNode.addListener(_handleHeightFocusChange); _dpiFocusNode.addListener(_handleDpiFocusChange); widget.controller.addListener(_handleControllerChange); } String _calculatePixelSize(double width, double height, int dpi) { final widthInches = width / 25.4; final heightInches = height / 25.4; final widthPixels = (widthInches * dpi).round(); final heightPixels = (heightInches * dpi).round(); return '$widthPixels × $heightPixels ${AppLocalizations.of(context).pixels}'; } Color _getBackgroundColor() { if (widget.page == null) { return Colors.white; } if (widget.page!.containsKey('background') && (widget.page!['background'] as Map<String, dynamic>) .containsKey('value')) { final background = widget.page!['background'] as Map<String, dynamic>; final colorStr = background['value'] as String; final color = Color(int.parse(colorStr.substring(1), radix: 16) | 0xFF000000); return color; } return Colors.white; } String _getPageSizePreset(double width, double height) { double portraitWidth = width; double portraitHeight = height; if (width > height) { portraitWidth = height; portraitHeight = width; } if ((portraitWidth - 210.0).abs() < 1 && (portraitHeight - 297.0).abs() < 1) { return 'A4'; } else if ((portraitWidth - 148.0).abs() < 1 && (portraitHeight - 210.0).abs() < 1) { return 'A5'; } else { return 'custom'; } } void _handleControllerChange() { setState(() {}); } void _handleDpiFocusChange() { if (!_dpiFocusNode.hasFocus) { _updateDpi(_dpiController.text); } } void _handleHeightFocusChange() { if (!_heightFocusNode.hasFocus) { _updateHeight(_heightController.text); } } void _handlePageSizePresetChange(String preset, String orientation) { double width, height; switch (preset) { case 'A4': width = 210.0; height = 297.0; break; case 'A5': width = 148.0; height = 210.0; break; case 'custom': return; default: return; } if (orientation == 'landscape') { final temp = width; width = height; height = temp; } _widthController.text = width.toString(); _heightController.text = height.toString(); widget.onPagePropertiesChanged({ 'width': width, 'height': height, }); } void _handleWidthFocusChange() { if (!_widthFocusNode.hasFocus) { _updateWidth(_widthController.text); } } void _updateBackgroundColor(Color color) { final colorHex = '#${color.red.toRadixString(16).padLeft(2, '0')}${color.green.toRadixString(16).padLeft(2, '0')}${color.blue.toRadixString(16).padLeft(2, '0')}'; EditPageLogger.propertyPanelDebug( '更新页面背景颜色"
建议新键: presetsizeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildDropdownbuttonformfieldStringValueWidthHeightIsexpandedTrueDecorationInputdecorationBorderOutlineinputborderBorderradiusBorderradiusCircularBordersideBordersideColorColorschemeOutlineContentpaddingConstEdgeinsetsSymmetricHorizontalVerticalFilledTrueFillcolorColorschemeSurfaceItemsDropdownmenuitemValueChildTextDropdownmenuitemValueChildTextDropdownmenuitemValueCustomChildTextCustomsizeOnchangedValueIfValueNullValueOrientationConstSizedboxHeightTextPageorientationStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildRowChildrenExpandedChildRadiolisttileStringTitleTextPortraitValuePortraitGroupvalueOrientationActivecolorColorschemePrimaryOnchangedValueIfValueNullValueOrientationFinalMapStringDynamicUpdatesOrientationValueIfWidthHeightUpdatesWidthHeightUpdatesHeightWidthTextHeightTostringTextWidthTostringWidgetOnpagepropertieschangedUpdatesExpandedChildRadiolisttileStringTitleTextLandscapeValueLandscapeGroupvalueOrientationActivecolorColorschemePrimaryOnchangedValueIfValueNullValueOrientationFinalMapStringDynamicUpdatesOrientationValueIfWidthHeightUpdatesWidthHeightUpdatesHeightWidthTextHeightTostringTextWidthTostringWidgetOnpagepropertieschangedUpdatesConstSizedboxHeightTextDimensionsStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedChildEditablenumberfieldLabelWidthValueWidthSuffixMmMinMaxOnchangedValueValueTostringConstSizedboxWidthExpandedChildEditablenumberfieldLabelHeightValueHeightSuffixMmMinMaxOnchangedValueValueTostringConstSizedboxHeightTextPpisettingStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedFlexChildSliderValueDpiTodoubleMinMaxDivisionsLabelDpiTostringDpiActivecolorColorschemePrimaryThumbcolorColorschemePrimaryOnchangedValueValueTointTostringConstSizedboxWidthExpandedFlexChildEditablenumberfieldLabelPpiValueDpiTodoubleSuffixMinMaxDecimalplacesOnchangedValueValueTointTostringConstSizedboxHeightContainerPaddingConstEdgeinsetsAllDecorationBoxdecorationColorColorschemeTertiarycontainerWithvaluesAlphaBorderradiusBorderradiusCircularChildRowChildrenIconIconsColorColorschemeTertiarySizeConstSizedboxWidthExpandedChildTextCanvaspixelsizeWidthHeightDpiStyleTextstyleFontsizeColorColorschemeTertiaryBuildpersistentpanelcardContextContextPanelidTitleBackgroundcolorDefaultexpandedTrueChildrenPaddingPaddingConstEdgeinsetsSymmetricHorizontalVerticalChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenRowChildrenInkwellOntapAsyncFinalColorAwaitShowContextInitialcolorEnablealphaFalseIfColorNullColorChildContainerWidthHeightDecorationBoxdecorationColorBorderBorderAllColorColorschemeOutlineBorderradiusBorderradiusCircularConstSizedboxWidthTextBackgroundcolorStyleTextstyleColorColorschemeOnsurfaceBuildpersistentpanelcardContextContextPanelidTitleGridsettingsDefaultexpandedTrueChildrenPaddingPaddingConstEdgeinsetsSymmetricHorizontalVerticalChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildSwitchlisttileTitleTextShowgridValueWidgetControllerStateGridvisibleActivecolorColorschemePrimaryOnchangedValueWidgetOnpagepropertieschangedGridvisibleValueWidgetControllerStateGridvisibleValueSetstateConstSizedboxHeightTextGridsizeStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedFlexChildSliderValueWidgetControllerStateGridsizeMinMaxDivisionsLabelWidgetControllerStateGridsizeTostringasfixedActivecolorColorschemePrimaryThumbcolorColorschemePrimaryOnchangedValueSetstateWidgetOnpagepropertieschangedGridsizeValueWidgetControllerStateGridsizeValueConstSizedboxWidthExpandedFlexChildTextWidgetControllerStateGridsizeTostringasfixedPixelsStyleTextstyleFontweightFontweightBoldColorColorschemeOnsurfaceTextalignTextalignCenterOverrideVoidDidupdatewidgetOldwidgetSuperDidupdatewidgetOldwidgetIfWidgetPageNullOldwidgetPageWidgetPageTextWidgetPageWidthAsNumTodoubleTostringTextWidgetPageHeightAsNumTodoubleTostringTextWidgetPageDpiAsNumTointTostringStringBackgroundcolorFfffffIfWidgetPageContainskeyBackgroundWidgetPageBackgroundAsMapStringDynamicContainskeyValueBackgroundcolorWidgetPageBackgroundAsMapStringDynamicValueAsStringTextBackgroundcolorStartswithBackgroundcolorSubstringBackgroundcolorOverrideVoidDisposeRemovelistenerRemovelistenerRemovelistenerWidgetControllerRemovelistenerDisposeDisposeDisposeDisposeDisposeDisposeDisposeSuperDisposeOverrideVoidInitstateSuperInitstateTexteditingcontrollerTexteditingcontrollerTexteditingcontrollerTexteditingcontrollerFocusnodeFocusnodeFocusnodeIfWidgetPageNullTextWidgetPageWidthAsNumTodoubleTostringTextWidgetPageHeightAsNumTodoubleTostringTextWidgetPageDpiAsNumTointTostringStringBackgroundcolorFfffffIfWidgetPageContainskeyBackgroundWidgetPageBackgroundAsMapStringDynamicContainskeyValueBackgroundcolorWidgetPageBackgroundAsMapStringDynamicValueAsStringTextBackgroundcolorStartswithBackgroundcolorSubstringBackgroundcolorAddlistenerAddlistenerAddlistenerWidgetControllerAddlistenerStringDoubleWidthDoubleHeightIntDpiFinalWidthinchesWidthFinalHeightinchesHeightFinalWidthpixelsWidthinchesDpiRoundFinalHeightpixelsHeightinchesDpiRoundReturnWidthpixelsHeightpixelsApplocalizationsOfContextPixelsColorIfWidgetPageNullReturnColorsWhiteIfWidgetPageContainskeyBackgroundWidgetPageBackgroundAsMapStringDynamicContainskeyValueFinalBackgroundWidgetPageBackgroundAsMapStringDynamicFinalColorstrBackgroundValueAsStringFinalColorColorIntParseColorstrSubstringRadixReturnColorReturnColorsWhiteStringDoubleWidthDoubleHeightDoublePortraitwidthWidthDoublePortraitheightHeightIfWidthHeightPortraitwidthHeightPortraitheightWidthIfPortraitwidthAbsPortraitheightAbsReturnElseIfPortraitwidthAbsPortraitheightAbsReturnElseReturnCustomVoidSetstateVoidIfHasfocusTextVoidIfHasfocusTextVoidStringPresetStringOrientationDoubleWidthHeightSwitchPresetCaseWidthHeightBreakCaseWidthHeightBreakCaseCustomReturnDefaultReturnIfOrientationLandscapeFinalTempWidthWidthHeightHeightTempTextWidthTostringTextHeightTostringWidgetOnpagepropertieschangedWidthWidthHeightHeightVoidIfHasfocusTextVoidColorColorFinalColorhexColorRedToradixstringPadleftColorGreenToradixstringPadleftColorBlueToradixstringPadleftEditpageloggerPropertypaneldebug
代码行: children: [
----------------------------------------
文件: presentation\widgets\practice\property_panels\m3_practice_property_panel_text.dart, 行: 454
硬编码文本: "Sans Serif')), const DropdownMenuItem(value: 'serif', child: Text('Serif')), const DropdownMenuItem( value: 'monospace', child: Text('Monospace')), DropdownMenuItem( value: 'SourceHanSans', child: Text(AppLocalizations.of(context).sourceHanSansFont)), DropdownMenuItem( value: 'SourceHanSerif', child: Text( AppLocalizations.of(context).sourceHanSerifFont)), ], onChanged: (value) { if (value != null) { _updateContentProperty('fontFamily', value); } }, ), ), ], ), const SizedBox(height: 16.0), M3PanelStyles.buildSectionTitle( context, l10n.fontWeight), Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Wrap( spacing: 8.0, runSpacing: 8.0, children: [ _buildFontWeightButton(context, 'w300', 'Light', fontWeight), _buildFontWeightButton( context, 'normal', 'Regular', fontWeight), _buildFontWeightButton(context, 'bold', 'Bold', fontWeight), ], ), const SizedBox(height: 12.0), Row( children: [ Expanded( flex: 3, child: Slider( value: _getFontWeightValue(fontWeight), min: 100, max: 900, divisions: 8, label: _getFontWeightLabel(fontWeight), activeColor: colorScheme.primary, inactiveColor: colorScheme.surfaceContainerHighest, thumbColor: colorScheme.primary, onChanged: (value) { final weightValue = value.round(); String weightString; if (weightValue == 400) { weightString = 'normal'; } else if (weightValue == 700) { weightString = 'bold'; } else { weightString = 'w$weightValue'; } _updateContentProperty('fontWeight', weightString); }, ), ), const SizedBox(width: 8.0), Expanded( flex: 2, child: DropdownButtonFormField<String>( decoration: InputDecoration( labelText: l10n.fontWeight, border: const OutlineInputBorder(), contentPadding: const EdgeInsets.symmetric( horizontal: 12.0, vertical: 8.0), ), value: fontWeight, isExpanded: true, items: const [ DropdownMenuItem( value: 'w100', child: Text('Thin (w100)')), DropdownMenuItem( value: 'w200', child: Text('Extra Light (w200)')), DropdownMenuItem( value: 'w300', child: Text('Light (w300)')), DropdownMenuItem( value: 'normal', child: Text('Regular (w400)')), DropdownMenuItem( value: 'w500', child: Text('Medium (w500)')), DropdownMenuItem( value: 'w600', child: Text('Semi Bold (w600)')), DropdownMenuItem( value: 'bold', child: Text('Bold (w700)')), DropdownMenuItem( value: 'w800', child: Text('Extra Bold (w800)')), DropdownMenuItem( value: 'w900', child: Text('Black (w900)')), ], onChanged: (value) { if (value != null) { _updateContentProperty('fontWeight', value); } }, ), ), ], ), if (fontFamily == 'SourceHanSans' || fontFamily == 'SourceHanSerif') Padding( padding: const EdgeInsets.only(top: 8.0), child: Row( children: [ Icon( Icons.info_outline, size: 16, color: colorScheme.primary, ), const SizedBox(width: 4), Expanded( child: Text( '思源字体支持更精确的字重变化"
建议新键: sansSerifConstDropdownmenuitemValueSerifChildTextSerifConstDropdownmenuitemValueMonospaceChildTextMonospaceDropdownmenuitemValueSourcehansansChildTextApplocalizationsOfContextSourcehansansfontDropdownmenuitemValueSourcehanserifChildTextApplocalizationsOfContextSourcehanseriffontOnchangedValueIfValueNullFontfamilyValueConstSizedboxHeightBuildsectiontitleContextFontweightColumnCrossaxisalignmentCrossaxisalignmentStartChildrenWrapSpacingRunspacingChildrenContextLightFontweightContextNormalRegularFontweightContextBoldBoldFontweightConstSizedboxHeightRowChildrenExpandedFlexChildSliderValueFontweightMinMaxDivisionsLabelFontweightActivecolorColorschemePrimaryInactivecolorColorschemeSurfacecontainerhighestThumbcolorColorschemePrimaryOnchangedValueFinalWeightvalueValueRoundStringWeightstringIfWeightvalueWeightstringNormalElseIfWeightvalueWeightstringBoldElseWeightstringWWeightvalueFontweightWeightstringConstSizedboxWidthExpandedFlexChildDropdownbuttonformfieldStringDecorationInputdecorationLabeltextFontweightBorderConstOutlineinputborderContentpaddingConstEdgeinsetsSymmetricHorizontalVerticalValueFontweightIsexpandedTrueItemsConstDropdownmenuitemValueChildTextThinDropdownmenuitemValueChildTextExtraLightDropdownmenuitemValueChildTextLightDropdownmenuitemValueNormalChildTextRegularDropdownmenuitemValueChildTextMediumDropdownmenuitemValueChildTextSemiBoldDropdownmenuitemValueBoldChildTextBoldDropdownmenuitemValueChildTextExtraBoldDropdownmenuitemValueChildTextBlackOnchangedValueIfValueNullFontweightValueIfFontfamilySourcehansansFontfamilySourcehanserifPaddingPaddingConstEdgeinsetsOnlyTopChildRowChildrenIconIconsSizeColorColorschemePrimaryConstSizedboxWidthExpandedChildText
代码行: border: const OutlineInputBorder(),
----------------------------------------
文件: presentation\widgets\practice\property_panels\property_panel_base.dart, 行: 29
硬编码文本: "位置"
建议新键: position1
代码行: child: Text(
----------------------------------------
文件: presentation\widgets\practice\property_panels\property_panel_base.dart, 行: 34
硬编码文本: "X: '), SizedBox( width: 70, child: TextFormField( initialValue: element.x.toString(), keyboardType: TextInputType.number, decoration: const InputDecoration( isDense: true, contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value) { final x = double.tryParse(value); if (x != null) { onElementChanged(element.copyWith(x: x)); } }, ), ), const SizedBox(width: 8), const Text('Y: '), SizedBox( width: 70, child: TextFormField( initialValue: element.y.toString(), keyboardType: TextInputType.number, decoration: const InputDecoration( isDense: true, contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value) { final y = double.tryParse(value); if (y != null) { onElementChanged(element.copyWith(y: y)); } }, ), ), ], ), const Divider(), Row( children: [ SizedBox( width: 100, child: Text( l10n.elementSize, style: const TextStyle(fontWeight: FontWeight.bold), ), ), Text('${l10n.elementWidth}: '), SizedBox( width: 70, child: TextFormField( initialValue: element.width.toString(), keyboardType: TextInputType.number, decoration: const InputDecoration( isDense: true, contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value) { final width = double.tryParse(value); if (width != null && width > 0) { onElementChanged(element.copyWith(width: width)); } }, ), ), const SizedBox(width: 8), Text('${l10n.elementHeight}: '), SizedBox( width: 70, child: TextFormField( initialValue: element.height.toString(), keyboardType: TextInputType.number, decoration: const InputDecoration( isDense: true, contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value) { final height = double.tryParse(value); if (height != null && height > 0) { onElementChanged(element.copyWith(height: height)); } }, ), ), ], ), const Divider(), Row( children: [ const SizedBox( width: 100, child: Text( '旋转角度"
建议新键: xSizedboxWidthChildTextformfieldInitialvalueElementXTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalXDoubleTryparseValueIfXNullOnelementchangedElementCopywithXXConstSizedboxWidthConstTextYSizedboxWidthChildTextformfieldInitialvalueElementYTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalYDoubleTryparseValueIfYNullOnelementchangedElementCopywithYYConstDividerRowChildrenSizedboxWidthChildTextElementsizeStyleConstTextstyleFontweightFontweightBoldTextElementwidthSizedboxWidthChildTextformfieldInitialvalueElementWidthTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalWidthDoubleTryparseValueIfWidthNullWidthOnelementchangedElementCopywithWidthWidthConstSizedboxWidthTextElementheightSizedboxWidthChildTextformfieldInitialvalueElementHeightTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalHeightDoubleTryparseValueIfHeightNullHeightOnelementchangedElementCopywithHeightHeightConstDividerRowChildrenConstSizedboxWidthChildText
代码行: const Text('X: '),
----------------------------------------
文件: presentation\widgets\practice\property_panels\property_panel_base.dart, 行: 156
硬编码文本: "${element.rotation.toInt()}°', textAlign: TextAlign.right, ), ), ], ), const Divider(), Row( children: [ const SizedBox( width: 100, child: Text( '透明度"
建议新键: elementRotationTointTextalignTextalignRightConstDividerRowChildrenConstSizedboxWidthChildText
代码行: width: 50,
----------------------------------------
文件: presentation\widgets\practice\property_panels\property_panel_base.dart, 行: 188
硬编码文本: "${(element.opacity * 100).toInt()}%', textAlign: TextAlign.right, ), ), ], ), const Divider(), Row( children: [ SizedBox( width: 100, child: Text( l10n.lock, style: const TextStyle(fontWeight: FontWeight.bold), ), ), Checkbox( value: element.isLocked, onChanged: (value) { if (value != null) { onElementChanged(element.copyWith(isLocked: value)); } }, ), Text(element.isLocked ? l10n.locked : l10n.unlocked), ], ), const Divider(), Row( children: [ const SizedBox( width: 100, child: Text( '所属图层"
建议新键: elementOpacityTointTextalignTextalignRightConstDividerRowChildrenSizedboxWidthChildTextLockStyleConstTextstyleFontweightFontweightBoldCheckboxValueElementIslockedOnchangedValueIfValueNullOnelementchangedElementCopywithIslockedValueTextElementIslockedLockedUnlockedConstDividerRowChildrenConstSizedboxWidthChildText
代码行: width: 50,
----------------------------------------
文件: presentation\widgets\practice\property_panels\property_panel_base.dart, 行: 285
硬编码文本: "#${color.toARGB32().toRadixString(16).substring(2).toUpperCase()}'), const Spacer(), PopupMenuButton<Color>( tooltip: '选择颜色"
建议新键: colorToradixstringSubstringTouppercaseConstSpacerPopupmenubuttonColorTooltip
代码行: ),
----------------------------------------
文件: presentation\widgets\practice\property_panels\property_panel_base.dart, 行: 33
硬编码文本: "X: '), SizedBox( width: 70, child: TextFormField( initialValue: element.x.toString(), keyboardType: TextInputType.number, decoration: const InputDecoration( isDense: true, contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value) { final x = double.tryParse(value); if (x != null) { onElementChanged(element.copyWith(x: x)); } }, ), ), const SizedBox(width: 8), const Text('Y: '), SizedBox( width: 70, child: TextFormField( initialValue: element.y.toString(), keyboardType: TextInputType.number, decoration: const InputDecoration( isDense: true, contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value) { final y = double.tryParse(value); if (y != null) { onElementChanged(element.copyWith(y: y)); } }, ), ), ], ), const Divider(), Row( children: [ SizedBox( width: 100, child: Text( l10n.elementSize, style: const TextStyle(fontWeight: FontWeight.bold), ), ), Text('${l10n.elementWidth}: '), SizedBox( width: 70, child: TextFormField( initialValue: element.width.toString(), keyboardType: TextInputType.number, decoration: const InputDecoration( isDense: true, contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value) { final width = double.tryParse(value); if (width != null && width > 0) { onElementChanged(element.copyWith(width: width)); } }, ), ), const SizedBox(width: 8), Text('${l10n.elementHeight}: '), SizedBox( width: 70, child: TextFormField( initialValue: element.height.toString(), keyboardType: TextInputType.number, decoration: const InputDecoration( isDense: true, contentPadding: EdgeInsets.symmetric(horizontal: 8, vertical: 8), border: OutlineInputBorder(), ), onChanged: (value) { final height = double.tryParse(value); if (height != null && height > 0) { onElementChanged(element.copyWith(height: height)); } }, ), ), ], ), const Divider(), Row( children: [ const SizedBox( width: 100, child: Text( '旋转角度"
建议新键: xSizedboxWidthChildTextformfieldInitialvalueElementXTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalXDoubleTryparseValueIfXNullOnelementchangedElementCopywithXXConstSizedboxWidthConstTextYSizedboxWidthChildTextformfieldInitialvalueElementYTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalYDoubleTryparseValueIfYNullOnelementchangedElementCopywithYYConstDividerRowChildrenSizedboxWidthChildTextElementsizeStyleConstTextstyleFontweightFontweightBoldTextElementwidthSizedboxWidthChildTextformfieldInitialvalueElementWidthTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalWidthDoubleTryparseValueIfWidthNullWidthOnelementchangedElementCopywithWidthWidthConstSizedboxWidthTextElementheightSizedboxWidthChildTextformfieldInitialvalueElementHeightTostringKeyboardtypeTextinputtypeNumberDecorationConstInputdecorationIsdenseTrueContentpaddingEdgeinsetsSymmetricHorizontalVerticalBorderOutlineinputborderOnchangedValueFinalHeightDoubleTryparseValueIfHeightNullHeightOnelementchangedElementCopywithHeightHeightConstDividerRowChildrenConstSizedboxWidthChildText1
代码行: ),
----------------------------------------
文件: presentation\widgets\practice\property_panels\collection_panels\m3_background_texture_panel.dart, 行: 191
硬编码文本: "Stretch'), ), DropdownMenuItem( value: 'repeat', child: Text(l10n.textureFillModeRepeat), ), DropdownMenuItem( value: 'cover', child: Text(l10n.textureFillModeCover), ), DropdownMenuItem( value: 'contain', child: Text(l10n.textureFillModeContain), ), ], onChanged: (value) { if (value != null) { AppLogger.info( '纹理填充模式变更"
建议新键: stretchDropdownmenuitemValueRepeatChildTextTexturefillmoderepeatDropdownmenuitemValueCoverChildTextTexturefillmodecoverDropdownmenuitemValueContainChildTextTexturefillmodecontainOnchangedValueIfValueNullApploggerInfo
代码行: suffix: '%',
----------------------------------------
文件: presentation\widgets\practice\property_panels\image\image_property_panel_widgets.dart, 行: 190
硬编码文本: "${l10n.opacity}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8.0), Row( children: [ Expanded( flex: 3, child: Slider( value: opacity, min: 0.0, max: 1.0, divisions: 100, label: '${(opacity * 100).toStringAsFixed(0)}%', activeColor: colorScheme.primary, thumbColor: colorScheme.primary, onChanged: (value) => onPropertyUpdate('opacity', value), ), ), const SizedBox(width: 8.0), Expanded( flex: 2, child: EditableNumberField( label: l10n.opacity, value: opacity * 100, suffix: '%', min: 0, max: 100, decimalPlaces: 0, onChanged: (value) { onPropertyUpdate('opacity', value / 100); }, ), ), ], ), const SizedBox(height: 16.0), Text('${l10n.backgroundColor}:', style: const TextStyle(fontWeight: FontWeight.bold)), const SizedBox(height: 8.0), Row( children: [ InkWell( onTap: () async { final color = await M3ColorPicker.show( context, initialColor: backgroundColor(), enableAlpha: true, ); if (color != null) { if (color == Colors.transparent) { onContentPropertyUpdate( 'backgroundColor', 'transparent'); } else { final argb = color.toARGB32(); final hexColor = '#${argb.toRadixString(16).padLeft(8, '0').substring(2)}'; onContentPropertyUpdate('backgroundColor', hexColor); } } }, child: Container( width: 40, height: 40, decoration: BoxDecoration( color: backgroundColor(), border: Border.all(color: colorScheme.outline), borderRadius: BorderRadius.circular(8), image: backgroundColor() == Colors.transparent ? const DecorationImage( image: AssetImage( 'assets/images/transparent_bg.png'), repeat: ImageRepeat.repeat, ) : null, ), ), ), const SizedBox(width: 16), Text( l10n.backgroundColor, style: TextStyle( color: colorScheme.onSurface, ), ), ], ), ], ), ), ], ), ); } } class ImagePropertySelectionPanel extends StatelessWidget { final VoidCallback onSelectFromLibrary; final VoidCallback onSelectFromLocal; const ImagePropertySelectionPanel({ super.key, required this.onSelectFromLibrary, required this.onSelectFromLocal, }); @override Widget build(BuildContext context) { final l10n = AppLocalizations.of(context); final theme = Theme.of(context); final colorScheme = theme.colorScheme; return Card( elevation: 0, margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0), shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0), ), clipBehavior: Clip.antiAlias, child: ExpansionTile( title: Text(l10n.imageSelection), initiallyExpanded: true, children: [ Padding( padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ FilledButton.tonalIcon( icon: const Icon(Icons.collections_bookmark), onPressed: onSelectFromLibrary, label: Text(l10n.fromGallery), style: FilledButton.styleFrom( minimumSize: const Size.fromHeight(48), backgroundColor: colorScheme.primaryContainer, foregroundColor: colorScheme.onPrimaryContainer, ), ), const SizedBox(height: 8.0), FilledButton.tonalIcon( icon: const Icon(Icons.photo_library), onPressed: onSelectFromLocal, label: Text(l10n.fromLocal), style: FilledButton.styleFrom( minimumSize: const Size.fromHeight(48), ), ), ], ), ), ], ), ); } } class ImagePropertyFitModePanel extends StatelessWidget { final String fitMode; final Function(String) onFitModeChanged; const ImagePropertyFitModePanel({ super.key, required this.fitMode, required this.onFitModeChanged, }); @override Widget build(BuildContext context) { final l10n = AppLocalizations.of(context); final theme = Theme.of(context); final colorScheme = theme.colorScheme; return Card( elevation: 0, margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0), shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0), ), clipBehavior: Clip.antiAlias, child: ExpansionTile( title: Text(l10n.fitMode), initiallyExpanded: true, children: [ Padding( padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0), ), child: Padding( padding: const EdgeInsets.all(8.0), child: SegmentedButton<String>( segments: [ ButtonSegment<String>( value: 'contain', label: Text(l10n.fitContain), icon: const Icon(Icons.fit_screen), ), ButtonSegment<String>( value: 'cover', label: Text(l10n.fitCover), icon: const Icon(Icons.crop), ), ButtonSegment<String>( value: 'fill', label: Text(l10n.fitFill), icon: const Icon(Icons.aspect_ratio), ), ButtonSegment<String>( value: 'none', label: Text(l10n.original), icon: const Icon(Icons.image), ), ], selected: {fitMode}, onSelectionChanged: (Set<String> selection) { if (selection.isNotEmpty) { onFitModeChanged(selection.first); } }, ), ), ), ], ), ), ], ), ); } } class ImagePropertyPreviewPanel extends StatelessWidget { final String imageUrl; final String fitMode; final double cropTop; final double cropBottom; final double cropLeft; final double cropRight; final bool flipHorizontal; final bool flipVertical; final double contentRotation; final bool isTransformApplied; final Size? imageSize; final Size? renderSize; final Function(Size, Size) onImageSizeAvailable; const ImagePropertyPreviewPanel({ super.key, required this.imageUrl, required this.fitMode, required this.cropTop, required this.cropBottom, required this.cropLeft, required this.cropRight, required this.flipHorizontal, required this.flipVertical, required this.contentRotation, required this.isTransformApplied, required this.imageSize, required this.renderSize, required this.onImageSizeAvailable, }); @override Widget build(BuildContext context) { final l10n = AppLocalizations.of(context); final theme = Theme.of(context); final colorScheme = theme.colorScheme; return Card( elevation: 0, margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0), shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12.0), ), clipBehavior: Clip.antiAlias, child: ExpansionTile( title: Text(l10n.preview), initiallyExpanded: true, children: [ Padding( padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0), child: Column( crossAxisAlignment: CrossAxisAlignment.start, children: [ Container( width: double.infinity, padding: const EdgeInsets.all(12.0), margin: const EdgeInsets.only(bottom: 12.0), decoration: BoxDecoration( color: colorScheme.tertiaryContainer .withAlpha((0.3 * 255).toInt()), borderRadius: BorderRadius.circular(8.0), ), child: Text( l10n.imagePropertyPanelPreviewNotice, style: TextStyle( fontSize: 12, color: colorScheme.tertiary), textAlign: TextAlign.center, ), ), _buildImagePreviewWithTransformBox(context), ], ), ), ], ), ); } Widget _buildImagePreviewWithTransformBox(BuildContext context) { final l10n = AppLocalizations.of(context); final theme = Theme.of(context); final colorScheme = theme.colorScheme; const previewFitMode = 'contain'; return Container( height: 240, width: double.infinity, decoration: BoxDecoration( border: Border.all(color: colorScheme.outline), borderRadius: BorderRadius.circular(12.0), color: colorScheme.surfaceContainerHighest.withAlpha((0.5 * 255).toInt()), ), child: imageUrl.isNotEmpty ? LayoutBuilder( builder: (context, constraints) { return Stack( children: [ Positioned.fill( child: ClipRect( child: Transform( transform: Matrix4.identity() ..scale( flipHorizontal ? -1.0 : 1.0, flipVertical ? -1.0 : 1.0, ), alignment: Alignment.center, child: _buildImageWithSizeListener( context: context, imageUrl: imageUrl, fitMode: _getFitMode(previewFitMode), onImageSizeAvailable: onImageSizeAvailable, ), ), ), ), if (imageSize != null && renderSize != null) _buildTransformPreviewRect( context: context, containerConstraints: constraints, ), ], ); }, ) : Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ Icon(Icons.image_not_supported, size: 48, color: colorScheme.outline), const SizedBox(height: 12), Text(l10n.noImageSelected, style: TextStyle(color: colorScheme.outline)), ], ), ), ); } Widget _buildImageWithSizeListener({ required BuildContext context, required String imageUrl, required BoxFit fitMode, required Function(Size, Size) onImageSizeAvailable, }) { final l10n = AppLocalizations.of(context); if (imageUrl.startsWith('file: try { String filePath = imageUrl.substring(7); final file = File(filePath); if (!file.existsSync()) { return Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ const Icon(Icons.error_outline, color: Colors.red, size: 40), const SizedBox(height: 8), Text( l10n.fileNotExist(filePath), style: const TextStyle(color: Colors.red), textAlign: TextAlign.center, ), ], ), ); } return LayoutBuilder( builder: (BuildContext context, BoxConstraints constraints) { return CachedImage( path: filePath, fit: fitMode, errorBuilder: (context, error, stackTrace) { return Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ const Icon(Icons.error, color: Colors.red, size: 48), const SizedBox(height: 8), Text( l10n.imageLoadError(error .toString() .substring( 0, math.min(error.toString().length, 50))), style: const TextStyle(color: Colors.red), textAlign: TextAlign.center, ), ], ), ); }, onImageLoaded: (Size size) { final imageSize = size; final renderSize = _calculateRenderSize( imageSize, constraints.biggest, fitMode == BoxFit.contain ? 'contain' : fitMode == BoxFit.cover ? 'cover' : fitMode == BoxFit.fill ? 'fill' : 'none'); if (context.mounted) { onImageSizeAvailable(imageSize, renderSize); } }, ); }, ); } catch (e) { return Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ const Icon(Icons.error_outline, color: Colors.red, size: 40), const SizedBox(height: 8), Text( l10n.imageProcessingPathError(e.toString()), style: const TextStyle(color: Colors.red), textAlign: TextAlign.center, ), ], ), ); } } else { return LayoutBuilder( builder: (BuildContext context, BoxConstraints constraints) { final imageProvider = NetworkImage(imageUrl); final imageStream = imageProvider.resolve(ImageConfiguration( size: constraints.biggest, )); imageStream.addListener(ImageStreamListener( (ImageInfo info, bool _) { final imageSize = Size( info.image.width.toDouble(), info.image.height.toDouble(), ); final renderSize = _calculateRenderSize( imageSize, constraints.biggest, fitMode == BoxFit.contain ? 'contain' : fitMode == BoxFit.cover ? 'cover' : fitMode == BoxFit.fill ? 'fill' : 'none', ); WidgetsBinding.instance.addPostFrameCallback((_) { if (context.mounted) { onImageSizeAvailable(imageSize, renderSize); } }); }, onError: (exception, stackTrace) { EditPageLogger.propertyPanelError( '图像加载错误"
建议新键: opacityStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenExpandedFlexChildSliderValueOpacityMinMaxDivisionsLabelOpacityTostringasfixedActivecolorColorschemePrimaryThumbcolorColorschemePrimaryOnchangedValueOnpropertyupdateOpacityValueConstSizedboxWidthExpandedFlexChildEditablenumberfieldLabelOpacityValueOpacitySuffixMinMaxDecimalplacesOnchangedValueOnpropertyupdateOpacityValueConstSizedboxHeightTextBackgroundcolorStyleConstTextstyleFontweightFontweightBoldConstSizedboxHeightRowChildrenInkwellOntapAsyncFinalColorAwaitShowContextInitialcolorBackgroundcolorEnablealphaTrueIfColorNullIfColorColorsTransparentOncontentpropertyupdateBackgroundcolorTransparentElseFinalArgbColorFinalHexcolorArgbToradixstringPadleftSubstringOncontentpropertyupdateBackgroundcolorHexcolorChildContainerWidthHeightDecorationBoxdecorationColorBackgroundcolorBorderBorderAllColorColorschemeOutlineBorderradiusBorderradiusCircularImageBackgroundcolorColorsTransparentConstDecorationimageImageAssetimageAssetsImagesPngRepeatImagerepeatRepeatNullConstSizedboxWidthTextBackgroundcolorStyleTextstyleColorColorschemeOnsurfaceClassImagepropertyselectionpanelExtendsStatelesswidgetFinalVoidcallbackOnselectfromlibraryFinalVoidcallbackOnselectfromlocalConstImagepropertyselectionpanelSuperKeyRequiredThisOnselectfromlibraryRequiredThisOnselectfromlocalOverrideWidgetBuildBuildcontextContextFinalApplocalizationsOfContextFinalThemeThemeOfContextFinalColorschemeThemeColorschemeReturnCardElevationMarginConstEdgeinsetsSymmetricHorizontalVerticalShapeRoundedrectangleborderBorderradiusBorderradiusCircularClipbehaviorClipAntialiasChildExpansiontileTitleTextImageselectionInitiallyexpandedTrueChildrenPaddingPaddingConstEdgeinsetsSymmetricHorizontalVerticalChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenFilledbuttonTonaliconIconConstIconIconsOnpressedOnselectfromlibraryLabelTextFromgalleryStyleFilledbuttonStylefromMinimumsizeConstSizeFromheightBackgroundcolorColorschemePrimarycontainerForegroundcolorColorschemeOnprimarycontainerConstSizedboxHeightFilledbuttonTonaliconIconConstIconIconsOnpressedOnselectfromlocalLabelTextFromlocalStyleFilledbuttonStylefromMinimumsizeConstSizeFromheightClassImagepropertyfitmodepanelExtendsStatelesswidgetFinalStringFitmodeFinalFunctionStringOnfitmodechangedConstImagepropertyfitmodepanelSuperKeyRequiredThisFitmodeRequiredThisOnfitmodechangedOverrideWidgetBuildBuildcontextContextFinalApplocalizationsOfContextFinalThemeThemeOfContextFinalColorschemeThemeColorschemeReturnCardElevationMarginConstEdgeinsetsSymmetricHorizontalVerticalShapeRoundedrectangleborderBorderradiusBorderradiusCircularClipbehaviorClipAntialiasChildExpansiontileTitleTextFitmodeInitiallyexpandedTrueChildrenPaddingPaddingConstEdgeinsetsSymmetricHorizontalVerticalChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildSegmentedbuttonStringSegmentsButtonsegmentStringValueContainLabelTextFitcontainIconConstIconIconsButtonsegmentStringValueCoverLabelTextFitcoverIconConstIconIconsCropButtonsegmentStringValueFillLabelTextFitfillIconConstIconIconsButtonsegmentStringValueNoneLabelTextOriginalIconConstIconIconsImageSelectedFitmodeOnselectionchangedSetStringSelectionIfSelectionIsnotemptyOnfitmodechangedSelectionFirstClassImagepropertypreviewpanelExtendsStatelesswidgetFinalStringImageurlFinalStringFitmodeFinalDoubleCroptopFinalDoubleCropbottomFinalDoubleCropleftFinalDoubleCroprightFinalBoolFliphorizontalFinalBoolFlipverticalFinalDoubleContentrotationFinalBoolIstransformappliedFinalSizeImagesizeFinalSizeRendersizeFinalFunctionSizeSizeOnimagesizeavailableConstImagepropertypreviewpanelSuperKeyRequiredThisImageurlRequiredThisFitmodeRequiredThisCroptopRequiredThisCropbottomRequiredThisCropleftRequiredThisCroprightRequiredThisFliphorizontalRequiredThisFlipverticalRequiredThisContentrotationRequiredThisIstransformappliedRequiredThisImagesizeRequiredThisRendersizeRequiredThisOnimagesizeavailableOverrideWidgetBuildBuildcontextContextFinalApplocalizationsOfContextFinalThemeThemeOfContextFinalColorschemeThemeColorschemeReturnCardElevationMarginConstEdgeinsetsSymmetricHorizontalVerticalShapeRoundedrectangleborderBorderradiusBorderradiusCircularClipbehaviorClipAntialiasChildExpansiontileTitleTextPreviewInitiallyexpandedTrueChildrenPaddingPaddingConstEdgeinsetsSymmetricHorizontalVerticalChildColumnCrossaxisalignmentCrossaxisalignmentStartChildrenContainerWidthDoubleInfinityPaddingConstEdgeinsetsAllMarginConstEdgeinsetsOnlyBottomDecorationBoxdecorationColorColorschemeTertiarycontainerWithalphaTointBorderradiusBorderradiusCircularChildTextImagepropertypanelpreviewnoticeStyleTextstyleFontsizeColorColorschemeTertiaryTextalignTextalignCenterContextWidgetBuildcontextContextFinalApplocalizationsOfContextFinalThemeThemeOfContextFinalColorschemeThemeColorschemeConstPreviewfitmodeContainReturnContainerHeightWidthDoubleInfinityDecorationBoxdecorationBorderBorderAllColorColorschemeOutlineBorderradiusBorderradiusCircularColorColorschemeSurfacecontainerhighestWithalphaTointChildImageurlIsnotemptyLayoutbuilderBuilderContextConstraintsReturnStackChildrenPositionedFillChildCliprectChildTransformTransformIdentityScaleFliphorizontalFlipverticalAlignmentAlignmentCenterChildContextContextImageurlImageurlFitmodePreviewfitmodeOnimagesizeavailableOnimagesizeavailableIfImagesizeNullRendersizeNullContextContextContainerconstraintsConstraintsCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenIconIconsSizeColorColorschemeOutlineConstSizedboxHeightTextNoimageselectedStyleTextstyleColorColorschemeOutlineWidgetRequiredBuildcontextContextRequiredStringImageurlRequiredBoxfitFitmodeRequiredFunctionSizeSizeOnimagesizeavailableFinalApplocalizationsOfContextIfImageurlStartswithFileTryStringFilepathImageurlSubstringFinalFileFileFilepathIfFileExistssyncReturnCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenConstIconIconsColorColorsRedSizeConstSizedboxHeightTextFilenotexistFilepathStyleConstTextstyleColorColorsRedTextalignTextalignCenterReturnLayoutbuilderBuilderBuildcontextContextBoxconstraintsConstraintsReturnCachedimagePathFilepathFitFitmodeErrorbuilderContextErrorStacktraceReturnCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenConstIconIconsErrorColorColorsRedSizeConstSizedboxHeightTextImageloaderrorErrorTostringSubstringMathMinErrorTostringLengthStyleConstTextstyleColorColorsRedTextalignTextalignCenterOnimageloadedSizeSizeFinalImagesizeSizeFinalRendersizeImagesizeConstraintsBiggestFitmodeBoxfitContainContainFitmodeBoxfitCoverCoverFitmodeBoxfitFillFillNoneIfContextMountedOnimagesizeavailableImagesizeRendersizeCatchEReturnCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenConstIconIconsColorColorsRedSizeConstSizedboxHeightTextImageprocessingpatherrorETostringStyleConstTextstyleColorColorsRedTextalignTextalignCenterElseReturnLayoutbuilderBuilderBuildcontextContextBoxconstraintsConstraintsFinalImageproviderNetworkimageImageurlFinalImagestreamImageproviderResolveImageconfigurationSizeConstraintsBiggestImagestreamAddlistenerImagestreamlistenerImageinfoInfoBoolFinalImagesizeSizeInfoImageWidthTodoubleInfoImageHeightTodoubleFinalRendersizeImagesizeConstraintsBiggestFitmodeBoxfitContainContainFitmodeBoxfitCoverCoverFitmodeBoxfitFillFillNoneWidgetsbindingInstanceAddpostframecallbackIfContextMountedOnimagesizeavailableImagesizeRendersizeOnerrorExceptionStacktraceEditpageloggerPropertypanelerror
代码行: crossAxisAlignment: CrossAxisAlignment.start,
----------------------------------------
文件: widgets\character_edit\m3_character_edit_panel.dart, 行: 519
硬编码文本: "${snapshot.error ?? l10n.unknownError}', style: TextStyle( color: colorScheme.onSurfaceVariant, fontSize: 12, ), textAlign: TextAlign.center, ), ], ), ); } final loadedImageForCanvas = snapshot.data!; final region = ref.watch(selectedRegionProvider); return Column( children: [ _buildToolbar(l10n), Expanded( child: Stack( children: [ region != null ? _OptimizedEraseLayerStack( region: region, canvasKey: _canvasKey, image: loadedImageForCanvas, handleEraseStart: _handleEraseStart, handleEraseUpdate: _handleEraseUpdate, handleEraseEnd: _handleEraseEnd, ) : const SizedBox(), if (region != null) Positioned( right: 16, top: 16, child: _buildThumbnailPreview(l10n), ), if (_isEditing) Positioned( left: 16, top: 16, child: _buildCharacterInput(l10n), ), ], ), ), _buildBottomButtons(saveState, l10n), ], ); }, ), if (saveState.isSaving) Container( color: Colors.black54, child: Center( child: Card( elevation: 4, color: colorScheme.surface, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(16), ), child: Padding( padding: const EdgeInsets.all(24), child: Column( mainAxisSize: MainAxisSize.min, children: [ CircularProgressIndicator( color: colorScheme.primary, ), const SizedBox(height: 24), Text( _getSaveStatusText(saveState.progress, l10n), style: Theme.of(context).textTheme.titleMedium?.copyWith( color: colorScheme.onSurface, ), ), if (saveState.progress != null) ...[ const SizedBox(height: 16), Row( mainAxisAlignment: MainAxisAlignment.center, children: [ SizedBox( width: 200, child: LinearProgressIndicator( value: saveState.progress!, backgroundColor: colorScheme.surfaceContainerHighest, valueColor: AlwaysStoppedAnimation<Color>( colorScheme.primary, ), ), ), const SizedBox(width: 12), Text( '${(saveState.progress! * 100).toInt()}%', style: Theme.of(context) .textTheme .bodyMedium ?.copyWith( color: colorScheme.onSurfaceVariant, ), ), ], ), ], ], ), ), ), ), ), ], ); } Widget _buildErrorWidget(String message) { final colorScheme = Theme.of(context).colorScheme; return Container( width: 100, height: 100, decoration: BoxDecoration( color: colorScheme.surfaceContainerHighest, borderRadius: BorderRadius.circular(12), ), child: Center( child: Column( mainAxisSize: MainAxisSize.min, children: [ Icon(Icons.error_outline, color: colorScheme.error), const SizedBox(width: 4), Text( message, style: TextStyle(fontSize: 12, color: colorScheme.onSurfaceVariant), textAlign: TextAlign.center, ), ], ), ), ); } Widget _buildLoadingState(AppLocalizations l10n) { final colorScheme = Theme.of(context).colorScheme; return Center( child: Column( mainAxisAlignment: MainAxisAlignment.center, children: [ CircularProgressIndicator( strokeWidth: 2, color: colorScheme.primary, ), const SizedBox(height: 16), Text( l10n.loadingImage, style: TextStyle(color: colorScheme.onSurfaceVariant), ), ], ), ); } Widget _buildLoadingWidget() { final colorScheme = Theme.of(context).colorScheme; return Container( width: 100, height: 100, decoration: BoxDecoration( color: colorScheme.surfaceContainerHighest, borderRadius: BorderRadius.circular(12), ), child: Center( child: CircularProgressIndicator( color: colorScheme.primary, strokeWidth: 3, ), ), ); } Widget _buildThumbnailPreview(AppLocalizations l10n) { final region = ref.watch(selectedRegionProvider); if (region == null) { AppLogger.debug( 'CharacterEditPanel - No selected region, not showing thumbnail'); return const SizedBox.shrink(); } if (region.characterId == null) { AppLogger.debug( 'CharacterEditPanel - Region not associated with character, not showing thumbnail'); return const SizedBox.shrink(); } final cacheKey = 'thumbnail_${region.id}_${region.characterId}_$_thumbnailRefreshTimestamp'; AppLogger.debug('Building thumbnail with cache key', data: {'cacheKey': cacheKey}); return FutureBuilder<String?>( key: ValueKey(cacheKey), future: _getThumbnailPath(), builder: (context, snapshot) { AppLogger.debug('CharacterEditPanel - Building thumbnail preview', data: { 'hasError': snapshot.hasError, 'hasData': snapshot.hasData, 'connectionState': snapshot.connectionState.toString(), }); if (snapshot.hasError) { AppLogger.error('CharacterEditPanel - Failed to get thumbnail path', error: snapshot.error); return _buildErrorWidget(l10n.thumbnailLoadError); } if (!snapshot.hasData) { AppLogger.debug('CharacterEditPanel - Waiting for thumbnail path...'); return _buildLoadingWidget(); } final thumbnailPath = snapshot.data!; AppLogger.debug('CharacterEditPanel - Got thumbnail path', data: {'path': thumbnailPath}); return FutureBuilder<bool>( future: File(thumbnailPath).exists(), builder: (context, existsSnapshot) { if (existsSnapshot.hasError) { AppLogger.error( 'CharacterEditPanel - Failed to check if thumbnail file exists', error: existsSnapshot.error); return _buildErrorWidget(l10n.thumbnailCheckFailed); } if (!existsSnapshot.hasData) { AppLogger.debug( 'CharacterEditPanel - Checking if thumbnail file exists...'); return _buildLoadingWidget(); } final exists = existsSnapshot.data!; AppLogger.debug('CharacterEditPanel - Thumbnail file exists', data: {'exists': exists}); if (!exists) { AppLogger.error( 'CharacterEditPanel - Thumbnail file does not exist', data: {'path': thumbnailPath}); return _buildErrorWidget(l10n.thumbnailNotFound); } return FutureBuilder<int>( future: File(thumbnailPath).length(), builder: (context, sizeSnapshot) { if (sizeSnapshot.hasError) { AppLogger.error( 'CharacterEditPanel - Failed to get thumbnail file size', error: sizeSnapshot.error); return _buildErrorWidget(l10n.getThumbnailSizeError); } if (!sizeSnapshot.hasData) { AppLogger.debug( 'CharacterEditPanel - Getting thumbnail file size...'); return _buildLoadingWidget(); } final fileSize = sizeSnapshot.data!; AppLogger.debug('CharacterEditPanel - Thumbnail file size', data: {'fileSize': fileSize}); if (fileSize == 0) { AppLogger.error( 'CharacterEditPanel - Thumbnail file size is 0', data: {'path': thumbnailPath}); return _buildErrorWidget(l10n.thumbnailEmpty); } final colorScheme = Theme.of(context).colorScheme; return Card( elevation: 2, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(12), side: BorderSide( color: colorScheme.outlineVariant, width: 1, ), ), clipBehavior: Clip.antiAlias, child: CachedImage( path: thumbnailPath, width: 100, height: 100, fit: BoxFit.cover, key: ValueKey(cacheKey), errorBuilder: (context, error, stackTrace) { AppLogger.error( 'CharacterEditPanel - Failed to load thumbnail', error: error, stackTrace: stackTrace, data: {'path': thumbnailPath}); return _buildErrorWidget(l10n.thumbnailLoadError); }, ), ); }, ); }, ); }, ); } Widget _buildToolbar(AppLocalizations l10n) { final eraseState = ref.watch(erase.eraseStateProvider); final colorScheme = Theme.of(context).colorScheme; return Container( padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8), color: colorScheme.surface, child: Column( mainAxisSize: MainAxisSize.min, children: [ Row( mainAxisSize: MainAxisSize.max, crossAxisAlignment: CrossAxisAlignment.center, children: [ _buildToolbarButtonGroup([ _ToolbarButton( icon: Icons.undo, tooltip: l10n.undo, onPressed: eraseState.canUndo ? () => ref.read(erase.eraseStateProvider.notifier).undo() : null, shortcut: EditorShortcuts.undo, ), _ToolbarButton( icon: Icons.redo, tooltip: l10n.redo, onPressed: eraseState.canRedo ? () => ref.read(erase.eraseStateProvider.notifier).redo() : null, shortcut: EditorShortcuts.redo, ), ]), const Spacer(), _buildToolbarButtonGroup([ _ToolbarButton( icon: Icons.invert_colors, tooltip: l10n.invertMode, onPressed: () { ref.read(erase.eraseStateProvider.notifier).toggleReverse(); }, isActive: eraseState.isReversed, shortcut: EditorShortcuts.toggleInvert, ), _ToolbarButton( icon: Icons.flip, tooltip: l10n.imageInvert, onPressed: () { ref .read(erase.eraseStateProvider.notifier) .toggleImageInvert(); }, isActive: eraseState.imageInvertMode, shortcut: EditorShortcuts.toggleImageInvert, ), _ToolbarButton( icon: Icons.border_all, tooltip: l10n.showContour, onPressed: () { ref.read(erase.eraseStateProvider.notifier).toggleContour(); }, isActive: eraseState.showContour, shortcut: EditorShortcuts.toggleContour, ), ]), ], ), const SizedBox(height: 12), RepaintBoundary( child: Container( padding: const EdgeInsets.symmetric(vertical: 6, horizontal: 2), decoration: BoxDecoration( color: colorScheme.surfaceContainerLow, borderRadius: BorderRadius.circular(8), ), child: Row( mainAxisSize: MainAxisSize.max, crossAxisAlignment: CrossAxisAlignment.center, children: [ RepaintBoundary( child: Tooltip( message: l10n.brushSize, child: Icon(Icons.brush, size: 16, color: colorScheme.onSurfaceVariant), ), ), const SizedBox(width: 8), const Expanded( child: _BrushSizeSlider(), ), Container( width: 32, alignment: Alignment.center, child: Consumer( builder: (context, ref, child) { final brushSizeText = ref.watch(erase.brushSizeTextProvider); return Text( brushSizeText, style: TextStyle( fontSize: 12, color: colorScheme.onSurfaceVariant, ), ); }, ), ), ], ), ), ), const SizedBox(height: 12), RepaintBoundary( child: Container( padding: const EdgeInsets.symmetric(vertical: 6, horizontal: 2), decoration: BoxDecoration( color: colorScheme.surfaceContainerLow, borderRadius: BorderRadius.circular(8), ), child: Row( mainAxisSize: MainAxisSize.max, crossAxisAlignment: CrossAxisAlignment.center, children: [ RepaintBoundary( child: Tooltip( message: l10n.threshold, child: Icon(Icons.contrast, size: 16, color: colorScheme.onSurfaceVariant), ), ), const SizedBox(width: 8), const Expanded( child: _ThresholdSlider(), ), RepaintBoundary( child: Container( width: 32, alignment: Alignment.center, child: Consumer( builder: (context, ref, child) { final thresholdText = ref.watch(erase.thresholdTextProvider); return Text( thresholdText, style: TextStyle( fontSize: 12, color: colorScheme.onSurfaceVariant, ), ); }, ), ), ), ], ), ), ), const SizedBox(height: 12), RepaintBoundary( child: Container( padding: const EdgeInsets.symmetric(vertical: 6, horizontal: 2), decoration: BoxDecoration( color: colorScheme.surfaceContainerLow, borderRadius: BorderRadius.circular(8), ), child: Row( mainAxisSize: MainAxisSize.max, crossAxisAlignment: CrossAxisAlignment.center, children: [ RepaintBoundary( child: Tooltip( message: l10n.noiseReduction, child: Icon(Icons.blur_on, size: 16, color: colorScheme.onSurfaceVariant), ), ), const SizedBox(width: 8), RepaintBoundary( child: Consumer( builder: (context, ref, child) { final noiseReduction = ref.watch(erase.noiseReductionProvider); return Switch( value: noiseReduction > 0, onChanged: (value) { ref .read(erase.eraseStateProvider.notifier) .toggleNoiseReduction(value); }, ); }, ), ), const SizedBox(width: 8), const Expanded( child: _NoiseReductionSlider(), ), RepaintBoundary( child: Container( width: 32, alignment: Alignment.center, child: Consumer( builder: (context, ref, child) { final noiseReductionText = ref.watch(erase.noiseReductionTextProvider); return Text( noiseReductionText, style: TextStyle( fontSize: 12, color: noiseReductionText != '0.0' ? colorScheme.onSurfaceVariant : colorScheme.onSurfaceVariant .withValues(alpha: 0.5), ), ); }, ), ), ), ], ), ), ), ], ), ); } Widget _buildToolbarButtonGroup(List<_ToolbarButton> buttons) { final colorScheme = Theme.of(context).colorScheme; return Card( elevation: 0, color: colorScheme.surfaceContainerHighest, shape: RoundedRectangleBorder( borderRadius: BorderRadius.circular(8), ), child: Row( mainAxisSize: MainAxisSize.min, children: buttons.map((button) { final isFirst = buttons.indexOf(button) == 0; final isLast = buttons.indexOf(button) == buttons.length - 1; return Padding( padding: const EdgeInsets.symmetric(vertical: 2, horizontal: 1), child: Tooltip( message: ShortcutTooltipBuilder.build(button.tooltip, button.shortcut), child: Stack( children: [ IconButton( icon: Icon( button.icon, size: 20, color: button.isActive ? colorScheme.primary : button.onPressed == null ? colorScheme.onSurfaceVariant .withValues(alpha: 97) : colorScheme.onSurfaceVariant, ), onPressed: button.onPressed, style: IconButton.styleFrom( backgroundColor: button.isActive ? colorScheme.primaryContainer : null, foregroundColor: button.isActive ? colorScheme.onPrimaryContainer : null, shape: RoundedRectangleBorder( borderRadius: BorderRadius.horizontal( left: Radius.circular(isFirst ? 8 : 2), right: Radius.circular(isLast ? 8 : 2), ), ), ), ), ], ), ), ); }).toList(), ), ); } double _calculateOptimalStepLength(double pathLength) { if (pathLength <= 10) { return 0.5; } else if (pathLength <= 50) { return 1.0; } else if (pathLength <= 200) { return 2.0; } else { return 4.0; } } List<Map<String, double>> _extractPointsFromPath(Path path) { List<Map<String, double>> serializablePoints = []; try { for (final metric in path.computeMetrics()) { if (metric.length == 0) { final pathBounds = path.getBounds(); serializablePoints .add({'dx': pathBounds.center.dx, 'dy': pathBounds.center.dy}); continue; } final stepLength = _calculateOptimalStepLength(metric.length); final startTangent = metric.getTangentForOffset(0); if (startTangent != null) { serializablePoints.add( {'dx': startTangent.position.dx, 'dy': startTangent.position.dy}); } for (double distance = stepLength; distance < metric.length; distance += stepLength) { final tangent = metric.getTangentForOffset(distance); if (tangent != null) { serializablePoints .add({'dx': tangent.position.dx, 'dy': tangent.position.dy}); } } if (metric.length > 0) { final lastTangent = metric.getTangentForOffset(metric.length); if (lastTangent != null) { if (serializablePoints.isEmpty || serializablePoints.last['dx'] != lastTangent.position.dx || serializablePoints.last['dy'] != lastTangent.position.dy) { serializablePoints.add({ 'dx': lastTangent.position.dx, 'dy': lastTangent.position.dy }); } } } } } catch (e) { AppLogger.error('Failed to extract points from path', error: e); } return serializablePoints; } String _getSaveStatusText(double? progress, AppLocalizations l10n) { if (progress == null) return l10n.preparingSave; if (progress <= 0.2) return l10n.initializing; if (progress <= 0.4) return l10n.processingEraseData; if (progress <= 0.6) return l10n.savingToStorage; if (progress <= 0.8) return l10n.processingImage; if (progress < 1.0) return l10n.completingSave; return l10n.saveComplete; } Future<String?> _getThumbnailPath() async { try { AppLogger.debug('Getting thumbnail path', data: { 'regionId': widget.selectedRegion.id, 'characterId': widget.selectedRegion.characterId, }); final String characterId = widget.selectedRegion.characterId ?? widget.selectedRegion.id; AppLogger.debug('Thumbnail context info', data: { 'workId': widget.workId, 'pageId': widget.pageId, 'characterId': characterId, }); final path = await ref .read(characterCollectionProvider.notifier) .getThumbnailPath(characterId); if (path == null) { AppLogger.error('Thumbnail path is null', data: {'characterId': characterId}); return null; } final file = File(path); final exists = await file.exists(); if (!exists) { AppLogger.error('Thumbnail file does not exist', data: {'path': path}); return null; } final fileSize = await file.length(); if (fileSize == 0) { AppLogger.error('Thumbnail file size is 0', data: {'path': path}); return null; } return path; } catch (e, stack) { AppLogger.error('Failed to get thumbnail path', error: e, stackTrace: stack, data: { 'characterId': widget.selectedRegion.characterId, 'regionId': widget.selectedRegion.id, }); return null; } } void _handleChangeBrushSize(bool increase) { final eraseState = ref.read(erase.eraseStateProvider); final eraseNotifier = ref.read(erase.eraseStateProvider.notifier); double newSize = eraseState.brushSize; if (increase) { newSize += EditorShortcuts.brushSizeStep; if (newSize > EditorShortcuts.maxBrushSize) { newSize = EditorShortcuts.maxBrushSize; } } else { newSize -= EditorShortcuts.brushSizeStep; if (newSize < EditorShortcuts.minBrushSize) { newSize = EditorShortcuts.minBrushSize; } } eraseNotifier.setBrushSize(newSize); AppLogger.debug('Adjusting brush size', data: { 'operation': increase ? 'increase' : 'decrease', 'oldSize': eraseState.brushSize, 'newSize': newSize, }); } void _handleEraseEnd() { ref.read(erase.eraseStateProvider.notifier).completePath(); } void _handleEraseStart(Offset position) { ref.read(erase.eraseStateProvider.notifier).startPath(position); } void _handleEraseUpdate(Offset position, Offset delta) { ref.read(erase.eraseStateProvider.notifier).updatePath(position); } bool _handleKeyboardEvent(KeyEvent event) { if (!mounted) return false; if (event.logicalKey == LogicalKeyboardKey.alt || event.logicalKey == LogicalKeyboardKey.altLeft || event.logicalKey == LogicalKeyboardKey.altRight) { bool isDown = event is KeyDownEvent; bool isUp = event is KeyUpEvent; if (isDown || isUp) { if (_canvasKey.currentState != null) { AppLogger.debug('Alt key state changed', data: {'isDown': isDown}); } } return false; } if (event is KeyDownEvent && HardwareKeyboard.instance.isControlPressed) { if (event.logicalKey == LogicalKeyboardKey.equal || (event.logicalKey == LogicalKeyboardKey.add)) { _handleChangeBrushSize(true); return true; } else if (event.logicalKey == LogicalKeyboardKey.minus || event.logicalKey == LogicalKeyboardKey.underscore) { _handleChangeBrushSize(false); return true; } } return false; } Future<void> _handleSave() async { final l10n = AppLocalizations.of(context); final validation = _CharacterInputValidator.validateCharacter( _characterController.text, l10n); if (!validation.isValid) { ScaffoldMessenger.of(context).showSnackBar( SnackBar(content: Text(validation.error!)), ); setState(() => _isEditing = true); return; } final saveNotifier = ref.read(characterSaveNotifierProvider.notifier); final collectionNotifier = ref.read(characterCollectionProvider.notifier); try { final confirmed = await showM3SaveConfirmationDialog( context, character: _characterController.text, ); if (confirmed != true) { AppLogger.debug('User canceled save operation'); _progressTimer?.cancel(); saveNotifier.finishSaving(); return; } if (!mounted) { AppLogger.debug('Component unmounted, canceling save'); _progressTimer?.cancel(); saveNotifier.finishSaving(); return; } AppLogger.debug('Starting save operation'); saveNotifier.startSaving(); await Future.microtask(() {}); if (!mounted) return; saveNotifier.updateProgress(0.15); final pathRenderData = ref.read(erase.pathRenderDataProvider); final eraseState = ref.read(erase.eraseStateProvider); final completedPaths = pathRenderData.completedPaths; final List<Map<String, dynamic>> eraseData = []; if (completedPaths.isNotEmpty) { try { final pathDataFuture = compute<List<Map<String, dynamic>>, List<Map<String, dynamic>>>( (pathsData) { return pathsData; }, completedPaths.map((path) { final points = _extractPointsFromPath(path.path); return { 'points': points, 'brushSize': path.brushSize, 'brushColor': path.brushColor.toARGB32(), }; }).toList(), ); saveNotifier.updateProgress(0.2); eraseData.addAll(await pathDataFuture); } catch (e) { AppLogger.error('Path data processing failed: $e'); } } if (eraseData.isNotEmpty) { final firstPath = eraseData.first; final points = firstPath['points'] as List<Map<String, double>>; AppLogger.debug('Validating erase path data', data: { 'erasePaths': eraseData.length, 'firstPathBrushSize': firstPath['brushSize'], 'firstPathBrushColor': (firstPath['brushColor'] as int).toRadixString(16), 'firstPathPointCount': points.length, 'firstPathSamplePoints': points .take(3) .map((p) => '(${p['dx']?.toStringAsFixed(1)},${p['dy']?.toStringAsFixed(1)})') .toList(), }); } final processingOptions = ProcessingOptions( inverted: eraseState.imageInvertMode, showContour: eraseState.showContour, brushSize: eraseState.brushSize, contrast: widget.processingOptions.contrast, brightness: widget.processingOptions.brightness, threshold: widget.processingOptions.threshold, noiseReduction: widget.processingOptions.noiseReduction, ); final selectedRegion = ref.read(selectedRegionProvider); if (selectedRegion == null) { throw _SaveError(l10n.noRegionBoxed); } final updatedRegion = selectedRegion.copyWith( pageId: widget.pageId, character: _characterController.text, options: processingOptions, isModified: false, eraseData: eraseData.isNotEmpty ? eraseData : null, ); try { var progress = 0.25; const updateInterval = Duration(milliseconds: 24); _progressTimer = Timer.periodic( updateInterval, (timer) { if (!mounted) { timer.cancel(); return; } double increment; if (progress < 0.3) { increment = 0.03; } else if (progress < 0.7) { increment = 0.01; } else { increment = 0.005; } if (progress < 0.95) { progress += increment; saveNotifier.updateProgress(progress); } }, ); try { saveNotifier.updateProgress(0.3); collectionNotifier.updateSelectedRegion(updatedRegion); saveNotifier.updateProgress(0.4); await Future.any([ Future.sync(() async { await collectionNotifier.saveCurrentRegion(processingOptions); saveNotifier.updateProgress(0.98); }), Future.delayed(const Duration(seconds: 30)) .then((_) => throw _SaveError(l10n.saveTimeout)), ]); } on _SaveError { AppLogger.error('Save timeout'); rethrow; } saveNotifier.updateProgress(0.98); saveNotifier.finishSaving(); ref .read(characterRefreshNotifierProvider.notifier) .notifyEvent(RefreshEventType.characterSaved); } catch (e) { final notifier = ref.read(characterSaveNotifierProvider.notifier); notifier.setError(e.toString()); rethrow; } } catch (e) { AppLogger.error('Failed to save character', error: e); _progressTimer?.cancel(); saveNotifier.setError(e.toString()); setState(() => _isEditing = true); } finally { _progressTimer?.cancel(); } } Future<void> _initializeProcessingOptions() async { try { ProcessingOptions optionsToUse; String sourceDescription; if (widget.selectedRegion.characterId != null) { optionsToUse = widget.selectedRegion.options; sourceDescription = '现有区域的处理选项"
建议新键: snapshotErrorUnknownerrorStyleTextstyleColorColorschemeOnsurfacevariantFontsizeTextalignTextalignCenterFinalLoadedimageforcanvasSnapshotDataFinalRegionRefWatchSelectedregionproviderReturnColumnChildrenExpandedChildStackChildrenRegionNullRegionRegionCanvaskeyImageLoadedimageforcanvasHandleerasestartHandleeraseupdateHandleeraseendConstSizedboxIfRegionNullPositionedRightTopChildIfPositionedLeftTopChildSavestateIfSavestateIssavingContainerColorColorsChildCenterChildCardElevationColorColorschemeSurfaceShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildPaddingPaddingConstEdgeinsetsAllChildColumnMainaxissizeMainaxissizeMinChildrenCircularprogressindicatorColorColorschemePrimaryConstSizedboxHeightTextSavestateProgressStyleThemeOfContextTextthemeTitlemediumCopywithColorColorschemeOnsurfaceIfSavestateProgressNullConstSizedboxHeightRowMainaxisalignmentMainaxisalignmentCenterChildrenSizedboxWidthChildLinearprogressindicatorValueSavestateProgressBackgroundcolorColorschemeSurfacecontainerhighestValuecolorAlwaysstoppedanimationColorColorschemePrimaryConstSizedboxWidthTextSavestateProgressTointStyleThemeOfContextTextthemeBodymediumCopywithColorColorschemeOnsurfacevariantWidgetStringMessageFinalColorschemeThemeOfContextColorschemeReturnContainerWidthHeightDecorationBoxdecorationColorColorschemeSurfacecontainerhighestBorderradiusBorderradiusCircularChildCenterChildColumnMainaxissizeMainaxissizeMinChildrenIconIconsColorColorschemeErrorConstSizedboxWidthTextMessageStyleTextstyleFontsizeColorColorschemeOnsurfacevariantTextalignTextalignCenterWidgetApplocalizationsFinalColorschemeThemeOfContextColorschemeReturnCenterChildColumnMainaxisalignmentMainaxisalignmentCenterChildrenCircularprogressindicatorStrokewidthColorColorschemePrimaryConstSizedboxHeightTextLoadingimageStyleTextstyleColorColorschemeOnsurfacevariantWidgetFinalColorschemeThemeOfContextColorschemeReturnContainerWidthHeightDecorationBoxdecorationColorColorschemeSurfacecontainerhighestBorderradiusBorderradiusCircularChildCenterChildCircularprogressindicatorColorColorschemePrimaryStrokewidthWidgetApplocalizationsFinalRegionRefWatchSelectedregionproviderIfRegionNullApploggerDebugCharactereditpanelNoSelectedRegionNotShowingThumbnailReturnConstSizedboxShrinkIfRegionCharacteridNullApploggerDebugCharactereditpanelRegionNotAssociatedWithCharacterNotShowingThumbnailReturnConstSizedboxShrinkFinalCachekeyRegionIdRegionCharacteridApploggerDebugBuildingThumbnailWithCacheKeyDataCachekeyCachekeyReturnFuturebuilderStringKeyValuekeyCachekeyFutureBuilderContextSnapshotApploggerDebugCharactereditpanelBuildingThumbnailPreviewDataHaserrorSnapshotHaserrorHasdataSnapshotHasdataConnectionstateSnapshotConnectionstateTostringIfSnapshotHaserrorApploggerErrorCharactereditpanelFailedToGetThumbnailPathErrorSnapshotErrorReturnThumbnailloaderrorIfSnapshotHasdataApploggerDebugCharactereditpanelWaitingForThumbnailPathReturnFinalThumbnailpathSnapshotDataApploggerDebugCharactereditpanelGotThumbnailPathDataPathThumbnailpathReturnFuturebuilderBoolFutureFileThumbnailpathExistsBuilderContextExistssnapshotIfExistssnapshotHaserrorApploggerErrorCharactereditpanelFailedToCheckIfThumbnailFileExistsErrorExistssnapshotErrorReturnThumbnailcheckfailedIfExistssnapshotHasdataApploggerDebugCharactereditpanelCheckingIfThumbnailFileExistsReturnFinalExistsExistssnapshotDataApploggerDebugCharactereditpanelThumbnailFileExistsDataExistsExistsIfExistsApploggerErrorCharactereditpanelThumbnailFileDoesNotExistDataPathThumbnailpathReturnThumbnailnotfoundReturnFuturebuilderIntFutureFileThumbnailpathLengthBuilderContextSizesnapshotIfSizesnapshotHaserrorApploggerErrorCharactereditpanelFailedToGetThumbnailFileSizeErrorSizesnapshotErrorReturnGetthumbnailsizeerrorIfSizesnapshotHasdataApploggerDebugCharactereditpanelGettingThumbnailFileSizeReturnFinalFilesizeSizesnapshotDataApploggerDebugCharactereditpanelThumbnailFileSizeDataFilesizeFilesizeIfFilesizeApploggerErrorCharactereditpanelThumbnailFileSizeIsDataPathThumbnailpathReturnThumbnailemptyFinalColorschemeThemeOfContextColorschemeReturnCardElevationShapeRoundedrectangleborderBorderradiusBorderradiusCircularSideBordersideColorColorschemeOutlinevariantWidthClipbehaviorClipAntialiasChildCachedimagePathThumbnailpathWidthHeightFitBoxfitCoverKeyValuekeyCachekeyErrorbuilderContextErrorStacktraceApploggerErrorCharactereditpanelFailedToLoadThumbnailErrorErrorStacktraceStacktraceDataPathThumbnailpathReturnThumbnailloaderrorWidgetApplocalizationsFinalErasestateRefWatchEraseErasestateproviderFinalColorschemeThemeOfContextColorschemeReturnContainerPaddingConstEdgeinsetsSymmetricHorizontalVerticalColorColorschemeSurfaceChildColumnMainaxissizeMainaxissizeMinChildrenRowMainaxissizeMainaxissizeMaxCrossaxisalignmentCrossaxisalignmentCenterChildrenIconIconsUndoTooltipUndoOnpressedErasestateCanundoRefReadEraseErasestateproviderNotifierUndoNullShortcutEditorshortcutsUndoIconIconsRedoTooltipRedoOnpressedErasestateCanredoRefReadEraseErasestateproviderNotifierRedoNullShortcutEditorshortcutsRedoConstSpacerIconIconsTooltipInvertmodeOnpressedRefReadEraseErasestateproviderNotifierTogglereverseIsactiveErasestateIsreversedShortcutEditorshortcutsToggleinvertIconIconsFlipTooltipImageinvertOnpressedRefReadEraseErasestateproviderNotifierToggleimageinvertIsactiveErasestateImageinvertmodeShortcutEditorshortcutsToggleimageinvertIconIconsTooltipShowcontourOnpressedRefReadEraseErasestateproviderNotifierTogglecontourIsactiveErasestateShowcontourShortcutEditorshortcutsTogglecontourConstSizedboxHeightRepaintboundaryChildContainerPaddingConstEdgeinsetsSymmetricVerticalHorizontalDecorationBoxdecorationColorColorschemeSurfacecontainerlowBorderradiusBorderradiusCircularChildRowMainaxissizeMainaxissizeMaxCrossaxisalignmentCrossaxisalignmentCenterChildrenRepaintboundaryChildTooltipMessageBrushsizeChildIconIconsBrushSizeColorColorschemeOnsurfacevariantConstSizedboxWidthConstExpandedChildContainerWidthAlignmentAlignmentCenterChildConsumerBuilderContextRefChildFinalBrushsizetextRefWatchEraseBrushsizetextproviderReturnTextBrushsizetextStyleTextstyleFontsizeColorColorschemeOnsurfacevariantConstSizedboxHeightRepaintboundaryChildContainerPaddingConstEdgeinsetsSymmetricVerticalHorizontalDecorationBoxdecorationColorColorschemeSurfacecontainerlowBorderradiusBorderradiusCircularChildRowMainaxissizeMainaxissizeMaxCrossaxisalignmentCrossaxisalignmentCenterChildrenRepaintboundaryChildTooltipMessageThresholdChildIconIconsContrastSizeColorColorschemeOnsurfacevariantConstSizedboxWidthConstExpandedChildRepaintboundaryChildContainerWidthAlignmentAlignmentCenterChildConsumerBuilderContextRefChildFinalThresholdtextRefWatchEraseThresholdtextproviderReturnTextThresholdtextStyleTextstyleFontsizeColorColorschemeOnsurfacevariantConstSizedboxHeightRepaintboundaryChildContainerPaddingConstEdgeinsetsSymmetricVerticalHorizontalDecorationBoxdecorationColorColorschemeSurfacecontainerlowBorderradiusBorderradiusCircularChildRowMainaxissizeMainaxissizeMaxCrossaxisalignmentCrossaxisalignmentCenterChildrenRepaintboundaryChildTooltipMessageNoisereductionChildIconIconsSizeColorColorschemeOnsurfacevariantConstSizedboxWidthRepaintboundaryChildConsumerBuilderContextRefChildFinalNoisereductionRefWatchEraseNoisereductionproviderReturnSwitchValueNoisereductionOnchangedValueRefReadEraseErasestateproviderNotifierTogglenoisereductionValueConstSizedboxWidthConstExpandedChildRepaintboundaryChildContainerWidthAlignmentAlignmentCenterChildConsumerBuilderContextRefChildFinalNoisereductiontextRefWatchEraseNoisereductiontextproviderReturnTextNoisereductiontextStyleTextstyleFontsizeColorNoisereductiontextColorschemeOnsurfacevariantColorschemeOnsurfacevariantWithvaluesAlphaWidgetListButtonsFinalColorschemeThemeOfContextColorschemeReturnCardElevationColorColorschemeSurfacecontainerhighestShapeRoundedrectangleborderBorderradiusBorderradiusCircularChildRowMainaxissizeMainaxissizeMinChildrenButtonsMapButtonFinalIsfirstButtonsIndexofButtonFinalIslastButtonsIndexofButtonButtonsLengthReturnPaddingPaddingConstEdgeinsetsSymmetricVerticalHorizontalChildTooltipMessageShortcuttooltipbuilderBuildButtonTooltipButtonShortcutChildStackChildrenIconbuttonIconIconButtonIconSizeColorButtonIsactiveColorschemePrimaryButtonOnpressedNullColorschemeOnsurfacevariantWithvaluesAlphaColorschemeOnsurfacevariantOnpressedButtonOnpressedStyleIconbuttonStylefromBackgroundcolorButtonIsactiveColorschemePrimarycontainerNullForegroundcolorButtonIsactiveColorschemeOnprimarycontainerNullShapeRoundedrectangleborderBorderradiusBorderradiusHorizontalLeftRadiusCircularIsfirstRightRadiusCircularIslastTolistDoubleDoublePathlengthIfPathlengthReturnElseIfPathlengthReturnElseIfPathlengthReturnElseReturnListMapStringDoublePathPathListMapStringDoubleSerializablepointsTryForFinalMetricInPathComputemetricsIfMetricLengthFinalPathboundsPathGetboundsSerializablepointsAddDxPathboundsCenterDxDyPathboundsCenterDyContinueFinalSteplengthMetricLengthFinalStarttangentMetricGettangentforoffsetIfStarttangentNullSerializablepointsAddDxStarttangentPositionDxDyStarttangentPositionDyForDoubleDistanceSteplengthDistanceMetricLengthDistanceSteplengthFinalTangentMetricGettangentforoffsetDistanceIfTangentNullSerializablepointsAddDxTangentPositionDxDyTangentPositionDyIfMetricLengthFinalLasttangentMetricGettangentforoffsetMetricLengthIfLasttangentNullIfSerializablepointsIsemptySerializablepointsLastDxLasttangentPositionDxSerializablepointsLastDyLasttangentPositionDySerializablepointsAddDxLasttangentPositionDxDyLasttangentPositionDyCatchEApploggerErrorFailedToExtractPointsFromPathErrorEReturnSerializablepointsStringDoubleProgressApplocalizationsIfProgressNullReturnPreparingsaveIfProgressReturnInitializingIfProgressReturnProcessingerasedataIfProgressReturnSavingtostorageIfProgressReturnProcessingimageIfProgressReturnCompletingsaveReturnSavecompleteFutureStringAsyncTryApploggerDebugGettingThumbnailPathDataRegionidWidgetSelectedregionIdCharacteridWidgetSelectedregionCharacteridFinalStringCharacteridWidgetSelectedregionCharacteridWidgetSelectedregionIdApploggerDebugThumbnailContextInfoDataWorkidWidgetWorkidPageidWidgetPageidCharacteridCharacteridFinalPathAwaitRefReadCharactercollectionproviderNotifierGetthumbnailpathCharacteridIfPathNullApploggerErrorThumbnailPathIsNullDataCharacteridCharacteridReturnNullFinalFileFilePathFinalExistsAwaitFileExistsIfExistsApploggerErrorThumbnailFileDoesNotExistDataPathPathReturnNullFinalFilesizeAwaitFileLengthIfFilesizeApploggerErrorThumbnailFileSizeIsDataPathPathReturnNullReturnPathCatchEStackApploggerErrorFailedToGetThumbnailPathErrorEStacktraceStackDataCharacteridWidgetSelectedregionCharacteridRegionidWidgetSelectedregionIdReturnNullVoidBoolIncreaseFinalErasestateRefReadEraseErasestateproviderFinalErasenotifierRefReadEraseErasestateproviderNotifierDoubleNewsizeErasestateBrushsizeIfIncreaseNewsizeEditorshortcutsBrushsizestepIfNewsizeEditorshortcutsMaxbrushsizeNewsizeEditorshortcutsMaxbrushsizeElseNewsizeEditorshortcutsBrushsizestepIfNewsizeEditorshortcutsMinbrushsizeNewsizeEditorshortcutsMinbrushsizeErasenotifierSetbrushsizeNewsizeApploggerDebugAdjustingBrushSizeDataOperationIncreaseIncreaseDecreaseOldsizeErasestateBrushsizeNewsizeNewsizeVoidRefReadEraseErasestateproviderNotifierCompletepathVoidOffsetPositionRefReadEraseErasestateproviderNotifierStartpathPositionVoidOffsetPositionOffsetDeltaRefReadEraseErasestateproviderNotifierUpdatepathPositionBoolKeyeventEventIfMountedReturnFalseIfEventLogicalkeyLogicalkeyboardkeyAltEventLogicalkeyLogicalkeyboardkeyAltleftEventLogicalkeyLogicalkeyboardkeyAltrightBoolIsdownEventIsKeydowneventBoolIsupEventIsKeyupeventIfIsdownIsupIfCurrentstateNullApploggerDebugAltKeyStateChangedDataIsdownIsdownReturnFalseIfEventIsKeydowneventHardwarekeyboardInstanceIscontrolpressedIfEventLogicalkeyLogicalkeyboardkeyEqualEventLogicalkeyLogicalkeyboardkeyAddTrueReturnTrueElseIfEventLogicalkeyLogicalkeyboardkeyMinusEventLogicalkeyLogicalkeyboardkeyUnderscoreFalseReturnTrueReturnFalseFutureVoidAsyncFinalApplocalizationsOfContextFinalValidationValidatecharacterTextIfValidationIsvalidScaffoldmessengerOfContextShowsnackbarSnackbarContentTextValidationErrorSetstateTrueReturnFinalSavenotifierRefReadCharactersavenotifierproviderNotifierFinalCollectionnotifierRefReadCharactercollectionproviderNotifierTryFinalConfirmedAwaitContextCharacterTextIfConfirmedTrueApploggerDebugUserCanceledSaveOperationCancelSavenotifierFinishsavingReturnIfMountedApploggerDebugComponentUnmountedCancelingSaveCancelSavenotifierFinishsavingReturnApploggerDebugStartingSaveOperationSavenotifierStartsavingAwaitFutureMicrotaskIfMountedReturnSavenotifierUpdateprogressFinalPathrenderdataRefReadErasePathrenderdataproviderFinalErasestateRefReadEraseErasestateproviderFinalCompletedpathsPathrenderdataCompletedpathsFinalListMapStringDynamicErasedataIfCompletedpathsIsnotemptyTryFinalPathdatafutureComputeListMapStringDynamicListMapStringDynamicPathsdataReturnPathsdataCompletedpathsMapPathFinalPointsPathPathReturnPointsPointsBrushsizePathBrushsizeBrushcolorPathBrushcolorTolistSavenotifierUpdateprogressErasedataAddallAwaitPathdatafutureCatchEApploggerErrorPathDataProcessingFailedEIfErasedataIsnotemptyFinalFirstpathErasedataFirstFinalPointsFirstpathPointsAsListMapStringDoubleApploggerDebugValidatingErasePathDataDataErasepathsErasedataLengthFirstpathbrushsizeFirstpathBrushsizeFirstpathbrushcolorFirstpathBrushcolorAsIntToradixstringFirstpathpointcountPointsLengthFirstpathsamplepointsPointsTakeMapPPDxTostringasfixedPDyTostringasfixedTolistFinalProcessingoptionsProcessingoptionsInvertedErasestateImageinvertmodeShowcontourErasestateShowcontourBrushsizeErasestateBrushsizeContrastWidgetProcessingoptionsContrastBrightnessWidgetProcessingoptionsBrightnessThresholdWidgetProcessingoptionsThresholdNoisereductionWidgetProcessingoptionsNoisereductionFinalSelectedregionRefReadSelectedregionproviderIfSelectedregionNullThrowNoregionboxedFinalUpdatedregionSelectedregionCopywithPageidWidgetPageidCharacterTextOptionsProcessingoptionsIsmodifiedFalseErasedataErasedataIsnotemptyErasedataNullTryVarProgressConstUpdateintervalDurationMillisecondsTimerPeriodicUpdateintervalTimerIfMountedTimerCancelReturnDoubleIncrementIfProgressIncrementElseIfProgressIncrementElseIncrementIfProgressProgressIncrementSavenotifierUpdateprogressProgressTrySavenotifierUpdateprogressCollectionnotifierUpdateselectedregionUpdatedregionSavenotifierUpdateprogressAwaitFutureAnyFutureSyncAsyncAwaitCollectionnotifierSavecurrentregionProcessingoptionsSavenotifierUpdateprogressFutureDelayedConstDurationSecondsThenThrowSavetimeoutOnApploggerErrorSaveTimeoutRethrowSavenotifierUpdateprogressSavenotifierFinishsavingRefReadCharacterrefreshnotifierproviderNotifierNotifyeventRefresheventtypeCharactersavedCatchEFinalNotifierRefReadCharactersavenotifierproviderNotifierNotifierSeterrorETostringRethrowCatchEApploggerErrorFailedToSaveCharacterErrorECancelSavenotifierSeterrorETostringSetstateTrueFinallyCancelFutureVoidAsyncTryProcessingoptionsOptionstouseStringSourcedescriptionIfWidgetSelectedregionCharacteridNullOptionstouseWidgetSelectedregionOptionsSourcedescription
代码行: ),
----------------------------------------
文件: widgets\character_edit\m3_character_edit_panel.dart, 行: 1633
硬编码文本: "笔刷大小已根据图像尺寸自动调整为 ${dynamicBrushSize.toStringAsFixed(1)}"
建议新键: dynamicbrushsizeTostringasfixed
代码行: // Check if the selected region has existing processing options
----------------------------------------

--- UI_PROPERTIES (16 个) ---
文件: application\repositories\practice_repository_impl.dart, 行: 54
硬编码文本: "${practice.title} (副本)"
建议新键: practiceTitle副本
代码行: title: '${practice.title} (副本)',
----------------------------------------
文件: presentation\pages\works\components\content\items\m3_work_list_item.dart, 行: 330
硬编码文本: "编辑标签"
建议新键: property
代码行: tooltip: '编辑标签',
----------------------------------------
文件: presentation\widgets\common\zoomable_image_view.dart, 行: 103
硬编码文本: "重置缩放"
建议新键: property1
代码行: tooltip: '重置缩放',
----------------------------------------
文件: presentation\widgets\practice\element_operations_mixin.dart, 行: 489
硬编码文本: "均匀分布元素"
建议新键: property2
代码行: description: '均匀分布元素',
----------------------------------------
文件: presentation\widgets\practice\layer_management_mixin.dart, 行: 295
硬编码文本: "添加复制图层中的元素"
建议新键: property3
代码行: description: '添加复制图层中的元素',
----------------------------------------
文件: presentation\widgets\practice\optimized_save_service.dart, 行: 165
硬编码文本: "字帖"
建议新键: 字帖
代码行: message: '字帖 "$saveTitle" 保存成功',
----------------------------------------
文件: presentation\widgets\practice\property_panels\property_panel_base.dart, 行: 22
硬编码文本: "基础属性"
建议新键: property4
代码行: const PropertyGroupTitle(title: '基础属性'),
----------------------------------------
文件: presentation\widgets\practice\property_panels\property_panel_base.dart, 行: 292
硬编码文本: "选择颜色"
建议新键: property5
代码行: tooltip: '选择颜色',
----------------------------------------
文件: presentation\widgets\works\preview_mode_config.dart, 行: 11
硬编码文本: "添加图片"
建议新键: property6
代码行: tooltip: '添加图片',
----------------------------------------
文件: presentation\widgets\works\preview_mode_config.dart, 行: 16
硬编码文本: "保存更改"
建议新键: property7
代码行: tooltip: '保存更改',
----------------------------------------
文件: presentation\widgets\works\preview_mode_config.dart, 行: 22
硬编码文本: "删除图片"
建议新键: property8
代码行: tooltip: '删除图片',
----------------------------------------
文件: presentation\widgets\works\preview_mode_config.dart, 行: 35
硬编码文本: "框选工具"
建议新键: property9
代码行: tooltip: '框选工具',
----------------------------------------
文件: presentation\widgets\works\preview_mode_config.dart, 行: 40
硬编码文本: "多选工具"
建议新键: property10
代码行: tooltip: '多选工具',
----------------------------------------
文件: presentation\widgets\works\preview_mode_config.dart, 行: 45
硬编码文本: "删除选中区域"
建议新键: property11
代码行: tooltip: '删除选中区域',
----------------------------------------
文件: presentation\widgets\works\preview_mode_config.dart, 行: 58
硬编码文本: "添加图片"
建议新键: property12
代码行: tooltip: '添加图片',
----------------------------------------
文件: presentation\widgets\works\preview_mode_config.dart, 行: 63
硬编码文本: "删除图片"
建议新键: property13
代码行: tooltip: '删除图片',
----------------------------------------

--- STRING_CONSTANTS (51 个) ---
文件: presentation\dialogs\optimized_save_dialog.dart, 行: 27
硬编码文本: "准备保存..."
建议新键: dialog
代码行: String _message = '准备保存...';
----------------------------------------
文件: presentation\pages\works\components\thumbnail_strip.dart, 行: 203
硬编码文本: "图片文件不存在"
建议新键: label
代码行: String errorMessage = '图片文件不存在';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 20
硬编码文本: "添加元素"
建议新键: label1
代码行: final String description = '添加元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 20
硬编码文本: "添加元素"
建议新键: label2
代码行: final String description = '添加元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 61
硬编码文本: "删除元素"
建议新键: label3
代码行: final String description = '删除元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 61
硬编码文本: "删除元素"
建议新键: label4
代码行: final String description = '删除元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 103
硬编码文本: "更新元素属性"
建议新键: label5
代码行: final String description = '更新元素属性';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 103
硬编码文本: "更新元素属性"
建议新键: label6
代码行: final String description = '更新元素属性';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 194
硬编码文本: "移动元素"
建议新键: label7
代码行: final String description = '移动元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 194
硬编码文本: "移动元素"
建议新键: label8
代码行: final String description = '移动元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 260
硬编码文本: "调整元素大小"
建议新键: label9
代码行: final String description = '调整元素大小';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 260
硬编码文本: "调整元素大小"
建议新键: label10
代码行: final String description = '调整元素大小';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 326
硬编码文本: "旋转元素"
建议新键: label11
代码行: final String description = '旋转元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 326
硬编码文本: "旋转元素"
建议新键: label12
代码行: final String description = '旋转元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 378
硬编码文本: "旋转组合元素"
建议新键: label13
代码行: final String description = '旋转组合元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 378
硬编码文本: "旋转组合元素"
建议新键: label14
代码行: final String description = '旋转组合元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 451
硬编码文本: "添加图层"
建议新键: label15
代码行: final String description = '添加图层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 451
硬编码文本: "添加图层"
建议新键: label16
代码行: final String description = '添加图层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 495
硬编码文本: "删除图层"
建议新键: label17
代码行: final String description = '删除图层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 495
硬编码文本: "删除图层"
建议新键: label18
代码行: final String description = '删除图层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 526
硬编码文本: "更新图层属性"
建议新键: label19
代码行: final String description = '更新图层属性';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 526
硬编码文本: "更新图层属性"
建议新键: label20
代码行: final String description = '更新图层属性';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 553
硬编码文本: "重新排序图层"
建议新键: label21
代码行: final String description = '重新排序图层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 553
硬编码文本: "重新排序图层"
建议新键: label22
代码行: final String description = '重新排序图层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 579
硬编码文本: "添加页面"
建议新键: label23
代码行: final String description = '添加页面';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 579
硬编码文本: "添加页面"
建议新键: label24
代码行: final String description = '添加页面';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 605
硬编码文本: "重新排序页面"
建议新键: label25
代码行: final String description = '重新排序页面';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 605
硬编码文本: "重新排序页面"
建议新键: label26
代码行: final String description = '重新排序页面';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 632
硬编码文本: "更新页面属性"
建议新键: label27
代码行: final String description = '更新页面属性';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 632
硬编码文本: "更新页面属性"
建议新键: label28
代码行: final String description = '更新页面属性';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 661
硬编码文本: "组合元素"
建议新键: label29
代码行: final String description = '组合元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 661
硬编码文本: "组合元素"
建议新键: label30
代码行: final String description = '组合元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 721
硬编码文本: "取消组合元素"
建议新键: label31
代码行: final String description = '取消组合元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 721
硬编码文本: "取消组合元素"
建议新键: label32
代码行: final String description = '取消组合元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 780
硬编码文本: "应用格式刷"
建议新键: label33
代码行: final String description = '应用格式刷';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 780
硬编码文本: "应用格式刷"
建议新键: label34
代码行: final String description = '应用格式刷';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 830
硬编码文本: "置于顶层"
建议新键: label35
代码行: final String description = '置于顶层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 830
硬编码文本: "置于顶层"
建议新键: label36
代码行: final String description = '置于顶层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 858
硬编码文本: "置于底层"
建议新键: label37
代码行: final String description = '置于底层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 858
硬编码文本: "置于底层"
建议新键: label38
代码行: final String description = '置于底层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 886
硬编码文本: "上移一层"
建议新键: label39
代码行: final String description = '上移一层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 886
硬编码文本: "上移一层"
建议新键: label40
代码行: final String description = '上移一层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 914
硬编码文本: "下移一层"
建议新键: label41
代码行: final String description = '下移一层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 914
硬编码文本: "下移一层"
建议新键: label42
代码行: final String description = '下移一层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 941
硬编码文本: "粘贴元素"
建议新键: label43
代码行: final String description = '粘贴元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 941
硬编码文本: "粘贴元素"
建议新键: label44
代码行: final String description = '粘贴元素';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 985
硬编码文本: "删除所有图层"
建议新键: label45
代码行: final String description = '删除所有图层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 985
硬编码文本: "删除所有图层"
建议新键: label46
代码行: final String description = '删除所有图层';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 1016
硬编码文本: "删除页面"
建议新键: label47
代码行: final String description = '删除页面';
----------------------------------------
文件: presentation\widgets\practice\undo_operations.dart, 行: 1016
硬编码文本: "删除页面"
建议新键: label48
代码行: final String description = '删除页面';
----------------------------------------
文件: presentation\widgets\practice\guideline_alignment\guideline_manager.dart, 行: 220
硬编码文本: "translate', // 'translate' 或"
建议新键: translateTranslate或
代码行: String operationType = 'translate', // 'translate' 或 'resize'
----------------------------------------
