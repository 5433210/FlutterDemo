# FILE:main.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\main.dart
import 'package:demo/presentation/pages/settings/settings_page.dart';
import 'package:flutter/material.dart';
import 'package:window_manager/window_manager.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
// import 'package:flutter_gen/gen_l10n/app_localizations.dart';
import 'presentation/pages/works/work_browse_page.dart';
import 'presentation/widgets/window/title_bar.dart';
import 'presentation/widgets/navigation/side_nav.dart';
import 'presentation/pages/characters/character_list_page.dart';
import 'presentation/pages/practices/practice_list_page.dart';
import 'infrastructure/persistence/sqlite/sqlite_database.dart';
import 'theme/app_theme.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await windowManager.ensureInitialized();

  WindowOptions windowOptions = const WindowOptions(
    minimumSize: Size(800, 600),
    backgroundColor: Colors.transparent,
    skipTaskbar: false,  // 是否在任务栏隐藏
    titleBarStyle: TitleBarStyle.hidden,
    windowButtonVisibility: true,
    center: true,      // 窗口居中
    title: '书法集字',
    // 添加以下设置
    fullScreen: false,
    alwaysOnTop: false,
  );
  
  await windowManager.waitUntilReadyToShow(windowOptions);
  await windowManager.show();
  await windowManager.focus();

  await SqliteDatabase.initializePlatform();

  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});
  
  @override
  Widget build(BuildContext context) {
    return MaterialApp(      
      title: 'Flutter Demo',
      debugShowCheckedModeBanner: false,
      theme: AppTheme.lightTheme,
      // 添加本地化支持
      localizationsDelegates: const [
        // AppLocalizations.delegate,
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: const [
        Locale('zh'),
        Locale('en'),
      ],
      home: const MainWindow(),
    );
  }
}

class MainWindow extends StatefulWidget {
  const MainWindow({super.key});
  
  @override
  State<MainWindow> createState() => _MainWindowState();
}

class _MainWindowState extends State<MainWindow> {
  int _selectedIndex = 0;

  Widget _buildContent() {
    switch (_selectedIndex) {
      case 0:
        return const WorkBrowsePage();
      case 1:
        return const CharacterListPage();
      case 2:
        return const PracticeListPage();
      case 3:
        return const  SettingsPage();
      default:
        return const Center(child: Text('页面未实现'));
    }
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Column(
        children: [
          const TitleBar(),
          Expanded(
            child: Row(
              children: [
                SideNavigation(
                  selectedIndex: _selectedIndex,
                  onDestinationSelected: (index) {
                    setState(() { _selectedIndex = index; });
                  },
                ),
                const VerticalDivider(thickness: 1, width: 1),
                Expanded(child: _buildContent()),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

``n
# FILE:providers.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\providers.dart
// Export all providers
export 'infrastructure/providers/database_providers.dart';
export 'infrastructure/providers/repository_providers.dart';
export 'application/providers/service_providers.dart';
``n
# FILE:app_config.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\config\app_config.dart
class AppConfig {
  // Image related settings
  static const maxImagesPerWork = 10;
  static const maxImageSize = 20 * 1024 * 1024; // 20MB
  static const maxImageWidth = 4096;
  static const maxImageHeight = 4096;

  static const supportedImageFormats = ['jpg', 'jpeg', 'png'];

  // Image processing settings
  static const int optimizedImageWidth = 2048;
  static const int optimizedImageHeight = 2048;
  static const int optimizedImageQuality = 85;
  static const int thumbnailSize = 256;

  // Storage paths
  static const String workspacePath = 'workspace';
  static const String originalsPath = 'workspace/originals';
  static const String optimizedPath = 'workspace/optimized';
  static const String thumbnailsPath = 'workspace/thumbnails';

  // Supported file types
  static const List<String> supportedImageTypes = [
    '.jpg', '.jpeg', '.png', '.webp'
  ];

  static var dataPath="data";

  const AppConfig._();
}
``n
# FILE:service_providers.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\providers\service_providers.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../infrastructure/providers/database_providers.dart';
import '../../infrastructure/providers/repository_providers.dart';
import '../../infrastructure/providers/storage_providers.dart';
import '../services/work_service.dart';
import '../services/character_service.dart';
import '../services/practice_service.dart';
import '../services/settings_service.dart';
import '../services/image_service.dart';

final workServiceProvider = Provider<WorkService>((ref) {
  final repository = ref.watch(workRepositoryProvider);
  final imageService = ref.watch(imageServiceProvider);
  final paths = ref.watch(storagePathsProvider);
  return WorkService(repository, imageService, paths);
});

final characterServiceProvider = Provider<CharacterService>((ref) {
  final charRepo = ref.watch(characterRepositoryProvider);
  final workRepo = ref.watch(workRepositoryProvider);
  return CharacterService(charRepo, workRepo);
});

final practiceServiceProvider = Provider<PracticeService>((ref) {
  final practiceRepo = ref.watch(practiceRepositoryProvider);
  final charRepo = ref.watch(characterRepositoryProvider);
  return PracticeService(practiceRepo, charRepo);
});

final settingsServiceProvider = Provider<SettingsService>((ref) {
  final database = ref.watch(databaseProvider);
  return SettingsService(database);
});

final imageServiceProvider = Provider<ImageService>((ref) {
  final paths = ref.watch(storagePathsProvider);
  return ImageService(paths);
});

``n
# FILE:thumbnail_provider.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\providers\thumbnail_provider.dart
import 'package:riverpod/riverpod.dart';
import '../../utils/path_helper.dart';

final thumbnailProvider = FutureProvider.family<String?, String>((ref, workId) async {
  try {
    final path = await PathHelper.getWorkThumbnailPath(workId);
    return path;
  } catch (e) {
    return null;
  }
});
``n
# FILE:work_browse_provider.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\providers\work_browse_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../infrastructure/providers/storage_providers.dart';
import '../../presentation/viewmodels/states/work_browse_state.dart';
import '../../presentation/viewmodels/work_browse_view_model.dart';
import 'service_providers.dart';

final workBrowseProvider = StateNotifierProvider<WorkBrowseViewModel, WorkBrowseState>((ref) {
  final workService = ref.read(workServiceProvider);
  final paths = ref.watch(storagePathsProvider);
  return WorkBrowseViewModel(workService, paths);
});
``n
# FILE:character_service.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\services\character_service.dart
import '../../domain/entities/character.dart';
import '../../domain/repositories/character_repository.dart';
import '../../domain/repositories/work_repository.dart';


class CharacterService {
  final CharacterRepository _characterRepository;
  final WorkRepository _workRepository;

  CharacterService(this._characterRepository, this._workRepository);

  Future<String> extractCharacter(
    String workId,
    String char,
    Map<String, dynamic> sourceRegion,
    Map<String, dynamic> image, {
    String? pinyin,
    Map<String, dynamic>? metadata,
  }) async {
    // Verify work exists
    final work = await _workRepository.getWork(workId);
    if (work == null) throw Exception('Work not found');

    final character = Character(
      id: '',
      workId: workId,
      char: char,
      pinyin: pinyin,
      sourceRegion: sourceRegion,
      image: image,
      metadata: metadata ?? {
        'extractTime': DateTime.now().toIso8601String(),
        'confidence': 1.0,
        'tags': [],
      },
      createTime: DateTime.now(),
      updateTime: DateTime.now(),
    );

    return await _characterRepository.insertCharacter(character);
  }

  Future<List<Character>> getCharactersByWork(String workId) async {
    return await _characterRepository.getCharactersByWorkId(workId);
  }

  Future<List<Character>> searchCharacters(String char) async {
    // TODO: Implement character search
    throw UnimplementedError();
  }

  Future<void> updateCharacterMetadata(
    String id, 
    Map<String, dynamic> metadata,
  ) async {
    final character = await _characterRepository.getCharacter(id);
    if (character == null) throw Exception('Character not found');

    final updatedCharacter = Character(
      id: character.id,
      workId: character.workId,
      char: character.char,
      pinyin: character.pinyin,
      sourceRegion: character.sourceRegion,
      image: character.image,
      metadata: {...character.metadata ?? {}, ...metadata},
      createTime: character.createTime,
      updateTime: DateTime.now(),
    );

    await _characterRepository.updateCharacter(updatedCharacter);
  }

  Future<Map<String, List<Character>>> getCharactersUsageInPractices(
    String charId,
  ) async {
    // TODO: Implement character usage tracking
    throw UnimplementedError();
  }
}
``n
# FILE:image_service.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\services\image_service.dart
import 'dart:io';
import 'package:image/image.dart' as img;
import 'package:path/path.dart' as path;
import '../../domain/value_objects/image/image_info.dart';
import '../../domain/value_objects/image/image_size.dart';
import '../../infrastructure/config/storage_paths.dart';
import '../config/app_config.dart';

class ImageService {
  final StoragePaths _paths;

  ImageService(this._paths);

  Future<List<ImageInfo>> processWorkImages(
      String workId, List<File> images) async {
    final processedImages = <ImageInfo>[];

    for (var i = 0; i < images.length; i++) {
      final file = images[i];
      final bytes = await file.readAsBytes();
      final image = img.decodeImage(bytes);

      if (image == null) {
        throw Exception('无法解码图片：${path.basename(file.path)}');
      }

      // Create work picture directory
      final picturePath = _paths.getWorkPicturePath(workId, i);
      await _paths.ensureDirectoryExists(picturePath);

      // Save original if requested
      String? originalPath;

      originalPath = _paths.getWorkOriginalPicturePath(
          workId, i, path.extension(file.path));
      await file.copy(originalPath);

      // Process and save imported image
      final processed = _processImage(image);
      final importedPath = _paths.getWorkImportedPicturePath(workId, i);
      await File(importedPath).writeAsBytes(img.encodePng(processed));

      // Create thumbnail for this image
      final thumbnail = _createThumbnail(processed);
      final thumbnailPath = _paths.getWorkImportedThumbnailPath(workId, i);
      await File(thumbnailPath)
          .writeAsBytes(img.encodeJpg(thumbnail, quality: 80));

      // Add image info
      processedImages.add(ImageInfo(
          fileSize: bytes.length,
          format: path.extension(file.path).replaceAll('.', ''),
          path: importedPath,
          size: ImageSize(width: processed.width, height: processed.height),
          thumbnail: thumbnailPath,
          original: originalPath));
    }

    // Create work thumbnail if images exist
    if (processedImages.isNotEmpty) {
      final workThumbnail = _createThumbnail(
          img.decodeImage(await File(processedImages[0].path).readAsBytes())!);
      final workThumbnailPath = _paths.getWorkThumbnailPath(workId);
      await File(workThumbnailPath)
          .writeAsBytes(img.encodeJpg(workThumbnail, quality: 80));
    }

    return processedImages;
  }

  img.Image _processImage(img.Image image) {
    // Resize if needed
    if (image.width > AppConfig.maxImageWidth ||
        image.height > AppConfig.maxImageHeight) {
      final aspectRatio = image.width / image.height;
      int newWidth = image.width;
      int newHeight = image.height;

      if (image.width > AppConfig.maxImageWidth) {
        newWidth = AppConfig.maxImageWidth;
        newHeight = (AppConfig.maxImageWidth / aspectRatio).round();
      }

      if (newHeight > AppConfig.maxImageHeight) {
        newHeight = AppConfig.maxImageHeight;
        newWidth = (AppConfig.maxImageHeight * aspectRatio).round();
      }

      return img.copyResize(
        image,
        width: newWidth,
        height: newHeight,
        interpolation: img.Interpolation.linear,
      );
    }

    return image;
  }

  img.Image _createThumbnail(img.Image image) {
    final aspectRatio = image.width / image.height;
    int thumbWidth = AppConfig.thumbnailSize;
    int thumbHeight = AppConfig.thumbnailSize;

    if (aspectRatio > 1) {
      thumbHeight = (AppConfig.thumbnailSize / aspectRatio).round();
    } else {
      thumbWidth = (AppConfig.thumbnailSize * aspectRatio).round();
    }

    return img.copyResize(
      image,
      width: thumbWidth,
      height: thumbHeight,
      interpolation: img.Interpolation.linear,
    );
  }

  Future<File> rotateImage(File file, int angle) async {
    final bytes = await file.readAsBytes();
    var image = img.decodeImage(bytes);
    if (image == null) throw Exception('无法解码图片');

    // Rotate image
    image = img.copyRotate(image, angle: angle);

    // Create temp file with unique name
    final dir = path.dirname(file.path);
    final ext = path.extension(file.path);
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final rotatedPath = path.join(dir, 'rotated_$timestamp$ext');
    
    // Save rotated image
    final rotatedFile = File(rotatedPath);
    await rotatedFile.writeAsBytes(img.encodeJpg(image));
    
    // Delete original file if it's a temp file
    if (file.path.contains('temp_')) {
      await file.delete();
    }
    
    return rotatedFile;
  }

  Future<File> optimizeImage(
    File file, {
    required int maxWidth,
    required int maxHeight,
    required int quality,
  }) async {
    final bytes = await file.readAsBytes();
    var image = img.decodeImage(bytes);
    if (image == null) throw Exception('无法解码图片');

    // Calculate new dimensions maintaining aspect ratio
    double ratio = image.width / image.height;
    int newWidth = image.width;
    int newHeight = image.height;

    if (newWidth > maxWidth) {
      newWidth = maxWidth;
      newHeight = (newWidth / ratio).round();
    }

    if (newHeight > maxHeight) {
      newHeight = maxHeight;
      newWidth = (newHeight * ratio).round();
    }

    // Resize if needed
    if (newWidth != image.width || newHeight != image.height) {
      image = img.copyResize(
        image,
        width: newWidth,
        height: newHeight,
        interpolation: img.Interpolation.linear,
      );
    }

    // Create optimized file
    final dir = path.dirname(file.path);
    final ext = path.extension(file.path);
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final optimizedPath = path.join(dir, 'optimized_$timestamp$ext');
    
    // Save optimized image
    final optimizedFile = File(optimizedPath);
    await optimizedFile.writeAsBytes(img.encodeJpg(image, quality: quality));
    
    return optimizedFile;
  }

  Future<void> backupOriginal(File file) async {
    final backupDir = Directory(path.join(
      AppConfig.workspacePath,
      'originals',
    ));
    
    if (!await backupDir.exists()) {
      await backupDir.create(recursive: true);
    }

    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final filename = path.basename(file.path);
    final backupPath = path.join(backupDir.path, '${timestamp}_$filename');

    await file.copy(backupPath);
  }
}

``n
# FILE:practice_service.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\services\practice_service.dart
import '../../domain/entities/practice.dart';
import '../../domain/repositories/practice_repository.dart';
import '../../domain/repositories/character_repository.dart';

class PracticeService {
  final PracticeRepository _practiceRepository;
  final CharacterRepository _characterRepository;

  PracticeService(this._practiceRepository, this._characterRepository);

  Future<String> createPractice(String title, List<Map<String, dynamic>> pages) async {
    final practice = Practice(
      id: '',
      title: title,
      pages: pages,
      createTime: DateTime.now(),
      updateTime: DateTime.now(),
      metadata: {
        'version': '1.0',
        'lastPrintTime': null,
        'printCount': 0,
      },
    );
    
    return await _practiceRepository.insertPractice(practice);
  }

  Future<void> addCharacterToPractice(String practiceId, String charId, Map<String, dynamic> position) async {
    final practice = await _practiceRepository.getPractice(practiceId);
    if (practice == null) throw Exception('Practice not found');

    final character = await _characterRepository.getCharacter(charId);
    if (character == null) throw Exception('Character not found');

    // Update practice metadata to track character usage
    final metadata = practice.metadata ?? {};
    final usedChars = (metadata['usedCharacters'] as List<dynamic>?) ?? [];
    usedChars.add({
      'charId': charId,
      'useTime': DateTime.now().toIso8601String(),
      'position': position,
    });
    metadata['usedCharacters'] = usedChars;

    // Update practice
    final updatedPractice = Practice(
      id: practice.id,
      title: practice.title,
      pages: practice.pages,
      metadata: metadata,
      createTime: practice.createTime,
      updateTime: DateTime.now(),
    );

    await _practiceRepository.updatePractice(updatedPractice);
  }

  Future<List<Practice>> getRecentPractices({int limit = 10}) async {
    return await _practiceRepository.getPractices(
      limit: limit,
    );
  }

  Future<List<Practice>> searchPractices(String query) async {
    return await _practiceRepository.getPractices(
      title: query,
    );
  }

  Future<void> updatePracticePages(String id, List<Map<String, dynamic>> pages) async {
    final practice = await _practiceRepository.getPractice(id);
    if (practice == null) throw Exception('Practice not found');

    final updatedPractice = Practice(
      id: practice.id,
      title: practice.title,
      pages: pages,
      metadata: practice.metadata,
      createTime: practice.createTime,
      updateTime: DateTime.now(),
    );

    await _practiceRepository.updatePractice(updatedPractice);
  }

  Future<List<Practice>> getPracticesByCharacters(List<String> characterIds) async {
    if (characterIds.isEmpty) {
      return [];
    }

    // Get practices that contain any of the specified characters
    final practices = await _practiceRepository.getPractices(
      characterIds: characterIds,
    );

    // Sort by updateTime descending (most recent first)
    practices.sort((a, b) => b.updateTime.compareTo(a.updateTime));

    return practices;
  }

}
``n
# FILE:settings_service.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\services\settings_service.dart
import '../../infrastructure/persistence/database_interface.dart';

class SettingsService {
  final DatabaseInterface _database;
  static const String _themeKey = 'app_theme';
  static const String _fontSizeKey = 'font_size';
  static const String _gridTypeKey = 'grid_type';
  static const String _lastBackupKey = 'last_backup_time';

  SettingsService(this._database);

  // Theme settings
  Future<String> getTheme() async {
    return await _database.getSetting(_themeKey) ?? 'system';
  }

  Future<void> setTheme(String theme) async {
    await _database.setSetting(_themeKey, theme);
  }

  // Font size settings
  Future<double> getFontSize() async {
    final size = await _database.getSetting(_fontSizeKey);
    return size != null ? double.parse(size) : 16.0;
  }

  Future<void> setFontSize(double size) async {
    await _database.setSetting(_fontSizeKey, size.toString());
  }

  // Practice grid settings
  Future<String> getGridType() async {
    return await _database.getSetting(_gridTypeKey) ?? '米字格';
  }

  Future<void> setGridType(String type) async {
    await _database.setSetting(_gridTypeKey, type);
  }

  // Backup settings
  Future<DateTime?> getLastBackupTime() async {
    final timestamp = await _database.getSetting(_lastBackupKey);
    return timestamp != null 
        ? DateTime.parse(timestamp)
        : null;
  }

  Future<void> updateLastBackupTime() async {
    await _database.setSetting(
      _lastBackupKey,
      DateTime.now().toIso8601String(),
    );
  }

  // Batch settings update
  Future<void> updateSettings(Map<String, dynamic> settings) async {
    for (final entry in settings.entries) {
      await _database.setSetting(
        entry.key,
        entry.value.toString(),
      );
    }
  }

  // Get all settings
  Future<Map<String, dynamic>> getAllSettings() async {
    final keys = [
      _themeKey,
      _fontSizeKey,
      _gridTypeKey,
      _lastBackupKey,
    ];

    final Map<String, dynamic> settings = {};
    for (final key in keys) {
      final value = await _database.getSetting(key);
      if (value != null) {
        settings[key] = value;
      }
    }

    return settings;
  }
}
``n
# FILE:work_service.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\services\work_service.dart
import 'dart:io';

import 'package:demo/domain/interfaces/i_work_service.dart';

import '../../domain/entities/work.dart';
import '../../domain/repositories/work_repository.dart';
import '../../domain/value_objects/work/work_info.dart';
import '../../infrastructure/config/storage_paths.dart';
import '../../presentation/models/work_filter.dart';
import 'image_service.dart';

class WorkService implements IWorkService {
  final WorkRepository _workRepository;
  final ImageService _imageService;
  final StoragePaths _paths;

  WorkService(this._workRepository, this._imageService, this._paths);

  @override
  Future<void> importWork(List<File> files, WorkInfo data) async {
    Work? work;

    // Create work info first
    work = Work(
      name: data.name,
      author: data.author,
      style: data.style?.name,
      tool: data.tool?.name,
      creationDate: data.creationDate,
      imageCount: files.length, // Initial count
    );

    // Insert work into database within transaction
    final workId = await _workRepository.insertWork(work);

    data.id = workId;

    // Create work directory
    await _paths.ensureDirectoryExists(_paths.getWorkPath(workId));

    // Process images
    await _imageService.processWorkImages(
      workId,
      files,
    );
  }

  @override
  Future<List<Work>> getAllWorks() async {
    final works = await _workRepository.getWorks();
    return works.map((workData) => Work.fromMap(workData)).toList();
  }

  @override
  Future<List<Work>> queryWorks({
    String? searchQuery,
    WorkFilter? filter,
    SortOption? sortOption, // 保留参数但不使用它
  }) async {
    // 构建查询参数
    final queryParams = <String, dynamic>{};

    // 添加搜索条件
    if (searchQuery?.isNotEmpty ?? false) {
      queryParams['search'] = searchQuery;
    }

    // 添加筛选和排序条件
    if (filter != null) {
      queryParams.addAll(filter.toQueryParams());
    }

    // 执行查询
    final works = await _workRepository.getWorks();
    return works.map((workData) => Work.fromMap(workData)).toList();
  }

  @override
  Future<void> deleteWork(String workId) async {
    await _workRepository.deleteWork(workId);
  }

  @override
  Future<Work?> getWork(String id) async {
    return await _workRepository.getWork(id);    
  }

  @override
  Future<String?> getWorkThumbnail(String workId) async {
    final thumbnailPath = _paths.getWorkThumbnailPath(workId);
    final file = File(thumbnailPath);
    if (await file.exists()) {
      return thumbnailPath;
    }
    return null;
  }
}

``n
# FILE:character_service.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\services\character\character_service.dart
 

``n
# FILE:practice_service.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\services\practice\practice_service.dart
 

``n
# FILE:settings_service.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\services\settings\settings_service.dart
 

``n
# FILE:work_service.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\application\services\work\work_service.dart
 

``n
# FILE:character.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\entities\character.dart
import 'dart:convert';

class Character {
  final String id;
  final String workId;
  final String char;
  final String? pinyin;
  final Map<String, dynamic> sourceRegion;
  final Map<String, dynamic> image;
  final Map<String, dynamic>? metadata;
  final DateTime createTime;
  final DateTime updateTime;

  Character({
    required this.id,
    required this.workId,
    required this.char,
    this.pinyin,
    required this.sourceRegion,
    required this.image,
    this.metadata,
    required this.createTime,
    required this.updateTime,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'work_id': workId,
      'char': char,
      'pinyin': pinyin,
      'source_region': jsonEncode(sourceRegion),
      'image': jsonEncode(image),
      'metadata': metadata != null ? jsonEncode(metadata) : null,
      'create_time': createTime.millisecondsSinceEpoch,
      'update_time': updateTime.millisecondsSinceEpoch,
    };
  }

  static Character fromMap(Map<String, dynamic> map) {
    return Character(
      id: map['id'],
      workId: map['work_id'],
      char: map['char'],
      pinyin: map['pinyin'],
      sourceRegion: map['source_region'] != null 
          ? jsonDecode(map['source_region']) 
          : {},
      image: map['image'] != null 
          ? jsonDecode(map['image']) 
          : {},
      metadata: map['metadata'] != null 
          ? jsonDecode(map['metadata']) 
          : null,
      createTime: DateTime.fromMillisecondsSinceEpoch(map['create_time']),
      updateTime: DateTime.fromMillisecondsSinceEpoch(map['update_time']),
    );
  }
}


``n
# FILE:practice.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\entities\practice.dart
import 'dart:convert';

class Practice {
  final String id;
  final String title;
  final List<Map<String, dynamic>> pages;
  final Map<String, dynamic>? metadata;
  final DateTime createTime;
  final DateTime updateTime;

  Practice({
    required this.id,
    required this.title,
    required this.pages,
    this.metadata,
    required this.createTime,
    required this.updateTime,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'title': title,
      'pages': jsonEncode(pages),
      'metadata': metadata != null ? jsonEncode(metadata) : null,
      'create_time': createTime.millisecondsSinceEpoch,
      'update_time': updateTime.millisecondsSinceEpoch,
    };
  }

  static Practice fromMap(Map<String, dynamic> map) {
    return Practice(
      id: map['id'],
      title: map['title'],
      pages: List<Map<String, dynamic>>.from(
        jsonDecode(map['pages']).map((x) => Map<String, dynamic>.from(x))
      ),
      metadata: map['metadata'] != null 
          ? jsonDecode(map['metadata']) 
          : null,
      createTime: DateTime.fromMillisecondsSinceEpoch(map['create_time']),
      updateTime: DateTime.fromMillisecondsSinceEpoch(map['update_time']),
    );
  }
}


``n
# FILE:setting.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\entities\setting.dart
 

``n
# FILE:work.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\entities\work.dart
import 'dart:convert';
import 'package:flutter/foundation.dart';

@immutable
class Work {
  final String? id;
  final String? name;
  final String? author;
  final String? style;
  final String? tool;
  final DateTime? creationDate;  
  final int? imageCount;
  final DateTime? createTime;    
  final DateTime? updateTime;    
  final Map<String, dynamic>? metadata;  // Added metadata field

  const Work({
    this.id,
    this.name,
    this.author,
    this.style,
    this.tool,
    this.creationDate,
    this.imageCount = 0,
    this.createTime,
    this.updateTime,
    this.metadata,  // Added to constructor
  });

  Map<String, dynamic> toJson() => {
    'id': id,
    'name': name,
    'author': author,
    'style': style,
    'tool': tool,
    'creation_date': creationDate?.toIso8601String(),    
    'imageCount': imageCount,
    'createTime': createTime?.toIso8601String(),
    'updateTime': updateTime?.toIso8601String(),
    'metadata': metadata != null ? jsonEncode(metadata) : null,  // Serialize metadata
  };

  factory Work.fromJson(Map<String, dynamic> json) => Work(
    id: json['id'] as String?,
    name: json['name'] as String?,
    author: json['author'] as String?,
    style: json['style'] as String?,
    tool: json['tool'] as String?,
    creationDate: _parseDateTime(json['creation_date']),    
    imageCount: json['imageCount'] as int? ?? 0,
    createTime: _parseDateTime(json['createTime']) ?? DateTime.now(),
    updateTime: _parseDateTime(json['updateTime']) ?? DateTime.now(),
    metadata: json['metadata'] != null 
        ? jsonDecode(json['metadata'] as String) as Map<String, dynamic>
        : null,  // Deserialize metadata
  );

  // Alias for JSON methods
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'author': author,
      'style': style,
      'tool': tool,
      'creationDate': creationDate?.toIso8601String(),
      'imageCount': imageCount,
      'createTime': createTime?.toIso8601String(),
      'updateTime': updateTime?.toIso8601String(),
      'metadata': metadata != null ? jsonEncode(metadata) : null,  // Serialize metadata
    };
  }

  static DateTime? _parseDateTime(dynamic value) {
    if (value == null) return null;
    try {
      if (value is int) {
        // Handle microseconds since epoch
        return DateTime.fromMicrosecondsSinceEpoch(value);
      }
      return DateTime.parse(value.toString());
    } catch (e) {
      return null;
    }
  }

  factory Work.fromMap(Map<String, dynamic> map) {
    return Work(
      id: map['id'] ?? '',
      name: map['name'] ?? '',
      author: map['author'],
      style: map['style'],
      tool: map['tool'],
      creationDate: _parseDateTime(map['creationDate']),
      imageCount: map['imageCount'] ?? 0,
      createTime: _parseDateTime(map['createTime']),
      updateTime: _parseDateTime(map['updateTime']),
      metadata: map['metadata'] != null 
          ? jsonDecode(map['metadata'] as String) as Map<String, dynamic>
          : null,  // Deserialize metadata
    );
  }

  // Add copyWith method to support metadata updates
  Work copyWith({
    String? id,
    String? name,
    String? author,
    String? style,
    String? tool,
    DateTime? creationDate,
    int? imageCount,
    DateTime? createTime,
    DateTime? updateTime,
    Map<String, dynamic>? metadata,
  }) {
    return Work(
      id: id ?? this.id,
      name: name ?? this.name,
      author: author ?? this.author,
      style: style ?? this.style,
      tool: tool ?? this.tool,
      creationDate: creationDate ?? this.creationDate,
      imageCount: imageCount ?? this.imageCount,
      createTime: createTime ?? this.createTime,
      updateTime: updateTime ?? this.updateTime,
      metadata: metadata ?? this.metadata,
    );
  }
}
``n
# FILE:calligraphy_style.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\enums\calligraphy_style.dart
import 'package:collection/collection.dart';

enum WorkStyle {
  regular('楷书'),
  running('行书'),
  cursive('草书'),
  clerical('隶书'),
  seal('篆书');

  final String label;
  const WorkStyle(this.label);

  static WorkStyle? fromString(String? value) {
    if (value == null) return null;
    return WorkStyle.values.firstWhereOrNull(
      (style) => style.toString() == 'CalligraphyStyle.$value'
    );
  }
}
``n
# FILE:work_style.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\enums\work_style.dart
enum WorkStyle {
  seal('篆书', 'seal'),
  official('隶书', 'official'),
  regular('楷书', 'regular'),
  running('行书', 'running'),
  cursive('草书', 'cursive');

  final String label;
  final String value;

  const WorkStyle(this.label, this.value);

  static WorkStyle? fromValue(String? value) {
    if (value == null) return null;
    return WorkStyle.values.firstWhere(
      (style) => style.value == value,
      orElse: () => WorkStyle.regular,
    );
  }
}
``n
# FILE:work_tool.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\enums\work_tool.dart
enum WorkTool {
  brush('毛笔', 'brush'),
  hardPen('硬笔', 'hard_pen'),
  other('其他', 'other');

  final String label;
  final String value;

  const WorkTool(this.label, this.value);

  static WorkTool? fromValue(String? value) {
    if (value == null) return null;
    return WorkTool.values.firstWhere(
      (tool) => tool.value == value,
      orElse: () => WorkTool.brush,
    );
  }
}
``n
# FILE:i_work_service.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\interfaces\i_work_service.dart
import 'dart:io';
import '../entities/work.dart';
import '../value_objects/work/work_info.dart';
import '../../presentation/models/work_filter.dart';

abstract class IWorkService {
  Future<List<Work>> getAllWorks();
  Future<Work?> getWork(String id);
  Future<String?> getWorkThumbnail(String workId);
  Future<void> deleteWork(String workId);
  Future<void> importWork(List<File> files, WorkInfo info);
  Future<List<Work>> queryWorks({
    String? searchQuery,
    WorkFilter? filter,
    SortOption? sortOption, // 保持接口一致性
  });
}

``n
# FILE:character_repository.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\repositories\character_repository.dart
import '../entities/character.dart';

abstract class CharacterRepository {
  Future<String> insertCharacter(Character character);
  Future<Character?> getCharacter(String id);
  Future<List<Character>> getCharactersByWorkId(String workId);
  Future<void> updateCharacter(Character character);
  Future<void> deleteCharacter(String id);
}


``n
# FILE:practice_repository.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\repositories\practice_repository.dart
import '../entities/practice.dart';

abstract class PracticeRepository {
  Future<String> insertPractice(Practice practice);
  Future<Practice?> getPractice(String id);
  Future<List<Practice>> getPractices({
    String? title,
    List<String>? characterIds,
    int? limit,
    int? offset,
  });
  Future<void> updatePractice(Practice practice);
  Future<void> deletePractice(String id);
}


``n
# FILE:settings_repository.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\repositories\settings_repository.dart
 

``n
# FILE:work_repository.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\repositories\work_repository.dart
import 'package:flutter/material.dart';
import '../entities/character.dart';
import '../entities/work.dart';

abstract class WorkRepository {
  Future<String> insertWork(Work work);
  Future<Work?> getWork(String id);
  Future<List<Map<String, dynamic>>> getWorks({
    String? query,
    String? style,
    String? tool,
    DateTimeRange? importDateRange,
    DateTimeRange? creationDateRange,
    String? orderBy,
    bool descending = true,
  });
  Future<void> updateWork(Work work);
  Future<void> deleteWork(String id);
  Future<bool> workExists(String id);    
  Future<int> getWorksCount({
   String? query,
    String? style,
    String? tool,
    DateTimeRange? importDateRange,
    DateTimeRange? creationDateRange,
  });
  Future<List<Character>> getCharactersByWorkId(String workId);
}


``n
# FILE:character_info.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\character\character_info.dart
import 'package:demo/domain/value_objects/character/source_region.dart';

import 'char_image_info.dart';
import 'usage_info.dart';

class CharacterInfo {
  final CharValue char;
  final String? style;
  final String? tool;
  final SourceRegion sourceRegion;
  final CharImageInfo image;
  final List<String> tags;
  final List<UsageInfo> usage;

  const CharacterInfo({
    required this.char,
    this.style,
    this.tool,
    required this.sourceRegion,
    required this.image,
    this.tags = const [],
    this.usage = const [],
  });

  Map<String, dynamic> toJson() => {
    'char': char.toJson(),
    'style': style,
    'tool': tool,
    'sourceRegion': sourceRegion.toJson(),
    'image': image.toJson(),
    'tags': tags,
    'usage': usage.map((u) => u.toJson()).toList(),
  }..removeWhere((_, value) => value == null);

  factory CharacterInfo.fromJson(Map<String, dynamic> json) => CharacterInfo(
    char: CharValue.fromJson(json['char'] as Map<String, dynamic>),
    style: json['style'] as String?,
    tool: json['tool'] as String?,
    sourceRegion: SourceRegion.fromJson(json['sourceRegion'] as Map<String, dynamic>),
    image: CharImageInfo.fromJson(json['image'] as Map<String, dynamic>),
    tags: (json['tags'] as List?)?.map((e) => e as String).toList() ?? [],
    usage: (json['usage'] as List?)
        ?.map((e) => UsageInfo.fromJson(e as Map<String, dynamic>))
        .toList() ?? [],
  );
}

class CharValue {
  final String simplified;
  final String? traditional;

  CharValue({
    required this.simplified,
    this.traditional,
  }) {
    if (simplified.length != 1) {
      throw ArgumentError('Simplified must be a single character');
    }
  }

  Map<String, dynamic> toJson() => {
    'simplified': simplified,
    'traditional': traditional,
  }..removeWhere((_, value) => value == null);

  factory CharValue.fromJson(Map<String, dynamic> json) => CharValue(
    simplified: json['simplified'] as String,
    traditional: json['traditional'] as String?,
  );
}
``n
# FILE:char_image_info.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\character\char_image_info.dart
class CharImageInfo {
  final String path;
  final String thumbnail;
  final ImageSize size;

  const CharImageInfo({
    required this.path,
    required this.thumbnail,
    required this.size,
  });

  Map<String, dynamic> toJson() => {
    'path': path,
    'thumbnail': thumbnail,
    'size': size.toJson(),
  };

  factory CharImageInfo.fromJson(Map<String, dynamic> json) => CharImageInfo(
    path: json['path'] as String,
    thumbnail: json['thumbnail'] as String,
    size: ImageSize.fromJson(json['size'] as Map<String, dynamic>),
  );
}

class ImageSize {
  final int width;
  final int height;

  ImageSize({
    required this.width,
    required this.height,
  }) {
    if (width <= 0 || height <= 0) {
      throw ArgumentError('Width and height must be positive');
    }
  }

  Map<String, dynamic> toJson() => {
    'width': width,
    'height': height,
  };

  factory ImageSize.fromJson(Map<String, dynamic> json) => ImageSize(
    width: json['width'] as int,
    height: json['height'] as int,
  );
}
``n
# FILE:source_region.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\character\source_region.dart
class SourceRegion {
  final int index;
  final int x;
  final int y;
  final int width;
  final int height;

  SourceRegion({
    required this.index,
    required this.x,
    required this.y,
    required this.width,
    required this.height,
  }) {
    if (width <= 0 || height <= 0) {
      throw ArgumentError('Width and height must be positive');
    }
  }

  Map<String, dynamic> toJson() => {
    'index': index,
    'x': x,
    'y': y,
    'width': width,
    'height': height,
  };

  factory SourceRegion.fromJson(Map<String, dynamic> json) => SourceRegion(
    index: json['index'] as int,
    x: json['x'] as int,
    y: json['y'] as int,
    width: json['width'] as int,
    height: json['height'] as int,
  );
}
``n
# FILE:usage_info.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\character\usage_info.dart
class UsageInfo {
  final String practiceId;

  const UsageInfo({
    required this.practiceId,
  });

  Map<String, dynamic> toJson() => {
    'practiceId': practiceId,
  };

  factory UsageInfo.fromJson(Map<String, dynamic> json) => UsageInfo(
    practiceId: json['practiceId'] as String,
  );
}
``n
# FILE:image_info.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\image\image_info.dart
import 'image_size.dart';

class ImageInfo {
  //final String id;
  final String path;
  final String thumbnail;
  final ImageSize size;
  final int fileSize;
  final String format;
  final String? original;

  const ImageInfo({
    //required this.id,
    required this.path,
    required this.thumbnail,
    required this.size,
    required this.fileSize,
    required this.format,
    this.original,
  });

  Map<String, dynamic> toJson() => {
    //'id': id,
    'path': path,
    'thumbnail': thumbnail,
    'size': size.toJson(),
    'fileSize': fileSize,
    'format': format,
    'original': original,
  }..removeWhere((_, value) => value == null);

  factory ImageInfo.fromJson(Map<String, dynamic> json) => ImageInfo(
    //id: json['id'] as String,
    path: json['path'] as String,
    thumbnail: json['thumbnail'] as String,
    size: ImageSize.fromJson(json['size'] as Map<String, dynamic>),
    fileSize: json['fileSize'] as int,
    format: json['format'] as String,
    original: json['original'] as String?,
  );

  ImageInfo copyWith({
    //String? id,
    String? path,
    String? thumbnail,
    ImageSize? size,
    int? fileSize,
    String? format,
    String? original,
  }) {
    return ImageInfo(
      //id: id ?? this.id,
      path: path ?? this.path,
      thumbnail: thumbnail ?? this.thumbnail,
      size: size ?? this.size,
      fileSize: fileSize ?? this.fileSize,
      format: format ?? this.format,
      original: original ?? this.original,
    );
  }
}

``n
# FILE:image_size.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\image\image_size.dart
class ImageSize {
  final int width;
  final int height;

  ImageSize({
    required this.width,
    required this.height,
  }) {
    if (width <= 0 || height <= 0) {
      throw ArgumentError('Width and height must be positive');
    }
  }

  Map<String, dynamic> toJson() => {
    'width': width,
    'height': height,
  };

  factory ImageSize.fromJson(Map<String, dynamic> json) => ImageSize(
    width: json['width'] as int,
    height: json['height'] as int,
  );

  double get aspectRatio => width / height;

  ImageSize copyWith({
    int? width,
    int? height,
  }) {
    return ImageSize(
      width: width ?? this.width,
      height: height ?? this.height,
    );
  }
}
``n
# FILE:element_content.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\practice\element_content.dart
abstract class ElementContent {
  Map<String, dynamic> toJson();

  static fromJson(Map<String, dynamic> json, String json2) {}
}

class ElementContentFactory {
  static ElementContent fromJson(Map<String, dynamic> json, String type) {
    switch (type) {
      case 'chars':
        return CharsContent.fromJson(json['chars'] as List);
      case 'text':
        return TextContent.fromJson(json['text'] as Map<String, dynamic>);
      case 'image':
        return ImageContent.fromJson(json['image'] as Map<String, dynamic>);
      default:
        throw ArgumentError('Unknown element type: $type');
    }
  }
}

class CharsContent implements ElementContent {
  final List<CharInfo> chars;

  const CharsContent({required this.chars});

  @override
  Map<String, dynamic> toJson() => {
    'chars': chars.map((c) => c.toJson()).toList(),
  };

  factory CharsContent.fromJson(List<dynamic> json) => CharsContent(
    chars: json.map((e) => CharInfo.fromJson(e as Map<String, dynamic>)).toList(),
  );
}

class CharInfo {
  final String charId;
  final CharPosition position;
  final CharTransform transform;
  final CharStyle style;

  const CharInfo({
    required this.charId,
    required this.position,
    required this.transform,
    required this.style,
  });

  Map<String, dynamic> toJson() => {
    'charId': charId,
    'position': position.toJson(),
    'transform': transform.toJson(),
    'style': style.toJson(),
  };

  factory CharInfo.fromJson(Map<String, dynamic> json) => CharInfo(
    charId: json['charId'] as String,
    position: CharPosition.fromJson(json['position'] as Map<String, dynamic>),
    transform: CharTransform.fromJson(json['transform'] as Map<String, dynamic>),
    style: CharStyle.fromJson(json['style'] as Map<String, dynamic>),
  );
}

class CharPosition {
  final double offsetX;
  final double offsetY;

  const CharPosition({
    required this.offsetX,
    required this.offsetY,
  });

  Map<String, dynamic> toJson() => {
    'offsetX': offsetX,
    'offsetY': offsetY,
  };

  factory CharPosition.fromJson(Map<String, dynamic> json) => CharPosition(
    offsetX: (json['offsetX'] as num).toDouble(),
    offsetY: (json['offsetY'] as num).toDouble(),
  );
}

class CharTransform {
  final double scaleX;
  final double scaleY;
  final double rotation;

  CharTransform({
    this.scaleX = 1.0,
    this.scaleY = 1.0,
    this.rotation = 0.0,
  }) {
    if (scaleX <= 0 || scaleY <= 0) {
      throw ArgumentError('Scale values must be positive');
    }
  }

  Map<String, dynamic> toJson() => {
    'scaleX': scaleX,
    'scaleY': scaleY,
    'rotation': rotation,
  };

  factory CharTransform.fromJson(Map<String, dynamic> json) => CharTransform(
    scaleX: (json['scaleX'] as num?)?.toDouble() ?? 1.0,
    scaleY: (json['scaleY'] as num?)?.toDouble() ?? 1.0,
    rotation: (json['rotation'] as num?)?.toDouble() ?? 0.0,
  );
}

class CharStyle {
  final String color;
  final double opacity;

  CharStyle({
    this.color = '#000000',
    this.opacity = 1.0,
  }) {
    if (opacity < 0 || opacity > 1) {
      throw ArgumentError('Opacity must be between 0 and 1');
    }
  }

  Map<String, dynamic> toJson() => {
    'color': color,
    'opacity': opacity,
  };

  factory CharStyle.fromJson(Map<String, dynamic> json) => CharStyle(
    color: json['color'] as String? ?? '#000000',
    opacity: (json['opacity'] as num?)?.toDouble() ?? 1.0,
  );
}

class TextContent implements ElementContent {
  final String content;
  final String fontFamily;
  final double fontSize;
  final String color;
  final String alignment;

  const TextContent({
    required this.content,
    required this.fontFamily,
    required this.fontSize,
    this.color = '#000000',
    this.alignment = 'left',
  });

  @override
  Map<String, dynamic> toJson() => {
    'text': {
      'content': content,
      'fontFamily': fontFamily,
      'fontSize': fontSize,
      'color': color,
      'alignment': alignment,
    },
  };

  factory TextContent.fromJson(Map<String, dynamic> json) => TextContent(
    content: json['content'] as String,
    fontFamily: json['fontFamily'] as String,
    fontSize: (json['fontSize'] as num).toDouble(),
    color: json['color'] as String? ?? '#000000',
    alignment: json['alignment'] as String? ?? 'left',
  );
}

class ImageContent implements ElementContent {
  final String path;

  const ImageContent({required this.path});

  @override
  Map<String, dynamic> toJson() => {
    'image': {'path': path},
  };

  factory ImageContent.fromJson(Map<String, dynamic> json) => ImageContent(
    path: json['path'] as String,
  );
}
``n
# FILE:element_info.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\practice\element_info.dart
import 'element_content.dart';

class ElementInfo {
  final String id;
  final String type;  // chars/text/image
  final ElementGeometry geometry;
  final ElementStyle style;
  final ElementContent content;

   ElementInfo({
    required this.id,
    required this.type,
    required this.geometry,
    required this.style,
    required this.content,
  }) {
    if (!['chars', 'text', 'image'].contains(type)) {
      throw ArgumentError('Type must be chars, text or image');
    }
  }

  Map<String, dynamic> toJson() => {
    'id': id,
    'type': type,
    'geometry': geometry.toJson(),
    'style': style.toJson(),
    'content': content.toJson(),
  };

  factory ElementInfo.fromJson(Map<String, dynamic> json) => ElementInfo(
    id: json['id'] as String,
    type: json['type'] as String,
    geometry: ElementGeometry.fromJson(json['geometry'] as Map<String, dynamic>),
    style: ElementStyle.fromJson(json['style'] as Map<String, dynamic>),
    content: ElementContent.fromJson(
      json['content'] as Map<String, dynamic>,
      json['type'] as String,
    ),
  );
}

class ElementGeometry {
  final double x;
  final double y;
  final double width;
  final double height;
  final double rotation;

   ElementGeometry({
    required this.x,
    required this.y,
    required this.width,
    required this.height,
    this.rotation = 0,
  }) {
    if (width <= 0 || height <= 0) {
      throw ArgumentError('Width and height must be positive');
    }
  }

  Map<String, dynamic> toJson() => {
    'x': x,
    'y': y,
    'width': width,
    'height': height,
    'rotation': rotation,
  };

  factory ElementGeometry.fromJson(Map<String, dynamic> json) => ElementGeometry(
    x: (json['x'] as num).toDouble(),
    y: (json['y'] as num).toDouble(),
    width: (json['width'] as num).toDouble(),
    height: (json['height'] as num).toDouble(),
    rotation: (json['rotation'] as num?)?.toDouble() ?? 0,
  );
}

class ElementStyle {
  final double opacity;
  final bool visible;

   ElementStyle({
    this.opacity = 1.0,
    this.visible = true,
  }) {
    if (opacity < 0 || opacity > 1) {
      throw ArgumentError('Opacity must be between 0 and 1');
    }
  }

  Map<String, dynamic> toJson() => {
    'opacity': opacity,
    'visible': visible,
  };

  factory ElementStyle.fromJson(Map<String, dynamic> json) => ElementStyle(
    opacity: (json['opacity'] as num?)?.toDouble() ?? 1.0,
    visible: json['visible'] as bool? ?? true,
  );
}
``n
# FILE:layer_info.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\practice\layer_info.dart
import 'element_info.dart';

class LayerInfo {
  final int index;
  final String name;
  final String type;  // background/content
  final bool visible;
  final bool locked;
  final double opacity;
  final List<ElementInfo> elements;

  LayerInfo({
    required this.index,
    required this.name,
    required this.type,
    this.visible = true,
    this.locked = false,
    this.opacity = 1.0,
    this.elements = const [],
  }) {
    if (opacity < 0 || opacity > 1) {
      throw ArgumentError('Opacity must be between 0 and 1');
    }
    if (!['background', 'content'].contains(type)) {
      throw ArgumentError('Type must be either background or content');
    }
  }

  Map<String, dynamic> toJson() => {
    'index': index,
    'name': name,
    'type': type,
    'visible': visible,
    'locked': locked,
    'opacity': opacity,
    'elements': elements.map((e) => e.toJson()).toList(),
  };

  factory LayerInfo.fromJson(Map<String, dynamic> json) => LayerInfo(
    index: json['index'] as int,
    name: json['name'] as String,
    type: json['type'] as String,
    visible: json['visible'] as bool? ?? true,
    locked: json['locked'] as bool? ?? false,
    opacity: (json['opacity'] as num?)?.toDouble() ?? 1.0,
    elements: (json['elements'] as List?)
        ?.map((e) => ElementInfo.fromJson(e as Map<String, dynamic>))
        .toList() ?? const [],
  );
}

``n
# FILE:page_info.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\practice\page_info.dart
import 'layer_info.dart';

class PageInfo {
  final int index;
  final PageSize size;
  final List<LayerInfo> layers;

  const PageInfo({
    required this.index,
    required this.size,
    required this.layers,
  });

  Map<String, dynamic> toJson() => {
    'index': index,
    'size': size.toJson(),
    'layers': layers.map((l) => l.toJson()).toList(),
  };

  factory PageInfo.fromJson(Map<String, dynamic> json) => PageInfo(
    index: json['index'] as int,
    size: PageSize.fromJson(json['size'] as Map<String, dynamic>),
    layers: (json['layers'] as List)
        .map((e) => LayerInfo.fromJson(e as Map<String, dynamic>))
        .toList(),
  );
}

class PageSize {
  final String unit;
  final String resUnit;
  final int resUnitValue;
  final double width;
  final double height;

  PageSize({
    required this.unit,
    required this.resUnit,
    required this.resUnitValue,
    required this.width,
    required this.height,
  }) {
    if (width <= 0 || height <= 0) {
      throw ArgumentError('Width and height must be positive');
    }
    if (resUnitValue <= 0) {
      throw ArgumentError('Resolution unit value must be positive');
    }
  }

  Map<String, dynamic> toJson() => {
    'unit': unit,
    'resUnit': resUnit,
    'resUnitValue': resUnitValue,
    'width': width,
    'height': height,
  };

  factory PageSize.fromJson(Map<String, dynamic> json) => PageSize(
    unit: json['unit'] as String,
    resUnit: json['resUnit'] as String,
    resUnitValue: json['resUnitValue'] as int,
    width: (json['width'] as num).toDouble(),
    height: (json['height'] as num).toDouble(),
  );
}
``n
# FILE:practice_info.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\practice\practice_info.dart
import 'page_info.dart';

class PracticeInfo {
  final String id;
  final String title;
  final String status;
  final List<PageInfo> pages;
  final List<String> tags;
  final DateTime createTime;
  final DateTime updateTime;

   PracticeInfo({
    required this.id,
    required this.title,
    required this.status,
    required this.pages,
    required this.createTime,
    required this.updateTime,
    this.tags = const [],
  }) {
    if (title.isEmpty || title.length > 100) {
      throw ArgumentError('Title must be between 1 and 100 characters');
    }
    if (!['draft', 'completed'].contains(status)) {
      throw ArgumentError('Status must be draft or completed');
    }
  }

  Map<String, dynamic> toJson() => {
    'id': id,
    'title': title,
    'status': status,
    'pages': pages.map((p) => p.toJson()).toList(),
    'tags': tags,
    'createTime': createTime.toIso8601String(),
    'updateTime': updateTime.toIso8601String(),
  };

  factory PracticeInfo.fromJson(Map<String, dynamic> json) => PracticeInfo(
    id: json['id'] as String,
    title: json['title'] as String,
    status: json['status'] as String,
    pages: (json['pages'] as List)
        .map((p) => PageInfo.fromJson(p as Map<String, dynamic>))
        .toList(),
    tags: (json['tags'] as List?)?.map((e) => e as String).toList() ?? [],
    createTime: DateTime.parse(json['createTime'] as String),
    updateTime: DateTime.parse(json['updateTime'] as String),
  );
}

``n
# FILE:image_info.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\work\image_info.dart
class WorkImageInfo {
  final int index;
  final WorkImageDetail original;
  final WorkImageDetail imported;
  final WorkImageThumbnailInfo thumbnail;

  const WorkImageInfo({
    required this.index,
    required this.original,
    required this.imported,
    required this.thumbnail,
  });

  Map<String, dynamic> toJson() => {
    'index': index,
    'original': original.toJson(),
    'imported': imported.toJson(),
    'thumbnail': thumbnail.toJson(),
  };

  factory WorkImageInfo.fromJson(Map<String, dynamic> json) => WorkImageInfo(
    index: json['index'] as int,
    original: WorkImageDetail.fromJson(json['original'] as Map<String, dynamic>),
    imported: WorkImageDetail.fromJson(json['imported'] as Map<String, dynamic>),
    thumbnail: WorkImageThumbnailInfo.fromJson(json['thumbnail'] as Map<String, dynamic>),
  );
}

class WorkImageDetail {
  final String path;
  final int width;
  final int height;
  final String format;
  final int size;

  const WorkImageDetail({
    required this.path,
    required this.width,
    required this.height,
    required this.format,
    required this.size,
  });

  Map<String, dynamic> toJson() => {
    'path': path,
    'width': width,
    'height': height,
    'format': format,
    'size': size,
  };

  factory WorkImageDetail.fromJson(Map<String, dynamic> json) => WorkImageDetail(
    path: json['path'] as String,
    width: json['width'] as int,
    height: json['height'] as int,
    format: json['format'] as String,
    size: json['size'] as int,
  );
}

class WorkImageThumbnailInfo {
  final String path;
  final int width;
  final int height;

  const WorkImageThumbnailInfo({
    required this.path,
    required this.width,
    required this.height,
  });

  Map<String, dynamic> toJson() => {
    'path': path,
    'width': width,
    'height': height,
  };

  factory WorkImageThumbnailInfo.fromJson(Map<String, dynamic> json) => WorkImageThumbnailInfo(
    path: json['path'] as String,
    width: json['width'] as int,
    height: json['height'] as int,
  );
}
``n
# FILE:work_info.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\domain\value_objects\work\work_info.dart
import 'package:demo/domain/enums/work_style.dart';
import 'package:demo/domain/enums/work_tool.dart';

import 'image_info.dart';

class WorkInfo {
  String? id;
   String? author;
   WorkStyle? style;
   WorkTool? tool;
   DateTime? creationDate;
   DateTime? createTime;
   DateTime? updateTime;
   List<String> tags;
   List<WorkImageInfo> images;
   WorkImageInfo? coverImage;
   String? remarks;
   int imageCount;
   String? name;

  WorkInfo({
    this.id,
    this.name,
    this.author,
    this.style,
    this.tool,
    this.creationDate,
    this.createTime,
    this.updateTime,
    this.tags = const [],
    this.images = const [],
    this.coverImage,
    this.remarks,
    this.imageCount = 0,
  });

  Map<String, dynamic> toJson() => {
    'id': id,
    'name': name,
    'author': author,
    'style': style,
    'tool': tool,
    'creationDate': creationDate?.toIso8601String(),
    'createTime': createTime?.toIso8601String(),
    'updateTime': updateTime?.toIso8601String(),
    'tags': tags,
    'images': images.map((i) => i.toJson()).toList(),
    'coverImage': coverImage?.toJson(),
    'remarks': remarks,
    'imageCount': imageCount,
  }..removeWhere((_, value) => value == null);

  factory WorkInfo.fromJson(Map<String, dynamic> json) => WorkInfo(
    id: json['id'] as String,
    name: json['name'] as String,
    author: json['author'] as String?,
    style: json['style'] != null ? WorkStyle.values.firstWhere((e) => e.toString() == 'WorkStyle.${json['style']}') : null,
    tool: json['tool'] != null ? WorkTool.values.firstWhere((e) => e.toString() == 'WorkTool.${json['tool']}') : null,
    creationDate: json['creationDate'] != null 
        ? DateTime.parse(json['creationDate'] as String)
        : null,
    createTime: DateTime.parse(json['createTime'] as String),
    updateTime: DateTime.parse(json['updateTime'] as String),
    tags: (json['tags'] as List?)?.map((e) => e as String).toList() ?? [],
    images: (json['images'] as List?)
        ?.map((e) => WorkImageInfo.fromJson(e as Map<String, dynamic>))
        .toList() ?? [],
    coverImage: json['coverImage'] != null
        ? WorkImageInfo.fromJson(json['coverImage'] as Map<String, dynamic>)
        : null,
    remarks: json['remarks'] as String?,
    imageCount: json['imageCount'] as int? ?? 0,
  );

  WorkInfo copyWith({
    String? id,
    String? name,
    String? author,
    WorkStyle? style,
    WorkTool? tool,
    DateTime? creationDate,
    DateTime? createTime,
    DateTime? updateTime,
    List<String>? tags,
    List<WorkImageInfo>? images,
    WorkImageInfo? coverImage,
    String? remarks,
    int? imageCount,
  }) => WorkInfo(
    id: id ?? this.id,
    name: name ?? this.name,
    author: author ?? this.author,
    style: style ?? this.style,
    tool: tool ?? this.tool,
    creationDate: creationDate ?? this.creationDate,
    createTime: createTime ?? this.createTime,
    updateTime: updateTime ?? this.updateTime,
    tags: tags ?? this.tags,
    images: images ?? this.images,
    coverImage: coverImage ?? this.coverImage,
    remarks: remarks ?? this.remarks,
    imageCount: imageCount ?? this.imageCount,
  );
}
``n
# FILE:storage_paths.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\config\storage_paths.dart
import 'dart:io';
import 'package:path/path.dart' as path;
import 'package:uuid/uuid.dart';

class StoragePaths {
  final String basePath;
  
  const StoragePaths(this.basePath);

  // Work related paths
  String get worksPath => path.join(basePath, 'works');
  String getWorkPath(String workId) => path.join(worksPath, workId);
  String getWorkThumbnailPath(String workId) => 
      path.join(getWorkPath(workId), 'thumbnail.jpg');
  
  String getWorkPicturePath(String workId, int index) => 
      path.join(getWorkPath(workId), 'pictures', index.toString());
  
  String getWorkOriginalPicturePath(String workId, int index, String ext) =>
      path.join(getWorkPicturePath(workId, index), 'original$ext');
  
  String getWorkImportedPicturePath(String workId, int index) =>
      path.join(getWorkPicturePath(workId, index), 'imported.png');

  String getWorkImportedThumbnailPath(String workId, int index) =>
      path.join(getWorkPicturePath(workId, index), 'thumbnail.jpg');

  // Character related paths
  String get charsPath => path.join(basePath, 'chars');
  String getCharPath(String charId) => path.join(charsPath, charId);
  String getCharImagePath(String charId) => 
      path.join(getCharPath(charId), 'char.png');
  String getCharThumbnailPath(String charId) => 
      path.join(getCharPath(charId), 'thumbnail.jpg');

  // Practice related paths
  String get practicesPath => path.join(basePath, 'practices');
  String getPracticePath(String practiceId) => 
      path.join(practicesPath, practiceId);
  String getPracticeThumbnailPath(String practiceId) => 
      path.join(getPracticePath(practiceId), 'thumbnail.jpg');

  // Temp and backup paths
  String get tempPath => path.join(basePath, 'temp');
  String get backupPath => path.join(basePath, 'backup');

  // Helper methods
  Future<void> ensureDirectoryExists(String path) async {
    final directory = Directory(path);
    if (!await directory.exists()) {
      await directory.create(recursive: true);
    }
  }

  Future<String> createTempFile(String prefix, String ext) async {
    await ensureDirectoryExists(tempPath);
    final uuid = const Uuid().v4();
    return path.join(tempPath, '$prefix-$uuid$ext');
  }

  Future<void> cleanupTempFiles() async {
    final temp = Directory(tempPath);
    if (await temp.exists()) {
      await for (final file in temp.list()) {
        await file.delete();
      }
    }
  }
}
``n
# FILE:database_factory.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\persistence\database_factory.dart
import 'database_interface.dart';
import 'sqlite/sqlite_database.dart';

enum DatabaseType {
  sqlite,
  // Add other database types here when needed
}

class DatabaseFactory {
  static DatabaseInterface create(DatabaseType type) {
    switch (type) {
      case DatabaseType.sqlite:
        return SqliteDatabase();
    }
  }
}
``n
# FILE:database_interface.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\persistence\database_interface.dart
abstract class DatabaseInterface {
  Future<void> initialize();
  Future<void> close();
  
  // Work operations
  Future<String> insertWork(Map<String, dynamic> work);
  Future<Map<String, dynamic>?> getWork(String id);
  Future<List<Map<String, dynamic>>> getWorks({
    String? style,
    String? author,
    String? name,      
    String? tool,        // Add tool parameter
    List<String>? tags,
    DateTime? fromDateImport,
    DateTime? toDateImport,
    DateTime? fromDateCreation,
    DateTime? toDateCreation,
    DateTime? fromDateUpdate,
    DateTime? toDateUpdate,
    int? limit,
    int? offset,
    String? sortBy,
    bool descending = true,
  });
  Future<void> updateWork(String id, Map<String, dynamic> work);
  Future<void> deleteWork(String id);
  Future<bool> workExists(String id);
  Future<int> getWorksCount({
    String? style,
    String? author,
    String? name,
    String? tool,        // Add tool parameter
    List<String>? tags,
    DateTime? fromDateImport,
    DateTime? toDateImport,
    DateTime? fromDateCreation,
    DateTime? toDateCreation,
    DateTime? fromDateUpdate,    
    DateTime? toDateUpdate 
  });
  
  // Character operations
  Future<String> insertCharacter(Map<String, dynamic> character);
  Future<Map<String, dynamic>?> getCharacter(String id);
  Future<List<Map<String, dynamic>>> getCharactersByWorkId(String workId);
  Future<void> updateCharacter(String id, Map<String, dynamic> character);
  Future<void> deleteCharacter(String id);
  
  // Practice operations
  Future<String> insertPractice(Map<String, dynamic> practice);
  Future<Map<String, dynamic>?> getPractice(String id);
  Future<List<Map<String, dynamic>>> getPractices({
    List<String>? characterIds,
    String? title,
    int? limit,
    int? offset,
  });
  Future<void> updatePractice(String id, Map<String, dynamic> practice);
  Future<void> deletePractice(String id);
  
  // Settings operations
  Future<void> setSetting(String key, String value);
  Future<String?> getSetting(String key);
}
``n
# FILE:file_storage.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\persistence\file\file_storage.dart
import 'dart:io';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as path;
import 'dart:convert';

class FileStorage {
  Future<String> get _basePath async {
    final directory = await getApplicationDocumentsDirectory();
    return directory.path;
  }

  Future<String> getWorksDirectory() async {
    final basePath = await _basePath;
    return path.join(basePath, 'storage', 'works');
  }

  Future<String> getCharsDirectory() async {
    final basePath = await _basePath;
    return path.join(basePath, 'storage', 'chars');
  }

  Future<String> getPracticesDirectory() async {
    final basePath = await _basePath;
    return path.join(basePath, 'storage', 'practices');
  }

  Future<String> getTempDirectory() async {
    final basePath = await _basePath;
    return path.join(basePath, 'storage', 'temp');
  }

  Future<String> getBackupDirectory() async {
    final basePath = await _basePath;
    return path.join(basePath, 'storage', 'backup');
  }

  // Work-related methods
  Future<String> getWorkDirectory(String workId) async {
    final worksDirectory = await getWorksDirectory();
    return path.join(worksDirectory, workId);
  }

  Future<File> getWorkMetadataFile(String workId) async {
    final workDirectory = await getWorkDirectory(workId);
    final filePath = path.join(workDirectory, 'metadata.json');
    return File(filePath);
  }

  Future<File> getWorkThumbnailFile(String workId) async {
    final workDirectory = await getWorkDirectory(workId);
    final filePath = path.join(workDirectory, 'thumbnail.jpg');
    return File(filePath);
  }

  Future<String> getWorkPictureDirectory(String workId, int index) async {
    final workDirectory = await getWorkDirectory(workId);
    return path.join(workDirectory, 'pictures', index.toString());
  }

  Future<File> getWorkOriginalPictureFile(String workId, int index, String ext) async {
    final pictureDirectory = await getWorkPictureDirectory(workId, index);
    final filePath = path.join(pictureDirectory, 'original.$ext');
    return File(filePath);
  }

  Future<File> getWorkImportedPictureFile(String workId, int index) async {
    final pictureDirectory = await getWorkPictureDirectory(workId, index);
    final filePath = path.join(pictureDirectory, 'imported.png');
    return File(filePath);
  }

  // Generic read/write methods
  Future<void> writeJson(File file, Map<String, dynamic> data) async {
    final jsonString = jsonEncode(data);
    await file.writeAsString(jsonString);
  }

  Future<Map<String, dynamic>?> readJson(File file) async {
    try {
      final jsonString = await file.readAsString();
      return jsonDecode(jsonString);
    } catch (e) {
      print('Error reading JSON from file: $e');
      return null;
    }
  }

  Future<void> writeFile(File file, List<int> data) async {
    await file.writeAsBytes(data);
  }

  Future<List<int>?> readFile(File file) async {
    try {
      return await file.readAsBytes();
    } catch (e) {
      print('Error reading file: $e');
      return null;
    }
  }

  // Directory creation
  Future<void> createDirectory(String path) async {
    final directory = Directory(path);
    if (!await directory.exists()) {
      await directory.create(recursive: true);
    }
  }
} 

``n
# FILE:sqlite_database.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\persistence\sqlite\sqlite_database.dart
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'package:uuid/uuid.dart';
import 'dart:convert';
import 'package:sqflite_common_ffi/sqflite_ffi.dart';

import '../database_interface.dart';

class SqliteDatabase implements DatabaseInterface {
  static const String dbName = 'shufa_jizi.db';
  Database? _database;

  // Add static initialization
  static Future<void> initializePlatform() async {
    // Initialize FFI
    sqfliteFfiInit();
    // Set global factory
    databaseFactory = databaseFactoryFfi;
  }

  Future<Database> get database async {
    if (_database != null) {
      return _database!;
    }
    _database = await _initializeDatabase();
    return _database!;
  }

  Future<Database> _initializeDatabase() async {
    final databasesPath = await getDatabasesPath();
    final path = join(databasesPath, dbName);

    return openDatabase(
      path,
      version: 1,
      onCreate: _onCreate,
    );
  }

  Future<void> _onCreate(Database db, int version) async {
    await db.execute('''
      CREATE TABLE works (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        author TEXT,
        style TEXT,
        tool TEXT,
        creationDate INTEGER,
        createTime INTEGER NOT NULL,
        updateTime INTEGER NOT NULL,
        metadata TEXT,
        imageCount INTEGER DEFAULT 0
      )
    ''');

    await db.execute('''
      CREATE TABLE characters (
        id TEXT PRIMARY KEY,
        workId TEXT NOT NULL,
        char TEXT NOT NULL,
        pinyin TEXT,
        sourceRegion TEXT NOT NULL,
        image TEXT NOT NULL,
        metadata TEXT,
        createTime INTEGER NOT NULL,
        updateTime INTEGER NOT NULL,
        FOREIGN KEY (workId) REFERENCES works (id) ON DELETE CASCADE
      )
    ''');

    await db.execute('''
      CREATE TABLE practices (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL,
        pages TEXT NOT NULL,
        metadata TEXT,
        createTime INTEGER NOT NULL,
        updateTime INTEGER NOT NULL
      )
    ''');

    await db.execute('''
      CREATE TABLE tags (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT
      )
    ''');

    await db.execute('''
      CREATE TABLE settings (
        key TEXT PRIMARY KEY,
        value TEXT NOT NULL,
        updateTime INTEGER NOT NULL
      )
    ''');

    // Create indices
    await db.execute('CREATE INDEX idx_characters_workId ON characters(workId)');
    await db.execute('CREATE INDEX idx_characters_char ON characters(char)');
  }

  @override
  Future<void> initialize() async {
    if (_database != null) return;
    _database = await _initializeDatabase();
  }

  @override
  Future<void> close() async {
    if (_database != null) {
      await _database!.close();
      _database = null;
    }
  }

  // Update CRUD methods
  @override
  Future<String> insertWork(Map<String, dynamic> work) async {
    final db = await database;
    final workId = const Uuid().v4();
    work['id'] = workId;
    
    work['creationDate'] = DateTime.parse(work['creationDate']).microsecondsSinceEpoch;
    work['createTime'] = DateTime.now().millisecondsSinceEpoch;
    work['updateTime'] = DateTime.now().millisecondsSinceEpoch;    
    
    if (work.containsKey('metadata')) {
      work['metadata'] = jsonEncode(work['metadata']);
    }
    
    await db.insert('works', work);
    return workId;
  }

  @override
  Future<Map<String, dynamic>?> getWork(String id) async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'works',
      where: 'id = ?',
      whereArgs: [id],
    );
    
    if (maps.isEmpty) return null;
    
    final work = maps.first;
    if (work['metadata'] != null) {
      work['metadata'] = jsonDecode(work['metadata']);
    }
    return work;
  }

  @override
  Future<void> updateWork(String id, Map<String, dynamic> work) async {
    final db = await database;

    work['creationDate'] = DateTime.parse(work['creationDate']).millisecondsSinceEpoch;
    work['updateTime'] = DateTime.now().millisecondsSinceEpoch;
    
    if (work.containsKey('metadata')) {
      work['metadata'] = jsonEncode(work['metadata']);
    }
    
    await db.update(
      'works',
      work,
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  @override
  Future<void> deleteWork(String id) async {
    final db = await database;
    await db.transaction((txn) async {
      // Delete associated characters first (cascade should handle this, but being explicit)
      await txn.delete(
        'characters',
        where: 'workId = ?',
        whereArgs: [id],
      );
      
      // Then delete the work
      await txn.delete(
        'works',
        where: 'id = ?',
        whereArgs: [id],
      );
    });
  }

  @override
  Future<List<Map<String, dynamic>>> getWorks({
    String? style,
    String? author,
    String? name,
    String? tool,        // 添加工具参数
    List<String>? tags,
    DateTime? fromDateImport,
    DateTime? toDateImport,
    DateTime? fromDateCreation,
    DateTime? toDateCreation,
    DateTime? fromDateUpdate,
    DateTime? toDateUpdate,
    int? limit,
    int? offset,
    String? sortBy,
    bool descending = true,
  }) async {
    final whereConditions = <String>[];
    final whereArgs = <dynamic>[];

    // 文本搜索
    _addTextSearch(whereConditions, whereArgs, name, author);
    
    // 风格筛选
    if (style != null) {
      whereConditions.add('style = ?');
      whereArgs.add(style);
    }
    
    // 工具筛选
    if (tool != null) {
      whereConditions.add('tool = ?');
      whereArgs.add(tool);
    }
    
    // 标签筛选
    _addTagSearch(whereConditions, whereArgs, tags);

    // 日期范围筛选
    _addDateRange(whereConditions, whereArgs, {
      'createTime': {
        'start': fromDateImport,
        'end': toDateImport,
      },
      'creationDate': {
        'start': fromDateCreation,
        'end': toDateCreation,
      },
      'updateTime': {
        'start': fromDateUpdate,
        'end': toDateUpdate,
      },
    });

    final where = whereConditions.isEmpty ? null : whereConditions.join(' AND ');
    final orderBy = _buildOrderByClause(sortBy, descending);

    final maps = await _executeQuery(
      table: 'works',
      where: where,
      whereArgs: whereArgs,
      orderBy: orderBy,
      limit: limit,
      offset: offset,
    );

    return maps.map(_decodeMetadata).toList();
  }

  @override
  Future<int> getWorksCount({
    String? style,
    String? author,
    String? name,
    String? tool,        // Add tool parameter
    List<String>? tags,
    DateTime? fromDateImport,
    DateTime? toDateImport,
    DateTime? fromDateCreation,
    DateTime? toDateCreation,
    DateTime? fromDateUpdate,
    DateTime? toDateUpdate
  }) async {
    final whereConditions = <String>[];
    final whereArgs = <dynamic>[];

    // 文本搜索
    _addTextSearch(whereConditions, whereArgs, name, author);
    
    // 风格筛选
    if (style != null) {
      whereConditions.add('style = ?');
      whereArgs.add(style);
    }
    
    // 工具筛选
    if (tool != null) {
      whereConditions.add('tool = ?');
      whereArgs.add(tool);
    }
    
    // 标签筛选
    _addTagSearch(whereConditions, whereArgs, tags);

    // 日期范围筛选
    _addDateRange(whereConditions, whereArgs, {
      'createTime': {
        'start': fromDateImport,
        'end': toDateImport,
      },
      'creationDate': {
        'start': fromDateCreation,
        'end': toDateCreation,
      },
      'updateTime': {
        'start': fromDateUpdate,
        'end': toDateUpdate,
      },
    });

    final where = whereConditions.isEmpty ? null : whereConditions.join(' AND ');

    // 使用 _executeQuery 来执行计数查询
    final result = await _executeQuery(
      table: 'works',
      columns: ['COUNT(*) as count'],
      where: where,
      whereArgs: whereArgs,
    );

    return result.first['count'] as int;
  }

  @override
  Future<bool> workExists(String id) async {
    final db = await database;
    final result = Sqflite.firstIntValue(await db.query(
      'works',
      columns: ['COUNT(*)'],
      where: 'id = ?',
      whereArgs: [id],
    ));
    return (result ?? 0) > 0;
  }

  // Character CRUD methods
  @override
  Future<String> insertCharacter(Map<String, dynamic> character) async {
    final db = await database;
    final charId = const Uuid().v4();
    character['id'] = charId;
    character['createTime'] = DateTime.now().millisecondsSinceEpoch;
    character['updateTime'] = DateTime.now().millisecondsSinceEpoch;
    
    if (character.containsKey('metadata')) {
      character['metadata'] = jsonEncode(character['metadata']);
    }
    if (character.containsKey('sourceRegion')) {
      character['sourceRegion'] = jsonEncode(character['sourceRegion']);
    }
    
    await db.insert('characters', character);
    return charId;
  }

  @override
  Future<Map<String, dynamic>?> getCharacter(String id) async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'characters',
      where: 'id = ?',
      whereArgs: [id],
    );
    
    if (maps.isEmpty) return null;
    
    final character = maps.first;
    if (character['metadata'] != null) {
      character['metadata'] = jsonDecode(character['metadata']);
    }
    if (character['sourceRegion'] != null) {
      character['sourceRegion'] = jsonDecode(character['sourceRegion']);
    }
    return character;
  }

  @override
  Future<List<Map<String, dynamic>>> getCharactersByWorkId(String workId) async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'characters',
      where: 'workId = ?',
      whereArgs: [workId],
      orderBy: 'createTime ASC',
    );
    
    return maps.map((character) {
      if (character['metadata'] != null) {
        character['metadata'] = jsonDecode(character['metadata']);
      }
      if (character['sourceRegion'] != null) {
        character['sourceRegion'] = jsonDecode(character['sourceRegion']);
      }
      return character;
    }).toList();
  }

  @override
  Future<void> updateCharacter(String id, Map<String, dynamic> character) async {
    final db = await database;
    character['updateTime'] = DateTime.now().millisecondsSinceEpoch;
    
    if (character.containsKey('metadata')) {
      character['metadata'] = jsonEncode(character['metadata']);
    }
    if (character.containsKey('sourceRegion')) {
      character['sourceRegion'] = jsonEncode(character['sourceRegion']);
    }
    
    await db.update(
      'characters',
      character,
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  @override
  Future<void> deleteCharacter(String id) async {
    final db = await database;
    await db.delete(
      'characters',
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  // Practice CRUD methods
  @override
  Future<String> insertPractice(Map<String, dynamic> practice) async {
    final db = await database;
    final practiceId = const Uuid().v4();
    practice['id'] = practiceId;    
    practice['createTime'] = DateTime.now().millisecondsSinceEpoch;    
    practice['updateTime'] = DateTime.now().millisecondsSinceEpoch;
    
    if (practice.containsKey('metadata')) {
      practice['metadata'] = jsonEncode(practice['metadata']);
    }

    if (practice.containsKey('pages')) {
      practice['pages'] = jsonEncode(practice['pages']);
    }
    
    await db.insert('practices', practice);
    return practiceId;
  }

  @override
  Future<Map<String, dynamic>?> getPractice(String id) async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query(
      'practices',
      where: 'id = ?',
      whereArgs: [id],
    );
    
    if (maps.isEmpty) return null;
    
    final practice = maps.first;
    if (practice['metadata'] != null) {
      practice['metadata'] = jsonDecode(practice['metadata']);
    }
    if (practice['pages'] != null) {
      practice['pages'] = jsonDecode(practice['pages']);
    }
    return practice;
  }

  @override
  Future<List<Map<String, dynamic>>> getPractices({
    List<String>? characterIds, // Not used in this implementation
    String? title,
    int? limit,
    int? offset,
  }) async {
    final db = await database;
    
    final whereConditions = <String>[];
    final whereArgs = <dynamic>[];
    
    if (title != null) {
      whereConditions.add('title LIKE ?');
      whereArgs.add('%$title%');
    }
    
    final where = whereConditions.isEmpty ? null : whereConditions.join(' AND ');

    final List<Map<String, dynamic>> maps = await db.query(
      'practices',
      where: where,
      whereArgs: whereArgs.isEmpty ? null : whereArgs,
      orderBy: 'createTime DESC',
      limit: limit,
      offset: offset,
    );
    
    return maps.map((practice) {
      if (practice['metadata'] != null) {
        practice['metadata'] = jsonDecode(practice['metadata']);
      }
      if (practice['pages'] != null) {
        practice['pages'] = jsonDecode(practice['pages']);
      }
      return practice;
    }).toList();
  }

  @override
  Future<void> updatePractice(String id, Map<String, dynamic> practice) async {
    final db = await database;
    practice['updateTime'] = DateTime.now().millisecondsSinceEpoch;
    
    if (practice.containsKey('metadata')) {
      practice['metadata'] = jsonEncode(practice['metadata']);
    }
    if (practice.containsKey('pages')) {
      practice['pages'] = jsonEncode(practice['pages']);
    }
    
    await db.update(
      'practices',
      practice,
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  @override
  Future<void> deletePractice(String id) async {
    final db = await database;
    await db.delete(
      'practices',
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  Future<bool> practiceExists(String id) async {
    final db = await database;
    final result = Sqflite.firstIntValue(await db.query(
      'practices',
      columns: ['COUNT(*)'],
      where: 'id = ?',
      whereArgs: [id],
    ));
    return (result ?? 0) > 0;
  }

  Future<int> getPracticesCount({String? title}) async {
    final db = await database;
    final whereConditions = <String>[];
    final whereArgs = <dynamic>[];
    
    if (title != null) {
      whereConditions.add('title LIKE ?');
      whereArgs.add('%$title%');
    }
    
    final where = whereConditions.isEmpty ? null : whereConditions.join(' AND ');
    
    final result = Sqflite.firstIntValue(await db.query(
      'practices',
      columns: ['COUNT(*)'],
      where: where,
      whereArgs: whereArgs.isEmpty ? null : whereArgs,
    ));
    
    return result ?? 0;
  }

  // Settings methods
  @override
  Future<void> setSetting(String key, String value) async {
    final db = await database;
    await db.insert(
      'settings',
      {
        'key': key,
        'value': value,
        'updateTime': DateTime.now().millisecondsSinceEpoch,
      },
      conflictAlgorithm: ConflictAlgorithm.replace,
    );
  }

  @override
  Future<String?> getSetting(String key) async {
    final db = await database;    
    final List<Map<String, dynamic>> maps = await db.query(
      'settings',
      where: 'key = ?',
      whereArgs: [key],
    );
    
    if (maps.isEmpty) return null;
    return maps.first['value'] as String;
  }

  void _addTextSearch(
    List<String> conditions,
    List<dynamic> args,
    String? name,
    String? author,
  ) {
    if (name != null || author != null) {
      final searchConditions = <String>[];
      if (name != null) {
        searchConditions.add('name LIKE ?');
        args.add('%$name%');
      }
      if (author != null) {
        searchConditions.add('author LIKE ?');
        args.add('%$author%');
      }
      if (searchConditions.isNotEmpty) {
        conditions.add('(${searchConditions.join(' OR ')})');
      }
    }
  }

  void _addTagSearch(
    List<String> conditions,
    List<dynamic> args,
    List<String>? tags,
  ) {
    if (tags != null && tags.isNotEmpty) {
      final tagQueries = tags.map((tag) => 
        '(metadata LIKE ?)'
      ).join(' OR ');
      conditions.add('($tagQueries)');
      for (final tag in tags) {
        args.addAll([tag, '%"$tag"%']);
      }
    }
  }

  String? _buildOrderByClause(String? sortBy, bool descending) {
    if (sortBy == null) return null;
    
    final field = switch(sortBy) {
      'name' => 'name',
      'author' => 'author',
      'creationDate' => 'creationDate',
      'updateTime' => 'updateTime',
      'importTime' => 'createTime',
      _ => sortBy
    };
    return '$field ${descending ? 'DESC' : 'ASC'}';
  }

  Future<List<Map<String, dynamic>>> _executeQuery({
    required String table,
    List<String>? columns,
    String? where,
    List<dynamic>? whereArgs,
    String? orderBy,
    int? limit,
    int? offset,
  }) async {
    final db = await database;
    return db.query(
      table,
      columns: columns,
      where: where,
      whereArgs: whereArgs?.isEmpty == true ? null : whereArgs,
      orderBy: orderBy,
      limit: limit,
      offset: offset,
    );
  }

  // 1. 提取日期范围处理方法
  void _addDateRange(
    List<String> conditions,
    List<dynamic> args,
    Map<String, Map<String, DateTime?>> dateRanges,
  ) {
    dateRanges.forEach((field, range) {
      final start = range['start'];
      final end = range['end'];
      
      if (start != null) {
        conditions.add('$field >= ?');
        args.add(start.millisecondsSinceEpoch);
      }
      if (end != null) {
        conditions.add('$field <= ?');
        args.add(end.millisecondsSinceEpoch);
      }
    });
  }

  // 2. 提取元数据解码方法
  Map<String, dynamic> _decodeMetadata(Map<String, dynamic> map) {
    final result = Map<String, dynamic>.from(map);
    for (final field in ['metadata', 'sourceRegion', 'pages']) {
      if (result[field] != null) {
        try {
          result[field] = jsonDecode(result[field] as String);
        } catch (e) {
          print('Failed to decode $field: ${e.toString()}');
        }
      }
    }
    return result;
  }
}

``n
# FILE:database_providers.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\providers\database_providers.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../persistence/database_factory.dart';
import '../persistence/database_interface.dart';

final databaseProvider = Provider<DatabaseInterface>((ref) {
  final database = DatabaseFactory.create(DatabaseType.sqlite);
  
  ref.onDispose(() async {
    await database.close();
  });
  
  database.initialize();
  return database;
});

``n
# FILE:repository_providers.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\providers\repository_providers.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'database_providers.dart';
import '../../domain/repositories/work_repository.dart';
import '../../domain/repositories/character_repository.dart';
import '../../domain/repositories/practice_repository.dart';
import '../repositories/work_repository_impl.dart';
import '../repositories/character_repository_impl.dart';
import '../repositories/practice_repository_impl.dart';

final workRepositoryProvider = Provider<WorkRepository>((ref) {
  final db = ref.watch(databaseProvider);
  return WorkRepositoryImpl(db);
});

final characterRepositoryProvider = Provider<CharacterRepository>((ref) {
  final db = ref.watch(databaseProvider);
  return CharacterRepositoryImpl(db);
});

final practiceRepositoryProvider = Provider<PracticeRepository>((ref) {
  final db = ref.watch(databaseProvider);
  return PracticeRepositoryImpl(db);
});
``n
# FILE:storage_providers.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\providers\storage_providers.dart
import 'package:demo/application/config/app_config.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../config/storage_paths.dart';
import 'package:path/path.dart' as path;

/// Application storage paths provider
final storagePathsProvider = Provider<StoragePaths>((ref)  {
  final basePath = path.join(AppConfig.dataPath, 'storage');
  return StoragePaths(basePath);
});
``n
# FILE:character_repository_impl.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\repositories\character_repository_impl.dart
import 'package:demo/infrastructure/persistence/database_interface.dart';

import '../../domain/entities/character.dart';
import '../../domain/repositories/character_repository.dart';

class CharacterRepositoryImpl implements CharacterRepository {
  final DatabaseInterface _db;

  CharacterRepositoryImpl(this._db);

  @override
  Future<String> insertCharacter(Character character) async {
    return await _db.insertCharacter(character.toMap());
  }

  @override
  Future<Character?> getCharacter(String id) async {
    final map = await _db.getCharacter(id);
    if (map == null) return null;
    return Character.fromMap(map);
  }

  @override
  Future<List<Character>> getCharactersByWorkId(String workId) async {
    final maps = await _db.getCharactersByWorkId(workId);
    return maps.map((map) => Character.fromMap(map)).toList();
  }

  @override
  Future<void> updateCharacter(Character character) async {
    await _db.updateCharacter(character.id, character.toMap());
  }

  @override
  Future<void> deleteCharacter(String id) async {
    await _db.deleteCharacter(id);
  }
}
``n
# FILE:practice_repository_impl.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\repositories\practice_repository_impl.dart
import 'package:demo/infrastructure/persistence/database_interface.dart';

import '../../domain/entities/practice.dart';
import '../../domain/repositories/practice_repository.dart';

class PracticeRepositoryImpl implements PracticeRepository {
  final DatabaseInterface _db;

  PracticeRepositoryImpl(this._db);

  @override
  Future<String> insertPractice(Practice practice) async {
    return await _db.insertPractice(practice.toMap());
  }

  @override
  Future<Practice?> getPractice(String id) async {
    final map = await _db.getPractice(id);
    if (map == null) return null;
    return Practice.fromMap(map);
  }

  @override
  Future<List<Practice>> getPractices({
    List<String>? characterIds,
    String? title,
    int? limit,
    int? offset,
  }) async {
    final maps = await _db.getPractices(
      characterIds: characterIds,
      title: title,
      limit: limit,
      offset: offset,
    );
    return maps.map((map) => Practice.fromMap(map)).toList();
  }

  @override
  Future<void> updatePractice(Practice practice) async {
    await _db.updatePractice(practice.id, practice.toMap());
  }

  @override
  Future<void> deletePractice(String id) async {
    await _db.deletePractice(id);
  }
}
``n
# FILE:sqlite_practice_repository.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\repositories\sqlite_practice_repository.dart

``n
# FILE:work_repository_impl.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\repositories\work_repository_impl.dart
import 'package:demo/infrastructure/persistence/database_interface.dart';
import 'package:flutter/material.dart';

import '../../domain/entities/character.dart';
import '../../domain/entities/work.dart';
import '../../domain/repositories/work_repository.dart';

class WorkRepositoryImpl implements WorkRepository {
  final DatabaseInterface _db;

  WorkRepositoryImpl(this._db);

  @override
  Future<String> insertWork(Work work) async {
    return await _db.insertWork(work.toMap());
  }

  @override
  Future<Work?> getWork(String id) async {
    final map = await _db.getWork(id);
    if (map == null) return null;
    return Work.fromMap(map);
  }

  @override
  Future<List<Map<String, dynamic>>> getWorks({
    String? query,
    String? style,
    String? tool,
    DateTimeRange? importDateRange,
    DateTimeRange? creationDateRange,
    String? orderBy,
    bool descending = true,
  }) async {
    return _db.getWorks(
      name: query, // 查询同时搜索作品名称
      author: query, // 和作者
      style: style,
      tool: tool,
      fromDateImport: importDateRange?.start,
      toDateImport: importDateRange?.end,
      fromDateCreation: creationDateRange?.start,
      toDateCreation: creationDateRange?.end,
      sortBy: orderBy,
      descending: descending,
    );
  }

  @override
  Future<void> updateWork(Work work) async {
    await _db.updateWork(work.id!, work.toMap());
  }

  @override
  Future<void> deleteWork(String id) async {
    await _db.deleteWork(id);
  }

  @override
  Future<bool> workExists(String id) async {
    return await _db.workExists(id);
  }

  @override
  Future<int> getWorksCount({
    String? query,
    String? style,
    String? tool,
    DateTimeRange? importDateRange,
    DateTimeRange? creationDateRange,
  }) async {
    return await _db.getWorksCount(
      name: query,
      author: query,
      style: style,
      tool: tool,
      fromDateImport: importDateRange?.start,
      toDateImport: importDateRange?.end,
      fromDateCreation: creationDateRange?.start,
      toDateCreation: creationDateRange?.end,
    );
  }

  @override
  Future<List<Character>> getCharactersByWorkId(String workId) async {
    final maps = await _db.getCharactersByWorkId(workId);
    return maps.map((map) => Character.fromMap(map)).toList();
  }
}

``n
# FILE:thumbnail_cache_service.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\infrastructure\services\thumbnail_cache_service.dart
import 'dart:io';
import 'package:riverpod/riverpod.dart';

import '../../utils/path_helper.dart';


class ThumbnailCacheService extends StateNotifier<Map<String, String>> {
  ThumbnailCacheService() : super({});

  Future<String?> getThumbnailPath(String workId) async {
    if (state.containsKey(workId)) {
      return state[workId];
    }

    final path = await PathHelper.getWorkThumbnailPath(workId);
    if (File(path).existsSync()) {
      state = {...state, workId: path};
      return path;
    }
    return null;
  }

  void clearCache() {
    state = {};
  }
}

final thumbnailCacheProvider = StateNotifierProvider<ThumbnailCacheService, Map<String, String>>((ref) {
  return ThumbnailCacheService();
});
``n
# FILE:character_detail_dialog.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\character_detail_dialog.dart
import 'package:flutter/material.dart';
import '../widgets/character/character_detail_view.dart';

class CharacterDetailDialog extends StatelessWidget {
  final String charId;

  const CharacterDetailDialog({
    super.key,
    required this.charId,
  });

  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: Container(
        width: 600,
        height: 800,
        padding: const EdgeInsets.all(24),
        child: Column(
          children: [
            Row(
              children: [
                const Text('集字详情', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
                const Spacer(),
                IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: () => Navigator.pop(context),
                ),
              ],
            ),
            const SizedBox(height: 16),
            // 移除 SingleChildScrollView，直接使用 Expanded
            Expanded(
              child: CharacterDetailView(
                charId: charId,                
              ),
            ),
          ],
        ),
      ),
    );
  }
}

``n
# FILE:character_edit_dialog.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\character_edit_dialog.dart
import 'package:flutter/material.dart';

class CharacterEditDialog extends StatefulWidget {
  final String charId;

  const CharacterEditDialog({
    super.key,
    required this.charId,
  });

  @override
  State<CharacterEditDialog> createState() => _CharacterEditDialogState();
}

class _CharacterEditDialogState extends State<CharacterEditDialog> {
  late final TextEditingController _simplifiedController;
  late final TextEditingController _traditionalController;
  late final TextEditingController _remarksController;
  String? _style;
  String? _tool;

  @override
  void initState() {
    super.initState();
    // TODO: 加载实际数据
    _simplifiedController = TextEditingController(text: '永');
    _traditionalController = TextEditingController(text: '永');
    _remarksController = TextEditingController();
    _style = 'kai';
    _tool = 'brush';
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: Container(
        width: 400,
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                const Text('编辑集字信息', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                const Spacer(),
                IconButton(
                  icon: const Icon(Icons.close),
                  onPressed: () => Navigator.of(context).pop(),
                ),
              ],
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _simplifiedController,
              decoration: const InputDecoration(
                labelText: '简体字 *',
                border: OutlineInputBorder(),
              ),
              maxLength: 1,
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _traditionalController,
              decoration: const InputDecoration(
                labelText: '繁体字',
                border: OutlineInputBorder(),
              ),
              maxLength: 1,
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<String>(
              value: _style,
              decoration: const InputDecoration(
                labelText: '书法风格',
                border: OutlineInputBorder(),
              ),
              items: const [
                DropdownMenuItem(value: 'kai', child: Text('楷书')),
                DropdownMenuItem(value: 'xing', child: Text('行书')),
                DropdownMenuItem(value: 'cao', child: Text('草书')),
              ],
              onChanged: (value) => setState(() => _style = value),
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<String>(
              value: _tool,
              decoration: const InputDecoration(
                labelText: '书写工具',
                border: OutlineInputBorder(),
              ),
              items: const [
                DropdownMenuItem(value: 'brush', child: Text('毛笔')),
                DropdownMenuItem(value: 'pen', child: Text('硬笔')),
              ],
              onChanged: (value) => setState(() => _tool = value),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: _remarksController,
              maxLines: 3,
              decoration: const InputDecoration(
                labelText: '备注',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 24),
            Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(),
                  child: const Text('取消'),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: () {
                    // TODO: 保存编辑
                    Navigator.of(context).pop();
                  },
                  child: const Text('保存'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  @override
  void dispose() {
    _simplifiedController.dispose();
    _traditionalController.dispose();
    _remarksController.dispose();
    super.dispose();
  }
}

``n
# FILE:date_range_picker_dialog.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\date_range_picker_dialog.dart
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../models/date_range_filter.dart';
import '../theme/app_sizes.dart';
import '../widgets/date_range_picker.dart';

class DateRangePickerDialog extends StatefulWidget {
  final DateRangeFilter? initialValue;
  
  const DateRangePickerDialog({
    super.key,
    this.initialValue,
  });

  @override
  State<DateRangePickerDialog> createState() => _DateRangePickerDialogState();
}

class _DateRangePickerDialogState extends State<DateRangePickerDialog> {
  
  DateTime? _startDate;
  DateTime? _endDate;
  late int _currentTabIndex;

  @override
  void initState() {
    super.initState();
    // 初始化日期和标签页
    _startDate = widget.initialValue?.startDate;
    _endDate = widget.initialValue?.endDate;
    _currentTabIndex = widget.initialValue?.preset != null ? 0 : 1;
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: DefaultTabController(
        length: 2,
        initialIndex: _currentTabIndex,
        child: ConstrainedBox(
          constraints: const BoxConstraints(
            maxWidth: 400,
            maxHeight: 500,
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              _buildHeader(),
              Expanded(
                child: TabBarView(
                  children: [
                    _buildPresetPage(),
                    _buildCustomPage(),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildHeader() {
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        AppBar(
          automaticallyImplyLeading: false,
          title: const Text('选择日期范围'),
          actions: [
            IconButton(
              icon: const Icon(Icons.close),
              onPressed: () => Navigator.of(context).pop(),
            ),
          ],
        ),
        const TabBar(
          tabs: [
            Tab(text: '快捷选择'),
            Tab(text: '自定义范围'),
          ],
        ),
      ],
    );
  }

  Widget _buildPresetPage() {
    return ListView.separated(
      padding: const EdgeInsets.all(AppSizes.m),
      itemCount: DateRangePreset.values.length,
      separatorBuilder: (_, __) => const Divider(height: 1),
      itemBuilder: (context, index) {
        final preset = DateRangePreset.values[index];
        final isSelected = widget.initialValue?.preset == preset;
        final dateRange = preset.getRange();
        
        return ListTile(
          title: Text(preset.label),
          subtitle: Text(
            '${DateFormat('MM/dd').format(dateRange.start)} - '
            '${DateFormat('MM/dd').format(dateRange.end)}',
            style: Theme.of(context).textTheme.bodySmall,
          ),
          selected: isSelected,
          trailing: isSelected ? const Icon(Icons.check) : null,
          onTap: () => Navigator.of(context).pop(
            DateRangeFilter.preset(preset),
          ),
        );
      },
    );
  }

  Widget _buildCustomPage() {
    final theme = Theme.of(context);
    
    return SingleChildScrollView(
      padding: const EdgeInsets.all(AppSizes.m),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('自定义日期范围', style: theme.textTheme.titleMedium),
          const SizedBox(height: AppSizes.m),
          Card(
            child: Padding(
              padding: const EdgeInsets.all(AppSizes.m),
              child: Column(
                children: [
                  _buildDateField(
                    label: '开始日期',
                    hint: '不限开始日期（从最早）',
                    date: _startDate,
                    onChanged: (date) {
                      setState(() {
                        _startDate = date;
                        // 如果结束日期在开始日期之前，清空结束日期
                        if (_endDate != null && date != null && _endDate!.isBefore(date)) {
                          _endDate = null;
                        }
                      });
                    },
                  ),
                  const SizedBox(height: AppSizes.m),
                  _buildDateField(
                    label: '结束日期',
                    hint: '不限结束日期（到现在）',
                    date: _endDate,
                    onChanged: (date) {
                      setState(() {
                        _endDate = date;
                        // 如果开始日期在结束日期之后，清空开始日期
                        if (_startDate != null && date != null && _startDate!.isAfter(date)) {
                          _startDate = null;
                        }
                      });
                    },
                    maxDate: DateTime.now(),
                    minDate: _startDate,
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: AppSizes.l),
          _buildRangePreview(),
          const Divider(height: 32),
          OverflowBar(
            children: [
              TextButton(
                onPressed: () => Navigator.of(context).pop(),
                child: const Text('取消'),
              ),
              FilledButton(
                onPressed: _isValid ? _handleConfirm : null,
                child: const Text('确定'),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildDateField({
    required String label,
    required String hint,
    required DateTime? date,
    required ValueChanged<DateTime?> onChanged,
    DateTime? maxDate,
    DateTime? minDate,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: Theme.of(context).textTheme.titleSmall),
        const SizedBox(height: AppSizes.xs),
        Material(
          color: Colors.transparent,
          child: InkWell(
            borderRadius: BorderRadius.circular(4),
            onTap: () async {
              final selected = await showDatePicker(
                context: context,
                initialDate: date ?? 
                  (minDate?.add(const Duration(days: 1))) ?? 
                  (maxDate?.subtract(const Duration(days: 1))) ?? 
                  DateTime.now(),
                firstDate: minDate ?? DateTime(1900),
                lastDate: maxDate ?? DateTime.now(),
                locale: const Locale('zh'),
                builder: (context, child) {
                  return Theme(
                    data: Theme.of(context).copyWith(
                      dialogTheme: DialogTheme(
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                    ),
                    child: child!,
                  );
                },
              );
              if (selected != null) {
                onChanged(selected);
              }
            },
            child: InputDecorator(
              decoration: InputDecoration(
                border: const OutlineInputBorder(),
                contentPadding: const EdgeInsets.symmetric(
                  horizontal: AppSizes.m,
                  vertical: AppSizes.s,
                ),
                suffixIcon: date != null 
                  ? IconButton(
                      icon: const Icon(Icons.clear),
                      visualDensity: VisualDensity.compact,
                      onPressed: () => onChanged(null),
                    )
                  : const Icon(Icons.calendar_today),
              ),
              child: Text(
                date != null 
                  ? DateFormat('yyyy年MM月dd日').format(date)
                  : hint,
                style: date != null 
                  ? null 
                  : Theme.of(context).textTheme.bodyMedium?.copyWith(
                      color: Theme.of(context).hintColor,
                    ),
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildRangePreview() {
    if (!_isValid) return const SizedBox.shrink();
    
    String rangeText;
    if (_startDate != null && _endDate != null) {
      final days = _endDate!.difference(_startDate!).inDays + 1;
      rangeText = '已选择 $days 天';
    } else if (_startDate != null) {
      rangeText = '从选定日期至今';
    } else {
      rangeText = '截至选定日期';
    }

    return Card(
      color: Theme.of(context).colorScheme.primaryContainer,
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.m),
        child: Row(
          children: [
            Icon(
              Icons.date_range,
              color: Theme.of(context).colorScheme.onPrimaryContainer,
            ),
            const SizedBox(width: AppSizes.s),
            Text(
              rangeText,
              style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                color: Theme.of(context).colorScheme.onPrimaryContainer,
              ),
            ),
            if (_startDate != null && _endDate != null) ...[
              const Spacer(),
              Text(
                '${DateFormat('MM/dd').format(_startDate!)} - '
                '${DateFormat('MM/dd').format(_endDate!)}',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  color: Theme.of(context).colorScheme.onPrimaryContainer,
                ),
              ),
            ],
          ],
        ),
      ),
    );
  }

  bool get _isValid => _startDate != null || _endDate != null;

  void _handleConfirm() {
    Navigator.of(context).pop(DateRangeFilter(
      preset: null,
      startDate: _startDate,  // Changed from start to startDate
      endDate: _endDate,      // Changed from end to endDate
    ));
  }

  Future<void> _showDatePicker({
    required bool isStartDate,
    DateTime? initialDate,
    DateTime? minDate,
    DateTime? maxDate,
  }) async {
    final theme = Theme.of(context);
    
    final date = await showDatePicker(
      context: context,
      initialDate: initialDate ?? DateTime.now(),
      firstDate: minDate ?? DateTime(1900),
      lastDate: maxDate ?? DateTime.now(),
      locale: const Locale('zh'),
      builder: (context, child) {
        return Theme(
          data: theme.copyWith(
            datePickerTheme: DatePickerThemeData(
              headerBackgroundColor: theme.colorScheme.primary,
              headerForegroundColor: theme.colorScheme.onPrimary,
              dayForegroundColor: WidgetStateProperty.resolveWith((states) {
                if (states.contains(WidgetState.selected)) {
                  return theme.colorScheme.onPrimary;
                }
                return null;
              }),
              todayForegroundColor: WidgetStateProperty.all(
                theme.colorScheme.primary,
              ),
              yearForegroundColor: WidgetStateProperty.resolveWith((states) {
                if (states.contains(WidgetState.selected)) {
                  return theme.colorScheme.onPrimary;
                }
                return null;
              }),
            ),
          ),
          child: child!,
        );
      },
    );

    if (date != null) {
      setState(() {
        if (isStartDate) {
          _startDate = date;
          if (_endDate != null && date.isAfter(_endDate!)) {
            _endDate = null;
          }
        } else {
          _endDate = date;
          if (_startDate != null && date.isBefore(_startDate!)) {
            _startDate = null;
          }
        }
      });
    }
  }
}

Future<DateTimeRange?> showCustomDateRangePicker({
  required BuildContext context,
  DateTimeRange? initialDateRange,
}) async {
  DateTimeRange? selectedRange = initialDateRange;

  return showDialog<DateTimeRange>(
    context: context,
    builder: (context) => Dialog(
      child: ConstrainedBox(
        constraints: const BoxConstraints(
          maxWidth: 800,
          maxHeight: 600,
        ),
        child: Padding(
          padding: const EdgeInsets.all(AppSizes.m),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Row(
                children: [
                  Text(
                    '选择日期范围',
                    style: Theme.of(context).textTheme.titleMedium,
                  ),
                  const Spacer(),
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                ],
              ),
              Expanded(
                child: DateRangePicker(
                  initialDateRange: initialDateRange,
                  firstDate: DateTime(1900),
                  lastDate: DateTime.now(),
                  onDateRangeChanged: (range) {
                    selectedRange = range;
                  },
                ),
              ),
              OverflowBar(
                children: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('取消'),
                  ),
                  FilledButton(
                    onPressed: () => Navigator.of(context).pop(selectedRange),
                    child: const Text('确定'),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    ),
  );
}
``n
# FILE:delete_confirmation_dialog.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\delete_confirmation_dialog.dart
import 'package:flutter/material.dart';

class DeleteConfirmationDialog extends StatelessWidget {
  final VoidCallback onConfirm;

  const DeleteConfirmationDialog({super.key, required this.onConfirm});

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: const Text('确认删除'),
      content: const Text('确定要删除这个作品吗？此操作无法撤销。'),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('取消'),
        ),
        TextButton(
          onPressed: onConfirm,
          child: const Text('删除'),
        ),
      ],
    );
  }
}

``n
# FILE:export_dialog.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\export_dialog.dart
import 'package:flutter/material.dart';

class ExportDialog extends StatelessWidget {
  final int workId;

  const ExportDialog({super.key, required this.workId});

  @override
  Widget build(BuildContext context) {
    return Dialog(
      child: Container(
        padding: const EdgeInsets.all(16),
        width: 400,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('导出作品', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
            const SizedBox(height: 16),
            const TextField(
              decoration: InputDecoration(
                labelText: '文件名',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            DropdownButtonFormField<String>(
              decoration: const InputDecoration(
                labelText: '导出格式',
                border: OutlineInputBorder(),
              ),
              items: const [
                DropdownMenuItem(value: 'pdf', child: Text('PDF')),
                DropdownMenuItem(value: 'jpg', child: Text('JPG')),
                DropdownMenuItem(value: 'png', child: Text('PNG')),
              ],
              onChanged: (value) {},
            ),
            const SizedBox(height: 16),
            Row(
              mainAxisAlignment: MainAxisAlignment.end,
              children: [
                TextButton(
                  onPressed: () => Navigator.pop(context),
                  child: const Text('取消'),
                ),
                const SizedBox(width: 8),
                ElevatedButton(
                  onPressed: () {
                    // TODO: 实现导出逻辑
                    Navigator.pop(context);
                  },
                  child: const Text('导出'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

``n
# FILE:work_edit_dialog.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_edit_dialog.dart
import 'package:flutter/material.dart';
import '../widgets/dialog_container.dart';
import '../../theme/app_sizes.dart';

class WorkEditDialog extends StatelessWidget {
  final String? workId;

  const WorkEditDialog({
    super.key,
    this.workId,
  });

  @override
  Widget build(BuildContext context) {
    final isEditing = workId != null;

    return DialogContainer(
      title: isEditing ? '编辑作品' : '添加作品',
      width: 500,
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('取消'),
        ),
        const SizedBox(width: AppSizes.spacingMedium),
        FilledButton(
          onPressed: () {},
          child: Text(isEditing ? '保存' : '创建'),
        ),
      ],
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          TextField(
            decoration: const InputDecoration(
              labelText: '作品名称',
            ),
          ),
          const SizedBox(height: AppSizes.spacingMedium),
          Row(
            children: [
              Expanded(
                child: TextField(
                  decoration: const InputDecoration(
                    labelText: '作者',
                  ),
                ),
              ),
              const SizedBox(width: AppSizes.spacingMedium),
              Expanded(
                child: TextField(
                  decoration: const InputDecoration(
                    labelText: '朝代',
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

``n
# FILE:work_import_dialog.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_import\work_import_dialog.dart
import 'dart:io';
import 'package:desktop_drop/desktop_drop.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:file_picker/file_picker.dart';
import '../../../presentation/viewmodels/states/work_import_state.dart';
import '../../../theme/app_sizes.dart';
import '../../providers/work_import_provider.dart';
import 'components/preview/work_import_preview.dart';
import 'components/form/work_import_form.dart';

class WorkImportDialog extends ConsumerStatefulWidget {
  const WorkImportDialog({super.key});

  @override
  ConsumerState<WorkImportDialog> createState() => _WorkImportDialogState();
}

class _WorkImportDialogState extends ConsumerState<WorkImportDialog> {
  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  bool _isLoading = false;
  // 用于记录已加载文件路径
  final Set<String> _loadedFilePaths = <String>{};

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(workImportProvider.notifier).reset();
    });
  }

  @override
  void dispose() {
    _loadedFilePaths.clear();
    super.dispose();
  }

  Future<void> _pickImages(BuildContext context) async {
    try {
      final result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['jpg', 'jpeg', 'png', 'webp'],
        allowMultiple: true,
        withData: false,
        lockParentWindow: true,
      );

      if (!mounted) return;

      if (result != null) {
        final newFiles = result.paths
            .whereType<String>()
            .where((path) => !_loadedFilePaths.contains(path)) // 过滤已加载的文件
            .map((path) => File(path))
            .toList();
        
        if (newFiles.isEmpty) {
          _showWarning(context, '选中的图片已全部添加过');
          return;
        }

        // 记录新添加的文件路径 
        _loadedFilePaths.addAll(newFiles.map((file) => file.path));
        
        await ref.read(workImportProvider.notifier).addImages(newFiles);
        HapticFeedback.mediumImpact();
      }
    } catch (e) {
      if (!mounted) return;
      _showErrorSnackBar(context, '选择图片失败: ${e.toString()}');
    }
  }

  // 显示警告提示
  void _showWarning(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Theme.of(context).colorScheme.surfaceVariant,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  Future<void> _handleSubmit() async {
    if (_formKey.currentState?.validate() != true) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('请填写所有必填项')),
      );
      return;
    }

    if (!ref.read(workImportProvider).images.isNotEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('请至少添加一张图片')),
      );
      return;
    }

    setState(() => _isLoading = true);
    try {
      final success = await ref.read(workImportProvider.notifier).importWork();
      if (!mounted) return;

      if (success) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('导入成功')),
        );
        // 延迟关闭对话框，让用户看到成功提示
        await Future.delayed(const Duration(milliseconds: 800));
        if (mounted) {
          Navigator.of(context).pop(true);
        }
      }
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('导入失败：${e.toString()}')),
      );
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }

  void _showFeedback({
    required BuildContext context,
    required String message,
    required bool isError,
  }) {
    final theme = Theme.of(context);
    
    ScaffoldMessenger.of(context)
      ..hideCurrentSnackBar()
      ..showSnackBar(
        SnackBar(
          content: Row(
            children: [
              AnimatedSwitcher(
                duration: const Duration(milliseconds: 200),
                child: Icon(
                  isError ? Icons.error_outline : Icons.check_circle_outline,
                  key: ValueKey(isError),
                  color: isError 
                    ? theme.colorScheme.onError
                    : theme.colorScheme.onSecondaryContainer,
                  size: 20,
                ),
              ),
              const SizedBox(width: AppSizes.s),
              Expanded(
                child: Text(
                  message,
                  style: theme.textTheme.bodyMedium?.copyWith(
                    color: isError 
                      ? theme.colorScheme.onError
                      : theme.colorScheme.onSecondaryContainer,
                    height: 1.2,
                  ),
                  maxLines: isError ? 3 : 1,
                  overflow: TextOverflow.ellipsis,
                ),
              ),
            ],
          ),
          backgroundColor: isError 
            ? theme.colorScheme.error
            : theme.colorScheme.secondaryContainer,
          behavior: SnackBarBehavior.floating,
          margin: const EdgeInsets.all(AppSizes.m),
          padding: const EdgeInsets.symmetric(
            horizontal: AppSizes.m,
            vertical: AppSizes.s,
          ),
          dismissDirection: DismissDirection.horizontal,
          duration: Duration(seconds: isError ? 4 : 2),
          showCloseIcon: isError,
          closeIconColor: isError 
            ? theme.colorScheme.onError
            : null,
          animation: const AlwaysStoppedAnimation(1.0),
        ),
      );
  }

  void _showErrorSnackBar(BuildContext context, String message) {
    _showFeedback(
      context: context,
      message: message,
      isError: true,
    );
  }

  void _showSuccessSnackBar(BuildContext context, String message) {
    _showFeedback(
      context: context,
      message: message,
      isError: false,
    );
  }

  void _showValidationError() {
    _showErrorSnackBar(context, '请填写所有必填项');
  }

  Future<bool> _handleExit() async {
    final isDirty = ref.read(workImportProvider).isDirty;
    if (!isDirty) {
      Navigator.of(context).pop(false);
      return true;
    }
    
    final confirmed = await showDialog<bool>(
      context: context,
      barrierDismissible: false,  // 防止点击背景关闭
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(
              Icons.warning_amber_rounded,
              color: Theme.of(context).colorScheme.error,
              size: 24,
            ),
            const SizedBox(width: AppSizes.s),
            const Text('确认退出'),
          ],
        ),
        content: const Text('当前有未保存的更改，退出后更改将会丢失。'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: Text(
              '继续编辑',
              style: TextStyle(color: Theme.of(context).colorScheme.primary),
            ),
          ),
          FilledButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: FilledButton.styleFrom(
              backgroundColor: Theme.of(context).colorScheme.error,
              foregroundColor: Theme.of(context).colorScheme.onError,
            ),
            child: const Text('放弃更改'),
          ),
        ],
      ),
    );

    if (confirmed == true && mounted) {
      Navigator.of(context).pop(false);
    }
    return confirmed ?? false;
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final state = ref.watch(workImportProvider);
    final isDirty = state.images.isNotEmpty;

    return WillPopScope(
      onWillPop: _handleExit,
      child: Dialog(
        backgroundColor: theme.colorScheme.surface,
        elevation: 0,
        shape: const RoundedRectangleBorder(),
        child: ConstrainedBox(
          constraints: const BoxConstraints(
            maxWidth: 1120,
            maxHeight: 720,
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // 标题栏
              _buildTitleBar(theme),

              // 内容区域
              Expanded(
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    // 左侧预览区 (70%)
                    Expanded(
                      flex: 7,
                      child: WorkImportPreview(
                        state: state,
                        viewModel: ref.read(workImportProvider.notifier),
                        onAddImages: () => _pickImages(context),
                      ),
                    ),

                    // 分割线
                    VerticalDivider(
                      thickness: 1,
                      width: 1,
                      color: theme.dividerColor,
                    ),

                    // 右侧表单区 (30%)
                    Expanded(
                      flex: 3,
                      child: Form(
                        key: _formKey,
                        child: WorkImportForm(
                          state: state,
                          viewModel: ref.read(workImportProvider.notifier),
                        ),
                      ),
                    ),
                  ],
                ),
              ),

              // 底部按钮区
              _buildBottomBar(theme, state, isDirty),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildTitleBar(ThemeData theme) {
    return Container(
      height: 48,
      padding: const EdgeInsets.symmetric(horizontal: AppSizes.l),
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(color: theme.dividerColor),
        ),
      ),
      child: Row(
        children: [
          Text(
            '导入作品',
            style: theme.textTheme.titleLarge,
          ),
          const Spacer(),
          IconButton(
            onPressed: _handleExit,
            icon: const Icon(Icons.close),
            tooltip: '关闭',
            style: IconButton.styleFrom(
              foregroundColor: theme.colorScheme.onSurface,
              visualDensity: VisualDensity.compact,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBottomBar(ThemeData theme, WorkImportState state, bool isDirty) {
    return Container(
      height: 64,
      padding: const EdgeInsets.symmetric(
        horizontal: AppSizes.l,
        vertical: AppSizes.m,
      ),
      decoration: BoxDecoration(
        border: Border(
          top: BorderSide(color: theme.dividerColor),
        ),
      ),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          TextButton(
            onPressed: _isLoading ? null : _handleExit,
            style: TextButton.styleFrom(
              minimumSize: const Size(88, 36),
              padding: const EdgeInsets.symmetric(horizontal: AppSizes.l),
            ),
            child: const Text('取消'),
          ),
          const SizedBox(width: AppSizes.m),
          FilledButton(
            onPressed: _isLoading || !isDirty ? null : _handleSubmit,
            style: FilledButton.styleFrom(
              minimumSize: const Size(88, 36),
              padding: const EdgeInsets.symmetric(horizontal: AppSizes.l),
            ),
            child: _isLoading 
              ? const SizedBox.square(
                  dimension: 20,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                  ),
                )
              : const Text('导入'),
          ),
        ],
      ),
    );
  }

  Widget _buildHintText(ThemeData theme) {
    return Positioned(
      left: AppSizes.l,
      bottom: AppSizes.l + 120, // 调整位置到缩略图条上方
      child: Container(
        padding: const EdgeInsets.symmetric(
          horizontal: AppSizes.s,
          vertical: AppSizes.xs,
        ),
        decoration: BoxDecoration(
          color: theme.colorScheme.surface.withOpacity(0.8),
          borderRadius: BorderRadius.circular(AppSizes.xxs),
          border: Border.all(
            color: theme.colorScheme.outline.withOpacity(0.2),
          ),
          boxShadow: [
            BoxShadow(
              color: theme.colorScheme.shadow.withOpacity(0.1),
              blurRadius: 4,
              offset: const Offset(0, 2),
            ),
          ],
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.info_outline,
              size: 16,
              color: theme.colorScheme.onSurfaceVariant,
            ),
            const SizedBox(width: AppSizes.xs),
            Text(
              '点击图片可以预览，拖动可以调整顺序',
              style: theme.textTheme.bodySmall?.copyWith(
                color: theme.colorScheme.onSurfaceVariant,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
``n
# FILE:dialog_footer.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_import\components\dialog_footer.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';
import '../../../widgets/buttons/loading_button.dart';

class DialogFooter extends StatelessWidget {
  final String? error;
  final bool isLoading;
  final VoidCallback onCancel;
  final VoidCallback onSubmit;

  const DialogFooter({
    super.key,
    this.error,
    this.isLoading = false,
    required this.onCancel,
    required this.onSubmit,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Container(
      height: 56,
      padding: const EdgeInsets.all(AppSizes.m),
      decoration: BoxDecoration(
        border: Border(top: BorderSide(color: theme.dividerColor)),
      ),
      child: Row(
        children: [
          if (error != null)
            Expanded(
              child: Text(
                error!,
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: theme.colorScheme.error,
                ),
              ),
            ),
          const Spacer(),
          TextButton(
            onPressed: onCancel,
            child: const Text('取消'),
          ),
          const SizedBox(width: AppSizes.m),
          LoadingButton(
            text: '确定',
            isLoading: isLoading,
            onPressed: onSubmit,
          ),
        ],
      ),
    );
  }
}
``n
# FILE:dialog_header.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_import\components\dialog_header.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';

class DialogHeader extends StatelessWidget {
  final String title;
  final VoidCallback onClose;

  const DialogHeader({
    super.key,
    required this.title,
    required this.onClose,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      height: AppSizes.dialogHeaderHeight,
      padding: const EdgeInsets.symmetric(horizontal: AppSizes.m),
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(color: Theme.of(context).dividerColor),
        ),
      ),
      child: Row(
        children: [
          Text(
            title,
            style: Theme.of(context).textTheme.titleLarge,
          ),
          const Spacer(),
          IconButton(
            icon: const Icon(Icons.close),
            onPressed: onClose,
            tooltip: '关闭',
          ),
        ],
      ),
    );
  }
}
``n
# FILE:work_import_form.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_import\components\form\work_import_form.dart
import 'package:flutter/material.dart';
import '../../../../../domain/enums/work_style.dart';
import '../../../../../domain/enums/work_tool.dart';
import '../../../../../theme/app_sizes.dart';
import '../../../../viewmodels/states/work_import_state.dart';
import '../../../../viewmodels/work_import_view_model.dart';
import '../../../../widgets/form/form_section.dart';
import '../../../../widgets/forms/form_field_wrapper.dart';

class WorkImportForm extends StatelessWidget {
  final WorkImportState state;
  final WorkImportViewModel viewModel;

  const WorkImportForm({
    super.key,
    required this.state,
    required this.viewModel,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return SingleChildScrollView(
      padding: const EdgeInsets.symmetric(
        horizontal: AppSizes.l,
        vertical: AppSizes.m,
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          // 作品名称
          FormFieldWrapper(
            label: '作品名称',
            required: true,
            child: TextFormField(
              initialValue: state.name,
              onChanged: viewModel.setName,
              style: theme.textTheme.bodyLarge,
              decoration: _getInputDecoration(theme, '请输入作品名称'),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return '请输入作品名称';
                }
                return null;
              },
            ),
          ),

          const SizedBox(height: AppSizes.m),

          // 作者
          FormFieldWrapper(
            label: '作者',
            required: true,
            child: TextFormField(
              initialValue: state.author,
              onChanged: viewModel.setAuthor,
              style: theme.textTheme.bodyLarge,
              decoration: _getInputDecoration(theme, '请输入作者姓名'),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return '请输入作者姓名';
                }
                return null;
              },
            ),
          ),

          const SizedBox(height: AppSizes.m),

          // 书法风格
          FormFieldWrapper(
            label: '书法风格',
            required: true,
            child: DropdownButtonFormField<String>(
              value: state.style?.toString().split('.').last,
              items: WorkStyle.values.map((style) {
                return DropdownMenuItem(
                  value: style.value,
                  child: Text(style.label),
                );
              }).toList(),
              onChanged: viewModel.setStyle,
              decoration: _getInputDecoration(theme, '请选择书法风格'),
              style: theme.textTheme.bodyLarge,
              validator: (value) {
                if (value == null) {
                  return '请选择书法风格';
                }
                return null;
              },
            ),
          ),

          const SizedBox(height: AppSizes.m),

          // 书写工具
          FormFieldWrapper(
            label: '书写工具',
            required: true,
            child: DropdownButtonFormField<String>(
              value: state.tool?.toString().split('.').last,
              items: WorkTool.values.map((tool) {
                return DropdownMenuItem(
                  value: tool.value,
                  child: Text(tool.label),
                );
              }).toList(),
              onChanged: viewModel.setTool,
              decoration: _getInputDecoration(theme, '请选择书写工具'),
              style: theme.textTheme.bodyLarge,
              validator: (value) {
                if (value == null) {
                  return '请选择书写工具';
                }
                return null;
              },
            ),
          ),

          const SizedBox(height: AppSizes.m),

          // 创作日期
          FormFieldWrapper(
            label: '创作日期',
            required: true,
            child: TextFormField(
              controller: TextEditingController(
                text: state.creationDate?.toString().split(' ')[0],
              ),
              readOnly: true,
              style: theme.textTheme.bodyLarge,
              decoration: _getInputDecoration(
                theme, 
                '请选择创作日期',
                suffix: const Icon(Icons.calendar_today),
              ),
              validator: (value) {
                if (value?.isEmpty ?? true) {
                  return '请选择创作日期';
                }
                return null;
              },
              onTap: () async {
                final date = await showDatePicker(
                  context: context,
                  initialDate: state.creationDate ?? DateTime.now(),
                  firstDate: DateTime(1900),
                  lastDate: DateTime.now(),
                );
                if (date != null) {
                  viewModel.setCreationDate(date);
                }
              },
            ),
          ),

          const SizedBox(height: AppSizes.m),

          // 备注
          FormFieldWrapper(
            label: '备注',
            child: TextFormField(
              initialValue: state.remarks,
              maxLines: 3,
              style: theme.textTheme.bodyLarge,
              decoration: _getInputDecoration(theme, '可选'),
              onChanged: viewModel.setRemarks,
            ),
          ),
        ],
      ),
    );
  }

  InputDecoration _getInputDecoration(ThemeData theme, String hint, {Widget? suffix}) {
    return InputDecoration(
      hintText: hint,
      hintStyle: theme.textTheme.bodyMedium?.copyWith(
        color: theme.colorScheme.outline,
      ),
      filled: true,
      fillColor: theme.colorScheme.surfaceVariant,
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(AppSizes.xs),
        borderSide: BorderSide.none,
      ),
      suffixIcon: suffix,
    );
  }
}
``n
# FILE:drop_target.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_import\components\preview\drop_target.dart
import 'dart:io';
import 'package:flutter/material.dart';


class ImageDropTarget extends StatefulWidget {
  final Widget child;
  final void Function(List<File>) onFilesDropped;

  const ImageDropTarget({
    super.key,
    required this.child,
    required this.onFilesDropped,
  });

  @override
  State<ImageDropTarget> createState() => _ImageDropTargetState();
}

class _ImageDropTargetState extends State<ImageDropTarget> {
  bool _isDragging = false;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return DragTarget<List<String>>(
      onWillAccept: (data) {
        setState(() => _isDragging = true);
        return data != null && data.isNotEmpty;
      },
      onAccept: (paths) {
        setState(() => _isDragging = false);
        final files = paths.map((path) => File(path)).toList();
        widget.onFilesDropped(files);
      },
      onLeave: (_) {
        setState(() => _isDragging = false);
      },
      builder: (context, candidateData, rejectedData) {
        return AnimatedContainer(
          duration: const Duration(milliseconds: 200),
          decoration: BoxDecoration(
            border: Border.all(
              color: _isDragging 
                  ? theme.colorScheme.primary 
                  : Colors.transparent,
              width: 2,
            ),
          ),
          child: widget.child,
        );
      },
    );
  }
}
``n
# FILE:empty_state.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_import\components\preview\empty_state.dart
import 'package:flutter/material.dart';

import '../../../../theme/app_sizes.dart';

class EmptyState extends StatelessWidget {
  const EmptyState({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Center(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            Icons.image_outlined,
            size: 64,
            color: theme.colorScheme.outline,
          ),
          const SizedBox(height: AppSizes.l),
          Text(
            '点击或拖放图片到此处',
            style: theme.textTheme.titleMedium,
          ),
          const SizedBox(height: AppSizes.m),
          Text(
            '支持 jpg、png、webp 格式',
            style: theme.textTheme.bodySmall?.copyWith(
              color: theme.colorScheme.outline,
            ),
          ),
        ],
      ),
    );
  }
}
``n
# FILE:image_drop_target.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_import\components\preview\image_drop_target.dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../../theme/app_sizes.dart';

class ImageDropTarget extends StatefulWidget {
  final Widget child;
  final void Function(List<File>) onFilesDropped;

  const ImageDropTarget({
    super.key,
    required this.child,
    required this.onFilesDropped,
  });

  @override
  State<ImageDropTarget> createState() => _ImageDropTargetState();
}

class _ImageDropTargetState extends State<ImageDropTarget> {
  bool _isDragging = false;

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return DragTarget<List<String>>(
      onWillAccept: (data) {
        final hasValidFiles = data?.any((path) {
          final ext = path.toLowerCase();
          return ext.endsWith('.jpg') || 
                 ext.endsWith('.jpeg') || 
                 ext.endsWith('.png') || 
                 ext.endsWith('.webp');
        }) ?? false;
        
        setState(() => _isDragging = hasValidFiles);
        return hasValidFiles;
      },
      onAccept: (data) {
        setState(() => _isDragging = false);
        final files = data
            .map((path) => File(path))
            .where((file) => file.existsSync())
            .toList();
            
        if (files.isNotEmpty) {
          HapticFeedback.selectionClick();
          widget.onFilesDropped(files);
        }
      },
      onLeave: (_) => setState(() => _isDragging = false),
      builder: (context, candidateData, rejectedData) {
        return Stack(
          fit: StackFit.expand,
          children: [
            widget.child,
            if (_isDragging)
              Container(
                color: theme.colorScheme.primary.withOpacity(0.1),
                child: Center(
                  child: Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: AppSizes.l,
                      vertical: AppSizes.m,
                    ),
                    decoration: BoxDecoration(
                      color: theme.colorScheme.surface,
                      borderRadius: BorderRadius.circular(AppSizes.xs),
                      border: Border.all(
                        color: theme.colorScheme.primary,
                      ),
                    ),
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        const Icon(Icons.file_upload),
                        const SizedBox(height: AppSizes.s),
                        Text(
                          '松开鼠标添加图片',
                          style: theme.textTheme.bodyLarge?.copyWith(
                            color: theme.colorScheme.primary,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
          ],
        );
      },
    );
  }
}
``n
# FILE:image_viewer.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_import\components\preview\image_viewer.dart
import 'dart:io';
import 'package:flutter/material.dart';
import '../../../../../theme/app_sizes.dart';

class ImageViewer extends StatelessWidget {
  final File image;
  final double rotation;
  final double scale;
  final ValueChanged<double>? onScaleChanged;

  const ImageViewer({
    super.key,
    required this.image,
    required this.rotation,
    this.scale = 1.0,
    this.onScaleChanged,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Stack(
      fit: StackFit.expand,
      children: [
        // 图片预览区域
        InteractiveViewer(
          minScale: 0.5,
          maxScale: 4.0,
          onInteractionUpdate: (details) {
            if (details.pointerCount > 0 && details.scale != scale) {
              onScaleChanged?.call(details.scale);
            }
          },
          child: Center(
            child: Transform.rotate(
              angle: rotation * (3.1415927 / 180.0),
              child: Image.file(
                image,
                fit: BoxFit.contain,
                errorBuilder: (context, error, stackTrace) {
                  return Center(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        Icon(
                          Icons.broken_image_outlined,
                          size: 48,
                          color: theme.colorScheme.error,
                        ),
                        const SizedBox(height: AppSizes.s),
                        Text(
                          '图片加载失败',
                          style: theme.textTheme.bodyMedium?.copyWith(
                            color: theme.colorScheme.error,
                          ),
                        ),
                      ],
                    ),
                  );
                },
              ),
            ),
          ),
        ),
      ],
    );
  }
}
``n
# FILE:preview_toolbar.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_import\components\preview\preview_toolbar.dart
import 'package:flutter/material.dart';
import '../../../../../theme/app_sizes.dart';

class PreviewToolbar extends StatelessWidget {
  final bool hasImages;
  final bool hasSelection;
  final VoidCallback? onAddImages;    // 添加
  final VoidCallback? onRotateLeft;
  final VoidCallback? onRotateRight;
  final VoidCallback? onDelete;
  final VoidCallback? onDeleteAll;

  const PreviewToolbar({
    super.key,
    this.hasImages = false,
    this.hasSelection = false,
    this.onAddImages,              // 添加
    this.onRotateLeft,
    this.onRotateRight,
    this.onDelete,
    this.onDeleteAll,
  });

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 48,
      padding: const EdgeInsets.symmetric(horizontal: AppSizes.m),
      child: Row(
        children: [
          // 添加图片
          _ToolbarIconButton(
            icon: Icons.add_photo_alternate_outlined,
            tooltip: '添加图片',
            onPressed: onAddImages,
          ),
          const SizedBox(width: AppSizes.m),
          // 向左旋转
          _ToolbarIconButton(
            icon: Icons.rotate_left,
            tooltip: '向左旋转',
            onPressed: hasSelection ? onRotateLeft : null,
          ),
          // 向右旋转
          _ToolbarIconButton(
            icon: Icons.rotate_right,
            tooltip: '向右旋转',
            onPressed: hasSelection ? onRotateRight : null,
          ),
          const Spacer(),
          // 删除选中
          _ToolbarIconButton(
            icon: Icons.delete_outline,
            tooltip: '删除选中',
            onPressed: hasSelection ? onDelete : null,
            isDestructive: true,
          ),
          // 全部删除
          _ToolbarIconButton(
            icon: Icons.delete_sweep_outlined,
            tooltip: '全部删除',
            onPressed: hasImages ? onDeleteAll : null,
            isDestructive: true,
          ),
        ],
      ),
    );
  }
}

class _ToolbarIconButton extends StatelessWidget {
  final IconData icon;
  final String tooltip;
  final VoidCallback? onPressed;
  final bool isDestructive;

  const _ToolbarIconButton({
    required this.icon,
    required this.tooltip,
    this.onPressed,
    this.isDestructive = false,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final bool isEnabled = onPressed != null;

    return IconButton(
      onPressed: onPressed,
      icon: Icon(
        icon,
        size: 20,
        color: isEnabled
            ? (isDestructive 
                ? theme.colorScheme.error
                : theme.colorScheme.onSurfaceVariant)
            : theme.colorScheme.onSurfaceVariant.withOpacity(0.38),
      ),
      tooltip: tooltip,
      visualDensity: VisualDensity.compact,
      style: IconButton.styleFrom(
        foregroundColor: isDestructive 
            ? theme.colorScheme.error
            : theme.colorScheme.onSurfaceVariant,
        backgroundColor: Colors.transparent,
        hoverColor: (isDestructive 
            ? theme.colorScheme.error
            : theme.colorScheme.onSurfaceVariant
        ).withOpacity(0.08),
        disabledBackgroundColor: Colors.transparent,
        disabledForegroundColor: theme.colorScheme.onSurfaceVariant.withOpacity(0.38),
      ),
    );
  }
}
``n
# FILE:thumbnail_strip.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_import\components\preview\thumbnail_strip.dart
import 'dart:async';
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import '../../../../../theme/app_sizes.dart';

class ThumbnailStrip extends StatefulWidget {
  final List<File> images;
  final int selectedIndex;
  final ValueChanged<int> onSelect;
  final ValueChanged<int> onRemove;
  final void Function(int oldIndex, int newIndex)? onReorder;

  const ThumbnailStrip({
    super.key,
    required this.images,
    required this.selectedIndex,
    required this.onSelect,
    required this.onRemove,
    this.onReorder,
  });

  @override
  State<ThumbnailStrip> createState() => _ThumbnailStripState();
}

class _ThumbnailStripState extends State<ThumbnailStrip> {
  late ScrollController _scrollController;
  bool _isDragging = false;
  Timer? _scrollTimer;

  @override
  void initState() {
    super.initState();
    _scrollController = ScrollController();
  }

  @override
  void dispose() {
    _scrollTimer?.cancel();
    _scrollController.dispose();
    super.dispose();
  }

  void _scrollToSelected() {
    if (!_scrollController.hasClients || widget.selectedIndex < 0) return;

    final viewportWidth = _scrollController.position.viewportDimension;
    final itemWidth = 100.0 + AppSizes.m; // thumbnail width + padding
    final targetOffset = widget.selectedIndex * itemWidth;
    
    // 计算目标位置，使选中项尽可能居中
    final offset = (targetOffset - (viewportWidth - itemWidth) / 2)
        .clamp(0, _scrollController.position.maxScrollExtent)
        .toDouble();

    _scrollController.animateTo(
      offset,
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeOutCubic,
    );
  }

  void _handleReorder(int oldIndex, int newIndex) {
    if (oldIndex < newIndex) newIndex--;
    widget.onReorder?.call(oldIndex, newIndex);
    
    // 添加触觉反馈
    HapticFeedback.mediumImpact();
    SystemSound.play(SystemSoundType.click);
    
    // 更新滚动位置
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _scrollToSelected();
    });
  }

  @override
  void didUpdateWidget(ThumbnailStrip oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.selectedIndex != oldWidget.selectedIndex) {
      _scrollToSelected();
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return MouseRegion(
      onEnter: (_) => _maybeEnableScroll(),
      child: Container(
        height: 120,
        decoration: BoxDecoration(
          border: Border(
            top: BorderSide(color: theme.dividerColor),
          ),
        ),
        child: ScrollConfiguration(
          behavior: ScrollConfiguration.of(context).copyWith(
            scrollbars: false, // 使用自定义滚动条
          ),
          child: Scrollbar(
            controller: _scrollController,
            thumbVisibility: true,
            trackVisibility: true,
            child: ReorderableListView.builder(
              scrollController: _scrollController,
              scrollDirection: Axis.horizontal,
              padding: const EdgeInsets.symmetric(
                horizontal: AppSizes.m,
                vertical: AppSizes.s,
              ),
              buildDefaultDragHandles: false,
              proxyDecorator: _proxyDecorator,
              onReorderStart: (index) {
                setState(() => _isDragging = true);
                HapticFeedback.selectionClick();
                SystemSound.play(SystemSoundType.click);
              },
              onReorderEnd: (_) {
                setState(() => _isDragging = false);
                _scrollToSelected();
              },
              onReorder: (oldIndex, newIndex) {
                // 延迟处理重排序，避免布局冲突
                WidgetsBinding.instance.addPostFrameCallback((_) {
                  _handleReorder(oldIndex, newIndex);
                });
              },
              itemCount: widget.images.length,
              itemBuilder: (context, index) {
                final image = widget.images[index];
                return RepaintBoundary( // 添加重绘边界
                  key: ValueKey(image.path),
                  child: SizedBox(
                    width: 100,
                    height: 100,
                    child: MouseRegion(
                      cursor: _isDragging ? SystemMouseCursors.grabbing : SystemMouseCursors.grab,
                      child: ReorderableDragStartListener(
                        index: index,
                        child: _ThumbnailItem(
                          image: image,
                          isSelected: index == widget.selectedIndex,
                          onTap: () => widget.onSelect(index),
                          onRemove: () => widget.onRemove(index),
                          index: index + 1,
                        ),
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ),
    );
  }

  void _maybeEnableScroll() {
    if (!_scrollController.hasClients) return;
    
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_scrollController.position.maxScrollExtent > 0 && mounted) {
        setState(() {}); // Trigger rebuild to update scroll physics
      }
    });
  }

  // 改进代理装饰器
  Widget _proxyDecorator(Widget child, int index, Animation<double> animation) {
    return FadeTransition(
      opacity: Tween<double>(begin: 0.0, end: 0.9).animate(animation),
      child: ScaleTransition(
        scale: Tween<double>(begin: 1.0, end: 1.05).animate(animation),
        child: Material(
          elevation: animation.value * 8.0,
          color: Colors.transparent,
          shadowColor: Colors.black38,
          borderRadius: BorderRadius.circular(AppSizes.xs),
          child: child,
        ),
      ),
    );
  }
}

class _ThumbnailItem extends StatelessWidget {
  final File image;
  final bool isSelected;
  final VoidCallback onTap;
  final VoidCallback onRemove;
  final int index;

  const _ThumbnailItem({
    super.key,
    required this.image,
    required this.isSelected,
    required this.onTap,
    required this.onRemove,
    required this.index,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Semantics(
      label: '图片 $index',
      selected: isSelected,
      onTapHint: '选择图片',
      child: Padding(
        padding: const EdgeInsets.only(right: AppSizes.m),
        child: InkWell(
          onTap: () {
            HapticFeedback.selectionClick();
            onTap();
          },
          borderRadius: BorderRadius.circular(AppSizes.xs),
          child: Container(
            width: 100,
            height: 100,
            decoration: BoxDecoration(
              color: theme.colorScheme.surface,
              border: Border.all(
                color: isSelected ? theme.colorScheme.primary : theme.dividerColor,
                width: isSelected ? 2 : 1,
              ),
              borderRadius: BorderRadius.circular(AppSizes.xs),
              boxShadow: [
                if (isSelected)
                  BoxShadow(
                    color: theme.colorScheme.primary.withOpacity(0.2),
                    blurRadius: 8,
                    spreadRadius: 2,
                  ),
              ],
            ),
            child: Stack(
              fit: StackFit.expand,
              children: [
                Hero(
                  tag: image.path,
                  child: ClipRRect(
                    borderRadius: BorderRadius.circular(AppSizes.xs),
                    child: Image.file(
                      image,
                      fit: BoxFit.cover,
                      frameBuilder: (context, child, frame, wasSynchronouslyLoaded) {
                        if (wasSynchronouslyLoaded) return child;
                        return AnimatedSwitcher(
                          duration: const Duration(milliseconds: 200),
                          child: frame != null
                              ? child
                              : Container(
                                  color: theme.colorScheme.surface,
                                  child: const Center(
                                    child: CircularProgressIndicator(strokeWidth: 2),
                                  ),
                                ),
                        );
                      },
                      errorBuilder: (context, error, _) => Container(
                        padding: const EdgeInsets.all(AppSizes.s),
                        decoration: BoxDecoration(
                          color: theme.colorScheme.errorContainer.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(AppSizes.xs),
                        ),
                        child: Column(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Icon(
                              Icons.broken_image_outlined,
                              color: theme.colorScheme.error,
                              size: 24,
                            ),
                            const SizedBox(height: AppSizes.xs),
                            Text(
                              '加载失败',
                              style: theme.textTheme.bodySmall?.copyWith(
                                color: theme.colorScheme.error,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ),
                // 序号指示器
                Positioned(
                  left: 8,
                  bottom: 8,
                  child: Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: AppSizes.xs,
                      vertical: AppSizes.xxs,
                    ),
                    decoration: BoxDecoration(
                      color: isSelected 
                        ? theme.colorScheme.primary
                        : theme.colorScheme.surface.withOpacity(0.8),
                      borderRadius: BorderRadius.circular(AppSizes.xxs),
                      border: Border.all(
                        color: isSelected
                          ? Colors.transparent
                          : theme.colorScheme.outline.withOpacity(0.2),
                      ),
                    ),
                    child: Text(
                      '$index',
                      style: theme.textTheme.bodySmall?.copyWith(
                        color: isSelected 
                          ? theme.colorScheme.onPrimary
                          : theme.colorScheme.onSurface,
                        fontWeight: isSelected ? FontWeight.bold : null,
                      ),
                    ),
                  ),
                ),
                // 删除按钮
                if (isSelected)
                  Positioned(
                    top: 4,
                    right: 4,
                    child: Tooltip(
                      message: '移除图片',
                      child: IconButton.filled(
                        onPressed: () {
                          HapticFeedback.lightImpact();
                          onRemove();
                        },
                        icon: const Icon(Icons.close, size: 16),
                        style: IconButton.styleFrom(
                          backgroundColor: theme.colorScheme.error,
                          foregroundColor: theme.colorScheme.onError,
                          padding: const EdgeInsets.all(4),
                          minimumSize: const Size(24, 24),
                          tapTargetSize: MaterialTapTargetSize.shrinkWrap,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(AppSizes.xxs),
                          ),
                        ),
                      ),
                    ),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
``n
# FILE:work_import_preview.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\dialogs\work_import\components\preview\work_import_preview.dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:desktop_drop/desktop_drop.dart';
import 'package:path/path.dart' as path;
import '../../../../../theme/app_sizes.dart';
import '../../../../viewmodels/states/work_import_state.dart';
import '../../../../viewmodels/work_import_view_model.dart';
import 'preview_toolbar.dart';
import 'thumbnail_strip.dart';
import 'image_viewer.dart';

class WorkImportPreview extends StatefulWidget {
  final WorkImportState state;
  final WorkImportViewModel viewModel;
  final VoidCallback onAddImages;

  const WorkImportPreview({
    super.key,
    required this.state,
    required this.viewModel,
    required this.onAddImages,
  });

  @override
  _WorkImportPreviewState createState() => _WorkImportPreviewState();
}

class _WorkImportPreviewState extends State<WorkImportPreview> {
  bool _isDragging = false;
  bool _isProcessing = false;
  final GlobalKey _dropTargetKey = GlobalKey();

  void _showMessage(BuildContext context, String message, {bool isError = false}) {
    final theme = Theme.of(context);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Icon(
              isError ? Icons.error_outline : Icons.info_outline,
              color: isError 
                ? theme.colorScheme.onError
                : theme.colorScheme.onSurfaceVariant,
              size: 20,
            ),
            const SizedBox(width: AppSizes.s),
            Expanded(
              child: Text(message),
            ),
          ],
        ),
        backgroundColor: isError 
          ? theme.colorScheme.error
          : theme.colorScheme.surfaceVariant,
        behavior: SnackBarBehavior.floating,
        margin: const EdgeInsets.all(AppSizes.m),
      ),
    );
  }

  Future<void> _handleDropDone(DropDoneDetails details) async {
    if (_isProcessing || !mounted) return;

    setState(() {
      _isDragging = false;
      _isProcessing = true;
    });

    try {
      // 获取当前已加载的文件路径
      final existingPaths = Set<String>.from(
        widget.state.images.map((file) => file.path)
      );

      // 过滤重复文件和检查文件类型
      final newFiles = details.files
          .where((xFile) {
            final ext = path.extension(xFile.path).toLowerCase();
            final isValidType = ['.jpg', '.jpeg', '.png', '.webp'].contains(ext);
            final isNew = !existingPaths.contains(xFile.path);
            return isValidType && isNew;
          })
          .map((xFile) => File(xFile.path))
          .toList();

      if (newFiles.isEmpty) {
        _showMessage(context, '拖放的图片已全部添加过或格式不支持');
        return;
      }

      await widget.viewModel.addImages(newFiles);
      HapticFeedback.mediumImpact();
    } catch (e) {
      if (!mounted) return;
      _showMessage(context, '添加图片失败：${e.toString()}', isError: true);
    } finally {
      if (mounted) {
        setState(() => _isProcessing = false);
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final hasImages = widget.state.images.isNotEmpty;
    final hasSelection = widget.state.selectedImageIndex >= 0;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        PreviewToolbar(
          hasImages: hasImages,
          hasSelection: hasSelection,          
          onAddImages: widget.onAddImages,    // 添加
          onRotateLeft: hasSelection ? () => widget.viewModel.rotateImage(false) : null,
          onRotateRight: hasSelection ? () => widget.viewModel.rotateImage(true) : null,
          onDelete: hasSelection ? () => widget.viewModel.removeImage(widget.state.selectedImageIndex) : null,
          onDeleteAll: hasImages ? _handleDeleteAll : null, // 新增全部删除功能
        ),

        Expanded(
          child: _buildDropTarget(),
        ),

        if (hasImages)
          Container(
            height: 120,
            decoration: BoxDecoration(
              border: Border(
                top: BorderSide(color: theme.dividerColor),
              ),
            ),
            child: ThumbnailStrip(
              images: widget.state.images,
              selectedIndex: widget.state.selectedImageIndex,
              onSelect: widget.viewModel.selectImage,
              onRemove: widget.viewModel.removeImage,
              onReorder: widget.viewModel.reorderImages,
            ),
          ),
      ],
    );
  }

  Future<void> _handleDeleteAll() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('确认删除'),
        content: const Text('是否删除所有图片？'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('取消'),
          ),
          FilledButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: FilledButton.styleFrom(
              foregroundColor: Theme.of(context).colorScheme.onError,
              backgroundColor: Theme.of(context).colorScheme.error,
            ),
            child: const Text('删除'),
          ),
        ],
      ),
    );

    if (confirmed == true && mounted) {
      widget.viewModel.removeAllImages();
      HapticFeedback.mediumImpact();
    }
  }

  Widget _buildDropTarget() {
    final theme = Theme.of(context);
    final hasImages = widget.state.images.isNotEmpty;
    final hasSelection = widget.state.selectedImageIndex >= 0 && 
                        widget.state.selectedImageIndex < widget.state.images.length;  // 添加范围检查

    return DropTarget(
      key: _dropTargetKey,
      onDragEntered: (_) => setState(() => _isDragging = true),
      onDragExited: (_) => setState(() => _isDragging = false),
      onDragDone: _handleDropDone,
      child: Stack(
        fit: StackFit.expand,
        children: [
          // 背景
          Container(
            color: theme.colorScheme.surface,
            child: hasImages && hasSelection
                ? ImageViewer(
                    image: widget.state.images[widget.state.selectedImageIndex],
                    rotation: widget.state.getRotation(
                      widget.state.images[widget.state.selectedImageIndex].path,
                    ),
                    scale: widget.state.scale,
                    onScaleChanged: widget.viewModel.setScale,
                  )
                : _buildPlaceholder(theme, hasImages),
          ),

          // 拖放遮罩
          if (_isDragging)
            _buildDragOverlay(theme),

          // 处理中指示器
          if (_isProcessing)
            _buildProcessingOverlay(theme),
        ],
      ),
    );
  }

  Widget _buildPlaceholder(ThemeData theme, bool hasImages) {
    return Center(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            hasImages ? Icons.photo_library_outlined : Icons.cloud_upload_outlined,
            size: 64,
            color: theme.colorScheme.outline,
          ),
          const SizedBox(height: AppSizes.m),
          Text(
            hasImages ? '请选择要预览的图片' : '拖放图片到此处',
            style: theme.textTheme.titleMedium?.copyWith(
              color: theme.colorScheme.onSurface,
            ),
          ),
          if (!hasImages) ...[
            const SizedBox(height: AppSizes.s),
            Text(
              '支持 jpg、jpeg、png、webp 格式',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.outline,
              ),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildDragOverlay(ThemeData theme) {
    return AnimatedOpacity(
      opacity: _isDragging ? 1.0 : 0.0,
      duration: const Duration(milliseconds: 200),
      child: Container(
        decoration: BoxDecoration(
          color: theme.colorScheme.primary.withOpacity(0.08),
          border: Border.all(
            color: theme.colorScheme.primary.withOpacity(0.2),
            width: 2,
          ),
        ),
        child: Center(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Icon(
                Icons.file_upload_outlined,
                size: 48,
                color: theme.colorScheme.primary,
              ),
              const SizedBox(height: AppSizes.s),
              Text(
                '释放鼠标添加图片',
                style: theme.textTheme.titleMedium?.copyWith(
                  color: theme.colorScheme.primary,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildProcessingOverlay(ThemeData theme) {
    return Container(
      color: theme.colorScheme.scrim.withOpacity(0.32),
      child: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            SizedBox.square(
              dimension: 48,
              child: CircularProgressIndicator(
                strokeWidth: 3,
                valueColor: AlwaysStoppedAnimation<Color>(
                  theme.colorScheme.onSurface,
                ),
              ),
            ),
            const SizedBox(height: AppSizes.m),
            Text(
              '正在处理...',
              style: theme.textTheme.titleMedium?.copyWith(
                color: theme.colorScheme.onSurface,
              ),
            ),
          ],
        ),
      ),
    );
  }
}
``n
# FILE:date_range_filter.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\models\date_range_filter.dart
import 'package:flutter/material.dart';

enum DateRangePreset {
  today,
  yesterday,
  thisWeek,
  lastWeek,
  thisMonth,
  lastMonth,
  thisYear,
  lastYear,
  last7Days,
  last30Days,
  last90Days,
  last365Days,
}

extension DateRangePresetX on DateRangePreset {
  String get label => switch (this) {
    DateRangePreset.today => '今天',
    DateRangePreset.yesterday => '昨天',
    DateRangePreset.last7Days => '最近7天',
    DateRangePreset.last30Days => '最近30天',
    DateRangePreset.last90Days => '最近90天',
    DateRangePreset.last365Days => '最近一年',
    DateRangePreset.thisMonth => '本月',
    DateRangePreset.lastMonth => '上月',
    DateRangePreset.thisYear => '今年',
    DateRangePreset.lastYear => '去年',
    DateRangePreset.thisWeek => '本周',
    DateRangePreset.lastWeek => '上周',
  };

  DateTimeRange getRange() {
    final now = DateTime.now();
    return switch (this) {
      DateRangePreset.today => DateTimeRange(
          start: DateTime(now.year, now.month, now.day),
          end: now,
        ),
      DateRangePreset.yesterday => DateTimeRange(
          start: DateTime(now.year, now.month, now.day - 1),
          end: DateTime(now.year, now.month, now.day),
        ),
      DateRangePreset.thisWeek => DateTimeRange(
          start: DateTime(now.year, now.month, now.day - now.weekday + 1),
          end: now,
        ),
      DateRangePreset.lastWeek => DateTimeRange(
          start: DateTime(now.year, now.month, now.day - now.weekday - 6),
          end: DateTime(now.year, now.month, now.day - now.weekday),
        ),
      DateRangePreset.thisMonth => DateTimeRange(
          start: DateTime(now.year, now.month, 1),
          end: now,
        ),
      DateRangePreset.lastMonth => DateTimeRange(
          start: DateTime(now.year, now.month - 1, 1),
          end: DateTime(now.year, now.month, 0),
        ),
      DateRangePreset.thisYear => DateTimeRange(
          start: DateTime(now.year, 1, 1),
          end: now,
        ),
      DateRangePreset.lastYear => DateTimeRange(
          start: DateTime(now.year - 1, 1, 1),
          end: DateTime(now.year - 1, 12, 31),
        ),
      DateRangePreset.last7Days => DateTimeRange(
          start: now.subtract(const Duration(days: 7)),
          end: now,
        ),
      DateRangePreset.last30Days => DateTimeRange(
          start: now.subtract(const Duration(days: 30)),
          end: now,
        ),
      DateRangePreset.last90Days => DateTimeRange(
          start: now.subtract(const Duration(days: 90)),
          end: now,
        ),
      DateRangePreset.last365Days => DateTimeRange(
          start: now.subtract(const Duration(days: 365)),
          end: now,
        ),
    };
  }
}

enum DateRangeType {
  preset, // 预设快捷选项
  beforeDate, // 某日期之前
  afterDate, // 某日期之后
  between // 日期范围之间
}

class DateRangeFilter {
  final DateRangePreset? preset;
  final DateTime? startDate;  // Match these parameter names
  final DateTime? endDate;    // with the ones used in constructor

  const DateRangeFilter({
    this.preset,
    this.startDate,
    this.endDate,
  });

  factory DateRangeFilter.preset(DateRangePreset preset) {
    return DateRangeFilter(preset: preset);
  }

  DateTimeRange? get effectiveRange {
    if (preset != null) {
      return preset!.getRange();
    }
    
    if (startDate != null || endDate != null) {
      return DateTimeRange(
        start: startDate ?? DateTime(1900),
        end: endDate ?? DateTime.now(),
      );
    }
    
    return null;
  }

  bool get isEmpty => startDate == null && endDate == null && preset == null;

  bool contains(DateTime date) {
    final range = effectiveRange;
    if (range == null) return true;
    return !date.isBefore(range.start) && !date.isAfter(range.end);
  }

  Map<String, dynamic> toJson() => {
    'start': startDate?.toIso8601String(),
    'end': endDate?.toIso8601String(),
    'preset': preset?.name,
  };

  factory DateRangeFilter.fromJson(Map<String, dynamic> json) {
    return DateRangeFilter(
      startDate: json['start'] != null ? DateTime.parse(json['start']) : null,
      endDate: json['end'] != null ? DateTime.parse(json['end']) : null,
      preset: json['preset'] != null 
          ? DateRangePreset.values.byName(json['preset']) 
          : null,
    );
  }

  DateRangeFilter copyWith({
    DateTime? Function()? startDate,
    DateTime? Function()? endDate,
    DateRangePreset? Function()? preset,
  }) {
    return DateRangeFilter(
      startDate: startDate != null ? startDate() : this.startDate,
      endDate: endDate != null ? endDate() : this.endDate,
      preset: preset != null ? preset() : this.preset,
    );
  }

  // 添加格式化显示文本
  String get displayText {
    if (preset != null) {
      return preset!.label;
    }
    
    if (startDate != null && endDate != null) {
      return '${_formatDate(startDate!)} 至 ${_formatDate(endDate!)}';
    } else if (startDate != null) {
      return '${_formatDate(startDate!)} 之后';
    } else if (endDate != null) {
      return '${_formatDate(endDate!)} 之前';
    }
    
    return '全部时间';
  }

  // 添加日期校验
  bool get isValid {
    if (preset != null) return true;
    if (startDate != null && endDate != null) {
      return !startDate!.isAfter(endDate!);
    }
    return true;
  }

  // 添加日期区间长度计算
  int? get dayCount {
    final range = effectiveRange;
    if (range == null) return null;
    return range.duration.inDays + 1;
  }

  // 添加相等性比较
  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is DateRangeFilter &&
        other.preset == preset &&
        other.startDate == startDate &&
        other.endDate == endDate;
  }

  @override
  int get hashCode => Object.hash(preset, startDate, endDate);

  // 辅助方法：格式化日期
  String _formatDate(DateTime date) {
    return '${date.year}-${date.month.toString().padLeft(2, '0')}-'
           '${date.day.toString().padLeft(2, '0')}';
  }

  // 创建一个空过滤器的工厂方法
  factory DateRangeFilter.empty() => const DateRangeFilter();

  // 创建一个"截止到今天"的工厂方法
  factory DateRangeFilter.untilToday() {
    return DateRangeFilter(endDate: DateTime.now());
  }

  // 创建一个"从某天开始"的工厂方法
  factory DateRangeFilter.fromDate(DateTime startDate) {
    return DateRangeFilter(startDate: startDate);
  }
}

``n
# FILE:work_filter.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\models\work_filter.dart
import 'package:demo/presentation/models/date_range_filter.dart';

enum SortField { 
  none,
  name,
  author,
  creationDate,
  importDate,
}

extension SortFieldX on SortField {
  String get label => switch(this) {
    SortField.none => '默认排序',
    SortField.name => '作品名称',
    SortField.author => '作者',
    SortField.creationDate => '创作时间',
    SortField.importDate => '导入时间',
  };

  String? get fieldName => switch(this) {
    SortField.none => null,
    SortField.name => 'name',
    SortField.author => 'author',
    SortField.creationDate => 'date',
    SortField.importDate => 'import_date',
  };
}

enum DateRangeType {
  lastWeek,
  lastMonth,
  lastYear,
  custom
}

class SortOption {
  final SortField field;
  final bool descending;

  const SortOption({
    this.field = SortField.none,
    this.descending = true,
  });

  bool get isEmpty => field == SortField.none;

  Map<String, dynamic> toQueryParams() {
    if (isEmpty) return {};
    
    return {
      'orderBy': field.fieldName,
      'descending': descending,
    };
  }

  SortOption copyWith({
    SortField? field,
    bool? descending,
  }) {
    return SortOption(
      field: field ?? this.field,
      descending: descending ?? this.descending,
    );
  }
}

class WorkFilter {
  final String? selectedStyle;
  final String? selectedTool;
  final DateRangeFilter? dateFilter;
  final SortOption sortOption;

  const WorkFilter({
    this.selectedStyle,
    this.selectedTool,
    this.dateFilter,
    this.sortOption = const SortOption(),
  });

  Map<String, dynamic> toQueryParams() {
    final params = <String, dynamic>{};
    
    if (selectedStyle?.isNotEmpty ?? false) {
      params['style'] = selectedStyle;
    }
    
    if (selectedTool?.isNotEmpty ?? false) {
      params['tool'] = selectedTool;
    }

    // 处理日期范围
    if (dateFilter != null) {
      final dateRange = dateFilter!.effectiveRange;
      if (dateRange != null) {
        params['fromDate'] = dateRange.start;
        params['toDate'] = dateRange.end;
      }
    }

    // 处理排序
    params.addAll(sortOption.toQueryParams());

    return params;
  }

  WorkFilter copyWith({
    String? Function()? selectedStyle,
    String? Function()? selectedTool,
    DateRangeFilter? Function()? dateFilter,
    SortOption? sortOption,
  }) {
    return WorkFilter(
      selectedStyle: selectedStyle?.call() ?? this.selectedStyle,
      selectedTool: selectedTool?.call() ?? this.selectedTool,
      dateFilter: dateFilter?.call() ?? this.dateFilter,
      sortOption: sortOption ?? this.sortOption,
    );
  }
}
``n
# FILE:character_list_page.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\pages\characters\character_list_page.dart
import 'package:flutter/material.dart';
import '../../widgets/page_layout.dart';
import '../../widgets/page_toolbar.dart';
import '../../widgets/search/search_box.dart';
import '../../widgets/section_header.dart';
import '../../dialogs/character_edit_dialog.dart';
import '../../widgets/character/character_detail_view.dart';
import '../../../theme/app_sizes.dart';

class CharacterListPage extends StatefulWidget {
  const CharacterListPage({super.key});

  @override
  State<CharacterListPage> createState() => _CharacterListPageState();
}

class _CharacterListPageState extends State<CharacterListPage> {
  String? _selectedCharId;
  final _searchController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return PageLayout(
      navigationInfo: const Text('集字列表'),
      toolbar: PageToolbar(
        leading: [
          FilledButton.icon(
            onPressed: _showAddCharacterDialog,
            icon: const Icon(Icons.add),
            label: const Text('新建字符'),
          ),
        ],
        trailing: [
          SearchBox(
            controller: _searchController,
            hintText: '搜索字符...',
            onSubmitted: _handleSearch,
          ),
        ],
      ),
      body: Row(
        children: [
          Expanded(
            flex: 2,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SectionHeader(
                  title: '所有字符',
                  padding: EdgeInsets.fromLTRB(
                    AppSizes.spacingMedium,
                    AppSizes.spacingMedium,
                    AppSizes.spacingMedium,
                    0,
                  ),
                ),
                Expanded(
                  child: _buildCharacterGrid(),
                ),
              ],
            ),
          ),
          if (_selectedCharId != null) ...[
            const VerticalDivider(width: 1),
            Expanded(
              child: CharacterDetailView(charId: _selectedCharId!),
            ),
          ],
        ],
      ),
    );
  }

  Widget _buildCharacterGrid() {
    return GridView.builder(
      padding: const EdgeInsets.all(AppSizes.spacingMedium),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: 6,
        mainAxisSpacing: AppSizes.spacingMedium,
        crossAxisSpacing: AppSizes.spacingMedium,
        childAspectRatio: 1,
      ),
      itemCount: 20,
      itemBuilder: _buildCharacterItem,
    );
  }

  Widget _buildCharacterItem(BuildContext context, int index) {
    final theme = Theme.of(context);
    final charId = 'char_$index';
    final isSelected = charId == _selectedCharId;
    
    return Card(
      elevation: isSelected ? AppSizes.cardElevationSelected : AppSizes.cardElevation,
      color: isSelected 
          ? theme.primaryColor.withOpacity(0.1) 
          : null,
      child: InkWell(
        onTap: () => setState(() => _selectedCharId = charId),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Expanded(
              child: Center(
                child: Text(
                  '字$index',
                  style: theme.textTheme.headlineLarge,
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(AppSizes.spacingSmall),
              child: Text(
                '来自：作品X',
                style: theme.textTheme.bodySmall,
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showAddCharacterDialog() {
    showDialog(
      context: context,
      builder: (context) => const CharacterEditDialog(charId: '',),
    );
  }

  void _handleSearch() {
    // 实现搜索逻辑
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }
}

``n
# FILE:practice_detail_page.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\pages\practices\practice_detail_page.dart
import 'package:flutter/material.dart';
import '../../widgets/page_layout.dart';
import '../../widgets/page_toolbar.dart';
import '../../widgets/section_header.dart';
import '../../../theme/app_sizes.dart';

class PracticeDetailPage extends StatelessWidget {
  final String practiceId;

  const PracticeDetailPage({
    super.key,
    required this.practiceId,
  });

  @override
  Widget build(BuildContext context) {
    return PageLayout(
      navigationInfo: const Text('练习详情'),
      actions: [
        IconButton(
          icon: const Icon(Icons.edit),
          tooltip: '编辑',
          onPressed: () {},
        ),
        IconButton(
          icon: const Icon(Icons.delete),
          tooltip: '删除',
          onPressed: () {},
        ),
      ],
      body: Padding(
        padding: const EdgeInsets.all(AppSizes.spacingMedium),
        child: Row(
          children: [
            Expanded(
              flex: 2,
              child: Card(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const SectionHeader(
                      title: '练习内容',
                      padding: EdgeInsets.all(AppSizes.spacingMedium),
                    ),
                    const Divider(height: 1),
                    Expanded(
                      child: _buildPreviewArea(context),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(width: AppSizes.spacingMedium),
            Expanded(
              child: _buildInfoPanel(context),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPreviewArea(BuildContext context) {
    // TODO: 实现预览区域
    return const Center(child: Text('练习图片预览'));
  }

  Widget _buildInfoPanel(BuildContext context) {
    return Card(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const SectionHeader(
            title: '练习信息',
            padding: EdgeInsets.all(AppSizes.spacingMedium),
          ),
          Expanded(
            child: Padding(
              padding: const EdgeInsets.all(AppSizes.spacingMedium),
              child: _buildInfoContent(context),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoContent(BuildContext context) {
    final theme = Theme.of(context);
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildInfoField('练习日期', '2024-01-01', theme),
        _buildInfoField('练习字数', '100', theme),
        _buildInfoField('练习时长', '30分钟', theme),
        const Spacer(),
        SizedBox(
          width: double.infinity,
          child: FilledButton.icon(
            onPressed: () {},
            icon: const Icon(Icons.save_alt),
            label: const Text('导出练习'),
          ),
        ),
      ],
    );
  }

  Widget _buildInfoField(String label, String value, ThemeData theme) {
    return Padding(
      padding: const EdgeInsets.only(bottom: AppSizes.spacingMedium),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(label, style: theme.textTheme.bodySmall),
          const SizedBox(height: AppSizes.spacingTiny),
          Text(value, style: theme.textTheme.bodyLarge),
        ],
      ),
    );
  }
}

``n
# FILE:practice_edit_page.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\pages\practices\practice_edit_page.dart
import 'package:flutter/material.dart';
import '../../widgets/window/title_bar.dart';
import '../../widgets/practice/practice_tool_panel.dart';
import '../../widgets/practice/practice_layer_panel.dart';
import '../../widgets/practice/practice_property_panel.dart';

class PracticeEditPage extends StatefulWidget {
  final String? practiceId; // 可选ID，如果为null则表示新建

  const PracticeEditPage({
    super.key, 
    this.practiceId,
  });

  @override
  State<PracticeEditPage> createState() => _PracticeEditPageState();
}

class _PracticeEditPageState extends State<PracticeEditPage> {
  bool _hasUnsavedChanges = false;
  List<Map<String, dynamic>> _layers = [];
  Map<String, dynamic>? _selectedElement;

  @override
  void initState() {
    super.initState();
    // TODO: 加载字帖数据
    _layers = [
      {
        'id': '1',
        'name': '背景层',
        'visible': true,
        'locked': false,
        'selected': false,
      },
      {
        'id': '2',
        'name': '内容层',
        'visible': true,
        'locked': false,
        'selected': true,
      },
    ];
  }

  void _handleToolSelected(String tool) {
    setState(() {
      _hasUnsavedChanges = true;
    });
  }

  void _handleLayerSelected(int index) {
    setState(() {
      for (var i = 0; i < _layers.length; i++) {
        _layers[i]['selected'] = i == index;
      }
    });
  }

  void _handleLayerVisibilityChanged(int index, bool visible) {
    setState(() {
      _layers[index]['visible'] = visible;
      _hasUnsavedChanges = true;
    });
  }

  void _handleLayerLockChanged(int index, bool locked) {
    setState(() {
      _layers[index]['locked'] = locked;
      _hasUnsavedChanges = true;
    });
  }

  void _handleLayerDeleted(int index) {
    setState(() {
      _layers.removeAt(index);
      _hasUnsavedChanges = true;
    });
  }

  void _handleLayerReordered(int oldIndex, int newIndex) {
    setState(() {
      if (oldIndex < newIndex) {
        newIndex -= 1;
      }
      final item = _layers.removeAt(oldIndex);
      _layers.insert(newIndex, item);
      _hasUnsavedChanges = true;
    });
  }

  void _handlePropertyChanged(Map<String, dynamic> updatedElement) {
    setState(() {
      _selectedElement = updatedElement;
      _hasUnsavedChanges = true;
    });
  }

  Future<void> _handleSave() async {
    // TODO: 实现保存逻辑
    setState(() => _hasUnsavedChanges = false);
  }

  Future<bool> _onWillPop() async {
    if (!_hasUnsavedChanges) return true;

    final result = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('确认退出'),
        content: const Text('有未保存的更改，确定要退出吗？'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('取消'),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context, true),
            child: const Text('确定'),
          ),
        ],
      ),
    );

    return result ?? false;
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _onWillPop,
      child: Scaffold(
        body: Column(
          children: [
            const TitleBar(),
            AppBar(
              leading: IconButton(
                icon: const Icon(Icons.arrow_back),
                onPressed: () async {
                  if (await _onWillPop()) {
                    Navigator.pop(context);
                  }
                },
              ),
              title: Text(
                widget.practiceId == null ? '新建字帖' : '编辑字帖',
                style: const TextStyle(fontSize: 20),
              ),
              actions: [
                TextButton.icon(
                  onPressed: _handleSave,
                  icon: const Icon(Icons.save),
                  label: const Text('保存'),
                ),
                TextButton.icon(
                  onPressed: () {},
                  icon: const Icon(Icons.print),
                  label: const Text('打印'),
                ),
                TextButton.icon(
                  onPressed: () {},
                  icon: const Icon(Icons.file_download),
                  label: const Text('导出'),
                ),
              ],
            ),
            Expanded(
              child: Row(
                children: [
                  // 左侧工具面板和图层列表
                  SizedBox(
                    width: 250,
                    child: Column(
                      children: [
                        Expanded(
                          child: PracticeToolPanel(
                            onToolSelected: _handleToolSelected,
                          ),
                        ),
                        const Divider(height: 1),
                        Expanded(
                          child: PracticeLayerPanel(
                            layers: _layers,
                            onLayerSelected: _handleLayerSelected,
                            onLayerVisibilityChanged: _handleLayerVisibilityChanged,
                            onLayerLockChanged: _handleLayerLockChanged,
                            onLayerDeleted: _handleLayerDeleted,
                            onLayerReordered: _handleLayerReordered,
                          ),
                        ),
                      ],
                    ),
                  ),
                  const VerticalDivider(width: 1),
                  // 中央编辑区
                  Expanded(
                    child: Container(
                      color: Colors.grey[100],
                      child: Center(
                        child: Container(
                          width: 595, // A4纸宽度
                          height: 842, // A4纸高度
                          color: Colors.white,
                          child: const Stack(
                            children: [
                              // TODO: 实现画布和编辑功能
                            ],
                          ),
                        ),
                      ),
                    ),
                  ),
                  const VerticalDivider(width: 1),
                  // 右侧属性面板
                  SizedBox(
                    width: 280,
                    child: PracticePropertyPanel(
                      selectedElement: _selectedElement,
                      onPropertyChanged: _handlePropertyChanged,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

``n
# FILE:practice_list_page.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\pages\practices\practice_list_page.dart
import 'package:flutter/material.dart';
import '../../widgets/page_layout.dart';
import '../../widgets/page_toolbar.dart';
import '../../widgets/search/search_box.dart';  // 添加
import '../../../theme/app_sizes.dart';
import 'practice_detail_page.dart';
import 'practice_edit_page.dart';  // 添加

class PracticeListPage extends StatefulWidget {
  const PracticeListPage({super.key});

  @override
  State<PracticeListPage> createState() => _PracticeListPageState();
}

class _PracticeListPageState extends State<PracticeListPage> {
  bool _isGridView = true;

  void _navigateToPracticeDetail(BuildContext context, String practiceId) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PracticeDetailPage(practiceId: practiceId),
      ),
    );
  }

  void _navigateToEditPage([String? practiceId]) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => PracticeEditPage(practiceId: practiceId),
      ),
    );
  }

  Widget _buildGridView() {
    return GridView.builder(
      padding: const EdgeInsets.all(AppSizes.spacingMedium),  // 更新
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: AppSizes.gridCrossAxisCount,  // 使用常量
        mainAxisSpacing: AppSizes.gridMainAxisSpacing,  // 使用常量
        crossAxisSpacing: AppSizes.gridCrossAxisSpacing,  // 使用常量
        childAspectRatio: 1,
      ),
      itemCount: 20,
      itemBuilder: (context, index) {
        return Card(
          child: InkWell(
            onTap: () {
              _navigateToPracticeDetail(context, 'practice_$index'); // 添加导航
            },
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Expanded(
                  child: Stack(
                    children: [
                      Container(
                        color: Colors.grey[300],
                        child: Center(child: Text('字帖 $index')),
                      ),
                      Positioned(
                        right: 8,
                        bottom: 8,
                        child: Chip(
                          label: const Text('草稿'),
                          backgroundColor: Colors.yellow[100],
                        ),
                      ),
                    ],
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('字帖标题 $index', style: Theme.of(context).textTheme.titleMedium),
                      Text('创建时间: 2024-01-01', style: Theme.of(context).textTheme.bodySmall),
                    ],
                  ),
                ),
              ],
            ),
          ),
        );
      },
    );
  }

  Widget _buildListView() {
    return ListView.builder(
      padding: const EdgeInsets.all(AppSizes.spacingMedium),  // 更新
      itemCount: 20,
      itemBuilder: (context, index) {
        return Card(
          child: ListTile(
            leading: Container(
              width: 48,
              color: Colors.grey[300],
              child: Center(child: Text('$index')),
            ),
            title: Text('字帖标题 $index'),
            subtitle: const Text('创建时间: 2024-01-01'),
            trailing: const Icon(Icons.chevron_right),
            onTap: () {
              _navigateToPracticeDetail(context, 'practice_$index'); // 添加导航
            },
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return PageLayout(
      navigationInfo: const Text('练习记录'),
      toolbar: PageToolbar(
        leading: [
          FilledButton.icon(
            onPressed: () => _navigateToEditPage(),
            icon: const Icon(Icons.add),
            label: const Text('新建练习'),
          ),
          const SizedBox(width: AppSizes.spacingMedium),
          IconButton(
            onPressed: () => setState(() => _isGridView = !_isGridView),
            icon: Icon(_isGridView ? Icons.list : Icons.grid_view),
            tooltip: _isGridView ? '列表视图' : '网格视图',
          ),
        ],
        trailing: [
          SizedBox(
            width: 240,
            child: SearchBar(
              hintText: '搜索练习...',
              leading: const Icon(Icons.search),
              padding: const MaterialStatePropertyAll(
                EdgeInsets.symmetric(horizontal: AppSizes.spacingMedium),
              ),
            ),
          ),
        ],
      ),
      body: _isGridView ? _buildGridView() : _buildListView(),
    );
  }
}

``n
# FILE:settings_page.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\pages\settings\settings_page.dart
import 'package:flutter/material.dart';

class SettingsPage extends StatelessWidget {
  const SettingsPage({super.key});

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Scaffold(
      backgroundColor: theme.scaffoldBackgroundColor,
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '设置',
              style: theme.textTheme.headlineMedium,
            ),
            const SizedBox(height: 24),
            Card(
              child: ListView(
                shrinkWrap: true,
                children: [
                  ListTile(
                    leading: Icon(Icons.language, color: theme.primaryColor),
                    title: Text('语言设置', style: theme.textTheme.titleMedium),
                    trailing: const Icon(Icons.chevron_right),
                  ),
                  const Divider(height: 1),
                  ListTile(
                    leading: Icon(Icons.backup, color: theme.primaryColor),
                    title: Text('数据备份', style: theme.textTheme.titleMedium),
                    trailing: const Icon(Icons.chevron_right),
                  ),
                  const Divider(height: 1),
                  ListTile(
                    leading: Icon(Icons.info, color: theme.primaryColor),
                    title: Text('关于', style: theme.textTheme.titleMedium),
                    trailing: const Icon(Icons.chevron_right),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

``n
# FILE:general_settings_panel.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\pages\settings\panels\general_settings_panel.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class GeneralSettingsPanel extends ConsumerWidget {
  const GeneralSettingsPanel({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('界面设置', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          _buildThemeSettings(context),
          const Divider(height: 32),
          
          const Text('视图设置', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          _buildViewSettings(context),
          const Divider(height: 32),
          
          const Text('语言设置', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          _buildLanguageSettings(context),
          const Divider(height: 32),
          
          const Text('更新设置', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          _buildUpdateSettings(context),
        ],
      ),
    );
  }

  Widget _buildThemeSettings(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        DropdownButtonFormField<String>(
          decoration: const InputDecoration(
            labelText: '主题模式',
            border: OutlineInputBorder(),
          ),
          items: const [
            DropdownMenuItem(value: 'system', child: Text('跟随系统')),
            DropdownMenuItem(value: 'light', child: Text('明亮模式')),
            DropdownMenuItem(value: 'dark', child: Text('暗黑模式')),
          ],
          onChanged: (value) {},
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            const Text('界面缩放'),
            Expanded(
              child: Slider(
                value: 1.0,
                min: 0.75,
                max: 1.5,
                divisions: 15,
                label: '100%',
                onChanged: (value) {},
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildViewSettings(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        DropdownButtonFormField<String>(
          decoration: const InputDecoration(
            labelText: '默认视图模式',
            border: OutlineInputBorder(),
          ),
          items: const [
            DropdownMenuItem(value: 'grid', child: Text('网格视图')),
            DropdownMenuItem(value: 'list', child: Text('列表视图')),
          ],
          onChanged: (value) {},
        ),
        const SizedBox(height: 16),
        DropdownButtonFormField<int>(
          decoration: const InputDecoration(
            labelText: '缩略图尺寸',
            border: OutlineInputBorder(),
          ),
          items: const [
            DropdownMenuItem(value: 100, child: Text('小 (100px)')),
            DropdownMenuItem(value: 150, child: Text('中 (150px)')),
            DropdownMenuItem(value: 200, child: Text('大 (200px)')),
          ],
          onChanged: (value) {},
        ),
      ],
    );
  }

  Widget _buildLanguageSettings(BuildContext context) {
    return DropdownButtonFormField<String>(
      decoration: const InputDecoration(
        labelText: '界面语言',
        border: OutlineInputBorder(),
      ),
      items: const [
        DropdownMenuItem(value: 'system', child: Text('跟随系统')),
        DropdownMenuItem(value: 'zh_CN', child: Text('简体中文')),
        DropdownMenuItem(value: 'en_US', child: Text('English')),
      ],
      onChanged: (value) {},
    );
  }

  Widget _buildUpdateSettings(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        SwitchListTile(
          title: const Text('自动检查更新'),
          value: true,
          onChanged: (value) {},
        ),
        const SizedBox(height: 8),
        DropdownButtonFormField<String>(
          decoration: const InputDecoration(
            labelText: '更新提醒方式',
            border: OutlineInputBorder(),
          ),
          items: const [
            DropdownMenuItem(value: 'immediate', child: Text('立即提醒')),
            DropdownMenuItem(value: 'daily', child: Text('每天提醒一次')),
            DropdownMenuItem(value: 'weekly', child: Text('每周提醒一次')),
          ],
          onChanged: (value) {},
        ),
      ],
    );
  }
}

``n
# FILE:storage_settings_panel.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\pages\settings\panels\storage_settings_panel.dart
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

class StorageSettingsPanel extends ConsumerWidget {
  const StorageSettingsPanel({super.key});

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildStoragePathSettings(context),
          const Divider(height: 32),
          _buildStorageManagement(context),
          const Divider(height: 32),
          _buildBackupSettings(context),
        ],
      ),
    );
  }

  Widget _buildStoragePathSettings(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text('存储路径设置', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
        const SizedBox(height: 16),
        _buildPathSelector(
          context,
          label: '默认存储位置',
          value: 'C:/Users/Documents/Demo/Storage',
          onSelectPath: () async {
            // TODO: 实现路径选择
          },
        ),
        const SizedBox(height: 16),
        _buildPathSelector(
          context,
          label: '临时文件位置',
          value: 'C:/Users/AppData/Local/Demo/Temp',
          onSelectPath: () async {
            // TODO: 实现路径选择
          },
        ),
        const SizedBox(height: 16),
        _buildPathSelector(
          context,
          label: '导出文件默认位置',
          value: 'C:/Users/Documents/Demo/Exports',
          onSelectPath: () async {
            // TODO: 实现路径选择
          },
        ),
      ],
    );
  }

  Widget _buildStorageManagement(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text('存储管理', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
        const SizedBox(height: 16),
        // 存储空间使用统计
        Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text('存储空间使用统计', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                const SizedBox(height: 16),
                _buildStorageUsageRow('作品文件', '1.2 GB'),
                _buildStorageUsageRow('临时文件', '156 MB'),
                _buildStorageUsageRow('缓存文件', '328 MB'),
                const SizedBox(height: 16),
                Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    TextButton(
                      onPressed: () {
                        // TODO: 实现清理临时文件
                      },
                      child: const Text('清理临时文件'),
                    ),
                    const SizedBox(width: 8),
                    TextButton(
                      onPressed: () {
                        // TODO: 实现清理缓存
                      },
                      child: const Text('清理缓存'),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton(
                      onPressed: () {
                        // TODO: 实现一键清理
                      },
                      child: const Text('一键清理'),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
        const SizedBox(height: 16),
        // 自动清理设置
        Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Text('自动清理设置', style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
                const SizedBox(height: 16),
                DropdownButtonFormField<String>(
                  decoration: const InputDecoration(
                    labelText: '定期清理临时文件',
                    border: OutlineInputBorder(),
                  ),
                  value: 'week',
                  items: const [
                    DropdownMenuItem(value: 'week', child: Text('每周')),
                    DropdownMenuItem(value: 'month', child: Text('每月')),
                    DropdownMenuItem(value: 'quarter', child: Text('每季度')),
                    DropdownMenuItem(value: 'never', child: Text('从不')),
                  ],
                  onChanged: (value) {},
                ),
                const SizedBox(height: 16),
                DropdownButtonFormField<int>(
                  decoration: const InputDecoration(
                    labelText: '缓存文件大小限制',
                    border: OutlineInputBorder(),
                  ),
                  value: 1024,
                  items: const [
                    DropdownMenuItem(value: 1024, child: Text('1 GB')),
                    DropdownMenuItem(value: 5120, child: Text('5 GB')),
                    DropdownMenuItem(value: 10240, child: Text('10 GB')),
                    DropdownMenuItem(value: -1, child: Text('不限制')),
                  ],
                  onChanged: (value) {},
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildBackupSettings(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text('备份设置', style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold)),
        const SizedBox(height: 16),
        Card(
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SwitchListTile(
                  title: const Text('启用自动备份'),
                  value: true,
                  onChanged: (value) {},
                ),
                const SizedBox(height: 16),
                DropdownButtonFormField<String>(
                  decoration: const InputDecoration(
                    labelText: '备份周期',
                    border: OutlineInputBorder(),
                  ),
                  value: 'daily',
                  items: const [
                    DropdownMenuItem(value: 'daily', child: Text('每天')),
                    DropdownMenuItem(value: 'weekly', child: Text('每周')),
                    DropdownMenuItem(value: 'monthly', child: Text('每月')),
                  ],
                  onChanged: (value) {},
                ),
                const SizedBox(height: 16),
                DropdownButtonFormField<int>(
                  decoration: const InputDecoration(
                    labelText: '保留备份数量',
                    border: OutlineInputBorder(),
                  ),
                  value: 5,
                  items: const [
                    DropdownMenuItem(value: 3, child: Text('保留3个')),
                    DropdownMenuItem(value: 5, child: Text('保留5个')),
                    DropdownMenuItem(value: 10, child: Text('保留10个')),
                  ],
                  onChanged: (value) {},
                ),
                const SizedBox(height: 16),
                _buildPathSelector(
                  context,
                  label: '本地备份路径',
                  value: 'C:/Users/Documents/Demo/Backups',
                  onSelectPath: () async {
                    // TODO: 实现路径选择
                  },
                ),
                const SizedBox(height: 16),
                SwitchListTile(
                  title: const Text('启用云端备份'),
                  subtitle: const Text('需要登录账号'),
                  value: false,
                  onChanged: (value) {},
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildPathSelector(
    BuildContext context, {
    required String label,
    required String value,
    required VoidCallback onSelectPath,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label),
        const SizedBox(height: 8),
        Row(
          children: [
            Expanded(
              child: Container(
                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey[400]!),
                  borderRadius: BorderRadius.circular(4),
                ),
                child: Text(value, style: const TextStyle(fontFamily: 'monospace')),
              ),
            ),
            const SizedBox(width: 8),
            ElevatedButton(
              onPressed: onSelectPath,
              child: const Text('选择'),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildStorageUsageRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(label),
          Text(value),
        ],
      ),
    );
  }
}

``n
# FILE:work_browse_page.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\pages\works\work_browse_page.dart
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../domain/entities/work.dart';
import '../../../application/providers/work_browse_provider.dart';
import '../../../utils/date_formatter.dart';
import '../../../utils/path_helper.dart';
import '../../dialogs/work_import/work_import_dialog.dart';
import '../../viewmodels/states/work_browse_state.dart';
import '../../widgets/page_layout.dart';
import '../../theme/app_sizes.dart';
import '../../widgets/works/work_filter_panel.dart';

class WorkBrowsePage extends ConsumerStatefulWidget {
  const WorkBrowsePage({super.key});

  @override
  ConsumerState<WorkBrowsePage> createState() => _WorkBrowsePageState();
}

class _WorkBrowsePageState extends ConsumerState<WorkBrowsePage> {
  bool _batchMode = false;
  final Set<String> _selectedWorks = {};
  String _searchQuery = ''; // 添加搜索查询状态

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.read(workBrowseProvider.notifier).loadWorks();
    });
  }

  @override
  Widget build(BuildContext context) {
    final state = ref.watch(workBrowseProvider);

    return PageLayout(
      navigationInfo: const Text('书法作品'),
      actions: [
        // 搜索按钮
        IconButton(
          icon: const Icon(Icons.search),
          tooltip: '搜索',
          onPressed: () {
            _showSearchDialog(context); // 显示搜索对话框
          },
        ),
        IconButton(
          icon: Icon(state.viewMode == ViewMode.grid
              ? Icons.grid_view
              : Icons.view_list),
          tooltip: state.viewMode == ViewMode.grid ? '网格视图' : '列表视图',
          onPressed: () {
            ref.read(workBrowseProvider.notifier).updateViewMode(
                state.viewMode == ViewMode.grid ? ViewMode.list : ViewMode.grid);
          },
        ),
        // Batch mode toggle button
        IconButton(
          icon: Icon(_batchMode ? Icons.close : Icons.select_all),
          tooltip: _batchMode ? '退出批量选择' : '批量选择',
          onPressed: () {
            setState(() {
              _batchMode = !_batchMode;
              _selectedWorks.clear();
            });
          },
        ),
      ],
      sidebar: WorkFilterPanel(
        filter: state.filter,
        onFilterChanged: (filter) {
          ref.read(workBrowseProvider.notifier).updateFilter(filter);
        },
      ),
      toolbar: _buildToolbar(),
      body: _buildMainContent(state),
      footer: _buildStatusBar(state),
    );
  }

  // 添加搜索对话框
  Future<void> _showSearchDialog(BuildContext context) async {
    final query = await showDialog<String>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('搜索作品'),
        content: TextField(
          autofocus: true,
          decoration: const InputDecoration(
            hintText: '请输入作品名称或作者',
          ),
          onChanged: (text) {
            _searchQuery = text;
          },
        ),
        actions: [
          TextButton(
            child: const Text('取消'),
            onPressed: () => Navigator.of(context).pop(),
          ),
          TextButton(
            child: const Text('搜索'),
            onPressed: () => Navigator.of(context).pop(_searchQuery),
          ),
        ],
      ),
    );

    if (query != null) {
      setState(() {
        _searchQuery = query;
      });
      ref.read(workBrowseProvider.notifier).searchWorks(query); // 调用搜索方法
    }
  }

  Widget _buildMainContent(WorkBrowseState state) {
    if (state.isLoading) {
      return const Center(child: CircularProgressIndicator());
    }

    if (state.error != null) {
      return Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.error_outline,
              size: 48,
              color: Theme.of(context).colorScheme.error,
            ),
            const SizedBox(height: AppSizes.m),
            Text(
              '加载失败',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: AppSizes.s),
            Text(
              state.error!,
              style: Theme.of(context).textTheme.bodyMedium,
            ),
            const SizedBox(height: AppSizes.m),
            FilledButton.icon(
              icon: const Icon(Icons.refresh),
              label: const Text('重试'),
              onPressed: () {
                ref.read(workBrowseProvider.notifier).loadWorks();
              },
            ),
          ],
        ),
      );
    }

    if (state.works.isEmpty) {
      return Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.image_outlined,
              size: 64,
              color: Theme.of(context).textTheme.bodySmall?.color,
            ),
            const SizedBox(height: AppSizes.m),
            Text(
              '暂无作品',
              style: Theme.of(context).textTheme.titleLarge,
            ),
            const SizedBox(height: AppSizes.s),
            Text(
              '点击"导入作品"按钮添加新作品',
              style: Theme.of(context).textTheme.bodySmall,
            ),
          ],
        ),
      );
    }

    return state.viewMode == ViewMode.grid
        ? _buildGrid(state.works)
        : _buildList(state.works);
  }

  Widget _buildStatusBar(WorkBrowseState state) {
    if (state.works.isEmpty) return const SizedBox.shrink();

    return Padding(
      padding: const EdgeInsets.symmetric(
        horizontal: AppSizes.m,
        vertical: AppSizes.xs,
      ),
      child: Row(
        children: [
          Text(
            '共 ${state.works.length} 个作品',
            style: Theme.of(context).textTheme.bodySmall,
          ),
        ],
      ),
    );
  }

  Widget _buildToolbar() {
    return Padding(
      padding: const EdgeInsets.symmetric(
        horizontal: AppSizes.m,
        vertical: AppSizes.s,
      ),
      child: Row(
        children: [
          if (!_batchMode)
            FilledButton.icon(
              icon: const Icon(Icons.add),
              label: const Text('导入作品'),
              onPressed: () => _showImportDialog(context),
            ),
          if (_batchMode)
            FilledButton.tonalIcon(
              icon: const Icon(Icons.delete),
              label: Text('删除${_selectedWorks.length}项'),
              onPressed: _deleteSelected,
            ),
          const Spacer(),
          if (_batchMode)
            Text(
              '已选择 ${_selectedWorks.length} 项',
              style: Theme.of(context).textTheme.bodySmall,
            ),
        ],
      ),
    );
  }

  Widget _buildGrid(List<Work> works) {
    return GridView.builder(
      padding: const EdgeInsets.all(AppSizes.m),
      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
        crossAxisCount: AppSizes.gridCrossAxisCount,
        mainAxisSpacing: AppSizes.gridMainAxisSpacing,
        crossAxisSpacing: AppSizes.gridCrossAxisSpacing,
        mainAxisExtent: AppSizes.gridItemTotalHeight,
      ),
      itemCount: works.length,
      itemBuilder: (context, index) => WorkGridItem(
        work: works[index],
        selected: _selectedWorks.contains(works[index].id),
        selectable: _batchMode,
        onSelected: (selected) {
          setState(() {
            if (selected) {
              _selectedWorks.add(works[index].id!);
            } else {
              _selectedWorks.remove(works[index].id!);
            }
          });
        },
        onTap: _batchMode ? null : () => Navigator.pushNamed(
          context,
          '/work_detail',
          arguments: works[index].id,
        ),
        onDelete: _batchMode ? null : () async {
          await ref.read(workBrowseProvider.notifier)
              .deleteWork(works[index].id!);
        },
      ),
    );
  }

  Widget _buildList(List<Work> works) {
    return ListView.separated(
      padding: const EdgeInsets.all(AppSizes.m),
      itemCount: works.length,
      separatorBuilder: (context, index) => const SizedBox(height: AppSizes.s),
      itemBuilder: (context, index) => WorkListItem(
        work: works[index],
        selected: _selectedWorks.contains(works[index].id),
        onSelected: _batchMode ? (selected) {
          setState(() {
            if (selected) {
              _selectedWorks.add(works[index].id!);
            } else {
              _selectedWorks.remove(works[index].id!);
            }
          });
        } : null,
        onTap: _batchMode ? null : () => Navigator.pushNamed(
          context,
          '/work_detail',
          arguments: works[index].id,
        ),
        onEdit: _batchMode ? null : () {
          // Handle edit action
        },
        onDelete: _batchMode ? null : () async {
          await ref.read(workBrowseProvider.notifier)
              .deleteWork(works[index].id!);
        },
      ),
    );
  }

  Future<void> _deleteSelected() async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('确认删除'),
        content: Text('确定要删除选中的 ${_selectedWorks.length} 个作品吗？'),
        actions: [
          TextButton(
            child: const Text('取消'),
            onPressed: () => Navigator.of(context).pop(false),
          ),
          FilledButton(
            child: const Text('删除'),
            onPressed: () => Navigator.of(context).pop(true),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      for (final workId in _selectedWorks) {
        await ref.read(workBrowseProvider.notifier).deleteWork(workId);
      }
      setState(() {
        _selectedWorks.clear();
        _batchMode = false;
      });
    }
  }

  Future<void> _showImportDialog(BuildContext context) async {
    final result = await showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) => const WorkImportDialog(),
    );

    if (result == true) {
      // Refresh work list after successful import
      ref.invalidate(workBrowseProvider);
    }
  }
}

class WorkListItem extends StatelessWidget {
  final Work work;
  final VoidCallback? onTap;
  final VoidCallback? onEdit;
  final VoidCallback? onDelete;
  final bool selected;
  final ValueChanged<bool>? onSelected;

  const WorkListItem({
    super.key,
    required this.work,
    this.onTap,
    this.onEdit,
    this.onDelete,
    this.selected = false,
    this.onSelected,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 1,
      margin: EdgeInsets.zero,
      clipBehavior: Clip.antiAlias,
      child: InkWell(
        onTap: onSelected != null ? () => onSelected!(!selected) : onTap,
        child: SizedBox(
          height: AppSizes.listItemHeight,
          child: Padding(
            padding: const EdgeInsets.all(AppSizes.m),
            child: Row(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Stack(
                  children: [
                    _buildThumbnail(context),
                    if (onSelected != null || selected)
                      _buildSelectionOverlay(context),
                  ],
                ),
                const SizedBox(width: AppSizes.m),
                Expanded(child: _buildContent(context)),
                if (onSelected == null && (onEdit != null || onDelete != null))
                  _buildActions(context),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildThumbnailSection(BuildContext context) {
    return Stack(
      children: [
        _buildThumbnail(context),
        if (onSelected != null)
          _buildSelectionOverlay(context),
      ],
    );
  }

  Widget _buildThumbnail(BuildContext context) {
    return SizedBox(
      width: AppSizes.thumbnailSize,
      height: AppSizes.thumbnailSize,
      child: ClipRRect(
        borderRadius: BorderRadius.circular(AppSizes.xs),
        child: FutureBuilder<String>(
          future: PathHelper.getWorkThumbnailPath(work.id!),
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              final file = File(snapshot.data!);
              if (file.existsSync()) {
                return Image.file(
                  file,
                  fit: BoxFit.cover,
                  errorBuilder: (_, __, ___) => _buildPlaceholder(context),
                );
              }
            }
            return _buildPlaceholder(context);
          },
        ),
      ),
    );
  }

  Widget _buildContent(BuildContext context) {
    final textTheme = Theme.of(context).textTheme;
    final colorScheme = Theme.of(context).colorScheme;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        // Title section with fixed height
        SizedBox(
          height: 48,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                work.name ?? '',
                style: textTheme.titleMedium,
                maxLines: 1,
                overflow: TextOverflow.ellipsis,
              ),
              if (work.author?.isNotEmpty ?? false) ...[
                const SizedBox(height: AppSizes.xxs),
                Text(
                  work.author!,
                  style: textTheme.bodyMedium?.copyWith(
                    color: colorScheme.primary,
                  ),
                  maxLines: 1,
                  overflow: TextOverflow.ellipsis,
                ),
              ],
            ],
          ),
        ),

        // Tags section with single line
        SizedBox(
          height: 24,
          child: ListView(
            scrollDirection: Axis.horizontal,
            children: [
              if (work.style?.isNotEmpty ?? false)
                _buildTag(context, work.style!),
              if (work.tool?.isNotEmpty ?? false)
                Padding(
                  padding: const EdgeInsets.only(left: AppSizes.xs),
                  child: _buildTag(context, work.tool!),
                ),
              if (work.imageCount != null)
                Padding(
                  padding: const EdgeInsets.only(left: AppSizes.xs),
                  child: _buildTag(context, '${work.imageCount}张'),
                ),
            ],
          ),
        ),

        const Spacer(),

        // Metadata section
        DefaultTextStyle(
          style: textTheme.bodySmall!.copyWith(
            color: colorScheme.outline,
          ),
          child: Row(
            children: [
              Icon(
                Icons.calendar_today_outlined,
                size: 14,
                color: colorScheme.outline,
              ),
              const SizedBox(width: AppSizes.xs),
              Text(DateFormatter.formatCompact(
                work.creationDate ?? work.createTime ?? DateTime.now()
              )),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildTag(BuildContext context, String label) {
    return Container(
      padding: const EdgeInsets.symmetric(
        horizontal: AppSizes.s,
        vertical: 2,
      ),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.secondaryContainer,
        borderRadius: BorderRadius.circular(AppSizes.xs),
      ),
      child: Text(
        label,
        style: Theme.of(context).textTheme.labelSmall?.copyWith(
          color: Theme.of(context).colorScheme.onSecondaryContainer,
        ),
      ),
    );
  }

  Widget _buildActions(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.start,
      children: [
        if (onEdit != null)
          IconButton(
            icon: const Icon(Icons.edit_outlined),
            visualDensity: VisualDensity.compact,
            onPressed: onEdit,
          ),
        if (onDelete != null)
          IconButton(
            icon: const Icon(Icons.delete_outline),
            visualDensity: VisualDensity.compact,
            onPressed: onDelete,
          ),
      ],
    );
  }

  Widget _buildPlaceholder(BuildContext context) {
    return Container(
      color: Theme.of(context).colorScheme.surfaceContainerHighest,
      child: Center(
        child: Icon(
          Icons.image_outlined,
          size: 32,
          color: Theme.of(context).colorScheme.outline,
        ),
      ),
    );
  }

  Widget _buildSelectionOverlay(BuildContext context) {
    return Positioned.fill(
      child: Container(
        decoration: BoxDecoration(
          color: selected 
              ? Theme.of(context).colorScheme.primary.withOpacity(0.2)
              : Colors.transparent,
        ),
        child: Align(
          alignment: Alignment.topRight,
          child: Padding(
            padding: const EdgeInsets.all(AppSizes.xs),
            child: Checkbox(
              value: selected,
              onChanged: (value) => onSelected?.call(value ?? false),
            ),
          ),
        ),
      ),
    );
  }
}

class WorkGridItem extends StatelessWidget {
  final Work work;
  final VoidCallback? onTap;
  final VoidCallback? onDelete;
  final bool selectable;
  final bool selected;
  final ValueChanged<bool>? onSelected;

  const WorkGridItem({
    super.key,
    required this.work,
    this.onTap,
    this.onDelete,
    this.selectable = false,
    this.selected = false,
    this.onSelected,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      clipBehavior: Clip.antiAlias,
      child: InkWell(
        onTap: selectable ? () => onSelected?.call(!selected) : onTap,
        child: SizedBox(
          width: AppSizes.gridItemWidth,
          height: AppSizes.gridItemTotalHeight,
          child: Column(
            children: [
              SizedBox(
                height: AppSizes.gridItemImageHeight,
                width: double.infinity,
                child: Stack(
                  fit: StackFit.expand,
                  children: [
                    _buildThumbnail(context),
                    if (selectable || selected)
                      _buildSelectionOverlay(context),
                  ],
                ),
              ),
              Expanded(
                child: Padding(
                  padding: const EdgeInsets.all(AppSizes.m),
                  child: _buildContent(context),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildContent(BuildContext context) {
    final textTheme = Theme.of(context).textTheme;
    final colorScheme = Theme.of(context).colorScheme;

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisSize: MainAxisSize.min,
      children: [
        // Title
        Text(
          work.name ?? '',
          style: textTheme.titleMedium,
          maxLines: 1,
          overflow: TextOverflow.ellipsis,
        ),
        if (work.author?.isNotEmpty ?? false) ...[
          const SizedBox(height: AppSizes.xxs),
          Text(
            work.author!,
            style: textTheme.bodyMedium?.copyWith(
              color: colorScheme.primary,
            ),
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),
        ],
        const Spacer(),
        // Bottom metadata
        Row(
          children: [
            Icon(
              Icons.photo_outlined,
              size: 16,
              color: colorScheme.outline,
            ),
            const SizedBox(width: AppSizes.xs),
            Text(
              '${work.imageCount ?? 0}张',
              style: textTheme.bodySmall?.copyWith(
                color: colorScheme.outline,
              ),
            ),
            const Spacer(),
            Text(
              DateFormatter.formatCompact(
                work.creationDate ?? work.createTime ?? DateTime.now(),
              ),
              style: textTheme.bodySmall?.copyWith(
                color: colorScheme.outline,
              ),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildThumbnail(BuildContext context) {
    return FutureBuilder<String>(
      future: PathHelper.getWorkThumbnailPath(work.id!),
      builder: (context, snapshot) {
        if (snapshot.hasData) {
          final file = File(snapshot.data!);
          if (file.existsSync()) {
            return Image.file(
              file,
              fit: BoxFit.cover,
              errorBuilder: (_, __, ___) => _buildPlaceholder(context),
            );
          }
        }
        return _buildPlaceholder(context);
      },
    );
  }

  Widget _buildSelectionOverlay(BuildContext context) {
    return Container(
      decoration: BoxDecoration(
        color: selected 
            ? Theme.of(context).colorScheme.primary.withOpacity(0.2)
            : Colors.transparent,
      ),
      child: Align(
        alignment: Alignment.topRight,
        child: Padding(
          padding: const EdgeInsets.all(AppSizes.xs),
          child: Checkbox(
            value: selected,
            onChanged: (value) => onSelected?.call(value ?? false),
          ),
        ),
      ),
    );
  }

  Widget _buildPlaceholder(BuildContext context) {
    return Container(
      color: Theme.of(context).colorScheme.surfaceContainerHighest,
      child: Center(
        child: Icon(
          Icons.image_outlined,
          size: 32,
          color: Theme.of(context).colorScheme.outline,
        ),
      ),
    );
  }
}

``n
# FILE:work_detail_page.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\pages\works\work_detail_page.dart
import 'package:flutter/material.dart';
import '../../widgets/page_layout.dart';
import '../../widgets/page_toolbar.dart';
import '../../widgets/section_header.dart';
import '../../../theme/app_sizes.dart';
import '../../dialogs/export_dialog.dart';
import '../../dialogs/delete_confirmation_dialog.dart';
import '../../dialogs/work_edit_dialog.dart';
import '../../widgets/character/character_extraction_panel.dart';
import '../../widgets/window/title_bar.dart';
import '../practices/practice_detail_page.dart';
import '../../dialogs/character_detail_dialog.dart';

class WorkDetailPage extends StatelessWidget {
  final String workId;

  const WorkDetailPage({
    super.key,
    required this.workId,
  });

  @override
  Widget build(BuildContext context) {
    return PageLayout(
      navigationInfo: const Text('作品详情'),
      actions: [
        IconButton(
          icon: const Icon(Icons.edit),
          tooltip: '编辑',
          onPressed: () {},
        ),
        IconButton(
          icon: const Icon(Icons.delete),
          tooltip: '删除',
          onPressed: () {},
        ),
      ],
      body: Padding(
        padding: const EdgeInsets.all(AppSizes.spacingMedium),
        child: Row(
          children: [
            // 左侧预览区域
            Expanded(
              flex: 2,
              child: Card(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const SectionHeader(title: '作品内容'),
                    const Divider(height: 1),
                    Expanded(
                      child: _buildPreviewSection(),
                    ),
                  ],
                ),
              ),
            ),
            const SizedBox(width: AppSizes.spacingMedium),
            // 右侧信息区域
            Expanded(
              child: Card(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const SectionHeader(title: '基本信息'),
                    Expanded(
                      child: _buildInfoSection(context),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPreviewSection() {
    return const Center(child: Text('图片预览区域'));
  }

  Widget _buildInfoSection(BuildContext context) {
    final theme = Theme.of(context);
    
    return Padding(
      padding: const EdgeInsets.all(AppSizes.spacingMedium),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildInfoItem('作品名称', '兰亭集序', theme),
          _buildInfoItem('作者', '王羲之', theme),
          _buildInfoItem('朝代', '晋', theme),
          _buildInfoItem('字体', '行书', theme),
          _buildInfoItem('创建时间', '2024-01-01', theme),
          const Spacer(),
          SizedBox(
            width: double.infinity,
            child: FilledButton.icon(
              onPressed: () {},
              icon: const Icon(Icons.save_alt),
              label: const Text('导出作品'),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoItem(String label, String value, ThemeData theme) {
    return Padding(
      padding: const EdgeInsets.only(bottom: AppSizes.spacingMedium),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            label,
            style: theme.textTheme.bodySmall,
          ),
          const SizedBox(height: AppSizes.spacingTiny),
          Text(
            value,
            style: theme.textTheme.bodyLarge,
          ),
        ],
      ),
    );
  }
}

class CharacterDetailPage extends StatelessWidget {
  final String charId;
  final VoidCallback onBack;

  const CharacterDetailPage({super.key, required this.charId, required this.onBack});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: onBack,
        ),
        title: const Text('字帖详情', style: TextStyle(fontSize: 20)),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('字帖 $charId'),
            const SizedBox(height: 16),
            ElevatedButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('返回'),
            ),
          ],
        ),
      ),
    );
  }
}

``n
# FILE:work_filter_provider.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\providers\work_filter_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../models/work_filter.dart';

final workFilterProvider = StateNotifierProvider<WorkFilterNotifier, WorkFilter>((ref) {
  return WorkFilterNotifier();
});

class WorkFilterNotifier extends StateNotifier<WorkFilter> {
  WorkFilterNotifier() : super( const WorkFilter());

  void updateFilter(WorkFilter newFilter) {
    state = newFilter;
  }

  void resetFilter() {
    state =  const WorkFilter();
  }
}

``n
# FILE:work_import_provider.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\providers\work_import_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../application/providers/service_providers.dart';
import '../viewmodels/states/work_import_state.dart';
import '../viewmodels/work_import_view_model.dart';

final workImportProvider =
    StateNotifierProvider<WorkImportViewModel, WorkImportState>((ref) {
  final workService = ref.watch(workServiceProvider);
  final imageService = ref.watch(imageServiceProvider);
  return WorkImportViewModel(workService, imageService);
});

``n
# FILE:work_list_provider.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\providers\work_list_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../domain/entities/work.dart';
import '../../infrastructure/providers/repository_providers.dart';
import '../models/work_filter.dart';
import 'work_filter_provider.dart';

final workListProvider = FutureProvider.autoDispose<List<Work>>((ref) async {
  final filter = ref.watch(workFilterProvider);
  
  // 获取作品列表
  final worksData = await ref.read(workRepositoryProvider).getWorks();
  final works = worksData.map((data) => Work.fromJson(data)).toList();
  
  // 应用筛选
  var filteredWorks = works.where((work) {
    if (work.style != filter.selectedStyle) {
      return false;
    }
    if (work.tool != filter.selectedTool) {
      return false;
    }
    // ...更多筛选条件
    return true;
  }).toList();

  // 应用排序
  if (!filter.sortOption.isEmpty) {
    filteredWorks.sort((a, b) {
      int compare;
      switch (filter.sortOption.field) {
        case SortField.name:
          compare = (a.name ?? '').compareTo(b.name ?? '');
          break;
        case SortField.author:
          compare = (a.author ?? '').compareTo(b.author ?? '');
          break;
        case SortField.creationDate:
          compare = (a.creationDate ?? DateTime(0)).compareTo(b.creationDate ?? DateTime(0));
          break;
        case SortField.importDate:
          compare = (a.createTime ?? DateTime(0)).compareTo(b.createTime ?? DateTime(0));
          break;
        default:
          return 0;
      }
      return filter.sortOption.descending ? -compare : compare;
    });
  }

  return filteredWorks;
});

``n
# FILE:app_colors.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\theme\app_colors.dart
import 'package:flutter/material.dart';

class AppColors {
  // Brand colors
  static const primaryLight = Color(0xFF42A5F5);
  static const primary = Color(0xFF2196F3);
  static const primaryDark = Color(0xFF1E88E5);

  // Functional colors
  static const success = Color(0xFF4CAF50);
  static const warning = Color(0xFFFFC107);
  static const error = Color(0xFFF44336);
  static const info = Color(0xFF2196F3);

  // Text colors
  static const titleText = Color(0xFF333333);
  static const primaryText = Color(0xFF666666);
  static const secondaryText = Color(0xFF999999);

  // Surface colors
  static const border = Color(0xFFE0E0E0);
  static const background = Color(0xFFF5F5F5);
  static const surface = Colors.white;
}
``n
# FILE:app_images.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\theme\app_images.dart
class AppImages {
  // 图标尺寸
  static const double iconSizeSmall = 16;
  static const double iconSizeMedium = 24;
  static const double iconSizeLarge = 32;

  // 预览图尺寸
  static const double thumbnailSizeSmall = 100;
  static const double thumbnailSizeMedium = 150;
  static const double thumbnailSizeLarge = 200;

  // 占位图样式
  static const double placeholderOpacity = 0.1;
  static const double placeholderIconSize = 48;
}

``n
# FILE:app_sizes.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\theme\app_sizes.dart
class AppSizes {
  // Window breakpoints
  static const double minWindowWidth = 1024.0;
  static const double minWindowHeight = 768.0;
  static const double breakpointXs = 600.0;
  static const double breakpointSm = 768.0;
  static const double breakpointMd = 992.0;
  static const double breakpointLg = 1200.0;
  static const double breakpointXl = 1400.0;

  // Base spacing
  static const double xxs = 2.0;
  static const double xs = 4.0;
  static const double s = 8.0;
  static const double m = 16.0;
  static const double l = 24.0;
  static const double xl = 32.0;
  static const double xxl = 48.0;

  // Layout components
  static const double appBarHeight = 56.0;
  static const double sidebarWidth = 256.0;
  static const double headerHeight = 56.0;
  static const double toolbarHeight = 56.0;
  static const double footerHeight = 64.0;
  static const double tableHeaderHeight = 48.0;
  
  // Button dimensions
  static const double buttonHeight = 36.0;
  static const double buttonMinWidth = 64.0;
  static const double buttonIconSize = 18.0;
  static const double buttonElevation = 2.0;

  // Content constraints
  static const double minContentWidth = minWindowWidth * 0.8;  // 80% of min window width
  static const double minContentHeight = minWindowHeight * 0.8; // 80% of min window height
  static const double maxContentWidth = breakpointLg;
  static const double contentPadding = m;

  // Form elements
  static const double formWidth = 320.0;
  static const double formFieldHeight = 48.0;
  static const double formSpacing = m;
  static const double formLabelWidth = 120.0;
  static const double formFieldSpacing = s;

  // Dialog dimensions
  static const double dialogMinWidth = 400.0;
  static const double dialogMaxWidth = minWindowWidth * 0.9;
  static const double dialogMinHeight = 300.0;
  static const double dialogMaxHeight = minWindowHeight * 0.9;
  static const double dialogHeaderHeight = 56.0;
  static const double dialogFooterHeight = 64.0;
  static const double dialogContentPadding = m;
  
  // Work import dialog specific
  static const double workImportDialogWidth = minWindowWidth * 0.8;
  static const double workImportDialogHeight = minWindowHeight * 0.8;
  static const double workImportPreviewWidth = workImportDialogWidth * 0.6;
  static const double workImportFormWidth = workImportDialogWidth * 0.4;

  // List items
  static const double thumbnailSize = 80.0;
  static const double listItemHeight = 120.0;
  static const double listItemSpacing = s;
  static const double listItemMinHeight = 100.0;
  static const double listItemMaxHeight = 120.0;
  static const double listItemPadding = m;

  // Grid items
  static const double gridItemWidth = 200.0;
  static const double gridItemImageHeight = 200.0;
  static const double gridItemInfoHeight = 72.0;
  static const double gridItemPadding = m;
  static const double gridItemTotalHeight = gridItemImageHeight + gridItemInfoHeight + (gridItemPadding * 2);
  static const int gridCrossAxisCount = 4;
  static const double gridMainAxisSpacing = m;
  static const double gridCrossAxisSpacing = m;

  // Shared components
  static const double cardRadius = 8.0;
  static const double cardElevation = 1.0;
  static const double dividerThickness = 1.0;
  static const double iconSize = 24.0;
  static const double tooltipHeight = 24.0;

  static const double iconLarge = 24.0;
  static const double iconMedium = 18.0;  
  static const double iconSmall = 12.0;
  static const double iconXSmall = 8.0;
 
  // Prevent instantiation
  const AppSizes._();
}
``n
# FILE:app_text_styles.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\theme\app_text_styles.dart
import 'package:flutter/material.dart';
import 'app_colors.dart';

class AppTextStyles {
  static const h1 = TextStyle(
    fontSize: 24,
    fontWeight: FontWeight.w600,
    color: AppColors.titleText,
    height: 1.4,
  );

  static const h2 = TextStyle(
    fontSize: 20,
    fontWeight: FontWeight.w600,
    color: AppColors.titleText,
    height: 1.4,
  );

  static const h3 = TextStyle(
    fontSize: 16,
    fontWeight: FontWeight.w500,
    color: AppColors.titleText,
    height: 1.4,
  );

  static const body1 = TextStyle(
    fontSize: 14,
    fontWeight: FontWeight.w400,
    color: AppColors.primaryText,
    height: 1.5,
  );

  static const body2 = TextStyle(
    fontSize: 12,
    fontWeight: FontWeight.w400,
    color: AppColors.secondaryText,
    height: 1.5,
  );
}

``n
# FILE:app_theme.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\theme\app_theme.dart
import 'package:flutter/material.dart';
import 'app_colors.dart';
import 'app_sizes.dart';

class AppTheme {
  static ThemeData light = ThemeData(
    useMaterial3: true,
    colorScheme: const ColorScheme.light(
      primary: AppColors.primary,
      secondary: AppColors.primaryLight,
      error: AppColors.error,
      surface: AppColors.surface,
    ),
    
    textTheme: const TextTheme(
      displayLarge: TextStyle(
        fontSize: 32,
        fontWeight: FontWeight.w600,
        color: AppColors.titleText,
      ),
      titleLarge: TextStyle(
        fontSize: 24,
        fontWeight: FontWeight.w600,
        color: AppColors.titleText,
      ),
      titleMedium: TextStyle(
        fontSize: 20,
        fontWeight: FontWeight.w500,
        color: AppColors.titleText,
      ),
      bodyLarge: TextStyle(
        fontSize: 16,
        height: 1.5,
        color: AppColors.primaryText,
      ),
      bodyMedium: TextStyle(
        fontSize: 14,
        height: 1.5,
        color: AppColors.primaryText,
      ),
      bodySmall: TextStyle(
        fontSize: 12,
        height: 1.4,
        color: AppColors.secondaryText,
      ),
    ),

    dividerTheme: const DividerThemeData(
      color: AppColors.border,
      thickness: 1,
    ),

    elevatedButtonTheme: ElevatedButtonThemeData(
      style: ElevatedButton.styleFrom(
        minimumSize: const Size(0, AppSizes.buttonHeight),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(4),
        ),
      ),
    ),

    outlinedButtonTheme: OutlinedButtonThemeData(
      style: OutlinedButton.styleFrom(
        minimumSize: const Size(0, AppSizes.buttonHeight),
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(4),
        ),
      ),
    ),

    inputDecorationTheme: InputDecorationTheme(
      border: OutlineInputBorder(
        borderRadius: BorderRadius.circular(4),
        borderSide: const BorderSide(color: AppColors.border),
      ),
      contentPadding: const EdgeInsets.symmetric(
        horizontal: AppSizes.m,
        vertical: AppSizes.s,
      ),
    ),

    cardTheme: CardTheme(
      elevation: 1,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(4),
      ),
      margin: EdgeInsets.zero,
    ),
  );
}


``n
# FILE:work_browse_view_model.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\viewmodels\work_browse_view_model.dart
import 'package:demo/domain/entities/work.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../domain/interfaces/i_work_service.dart';
import '../../infrastructure/config/storage_paths.dart';
import '../models/work_filter.dart';
import 'states/work_browse_state.dart';

class WorkBrowseViewModel extends StateNotifier<WorkBrowseState> {
  final IWorkService _workService;  // 使用接口而不是具体实现
  final StoragePaths _paths;

  WorkBrowseViewModel(this._workService, this._paths) 
      : super(const WorkBrowseState());

  Future<void> loadWorks() async {
    state = state.copyWith(isLoading: true, error: null);
    try {
      final works = await _workService.queryWorks(
        searchQuery: state.searchQuery,
        filter: state.filter,
      );
      
      state = state.copyWith(
        isLoading: false,
        allWorks: works,
        works: works,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }

  void updateFilter(WorkFilter filter) {
    state = state.copyWith(
      filter: filter,
      works: _applyFilter(state.allWorks, filter),
    );
  }

  void updateSearch(String query) {
    state = state.copyWith(
      searchQuery: query,
      works: _applyFilter(state.allWorks, state.filter),
    );
  }

  void updateViewMode(ViewMode mode) {
    state = state.copyWith(viewMode: mode);
  }

  List<Work> _applyFilter(List<Work> works, WorkFilter filter) {
    var filtered = List<Work>.from(works);

    // 应用搜索
    if (state.searchQuery?.isNotEmpty ?? false) {
      final query = state.searchQuery!.toLowerCase();
      filtered = filtered.where((work) {
        return (work.name?.toLowerCase().contains(query) ?? false) ||
               (work.author?.toLowerCase().contains(query) ?? false) ||
               (work.style?.toLowerCase().contains(query) ?? false);
      }).toList();
    }

    // 应用风格筛选
    filtered = filtered.where((w) => w.style == filter.selectedStyle).toList();
  
    // 应用工具筛选
    filtered = filtered.where((w) => w.tool == filter.selectedTool).toList();
  
    // 应用日期筛选
    if (filter.dateFilter != null) {
      filtered = filtered.where((w) {
        final date = DateTime.tryParse(w.creationDate as String? ?? DateTime.now().toIso8601String());
        if (date == null) return false;
        return filter.dateFilter!.contains(date);
      }).toList();
    }

    // 修改排序逻辑，使用 sortOption
    if (!filter.sortOption.isEmpty) {
      filtered.sort((a, b) {
        int result;
        switch (filter.sortOption.field) {
          case SortField.name:
            result = (a.name ?? '').compareTo(b.name ?? '');
            break;
          case SortField.author:
            result = (a.author ?? '').compareTo(b.author ?? '');
            break;
          case SortField.creationDate:
            result = (a.creationDate ?? DateTime.now()).compareTo(b.creationDate ?? DateTime.now());
            break;
          case SortField.importDate:
            result = (a.createTime ?? DateTime.now())
                .compareTo(b.createTime ?? DateTime.now());
            break;
          case SortField.none:
            result = 0;
            break;
        }
        return filter.sortOption.descending ? -result : result;
      });
    }

    return filtered;
  }

  Future<String?> getWorkThumbnail(String workId) async {
    try {
      return await _workService.getWorkThumbnail(workId);
    } catch (e) {
      return null;
    }
  }

  Future<void> deleteWork(String workId) async {
    try {
      await _workService.deleteWork(workId);
      await loadWorks(); // 重新加载数据
    } catch (e) {
      state = state.copyWith(error: e.toString());
    }
  }

   // 添加搜索方法
  Future<void> searchWorks(String query) async {
    state = state.copyWith(isLoading: true, error: null);
    try {
      final works = await _workService.queryWorks(searchQuery: state.searchQuery,
        filter: state.filter, sortOption: state.sortOption);
      state = state.copyWith(works: works, isLoading: false);
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }
}
``n
# FILE:work_import_view_model.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\viewmodels\work_import_view_model.dart
import 'dart:io';
import 'package:demo/domain/value_objects/work/work_info.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:path/path.dart' as path;
import '../../application/config/app_config.dart';
import '../../application/services/work_service.dart';
import '../../application/services/image_service.dart';
import '../../domain/enums/work_style.dart';
import '../../domain/enums/work_tool.dart';
import 'states/work_import_state.dart';

class WorkImportViewModel extends StateNotifier<WorkImportState> {
  final WorkService _workService;
  final ImageService _imageService;

  WorkImportViewModel(this._workService, this._imageService) 
      : super(const WorkImportState());

  // 基础信息设置
  void setName(String name) => state = state.copyWith(name: name.trim());
  void setAuthor(String author) => state = state.copyWith(author: author.trim());
  void setRemarks(String remarks) => state = state.copyWith(remarks: remarks.trim());
  void setCreationDate(DateTime? date) => state = state.copyWith(creationDate: date);

  // 枚举值设置
  void setTool(String? value) {
    if (value?.isEmpty ?? true) return;
    
    try {
      final enumValue = value!.trim();
      final tool = WorkTool.values.firstWhere(
        (e) => e.toString().split('.').last.toLowerCase() == enumValue.toLowerCase(),
        orElse: () => throw Exception('未知的书写工具: $value'),
      );
      state = state.copyWith(tool: tool);
    } catch (e) {
      state = state.copyWith(error: e.toString());
      debugPrint('Error setting tool: $e');
    }
  }

  void setStyle(String? value) {
    if (value?.isEmpty ?? true) return;
    
    try {
      final enumValue = value!.trim();
      final style = WorkStyle.values.firstWhere(
        (e) => e.toString().split('.').last.toLowerCase() == enumValue.toLowerCase(),
        orElse: () => throw Exception('未知的书法风格: $value'),
      );
      state = state.copyWith(style: style);
    } catch (e) {
      state = state.copyWith(error: e.toString());
      debugPrint('Error setting style: $e');
    }
  }

  // 图片操作
  Future<void> addImages(List<File> files) async {
    try {
      state = state.copyWith(isLoading: true, error: null);

      await _validateImages(files);
      final updatedImages = List<File>.from(state.images)..addAll(files);
      
      state = state.copyWith(
        images: updatedImages,
        selectedImageIndex: state.selectedImageIndex < 0 ? 0 : state.selectedImageIndex,
        isLoading: false,
      );
      HapticFeedback.mediumImpact();
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: e.toString(),
      );
    }
  }

  Future<void> _validateImages(List<File> files) async {
    if (files.isEmpty) {
      throw Exception('请选择需要导入的图片');
    }

    for (final file in files) {
      final ext = path.extension(file.path).toLowerCase();
      if (!['.jpg', '.jpeg', '.png', '.webp'].contains(ext)) {
        throw Exception('不支持的文件类型: $ext\n支持的格式：jpg、jpeg、png、webp');
      }
      
      final size = await file.length();
      if (size > AppConfig.maxImageSize) {
        throw Exception(
          '文件过大：${path.basename(file.path)}\n'
          '大小：${(size / 1024 / 1024).toStringAsFixed(1)}MB\n'
          '限制：${(AppConfig.maxImageSize / 1024 / 1024).toStringAsFixed(0)}MB'
        );
      }
    }
  }

  void removeImage(int index) {
    if (!_isValidIndex(index)) return;

    final updatedImages = List<File>.from(state.images)..removeAt(index);
    final updatedRotations = Map<String, double>.from(state.imageRotations)
      ..remove(state.images[index].path);

    final newSelectedIndex = _calculateNewSelectedIndex(index, updatedImages.length);

    state = state.copyWith(
      images: updatedImages,
      selectedImageIndex: newSelectedIndex,
      imageRotations: updatedRotations,
      error: null,
    );
    HapticFeedback.lightImpact();
  }

  bool _isValidIndex(int index) => index >= 0 && index < state.images.length;

  void selectImage(int index) {
    if (index >= 0 && index < state.images.length) {
      state = state.copyWith(selectedImageIndex: index);
    }
  }

  Future<void> rotateImage(bool clockwise) async {
    if (state.selectedImageIndex < 0) return;

    try {
      state = state.copyWith(isLoading: true, error: null);
      
      final angle = clockwise ? 90 : -90;
      final selectedFile = state.images[state.selectedImageIndex];
      final rotatedFile = await _imageService.rotateImage(selectedFile, angle);
      
      final updatedImages = List<File>.from(state.images);
      updatedImages[state.selectedImageIndex] = rotatedFile;

      final updatedRotations = Map<String, double>.from(state.imageRotations);
      updatedRotations[rotatedFile.path] = 
          ((updatedRotations[selectedFile.path] ?? 0 + angle) % 360).toDouble();

      state = state.copyWith(
        images: updatedImages,
        imageRotations: updatedRotations,
        isLoading: false,
      );
    } catch (e) {
      state = state.copyWith(
        isLoading: false,
        error: '旋转图片失败: ${e.toString()}',
      );
    }
  }

  void reorderImages(int oldIndex, int newIndex) {
    if (!_isValidIndex(oldIndex) || !_isValidIndex(newIndex)) return;

    HapticFeedback.selectionClick();

    if (oldIndex < newIndex) newIndex--;

    final updatedImages = List<File>.from(state.images);
    final item = updatedImages.removeAt(oldIndex);
    updatedImages.insert(newIndex, item);

    final newSelectedIndex = _calculateNewSelectedIndex(oldIndex, newIndex);

    state = state.copyWith(
      images: updatedImages,
      selectedImageIndex: newSelectedIndex,
      imageRotations: state.imageRotations,
      error: null,
    );
  }

  int _calculateNewSelectedIndex(int oldIndex, int newIndex) {
    if (state.selectedImageIndex == oldIndex) {
      return newIndex;
    }
    if (state.selectedImageIndex > oldIndex && state.selectedImageIndex <= newIndex) {
      return state.selectedImageIndex - 1;
    }
    if (state.selectedImageIndex < oldIndex && state.selectedImageIndex >= newIndex) {
      return state.selectedImageIndex + 1;
    }
    return state.selectedImageIndex;
  }

  // 视图控制
  void setScale(double scale) {
    if (scale >= 0.5 && scale <= 5.0) {
      state = state.copyWith(scale: scale);
    }
  }

  void resetView() {
    state = state.copyWith(scale: 1.0, rotation: 0.0);
  }

  // 优化选项
  void toggleOptimizeImages() {
    state = state.copyWith(optimizeImages: !state.optimizeImages);
  }

  void toggleKeepOriginals() {
    state = state.copyWith(keepOriginals: !state.keepOriginals);
  }

  Future<List<File>> _processImages() async {
    if (!state.optimizeImages || state.images.isEmpty) {
      return state.images;
    }

    try {
      final processedImages = <File>[];
      
      for (final file in state.images) {
        if (state.keepOriginals) {
          await _imageService.backupOriginal(file);
        }

        final optimized = await _imageService.optimizeImage(
          file,
          maxWidth: AppConfig.optimizedImageWidth,
          maxHeight: AppConfig.optimizedImageHeight,
          quality: AppConfig.optimizedImageQuality,
        );
        
        processedImages.add(optimized);
      }

      return processedImages;
    } catch (e) {
      throw Exception('图片处理失败: ${e.toString()}');
    }
  }

  // 导入功能
  Future<bool> importWork() async {
    if (state.images.isEmpty ||
        state.name.isEmpty ||
        state.author?.isEmpty != false ||
        state.style == null ||
        state.tool == null ||
        state.creationDate == null) {
      state = state.copyWith(error: '请填写所有必填字段');
      return false;
    }

    state = state.copyWith(isLoading: true, error: null);
    try {
      final processedImages = await _processImages();
      
      await _workService.importWork(
        processedImages,
        WorkInfo(
          name: state.name,
          author: state.author,
          style: state.style!,
          tool: state.tool!,
          creationDate: state.creationDate!,
          remarks: state.remarks,
        ),
      );
      return true;
    } catch (e) {
      state = state.copyWith(error: e.toString());
      return false;
    } finally {
      state = state.copyWith(isLoading: false);
    }
  }

  void reset() {
    state = const WorkImportState();
  }

  void removeAllImages() {
    state = state.copyWith(
      images: const [],
      selectedImageIndex: -1,      
    );
  }
}
``n
# FILE:work_browse_state.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\viewmodels\states\work_browse_state.dart
import '../../../domain/entities/work.dart';
import '../../models/work_filter.dart';

enum ViewMode { grid, list }

class WorkBrowseState {
  final bool isLoading;
  final String? error;
  final List<Work> works;
  //final List<Work> allWorks; // 添加 allWorks 字段
  final String? searchQuery;
  final ViewMode viewMode;
  final SortOption sortOption;
  final WorkFilter filter;

  const WorkBrowseState({
    this.isLoading = false,
    this.error,
    this.works = const [],
    //this.allWorks = const [], // 初始化 allWorks
    this.searchQuery,
    this.viewMode = ViewMode.grid,
    this.sortOption = const SortOption(),
    this.filter = const WorkFilter(),
  });

  WorkBrowseState copyWith({
    bool? isLoading,
    String? error,
    List<Work>? works,
    List<Work>? allWorks, // 添加 allWorks
    String? searchQuery,
    ViewMode? viewMode,
    SortOption? sortOption,
    WorkFilter? filter,
  }) {
    return WorkBrowseState(
      isLoading: isLoading ?? this.isLoading,
      error: error ?? this.error,
      works: works ?? this.works,
      //allWorks: allWorks ?? this.allWorks, // 复制 allWorks
      searchQuery: searchQuery ?? this.searchQuery,
      viewMode: viewMode ?? this.viewMode,
      sortOption: sortOption ?? this.sortOption,
      filter: filter ?? this.filter,
    );
  }
}
``n
# FILE:work_import_state.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\viewmodels\states\work_import_state.dart
import 'dart:io';
import '../../../domain/enums/work_style.dart';
import '../../../domain/enums/work_tool.dart';

class WorkImportState {
  final List<File> images;
  final int selectedImageIndex;
  final Map<String, double> imageRotations;
  final double scale;
  final String name;
  final String? author;
  final WorkStyle? style;
  final WorkTool? tool;
  final DateTime? creationDate;
  final String? remarks;
  final bool optimizeImages;
  final bool keepOriginals;
  final bool isLoading;
  final String? error;
  final double? zoomLevel;
  final double? rotation;

  const WorkImportState({
    this.images = const [],
    this.selectedImageIndex = -1,
    this.imageRotations = const {},
    this.scale = 1.0,
    this.name = '',
    this.author,
    this.style,
    this.tool,
    this.creationDate,
    this.remarks,
    this.optimizeImages = true,
    this.keepOriginals = false,
    this.isLoading = false,
    this.error,
    this.zoomLevel = 1.0,
    this.rotation = 0.0,
  });

  bool get isDirty => images.isNotEmpty || name.isNotEmpty;

  bool get isValid => name.isNotEmpty && images.isNotEmpty;

  double getRotation(String imagePath) => imageRotations[imagePath] ?? 0.0;

  // 添加验证方法
  bool validateImage(File file) {
    try {
      final path = file.path.toLowerCase();
      return path.endsWith('.jpg') || 
             path.endsWith('.jpeg') || 
             path.endsWith('.png') || 
             path.endsWith('.webp');
    } catch (e) {
      return false;
    }
  }

  WorkImportState copyWith({
    List<File>? images,
    int? selectedImageIndex,
    Map<String, double>? imageRotations,
    double? scale,
    String? name,
    String? author,
    WorkStyle? style,
    WorkTool? tool,
    DateTime? creationDate,
    String? remarks,
    bool? optimizeImages,
    bool? keepOriginals,
    bool? isLoading,
    String? error,
    double? zoomLevel,
    double? rotation,
  }) {
    return WorkImportState(
      images: images ?? this.images,
      selectedImageIndex: selectedImageIndex ?? this.selectedImageIndex,
      imageRotations: imageRotations ?? this.imageRotations,
      scale: scale ?? this.scale,
      name: name ?? this.name,
      author: author ?? this.author,
      style: style ?? this.style,
      tool: tool ?? this.tool,
      creationDate: creationDate ?? this.creationDate,
      remarks: remarks ?? this.remarks,
      optimizeImages: optimizeImages ?? this.optimizeImages,
      keepOriginals: keepOriginals ?? this.keepOriginals,
      isLoading: isLoading ?? this.isLoading,
      error: error,
      zoomLevel: zoomLevel ?? this.zoomLevel,
      rotation: rotation ?? this.rotation,
    );
  }

  // 添加初始状态工厂方法
  factory WorkImportState.initial() {
    return const WorkImportState();
  }
}
``n
# FILE:base_page.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\base_page.dart
import 'package:flutter/material.dart';
import '../theme/app_sizes.dart';

class BasePage extends StatelessWidget {
  final String title;
  final List<Widget>? actions;
  final Widget? toolbar;
  final Widget body;
  final Widget? sidebar;
  final Widget? footer;

  const BasePage({
    super.key,
    required this.title,
    this.actions,
    this.toolbar,
    required this.body,
    this.sidebar,
    this.footer,
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(title),
        actions: actions,
        toolbarHeight: AppSizes.appBarHeight,
      ),
      body: Row(
        children: [
          if (sidebar != null)
            SizedBox(
              width: AppSizes.sidebarWidth,
              child: sidebar!,
            ),
          Expanded(
            child: Column(
              children: [
                if (toolbar != null)
                  SizedBox(
                    height: AppSizes.appBarHeight,
                    child: toolbar!,
                  ),
                Expanded(child: body),
                if (footer != null)
                  SizedBox(
                    height: AppSizes.tableHeaderHeight,
                    child: footer!,
                  ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
``n
# FILE:date_range_picker.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\date_range_picker.dart
import 'package:flutter/material.dart';
import '../models/date_range_filter.dart';
import '../theme/app_sizes.dart';

class DateRangePicker extends StatefulWidget {
  final DateTimeRange? initialDateRange;
  final DateTime firstDate;
  final DateTime lastDate;
  final ValueChanged<DateTimeRange> onDateRangeChanged;

  const DateRangePicker({
    super.key,
    this.initialDateRange,
    required this.firstDate,
    required this.lastDate,
    required this.onDateRangeChanged,
  });

  @override
  State<DateRangePicker> createState() => _DateRangePickerState();
}

class _DateRangePickerState extends State<DateRangePicker> {
  late DateTime _startDate;
  late DateTime _endDate;
  DateTime? _selectedDate;

  @override
  void initState() {
    super.initState();
    _startDate = widget.initialDateRange?.start ?? widget.lastDate;
    _endDate = widget.initialDateRange?.end ?? widget.lastDate;
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      children: [
        Expanded(
          child: Column(
            children: [
              _buildDateHeader(),
              Expanded(
                child: CalendarDatePicker(
                  initialDate: _selectedDate ?? _startDate,
                  firstDate: widget.firstDate,
                  lastDate: widget.lastDate,
                  onDateChanged: _handleDateSelected,
                ),
              ),
            ],
          ),
        ),
        const VerticalDivider(width: 1),
        SizedBox(
          width: 200,
          child: _buildQuickSelections(),
        ),
      ],
    );
  }

  Widget _buildDateHeader() {
    final theme = Theme.of(context);
    
    return Padding(
      padding: const EdgeInsets.all(AppSizes.m),
      child: Row(
        children: [
          _buildDateButton(
            label: '开始日期',
            date: _startDate,
            isSelected: _selectedDate == null || _isSelectingStart,
            onPressed: () => _handleModeChange(true),
          ),
          const SizedBox(width: AppSizes.m),
          Text('至', style: theme.textTheme.bodyMedium),
          const SizedBox(width: AppSizes.m),
          _buildDateButton(
            label: '结束日期',
            date: _endDate,
            isSelected: _selectedDate != null && !_isSelectingStart,
            onPressed: () => _handleModeChange(false),
          ),
        ],
      ),
    );
  }

  Widget _buildDateButton({
    required String label,
    required DateTime date,
    required bool isSelected,
    required VoidCallback onPressed,
  }) {
    final theme = Theme.of(context);
    
    return InkWell(
      onTap: onPressed,
      borderRadius: BorderRadius.circular(4),
      child: Container(
        padding: const EdgeInsets.all(AppSizes.s),
        decoration: BoxDecoration(
          border: Border.all(
            color: isSelected ? theme.colorScheme.primary : theme.dividerColor,
          ),
          borderRadius: BorderRadius.circular(4),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              label,
              style: theme.textTheme.bodySmall,
            ),
            const SizedBox(height: AppSizes.xs),
            Text(
              _formatDate(date),
              style: theme.textTheme.bodyMedium,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildQuickSelections() {
    return ListView(
      padding: const EdgeInsets.all(AppSizes.m),
      children: [
        Text(
          '快捷选择',
          style: Theme.of(context).textTheme.titleSmall,
        ),
        const SizedBox(height: AppSizes.m),
        _buildDateTypeSection(),
        const Divider(),
        ...DateRangePreset.values.map((preset) => 
          ListTile(
            dense: true,
            title: Text(_getPresetLabel(preset)),
            onTap: () => _handlePresetSelected(preset),
          ),
        ),
      ],
    );
  }

  Widget _buildDateTypeSection() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        ListTile(
          dense: true,
          title: const Text('某个日期之前'),
          onTap: () => _showSingleDatePicker(
            title: '选择日期',
            initialDate: _endDate,
            onDateSelected: (date) {
              setState(() {
                _endDate = date;
                _startDate = widget.firstDate;
                widget.onDateRangeChanged(DateTimeRange(
                  start: _startDate,
                  end: _endDate,
                ));
              });
            },
          ),
        ),
        ListTile(
          dense: true,
          title: const Text('某个日期之后'),
          onTap: () => _showSingleDatePicker(
            title: '选择日期',
            initialDate: _startDate,
            onDateSelected: (date) {
              setState(() {
                _startDate = date;
                _endDate = widget.lastDate;
                widget.onDateRangeChanged(DateTimeRange(
                  start: _startDate,
                  end: _endDate,
                ));
              });
            },
          ),
        ),
      ],
    );
  }

  Future<void> _showSingleDatePicker({
    required String title,
    required DateTime initialDate,
    required ValueChanged<DateTime> onDateSelected,
  }) async {
    final date = await showDialog<DateTime>(
      context: context,
      builder: (context) => Dialog(
        child: ConstrainedBox(
          constraints: const BoxConstraints(
            maxWidth: 400,
            maxHeight: 480,
          ),
          child: Padding(
            padding: const EdgeInsets.all(AppSizes.m),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Row(
                  children: [
                    Text(
                      title,
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                    const Spacer(),
                    IconButton(
                      icon: const Icon(Icons.close),
                      onPressed: () => Navigator.of(context).pop(),
                    ),
                  ],
                ),
                Expanded(
                  child: CalendarDatePicker(
                    initialDate: initialDate,
                    firstDate: widget.firstDate,
                    lastDate: widget.lastDate,
                    onDateChanged: (date) => Navigator.of(context).pop(date),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );

    if (date != null) {
      onDateSelected(date);
    }
  }

  bool get _isSelectingStart => _selectedDate == null;

  void _handleDateSelected(DateTime date) {
    if (_isSelectingStart) {
      setState(() {
        _startDate = date;
        _selectedDate = date;
      });
    } else {
      setState(() {
        _endDate = date;
        _selectedDate = null;
        widget.onDateRangeChanged(DateTimeRange(
          start: _startDate,
          end: _endDate,
        ));
      });
    }
  }

  void _handleModeChange(bool selectingStart) {
    setState(() {
      _selectedDate = selectingStart ? null : _startDate;
    });
  }

  void _handlePresetSelected(DateRangePreset preset) {
    final range = preset.getRange();
    setState(() {
      _startDate = range.start;
      _endDate = range.end;
      _selectedDate = null;
      widget.onDateRangeChanged(range);
    });
  }

  String _formatDate(DateTime date) {
    return '${date.year}-${date.month.toString().padLeft(2, '0')}-${date.day.toString().padLeft(2, '0')}';
  }

  String _getPresetLabel(DateRangePreset preset) {
    // Convert the preset enum value to a readable label.
    return preset.toString().split('.').last;
  }
}
``n
# FILE:dialog_container.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\dialog_container.dart
import 'package:flutter/material.dart';
import '../../theme/app_sizes.dart';

class DialogContainer extends StatelessWidget {
  final String title;
  final Widget child;
  final List<Widget>? actions;
  final EdgeInsets? padding;
  final double? width;
  final double? height;
  final VoidCallback? onClose;

  const DialogContainer({
    super.key,
    required this.title,
    required this.child,
    this.actions,
    this.padding,
    this.width,
    this.height,
    this.onClose,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Dialog(
      child: Container(
        width: width,
        height: height,
        padding: padding ?? const EdgeInsets.all(AppSizes.spacingLarge),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Text(
                  title,
                  style: theme.textTheme.titleLarge,
                ),
                const Spacer(),
                if (onClose != null)
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: onClose,
                  ),
              ],
            ),
            if (onClose != null) const Divider(height: 24),
            Expanded(child: child),
            if (actions != null) ...[
              const SizedBox(height: AppSizes.spacingMedium),
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: actions!,
              ),
            ],
          ],
        ),
      ),
    );
  }
}

``n
# FILE:loading_overlay.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\loading_overlay.dart
import 'package:flutter/material.dart';

class LoadingOverlay extends StatelessWidget {
  const LoadingOverlay({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.black26,
      child: const Center(
        child: CircularProgressIndicator(),
      ),
    );
  }
}
``n
# FILE:message_bar.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\message_bar.dart
import 'package:flutter/material.dart';
import '../../theme/app_sizes.dart';

class MessageBar extends StatelessWidget {
  final String message;
  final Color? backgroundColor;
  final Color? textColor;
  final IconData? icon;
  final VoidCallback? onDismiss;

  const MessageBar({
    super.key,
    required this.message,
    this.backgroundColor,
    this.textColor,
    this.icon,
    this.onDismiss,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Material(
      color: backgroundColor ?? theme.colorScheme.secondary,
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.spacingMedium),
        child: Row(
          children: [
            if (icon != null) ...[
              Icon(
                icon,
                color: textColor ?? Colors.white,
                size: AppSizes.iconMedium,
              ),
              const SizedBox(width: AppSizes.spacingSmall),
            ],
            Expanded(
              child: Text(
                message,
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: textColor ?? Colors.white,
                ),
              ),
            ),
            if (onDismiss != null)
              IconButton(
                icon: Icon(
                  Icons.close,
                  color: textColor ?? Colors.white,
                  size: AppSizes.iconSmall,
                ),
                onPressed: onDismiss,
              ),
          ],
        ),
      ),
    );
  }
}

``n
# FILE:page_bar.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\page_bar.dart
import 'package:flutter/material.dart';
import '../../theme/app_sizes.dart';

class PageBar extends StatelessWidget implements PreferredSizeWidget {
  final Widget? title;
  final List<Widget>? actions;
  final double? toolbarHeight;
  final Color? backgroundColor;
  final Color? foregroundColor;

  const PageBar({
    super.key,
    this.title,
    this.actions,
    this.toolbarHeight,
    this.backgroundColor,
    this.foregroundColor,
  });

  @override
  Size get preferredSize => Size.fromHeight(
    toolbarHeight ?? AppSizes.pageToolbarHeight
  );

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Container(
      height: preferredSize.height,
      padding: const EdgeInsets.symmetric(horizontal: AppSizes.spacingMedium),
      decoration: BoxDecoration(
        color: backgroundColor ?? theme.primaryColor,
        border: Border(
          bottom: BorderSide(
            color: theme.dividerColor,
            width: 1,
          ),
        ),
      ),
      child: Row(
        children: [
          if (title != null)
            DefaultTextStyle(
              style: theme.textTheme.titleLarge!.copyWith(
                color: foregroundColor ?? Colors.white,
              ),
              child: title!,
            ),
          const Spacer(),
          if (actions != null) 
            Row(children: actions!),
        ],
      ),
    );
  }
}

``n
# FILE:page_layout.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\page_layout.dart
import 'package:flutter/material.dart';
import '../../theme/app_sizes.dart';
import 'page_bar.dart';

class PageLayout extends StatefulWidget {
  final Widget? navigationInfo;
  final List<Widget>? actions;
  final Widget? toolbar;
  final Widget body;
  final Widget? sidebar;
  final Widget? footer;

  const PageLayout({
    super.key,
    this.navigationInfo,
    this.actions,
    this.toolbar,
    required this.body,
    this.sidebar,
    this.footer,
  });

  @override
  State<PageLayout> createState() => _PageLayoutState();
}

class _PageLayoutState extends State<PageLayout> {
  static const double _sidebarWidth = 320.0;  // 固定宽度

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: PageBar(
        title: widget.navigationInfo,
        actions: widget.actions,
        toolbarHeight: 50,  // 更新常量名
      ),
      body: Row(
        children: [
          if (widget.sidebar != null)
            Container(
              width: _sidebarWidth,
              decoration: BoxDecoration(
                border: Border(
                  right: BorderSide(color: Theme.of(context).dividerColor),
                ),
              ),
              child: widget.sidebar,
            ),
          Expanded(
            child: Column(
              children: [
                if (widget.toolbar != null)
                  Container(
                    height: AppSizes.pageToolbarHeight,  // 更新常量名
                    decoration: BoxDecoration(
                      border: Border(
                        bottom: BorderSide(color: Theme.of(context).dividerColor),
                      ),
                    ),
                    child: widget.toolbar!,
                  ),
                Expanded(child: widget.body),
                if (widget.footer != null) widget.footer!,
              ],
            ),
          ),
        ],
      ),
    );
  }
}
``n
# FILE:page_toolbar.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\page_toolbar.dart
import 'package:flutter/material.dart';
import '../../theme/app_sizes.dart';

class PageToolbar extends StatelessWidget {
  final List<Widget>? leading;
  final List<Widget>? trailing;
  final double? height;

  const PageToolbar({
    super.key,
    this.leading,
    this.trailing,
    this.height,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Container(
      height: height ?? AppSizes.pageToolbarHeight,
      padding: const EdgeInsets.symmetric(
        horizontal: AppSizes.spacingMedium,
        vertical: AppSizes.spacingSmall,
      ),
      decoration: BoxDecoration(
        color: theme.scaffoldBackgroundColor,
        border: Border(
          bottom: BorderSide(color: theme.dividerColor),
        ),
      ),
      child: Row(
        children: [
          if (leading != null) ...[
            ...leading!,
            const Spacer(),
          ],
          if (trailing != null) ...trailing!,
        ],
      ),
    );
  }
}

``n
# FILE:responsive_builder.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\responsive_builder.dart
import 'package:flutter/material.dart';
import '../theme/app_sizes.dart';

class ResponsiveBuilder extends StatelessWidget {
  final Widget Function(BuildContext, ResponsiveBreakpoint) builder;

  const ResponsiveBuilder({
    super.key,
    required this.builder,
  });

  @override
  Widget build(BuildContext context) {
    return LayoutBuilder(
      builder: (context, constraints) {
        final breakpoint = _getBreakpoint(constraints.maxWidth);
        return builder(context, breakpoint);
      },
    );
  }

  ResponsiveBreakpoint _getBreakpoint(double width) {
    if (width < AppSizes.breakpointXs) return ResponsiveBreakpoint.xs;
    if (width < AppSizes.breakpointMd) return ResponsiveBreakpoint.sm;
    if (width < AppSizes.breakpointLg) return ResponsiveBreakpoint.md;
    return ResponsiveBreakpoint.lg;
  }
}

enum ResponsiveBreakpoint { xs, sm, md, lg }
``n
# FILE:section_header.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\section_header.dart
import 'package:flutter/material.dart';
import '../../theme/app_sizes.dart';

class SectionHeader extends StatelessWidget {
  final String title;
  final List<Widget>? actions;
  final EdgeInsets? padding;

  const SectionHeader({
    super.key,
    required this.title,
    this.actions,
    this.padding,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Padding(
      padding: padding ?? const EdgeInsets.all(AppSizes.spacingMedium),
      child: Row(
        children: [
          Text(
            title,
            style: theme.textTheme.titleMedium?.copyWith(
              fontWeight: FontWeight.bold,
            ),
          ),
          if (actions != null) ...[
            const Spacer(),
            ...actions!,
          ],
        ],
      ),
    );
  }
}

``n
# FILE:dialog_button_group.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\buttons\dialog_button_group.dart
import 'package:flutter/material.dart';
import '../../theme/app_sizes.dart';
import 'loading_button.dart';

class DialogButtonGroup extends StatelessWidget {
  final bool isLoading;
  final VoidCallback onCancel;
  final VoidCallback onSubmit;
  final String cancelText;
  final String submitText;

  const DialogButtonGroup({
    super.key,
    this.isLoading = false,
    required this.onCancel,
    required this.onSubmit,
    this.cancelText = '取消',
    this.submitText = '确认',
  });

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        OutlinedButton(
          onPressed: isLoading ? null : onCancel,
          child: Text(cancelText),
        ),
        const SizedBox(width: AppSizes.m),
        LoadingButton(
          text: submitText,
          onPressed: isLoading ? null : onSubmit,
          isLoading: isLoading,
        ),
      ],
    );
  }
}
``n
# FILE:loading_button.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\buttons\loading_button.dart
import 'package:flutter/material.dart';

class LoadingButton extends StatelessWidget {
  final String text;
  final VoidCallback? onPressed;
  final bool isLoading;
  final bool isPrimary;

  const LoadingButton({
    super.key,
    required this.text,
    required this.onPressed,
    this.isLoading = false,
    this.isPrimary = true,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return FilledButton(
      onPressed: isLoading ? null : onPressed,
      style: FilledButton.styleFrom(
        minimumSize: const Size(88, 36),
        padding: const EdgeInsets.symmetric(horizontal: 16),
      ),
      child: isLoading
          ? SizedBox(
              width: 16,
              height: 16,
              child: CircularProgressIndicator(
                strokeWidth: 2,
                valueColor: AlwaysStoppedAnimation<Color>(
                  theme.colorScheme.onPrimary,
                ),
              ),
            )
          : Text(text),
    );
  }
}
``n
# FILE:character_detail_view.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\character\character_detail_view.dart
import 'package:flutter/material.dart';

class CharacterDetailView extends StatelessWidget {
  final String charId;
  final bool showCloseButton;
  final VoidCallback? onClose;

  const CharacterDetailView({
    super.key,
    required this.charId,
    this.showCloseButton = false,
    this.onClose,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Container(
      color: theme.scaffoldBackgroundColor,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (!showCloseButton) ...[
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    '字符详情',
                    style: theme.textTheme.titleLarge,
                  ),
                  ElevatedButton.icon(
                    onPressed: () {},
                    icon: const Icon(Icons.edit),
                    label: const Text('编辑'),
                  ),
                ],
              ),
            ),
            const Divider(height: 1),
          ],
          Expanded(
            child: ListView(
              padding: const EdgeInsets.all(16.0),
              children: [
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('基本信息', style: theme.textTheme.titleMedium),
                        const SizedBox(height: 16),
                        _buildInfoRow('Unicode', 'U+4E00', theme),
                        _buildInfoRow('拼音', 'yī', theme),
                        _buildInfoRow('笔画', '1', theme),
                      ],
                    ),
                  ),
                ),
                const SizedBox(height: 16),
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text('出处信息', style: theme.textTheme.titleMedium),
                        const SizedBox(height: 16),
                        _buildInfoRow('作品', '兰亭集序', theme),
                        _buildInfoRow('作者', '王羲之', theme),
                        _buildInfoRow('朝代', '晋', theme),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoRow(String label, String value, ThemeData theme) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8.0),
      child: Row(
        children: [
          SizedBox(
            width: 80,
            child: Text(
              label,
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.textTheme.bodySmall?.color,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: theme.textTheme.bodyMedium,
            ),
          ),
        ],
      ),
    );
  }
}

``n
# FILE:character_extraction_panel.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\character\character_extraction_panel.dart
import 'package:flutter/material.dart';

class CharacterExtractionPanel extends StatefulWidget {
  final String workId;
  final int imageIndex;
  
  const CharacterExtractionPanel({
    super.key,
    required this.workId,
    required this.imageIndex,
  });

  @override
  State<CharacterExtractionPanel> createState() => _CharacterExtractionPanelState();
}

class _CharacterExtractionPanelState extends State<CharacterExtractionPanel> {
  bool _autoRecognitionEnabled = true;
  double _noiseReduction = 0.5;
  double _binarization = 0.5;
  double _grayScale = 0.5;
  String _selectedTool = 'select'; // select, rect, lasso
  final List<Rect> _selectedRegions = [];
  final PageController _pageController = PageController();
  int _currentPage = 0;
  List<String> _pages = []; // 存储所有页面的图片路径

  @override
  void initState() {
    super.initState();
    // TODO: 加载实际的页面数据
    _pages = List.generate(5, (index) => 'Page ${index + 1}');
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }
  
  @override
  Widget build(BuildContext context) {
    return Material(
      child: Column(
        children: [
          _buildTopToolbar(),
          Expanded(
            child: Row(
              children: [
                _buildLeftToolbar(),
                Expanded(
                  child: _buildPreviewArea(),
                ),
                _buildRightPanel(),
              ],
            ),
          ),
          _buildStatusBar(),
        ],
      ),
    );
  }

  Widget _buildTopToolbar() {
    return Container(
      height: 48,
      padding: const EdgeInsets.symmetric(horizontal: 16),
      decoration: BoxDecoration(
        border: Border(bottom: BorderSide(color: Colors.grey[300]!)),
      ),
      child: Row(
        children: [
          IconButton(
            icon: const Icon(Icons.close),
            onPressed: () => Navigator.pop(context),
            tooltip: '退出',
          ),
          const VerticalDivider(),
          // 预处理工具组
          Row(
            children: [
              Switch(
                value: _autoRecognitionEnabled,
                onChanged: (value) => setState(() => _autoRecognitionEnabled = value),
              ),
              const Text('自动识别笔画'),
              const SizedBox(width: 16),
              _buildSlider('降噪', _noiseReduction),
              _buildSlider('二值化', _binarization),
              _buildSlider('灰度范围', _grayScale),
              TextButton(
                onPressed: _resetPreprocess,
                child: const Text('重置'),
              ),
            ],
          ),
          const Spacer(),
          // 操作工具组
          IconButton(
            icon: const Icon(Icons.clear),
            onPressed: _clearSelection,
            tooltip: '清空选择',
          ),
          IconButton(
            icon: const Icon(Icons.undo),
            onPressed: _undo,
            tooltip: '撤销',
          ),
          IconButton(
            icon: const Icon(Icons.redo),
            onPressed: _redo,
            tooltip: '重做',
          ),
        ],
      ),
    );
  }

  Widget _buildLeftToolbar() {
    return Container(
      width: 48,
      decoration: BoxDecoration(
        border: Border(right: BorderSide(color: Colors.grey[300]!)),
      ),
      child: Column(
        children: [
          // 选择工具
          IconButton(
            icon: const Icon(Icons.touch_app),
            onPressed: () => setState(() => _selectedTool = 'select'),
            isSelected: _selectedTool == 'select',
            tooltip: '点击选择',
          ),
          IconButton(
            icon: const Icon(Icons.crop_square),
            onPressed: () => setState(() => _selectedTool = 'rect'),
            isSelected: _selectedTool == 'rect',
            tooltip: '矩形框选',
          ),
          IconButton(
            icon: const Icon(Icons.gesture),
            onPressed: () => setState(() => _selectedTool = 'lasso'),
            isSelected: _selectedTool == 'lasso',
            tooltip: '套索选择',
          ),
          const Divider(),
          // 视图工具
          IconButton(
            icon: const Icon(Icons.zoom_in),
            onPressed: _zoomIn,
            tooltip: '放大',
          ),
          IconButton(
            icon: const Icon(Icons.zoom_out),
            onPressed: _zoomOut,
            tooltip: '缩小',
          ),
        ],
      ),
    );
  }

  Widget _buildPreviewArea() {
    return Column(
      children: [
        // 工具栏
        // ...existing code...

        // 主预览区（支持左右滑动）
        Expanded(
          child: Row(
            children: [
              // 左翻页按钮
              IconButton(
                icon: const Icon(Icons.chevron_left),
                onPressed: _currentPage > 0
                    ? () {
                        _pageController.previousPage(
                          duration: const Duration(milliseconds: 300),
                          curve: Curves.easeInOut,
                        );
                      }
                    : null,
              ),
              // 中央预览区
              Expanded(
                child: Stack(
                  children: [
                    PageView.builder(
                      controller: _pageController,
                      onPageChanged: (index) {
                        setState(() => _currentPage = index);
                      },
                      itemCount: _pages.length,
                      itemBuilder: (context, index) {
                        return Container(
                          color: Colors.grey[100],
                          child: Center(
                            child: Text('${_pages[index]} 预览区域'),
                          ),
                        );
                      },
                    ),
                    // 页码指示器
                    Positioned(
                      bottom: 16,
                      left: 0,
                      right: 0,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Container(
                            padding: const EdgeInsets.symmetric(
                              horizontal: 12,
                              vertical: 4,
                            ),
                            decoration: BoxDecoration(
                              color: Colors.black54,
                              borderRadius: BorderRadius.circular(12),
                            ),
                            child: Text(
                              '${_currentPage + 1} / ${_pages.length}',
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 12,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              // 右翻页按钮
              IconButton(
                icon: const Icon(Icons.chevron_right),
                onPressed: _currentPage < _pages.length - 1
                    ? () {
                        _pageController.nextPage(
                          duration: const Duration(milliseconds: 300),
                          curve: Curves.easeInOut,
                        );
                      }
                    : null,
              ),
            ],
          ),
        ),
        // 底部缩略图导航栏
        SizedBox(
          height: 80,
          child: ListView.builder(
            scrollDirection: Axis.horizontal,
            itemCount: _pages.length,
            itemBuilder: (context, index) {
              final isSelected = index == _currentPage;
              return GestureDetector(
                onTap: () {
                  _pageController.animateToPage(
                    index,
                    duration: const Duration(milliseconds: 300),
                    curve: Curves.easeInOut,
                  );
                },
                child: Container(
                  width: 60,
                  margin: const EdgeInsets.all(4),
                  decoration: BoxDecoration(
                    border: Border.all(
                      color: isSelected
                          ? Theme.of(context).primaryColor
                          : Colors.transparent,
                      width: 2,
                    ),
                  ),
                  child: Center(
                    child: Text('${index + 1}'),
                  ),
                ),
              );
            },
          ),
        ),
      ],
    );
  }

  Widget _buildRightPanel() {
    return Container(
      width: 300,
      decoration: BoxDecoration(
        border: Border(left: BorderSide(color: Colors.grey[300]!)),
      ),
      child: Column(
        children: [
          // 结果预览
          Expanded(
            child: Container(
              padding: const EdgeInsets.all(16),
              child: Column(
                children: [
                  const Text('集字预览'),
                  Expanded(
                    child: Container(
                      margin: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.white,
                        border: Border.all(color: Colors.grey[300]!),
                      ),
                      child: const Center(
                        child: Text('预览结果'),
                      ),
                    ),
                  ),
                ],
              ),
            ),
          ),
          const Divider(height: 1),
          // 登记信息
          Container(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                const TextField(
                  decoration: InputDecoration(
                    labelText: '简体字 *',
                    border: OutlineInputBorder(),
                  ),
                  maxLength: 1,
                ),
                const SizedBox(height: 16),
                DropdownButtonFormField<String>(
                  decoration: const InputDecoration(
                    labelText: '风格',
                    border: OutlineInputBorder(),
                  ),
                  items: const [
                    DropdownMenuItem(value: 'kai', child: Text('楷书')),
                    DropdownMenuItem(value: 'xing', child: Text('行书')),
                  ],
                  onChanged: (value) {},
                ),
                const SizedBox(height: 16),
                DropdownButtonFormField<String>(
                  decoration: const InputDecoration(
                    labelText: '工具',
                    border: OutlineInputBorder(),
                  ),
                  items: const [
                    DropdownMenuItem(value: 'brush', child: Text('毛笔')),
                    DropdownMenuItem(value: 'pen', child: Text('硬笔')),
                  ],
                  onChanged: (value) {},
                ),
                const SizedBox(height: 24),
                ElevatedButton(
                  onPressed: _saveCharacter,
                  child: const Text('保存集字'),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildStatusBar() {
    return Container(
      height: 24,
      padding: const EdgeInsets.symmetric(horizontal: 16),
      decoration: BoxDecoration(
        border: Border(top: BorderSide(color: Colors.grey[300]!)),
      ),
      child: Row(
        children: [
          Text('当前工具: $_selectedTool'),
          const Spacer(),
          Text('已选择区域: ${_selectedRegions.length}'),
        ],
      ),
    );
  }

  Widget _buildSlider(String label, double value) {
    return Row(
      mainAxisSize: MainAxisSize.min,
      children: [
        Text(label),
        SizedBox(
          width: 100,
          child: Slider(
            value: value,
            onChanged: (v) => setState(() {
              switch (label) {
                case '降噪':
                  _noiseReduction = v;
                  break;
                case '二值化':
                  _binarization = v;
                  break;
                case '灰度范围':
                  _grayScale = v;
                  break;
              }
            }),
          ),
        ),
      ],
    );
  }

  void _resetPreprocess() {
    setState(() {
      _noiseReduction = 0.5;
      _binarization = 0.5;
      _grayScale = 0.5;
    });
  }

  void _clearSelection() {
    setState(() => _selectedRegions.clear());
  }

  void _undo() {
    // TODO: 实现撤销功能
  }

  void _redo() {
    // TODO: 实现重做功能
  }

  void _zoomIn() {
    // TODO: 实现放大功能
  }

  void _zoomOut() {
    // TODO: 实现缩小功能
  }

  void _handleTap(TapDownDetails details) {
    // TODO: 实现点击选择功能
  }

  void _handlePanStart(DragStartDetails details) {
    // TODO: 实现拖动开始
  }

  void _handlePanUpdate(DragUpdateDetails details) {
    // TODO: 实现拖动更新
  }

  void _handlePanEnd(DragEndDetails details) {
    // TODO: 实现拖动结束
  }

  void _saveCharacter() {
    // TODO: 实现保存集字功能
  }
}

class CharacterExtractionPainter extends CustomPainter {
  final List<Rect> regions;
  final String currentTool;

  CharacterExtractionPainter({
    required this.regions,
    required this.currentTool,
  });

  @override
  void paint(Canvas canvas, Size size) {
    // TODO: 实现绘制功能
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;
}

``n
# FILE:data_list.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\common\data_list.dart
import 'package:flutter/material.dart';

class DataList extends StatelessWidget {
  final bool isGridView;
  final int itemCount;
  final IndexedWidgetBuilder itemBuilder;
  final double gridSpacing;
  final int gridCrossAxisCount;

  const DataList({
    super.key,
    this.isGridView = true,
    required this.itemCount,
    required this.itemBuilder,
    this.gridSpacing = 16.0,
    this.gridCrossAxisCount = 4,
  });

  @override
  Widget build(BuildContext context) {
    if (isGridView) {
      return GridView.builder(
        padding: const EdgeInsets.all(16),
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: gridCrossAxisCount,
          mainAxisSpacing: gridSpacing,
          crossAxisSpacing: gridSpacing,
          childAspectRatio: 1,
        ),
        itemCount: itemCount,
        itemBuilder: itemBuilder,
      );
    }
    
    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: itemCount,
      itemBuilder: itemBuilder,
    );
  }
}

``n
# FILE:error_text.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\displays\error_text.dart
import 'package:flutter/material.dart';

class ErrorText extends StatelessWidget {
  final String text;
  final int? maxLines;
  final TextStyle? style;

  const ErrorText({
    super.key,
    required this.text,
    this.maxLines = 2,
    this.style,
  });

  @override
  Widget build(BuildContext context) {
    final defaultStyle = Theme.of(context).textTheme.bodyMedium?.copyWith(
      color: Theme.of(context).colorScheme.error,
    );

    return Tooltip(
      message: text,
      waitDuration: const Duration(milliseconds: 500),
      child: Text(
        text,
        style: style ?? defaultStyle,
        maxLines: maxLines,
        overflow: TextOverflow.ellipsis,
      ),
    );
  }
}
``n
# FILE:empty_placeholder.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\empty\empty_placeholder.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';

class EmptyPlaceholder extends StatelessWidget {
  final IconData icon;
  final String message;
  final String? subMessage;
  final List<Widget>? actions;

  const EmptyPlaceholder({
    super.key,
    required this.icon,
    required this.message,
    this.subMessage,
    this.actions,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Center(
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            size: 64,
            color: theme.colorScheme.outline,
          ),
          const SizedBox(height: AppSizes.spacingMedium),
          Text(
            message,
            style: theme.textTheme.titleLarge,
            textAlign: TextAlign.center,
          ),
          if (subMessage != null) ...[
            const SizedBox(height: AppSizes.spacingSmall),
            Text(
              subMessage!,
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.outline,
              ),
              textAlign: TextAlign.center,
            ),
          ],
          if (actions != null) ...[
            const SizedBox(height: AppSizes.spacingLarge),
            Row(
              mainAxisSize: MainAxisSize.min,
              children: actions!,
            ),
          ],
        ],
      ),
    );
  }
}

``n
# FILE:filter_panel.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\filter\filter_panel.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';
import '../section_header.dart';

class FilterPanel extends StatelessWidget {
  final List<FilterSection> sections;
  final VoidCallback? onReset;

  const FilterPanel({
    super.key,
    required this.sections,
    this.onReset,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Material(
      color: theme.cardColor,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SectionHeader(
            title: '筛选',
            actions: [
              if (onReset != null)
                TextButton.icon(
                  onPressed: onReset,
                  icon: const Icon(Icons.refresh, size: AppSizes.iconSmall),
                  label: const Text('重置'),
                ),
            ],
          ),
          const Divider(height: 1),
          Expanded(
            child: ListView.separated(
              padding: EdgeInsets.zero,
              itemCount: sections.length,
              separatorBuilder: (_, __) => const Divider(height: 1),
              itemBuilder: (context, index) => sections[index],
            ),
          ),
        ],
      ),
    );
  }
}

class FilterSection extends StatelessWidget {
  final String title;
  final Widget child;

  const FilterSection({
    super.key,
    required this.title,
    required this.child,
  });

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(AppSizes.spacingMedium),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            title,
            style: Theme.of(context).textTheme.titleSmall,
          ),
          const SizedBox(height: AppSizes.spacingSmall),
          child,
        ],
      ),
    );
  }
}

``n
# FILE:form_section.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\form\form_section.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';

class FormSection extends StatelessWidget {
  final String? title;
  final List<Widget> children;
  final EdgeInsetsGeometry? padding;
  final bool showDivider;

  const FormSection({
    super.key,
    this.title,
    required this.children,
    this.padding,
    this.showDivider = true,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        if (title != null) ...[
          Padding(
            padding: const EdgeInsets.only(
              left: AppSizes.spacingMedium,
              right: AppSizes.spacingMedium,
              top: AppSizes.spacingMedium,
            ),
            child: Text(
              title!,
              style: theme.textTheme.titleSmall?.copyWith(
                color: theme.colorScheme.primary,
              ),
            ),
          ),
          const SizedBox(height: AppSizes.spacingSmall),
        ],
        Padding(
          padding: padding ?? const EdgeInsets.all(AppSizes.spacingMedium),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: children,
          ),
        ),
        if (showDivider) const Divider(height: 1),
      ],
    );
  }
}

``n
# FILE:date_picker_field.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\forms\date_picker_field.dart
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';

class DatePickerField extends StatelessWidget {
  final DateTime? value;
  final ValueChanged<DateTime?>? onChanged;
  final String? hint;
  final DateTime? firstDate;
  final DateTime? lastDate;

  const DatePickerField({
    super.key,
    this.value,
    this.onChanged,
    this.hint,
    this.firstDate,
    this.lastDate,
  });

  @override
  Widget build(BuildContext context) {
    final dateFormatter = DateFormat('yyyy-MM-dd');

    return TextFormField(
      controller: TextEditingController(
        text: value != null ? dateFormatter.format(value!) : '',
      ),
      readOnly: true,
      onTap: () => _showDatePicker(context),
      decoration: InputDecoration(
        border: const OutlineInputBorder(),
        hintText: hint,
        suffixIcon: const Icon(Icons.calendar_today),
        contentPadding: const EdgeInsets.symmetric(
          horizontal: 12,
          vertical: 0,
        ),
      ),
    );
  }

  Future<void> _showDatePicker(BuildContext context) async {
    final picked = await showDatePicker(
      context: context,
      initialDate: value ?? DateTime.now(),
      firstDate: firstDate ?? DateTime(1900),
      lastDate: lastDate ?? DateTime.now(),
    );

    if (picked != null) {
      onChanged?.call(picked);
    }
  }
}
``n
# FILE:dropdown_field.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\forms\dropdown_field.dart
import 'package:flutter/material.dart';

class DropdownField<T> extends StatelessWidget {
  final T? value;
  final List<T> items;
  final ValueChanged<T?>? onChanged;
  final Widget Function(T)? itemBuilder;
  final String? hint;
  final bool isExpanded;
  final bool isDense;

  const DropdownField({
    super.key,
    this.value,
    required this.items,
    this.onChanged,
    this.itemBuilder,
    this.hint,
    this.isExpanded = true,
    this.isDense = true,
  });

  @override
  Widget build(BuildContext context) {
    return DropdownButtonFormField<T>(
      value: value,
      items: items.map((item) {
        return DropdownMenuItem<T>(
          value: item,
          child: itemBuilder?.call(item) ?? Text(item.toString()),
        );
      }).toList(),
      onChanged: onChanged,
      hint: hint != null ? Text(hint!) : null,
      isExpanded: isExpanded,
      isDense: isDense,
      decoration: const InputDecoration(
        border: OutlineInputBorder(),
        contentPadding: EdgeInsets.symmetric(
          horizontal: 12,
          vertical: 12,
        ),
      ),
    );
  }
}
``n
# FILE:form_field_wrapper.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\forms\form_field_wrapper.dart
import 'package:flutter/material.dart';
import '../../theme/app_sizes.dart';

class FormFieldWrapper extends StatelessWidget {
  final String label;
  final Widget child;
  final bool required;
  final String? tooltip;

  const FormFieldWrapper({
    super.key,
    required this.label,
    required this.child,
    this.required = false,
    this.tooltip,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      mainAxisSize: MainAxisSize.min,
      children: [
        Row(
          children: [
            Text(
              label,
              style: theme.textTheme.bodyMedium,
            ),
            if (required)
              Text(
                ' *',
                style: theme.textTheme.bodyMedium?.copyWith(
                  color: theme.colorScheme.error,
                ),
              ),
            if (tooltip != null) ...[
              const SizedBox(width: AppSizes.xs),
              Tooltip(
                message: tooltip!,
                child: Icon(
                  Icons.info_outline,
                  size: 16,
                  color: theme.colorScheme.outline,
                ),
              ),
            ],
          ],
        ),
        const SizedBox(height: AppSizes.formFieldSpacing),
        child,
      ],
    );
  }
}
``n
# FILE:button_progress_indicator.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\indicators\button_progress_indicator.dart
import 'package:flutter/material.dart';

class ButtonProgressIndicator extends StatelessWidget {
  final double size;
  final double strokeWidth;
  final Color? color;

  const ButtonProgressIndicator({
    super.key,
    this.size = 20,
    this.strokeWidth = 2,
    this.color,
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: size,
      height: size,
      child: CircularProgressIndicator(
        strokeWidth: strokeWidth,
        valueColor: AlwaysStoppedAnimation<Color>(
          color ?? Theme.of(context).colorScheme.onPrimary,
        ),
      ),
    );
  }
}
``n
# FILE:grouped_list_view.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\list\grouped_list_view.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';

class GroupedListView<T> extends StatelessWidget {
  final List<ListGroup<T>> groups;
  final Widget Function(BuildContext, T) itemBuilder;
  final Widget Function(BuildContext, ListGroup<T>)? headerBuilder;
  final EdgeInsetsGeometry? padding;
  final ScrollController? controller;
  final bool showDividers;

  const GroupedListView({
    super.key,
    required this.groups,
    required this.itemBuilder,
    this.headerBuilder,
    this.padding,
    this.controller,
    this.showDividers = true,
  });

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      controller: controller,
      padding: padding,
      itemCount: _calculateItemCount(),
      itemBuilder: (context, index) {
        final groupInfo = _getItemForIndex(index);
        if (groupInfo.isHeader) {
          return headerBuilder?.call(context, groupInfo.group!) ?? 
              _defaultHeaderBuilder(context, groupInfo.group!);
        }
        return itemBuilder(context, groupInfo.item!);
      },
    );
  }

  Widget _defaultHeaderBuilder(BuildContext context, ListGroup<T> group) {
    return Container(
      padding: const EdgeInsets.all(AppSizes.spacingMedium),
      color: Theme.of(context).colorScheme.surfaceVariant,
      child: Text(
        group.header,
        style: Theme.of(context).textTheme.titleSmall,
      ),
    );
  }

  int _calculateItemCount() {
    return groups.fold(0, (sum, group) => sum + group.items.length + 1);
  }

  _GroupedItemInfo<T> _getItemForIndex(int index) {
    int currentIndex = 0;
    for (var group in groups) {
      if (index == currentIndex) {
        return _GroupedItemInfo(isHeader: true, group: group);
      }
      if (index <= currentIndex + group.items.length) {
        return _GroupedItemInfo(
          isHeader: false,
          item: group.items[index - currentIndex - 1],
        );
      }
      currentIndex += group.items.length + 1;
    }
    throw RangeError('Index out of range');
  }
}

class ListGroup<T> {
  final String header;
  final List<T> items;

  const ListGroup({
    required this.header,
    required this.items,
  });
}

class _GroupedItemInfo<T> {
  final bool isHeader;
  final ListGroup<T>? group;
  final T? item;

  _GroupedItemInfo({
    required this.isHeader,
    this.group,
    this.item,
  });
}

``n
# FILE:selectable_list_item.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\list\selectable_list_item.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';

class SelectableListItem extends StatelessWidget {
  final Widget? leading;
  final Widget title;
  final Widget? subtitle;
  final List<Widget>? actions;
  final VoidCallback? onTap;
  final bool selected;
  final ValueChanged<bool>? onSelected;
  final bool showDivider;

  const SelectableListItem({
    super.key,
    this.leading,
    required this.title,
    this.subtitle,
    this.actions,
    this.onTap,
    this.selected = false,
    this.onSelected,
    this.showDivider = true,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Column(
      mainAxisSize: MainAxisSize.min,
      children: [
        InkWell(
          onTap: onSelected != null 
              ? () => onSelected!(!selected)
              : onTap,
          child: Container(
            padding: const EdgeInsets.all(AppSizes.spacingMedium),
            color: selected 
                ? theme.colorScheme.primary.withOpacity(0.1)
                : null,
            child: Row(
              children: [
                if (onSelected != null)
                  Padding(
                    padding: const EdgeInsets.only(
                      right: AppSizes.spacingMedium,
                    ),
                    child: Checkbox(
                      value: selected,
                      onChanged: (value) => onSelected?.call(value ?? false),
                    ),
                  ),
                if (leading != null) ...[
                  leading!,
                  const SizedBox(width: AppSizes.spacingMedium),
                ],
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      DefaultTextStyle(
                        style: theme.textTheme.titleMedium!,
                        child: title,
                      ),
                      if (subtitle != null) ...[
                        const SizedBox(height: AppSizes.spacingTiny),
                        DefaultTextStyle(
                          style: theme.textTheme.bodyMedium!,
                          child: subtitle!,
                        ),
                      ],
                    ],
                  ),
                ),
                if (actions != null) ...[
                  const SizedBox(width: AppSizes.spacingMedium),
                  ...actions!,
                ],
              ],
            ),
          ),
        ),
        if (showDivider) const Divider(height: 1),
      ],
    );
  }
}

``n
# FILE:data_loader.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\loading\data_loader.dart
import 'package:flutter/material.dart';
import '../empty/empty_placeholder.dart';
import '../../../theme/app_sizes.dart';

class DataLoader<T> extends StatelessWidget {
  final bool isLoading;
  final String? error;
  final T? data;
  final Widget Function(T data) builder;
  final VoidCallback? onRetry;
  final Widget? loadingWidget;
  final Widget Function(String error)? errorBuilder;
  final Widget Function()? emptyBuilder;

  const DataLoader({
    super.key,
    required this.isLoading,
    this.error,
    required this.data,
    required this.builder,
    this.onRetry,
    this.loadingWidget,
    this.errorBuilder,
    this.emptyBuilder,
  });

  @override
  Widget build(BuildContext context) {
    if (isLoading) {
      return loadingWidget ?? const Center(child: CircularProgressIndicator());
    }

    if (error != null) {
      return errorBuilder?.call(error!) ?? EmptyPlaceholder(
        icon: Icons.error_outline,
        message: '加载失败',
        subMessage: error,
        actions: onRetry != null ? [
          FilledButton.icon(
            onPressed: onRetry,
            icon: const Icon(Icons.refresh),
            label: const Text('重试'),
          ),
        ] : null,
      );
    }

    if (data == null) {
      return emptyBuilder?.call() ?? const EmptyPlaceholder(
        icon: Icons.inbox_outlined,
        message: '暂无数据',
      );
    }

    return builder(data!);
  }
}

``n
# FILE:loading_overlay.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\loading\loading_overlay.dart
import 'package:flutter/material.dart';

class LoadingOverlay extends StatelessWidget {
  final Widget child;
  final bool isLoading;
  final String? message;
  final Color? backgroundColor;

  const LoadingOverlay({
    super.key,
    required this.child,
    required this.isLoading,
    this.message,
    this.backgroundColor,
  });

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        child,
        if (isLoading)
          Container(
            color: backgroundColor ?? Colors.black26,
            child: Center(
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const CircularProgressIndicator(),
                  if (message != null) ...[
                    const SizedBox(height: 16),
                    Text(
                      message!,
                      style: const TextStyle(color: Colors.white),
                    ),
                  ],
                ],
              ),
            ),
          ),
      ],
    );
  }
}

``n
# FILE:side_nav.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\navigation\side_nav.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';

class SideNavigation extends StatelessWidget {
  final int selectedIndex;
  final ValueChanged<int> onDestinationSelected;

  const SideNavigation({
    super.key,
    required this.selectedIndex,
    required this.onDestinationSelected,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return NavigationRail(
      selectedIndex: selectedIndex,
      onDestinationSelected: onDestinationSelected,
      backgroundColor: theme.scaffoldBackgroundColor,
      minWidth: AppSizes.navigationRailWidth,
      selectedIconTheme: IconThemeData(
        size: AppSizes.iconMedium,
        color: theme.primaryColor,
      ),
      unselectedIconTheme: IconThemeData(
        size: AppSizes.iconMedium,
        color: theme.unselectedWidgetColor,
      ),
      labelType: NavigationRailLabelType.all,
      destinations: const [
        NavigationRailDestination(
          icon: Icon(Icons.image),
          label: Text('作品'),
        ),
        NavigationRailDestination(
          icon: Icon(Icons.font_download),
          label: Text('集字'),
        ),
        NavigationRailDestination(
          icon: Icon(Icons.article),
          label: Text('字帖'),
        ),
        NavigationRailDestination(
          icon: Icon(Icons.settings),
          label: Text('设置'),
        ),
      ],
    );
  }
}

``n
# FILE:practice_layer_panel.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\practice\practice_layer_panel.dart
import 'package:flutter/material.dart';

class PracticeLayerPanel extends StatefulWidget {
  final List<Map<String, dynamic>> layers;
  final Function(int) onLayerSelected;
  final Function(int, bool) onLayerVisibilityChanged;
  final Function(int, bool) onLayerLockChanged;
  final Function(int) onLayerDeleted;
  final Function(int, int) onLayerReordered;

  const PracticeLayerPanel({
    super.key,
    required this.layers,
    required this.onLayerSelected,
    required this.onLayerVisibilityChanged,
    required this.onLayerLockChanged,
    required this.onLayerDeleted,
    required this.onLayerReordered,
  });

  @override
  State<PracticeLayerPanel> createState() => _PracticeLayerPanelState();
}

class _PracticeLayerPanelState extends State<PracticeLayerPanel> {
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Container(
          height: 48,
          padding: const EdgeInsets.symmetric(horizontal: 16),
          child: Row(
            children: [
              const Text('图层'),
              const Spacer(),
              IconButton(
                icon: const Icon(Icons.add),
                onPressed: () {
                  // TODO: 添加新图层
                },
                tooltip: '添加图层',
              ),
            ],
          ),
        ),
        Expanded(
          child: ReorderableListView(
            padding: const EdgeInsets.symmetric(vertical: 8),
            onReorder: widget.onLayerReordered,
            children: [
              for (var i = 0; i < widget.layers.length; i++)
                ListTile(
                  key: ValueKey(widget.layers[i]['id']),
                  leading: Row(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      IconButton(
                        icon: Icon(
                          widget.layers[i]['visible'] as bool
                              ? Icons.visibility
                              : Icons.visibility_off,
                        ),
                        onPressed: () => widget.onLayerVisibilityChanged(
                          i,
                          !(widget.layers[i]['visible'] as bool),
                        ),
                      ),
                      IconButton(
                        icon: Icon(
                          widget.layers[i]['locked'] as bool
                              ? Icons.lock
                              : Icons.lock_open,
                        ),
                        onPressed: () => widget.onLayerLockChanged(
                          i,
                          !(widget.layers[i]['locked'] as bool),
                        ),
                      ),
                    ],
                  ),
                  title: Text(widget.layers[i]['name'] as String),
                  trailing: IconButton(
                    icon: const Icon(Icons.delete),
                    onPressed: () => widget.onLayerDeleted(i),
                  ),
                  selected: widget.layers[i]['selected'] as bool,
                  onTap: () => widget.onLayerSelected(i),
                ),
            ],
          ),
        ),
      ],
    );
  }
}

``n
# FILE:practice_property_panel.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\practice\practice_property_panel.dart
import 'package:flutter/material.dart';

class PracticePropertyPanel extends StatelessWidget {
  final Map<String, dynamic>? selectedElement;
  final Function(Map<String, dynamic>) onPropertyChanged;

  const PracticePropertyPanel({
    super.key,
    this.selectedElement,
    required this.onPropertyChanged,
  });

  @override
  Widget build(BuildContext context) {
    if (selectedElement == null) {
      return const Center(
        child: Text('请选择一个元素'),
      );
    }

    // 根据选中元素类型显示不同的属性编辑器
    switch (selectedElement!['type']) {
      case 'chars':
        return _buildCharsProperties(context);
      case 'text':
        return _buildTextProperties(context);
      case 'image':
        return _buildImageProperties(context);
      default:
        return const Center(
          child: Text('未知元素类型'),
        );
    }
  }

  Widget _buildCharsProperties(BuildContext context) {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // 基本属性
          _buildSection(
            '基本属性',
            [
              TextField(
                decoration: const InputDecoration(labelText: '内容'),
                onChanged: (value) => _updateProperty('content', value),
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: TextField(
                      decoration: const InputDecoration(labelText: '字号'),
                      keyboardType: TextInputType.number,
                      onChanged: (value) => _updateProperty('fontSize', int.tryParse(value)),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: TextField(
                      decoration: const InputDecoration(labelText: '间距'),
                      keyboardType: TextInputType.number,
                      onChanged: (value) => _updateProperty('spacing', int.tryParse(value)),
                    ),
                  ),
                ],
              ),
            ],
          ),
          // 位置和尺寸
          _buildSection(
            '位置和尺寸',
            [
              Row(
                children: [
                  Expanded(
                    child: TextField(
                      decoration: const InputDecoration(labelText: 'X'),
                      keyboardType: TextInputType.number,
                      onChanged: (value) => _updateProperty('x', double.tryParse(value)),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: TextField(
                      decoration: const InputDecoration(labelText: 'Y'),
                      keyboardType: TextInputType.number,
                      onChanged: (value) => _updateProperty('y', double.tryParse(value)),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: TextField(
                      decoration: const InputDecoration(labelText: '宽度'),
                      keyboardType: TextInputType.number,
                      onChanged: (value) => _updateProperty('width', double.tryParse(value)),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: TextField(
                      decoration: const InputDecoration(labelText: '高度'),
                      keyboardType: TextInputType.number,
                      onChanged: (value) => _updateProperty('height', double.tryParse(value)),
                    ),
                  ),
                ],
              ),
            ],
          ),
          // 样式
          _buildSection(
            '样式',
            [
              // TODO: 添加颜色选择器和其他样式属性
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildTextProperties(BuildContext context) {
    // TODO: 实现文本元素属性编辑器
    return Container();
  }

  Widget _buildImageProperties(BuildContext context) {
    // TODO: 实现图片元素属性编辑器
    return Container();
  }

  Widget _buildSection(String title, List<Widget> children) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
          ),
        ),
        const SizedBox(height: 16),
        ...children,
        const SizedBox(height: 24),
      ],
    );
  }

  void _updateProperty(String key, dynamic value) {
    final updatedElement = Map<String, dynamic>.from(selectedElement!);
    updatedElement[key] = value;
    onPropertyChanged(updatedElement);
  }
}

``n
# FILE:practice_tool_panel.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\practice\practice_tool_panel.dart
import 'package:flutter/material.dart';

class PracticeToolPanel extends StatelessWidget {
  final Function(String) onToolSelected;

  const PracticeToolPanel({
    super.key,
    required this.onToolSelected,
  });

  @override
  Widget build(BuildContext context) {
    return ListView(
      padding: const EdgeInsets.all(16),
      children: [
        Text('页面设置', style: Theme.of(context).textTheme.titleSmall),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: [
            _buildToolButton(
              context,
              icon: Icons.crop_landscape,
              label: '页面大小',
              onPressed: () => onToolSelected('page_size'),
            ),
            _buildToolButton(
              context,
              icon: Icons.space_bar,
              label: '页边距',
              onPressed: () => onToolSelected('margins'),
            ),
            _buildToolButton(
              context,
              icon: Icons.grid_on,
              label: '背景',
              onPressed: () => onToolSelected('background'),
            ),
          ],
        ),
        const Divider(height: 32),
        Text('内容工具', style: Theme.of(context).textTheme.titleSmall),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: [
            _buildToolButton(
              context,
              icon: Icons.font_download,
              label: '集字填充',
              onPressed: () => onToolSelected('chars'),
            ),
            _buildToolButton(
              context,
              icon: Icons.text_fields,
              label: '文本',
              onPressed: () => onToolSelected('text'),
            ),
            _buildToolButton(
              context,
              icon: Icons.image,
              label: '图片',
              onPressed: () => onToolSelected('image'),
            ),
          ],
        ),
        const Divider(height: 32),
        Text('辅助工具', style: Theme.of(context).textTheme.titleSmall),
        const SizedBox(height: 8),
        Wrap(
          spacing: 8,
          runSpacing: 8,
          children: [
            _buildToolButton(
              context,
              icon: Icons.grid_4x4,
              label: '参考线',
              onPressed: () => onToolSelected('guides'),
            ),
            _buildToolButton(
              context,
              icon: Icons.straighten,
              label: '标尺',
              onPressed: () => onToolSelected('ruler'),
            ),
          ],
        ),
      ],
    );
  }

  Widget _buildToolButton(
    BuildContext context, {
    required IconData icon,
    required String label,
    required VoidCallback onPressed,
  }) {
    return ElevatedButton.icon(
      onPressed: onPressed,
      icon: Icon(icon, size: 18),
      label: Text(label),
      style: ElevatedButton.styleFrom(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      ),
    );
  }
}

``n
# FILE:image_preview.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\preview\image_preview.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';
import 'dart:io';

class ImagePreview extends StatelessWidget {
  final File? file;
  final String? networkUrl;
  final double? width;
  final double? height;
  final BoxFit fit;
  final Widget? placeholder;
  final Widget? errorWidget;

  const ImagePreview({
    super.key,
    this.file,
    this.networkUrl,
    this.width,
    this.height,
    this.fit = BoxFit.cover,
    this.placeholder,
    this.errorWidget,
  }) : assert(file != null || networkUrl != null);

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Container(
      width: width,
      height: height,
      decoration: BoxDecoration(
        color: theme.colorScheme.surfaceVariant,
        borderRadius: BorderRadius.circular(AppSizes.radiusSmall),
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(AppSizes.radiusSmall),
        child: _buildImage(theme),
      ),
    );
  }

  Widget _buildImage(ThemeData theme) {
    if (file != null) {
      return Image.file(
        file!,
        fit: fit,
        errorBuilder: (_, __, ___) => _buildError(theme),
      );
    }
    
    if (networkUrl != null) {
      return Image.network(
        networkUrl!,
        fit: fit,
        loadingBuilder: (_, child, progress) {
          if (progress == null) return child;
          return _buildPlaceholder(theme);
        },
        errorBuilder: (_, __, ___) => _buildError(theme),
      );
    }

    return _buildError(theme);
  }

  Widget _buildPlaceholder(ThemeData theme) {
    return placeholder ?? Center(
      child: CircularProgressIndicator(
        color: theme.primaryColor,
      ),
    );
  }

  Widget _buildError(ThemeData theme) {
    return errorWidget ?? Center(
      child: Icon(
        Icons.broken_image_outlined,
        color: theme.colorScheme.error,
      ),
    );
  }
}

``n
# FILE:practice_preview.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\preview\practice_preview.dart
import 'dart:io';

import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';
import 'image_preview.dart';

class PracticePreview extends StatelessWidget {
  final String? imagePath;
  final String? backgroundImagePath;
  final double opacity;
  final VoidCallback? onRefresh;

  const PracticePreview({
    super.key,
    this.imagePath,
    this.backgroundImagePath,
    this.opacity = 0.5,
    this.onRefresh,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Stack(
      children: [
        // 背景图层
        if (backgroundImagePath != null)
          Opacity(
            opacity: opacity,
            child: ImagePreview(
              file: File(backgroundImagePath!),
              width: double.infinity,
              height: double.infinity,
            ),
          ),
        // 练习图层
        if (imagePath != null)
          ImagePreview(
            file: File(imagePath!),
            width: double.infinity,
            height: double.infinity,
          ),
        // 无内容时的占位
        if (imagePath == null && backgroundImagePath == null)
          Center(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  Icons.image_outlined,
                  size: 48,
                  color: theme.colorScheme.outline,
                ),
                const SizedBox(height: AppSizes.spacingSmall),
                Text(
                  '暂无预览内容',
                  style: theme.textTheme.bodyMedium?.copyWith(
                    color: theme.colorScheme.outline,
                  ),
                ),
              ],
            ),
          ),
        // 刷新按钮
        if (onRefresh != null)
          Positioned(
            top: AppSizes.spacingSmall,
            right: AppSizes.spacingSmall,
            child: IconButton(
              icon: const Icon(Icons.refresh),
              onPressed: onRefresh,
              tooltip: '刷新预览',
            ),
          ),
      ],
    );
  }
}

``n
# FILE:scrollable_container.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\scroll\scrollable_container.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';

class ScrollableContainer extends StatelessWidget {
  final Widget child;
  final EdgeInsets? padding;
  final ScrollController? controller;
  final bool showScrollbar;

  const ScrollableContainer({
    super.key,
    required this.child,
    this.padding,
    this.controller,
    this.showScrollbar = true,
  });

  @override
  Widget build(BuildContext context) {
    Widget content = SingleChildScrollView(
      controller: controller,
      padding: padding ?? const EdgeInsets.all(AppSizes.spacingMedium),
      child: child,
    );

    if (showScrollbar) {
      content = Scrollbar(
        controller: controller,
        child: content,
      );
    }

    return content;
  }
}

``n
# FILE:search_box.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\search\search_box.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';

class SearchBox extends StatelessWidget {
  final String? hintText;
  final ValueChanged<String>? onChanged;
  final VoidCallback? onSubmitted;
  final TextEditingController? controller;
  final double? width;

  const SearchBox({
    super.key,
    this.hintText,
    this.onChanged,
    this.onSubmitted,
    this.controller,
    this.width,
  });

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      width: width ?? 240,
      child: SearchBar(
        controller: controller,
        hintText: hintText,
        leading: const Icon(Icons.search),
        padding: const MaterialStatePropertyAll(
          EdgeInsets.symmetric(
            horizontal: AppSizes.spacingMedium,
          ),
        ),
        onChanged: onChanged,
        onSubmitted: (value) => onSubmitted?.call(),
      ),
    );
  }
}

``n
# FILE:image_upload.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\upload\image_upload.dart
import 'package:flutter/material.dart';
import 'dart:io';
import '../../../theme/app_sizes.dart';
import '../preview/image_preview.dart';

class ImageUpload extends StatelessWidget {
  final File? file;
  final VoidCallback onUpload;
  final VoidCallback? onRemove;
  final double? width;
  final double? height;
  final String? uploadHint;
  final bool showPreview;

  const ImageUpload({
    super.key,
    this.file,
    required this.onUpload,
    this.onRemove,
    this.width,
    this.height,
    this.uploadHint,
    this.showPreview = true,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    
    return Container(
      width: width,
      height: height,
      decoration: BoxDecoration(
        border: Border.all(color: theme.dividerColor),
        borderRadius: BorderRadius.circular(AppSizes.radiusMedium),
      ),
      child: file != null && showPreview
          ? _buildPreview(context)
          : _buildUploadButton(context),
    );
  }

  Widget _buildPreview(BuildContext context) {
    return Stack(
      children: [
        ImagePreview(file: file),
        if (onRemove != null)
          Positioned(
            top: AppSizes.spacingSmall,
            right: AppSizes.spacingSmall,
            child: IconButton(
              icon: const Icon(Icons.close),
              onPressed: onRemove,
              style: IconButton.styleFrom(
                backgroundColor: Colors.black38,
                foregroundColor: Colors.white,
              ),
            ),
          ),
      ],
    );
  }

  Widget _buildUploadButton(BuildContext context) {
    final theme = Theme.of(context);
    
    return InkWell(
      onTap: onUpload,
      borderRadius: BorderRadius.circular(AppSizes.radiusMedium),
      child: Center(
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              Icons.cloud_upload_outlined,
              size: 32,
              color: theme.colorScheme.primary,
            ),
            const SizedBox(height: AppSizes.spacingSmall),
            Text(
              uploadHint ?? '点击上传图片',
              style: theme.textTheme.bodyMedium?.copyWith(
                color: theme.colorScheme.primary,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

``n
# FILE:title_bar.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\window\title_bar.dart
import 'package:flutter/material.dart';
import 'package:window_manager/window_manager.dart';

class TitleBar extends StatelessWidget with WindowListener {
  const TitleBar({super.key});

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 32,
      width: double.infinity, // 确保宽度填满
      color: Theme.of(context).colorScheme.primary,
      child: GestureDetector(
        behavior: HitTestBehavior.translucent,
        onPanStart: (details) async {
          await windowManager.startDragging();
        },
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 16),
          color: Theme.of(context).colorScheme.primary,
          child: Row(
            children: [
              const Icon(Icons.brush, color: Colors.white, size: 20),
              const SizedBox(width: 8),
              Text(
                '书法集字',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(color: Colors.white),
              ),
              const Spacer(),
              // 窗口控制按钮组
              const WindowButtons(),
            ],
          ),
        ),
      ),
    );
  }
}

class WindowButtons extends StatelessWidget {
  const WindowButtons({super.key});

  @override
  Widget build(BuildContext context) {
    const buttonColor = Colors.white;
    final hoverColor = Colors.white.withOpacity(0.1);

    return Row(
      children: [
        // 最小化按钮
        _WindowButton(
          icon: Icons.remove,
          color: buttonColor,
          hoverColor: hoverColor,
          onPressed: () async {
            await windowManager.minimize();
          },
          tooltip: '最小化',
        ),
        // 最大化/还原按钮
        _WindowButton(
          icon: Icons.crop_square,
          color: buttonColor,
          hoverColor: hoverColor,
          onPressed: () async {
            if (await windowManager.isMaximized()) {
              await windowManager.restore();
            } else {
              await windowManager.maximize();
            }
          },
          tooltip: '最大化',
        ),
        // 关闭按钮
        _WindowButton(
          icon: Icons.close,
          color: buttonColor,
          hoverColor: Colors.red,
          onPressed: () async {
            await windowManager.close();
          },
          tooltip: '关闭',
        ),
      ],
    );
  }
}

class _WindowButton extends StatelessWidget {
  final IconData icon;
  final Color color;
  final Color hoverColor;
  final VoidCallback onPressed;
  final String tooltip;

  const _WindowButton({
    required this.icon,
    required this.color,
    required this.hoverColor,
    required this.onPressed,
    required this.tooltip,
  });

  @override
  Widget build(BuildContext context) {
    return Tooltip(
      message: tooltip,
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onPressed,
          hoverColor: hoverColor,
          child: SizedBox(
            width: 40,
            height: 40,
            child: Icon(
              icon,
              color: color,
              size: 20,
            ),
          ),
        ),
      ),
    );
  }
}

``n
# FILE:workbench_container.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\workbench\workbench_container.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';

class WorkbenchContainer extends StatelessWidget {
  final Widget? toolbar;
  final Widget body;
  final Widget? sidebar;
  final double? sidebarWidth;
  final Widget? footer;

  const WorkbenchContainer({
    super.key,
    this.toolbar,
    required this.body,
    this.sidebar,
    this.sidebarWidth = 320.0,
    this.footer,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        if (toolbar != null)
          Container(
            height: AppSizes.pageToolbarHeight,
            decoration: BoxDecoration(
              border: Border(
                bottom: BorderSide(color: Theme.of(context).dividerColor),
              ),
            ),
            child: toolbar,
          ),
        Expanded(
          child: Row(
            children: [
              Expanded(child: body),
              if (sidebar != null) ...[
                VerticalDivider(width: 1, color: Theme.of(context).dividerColor),
                SizedBox(
                  width: sidebarWidth,
                  child: sidebar!,
                ),
              ],
            ],
          ),
        ),
        if (footer != null)
          Container(
            decoration: BoxDecoration(
              border: Border(
                top: BorderSide(color: Theme.of(context).dividerColor),
              ),
            ),
            child: footer,
          ),
      ],
    );
  }
}

``n
# FILE:workbench_toolbar.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\workbench\workbench_toolbar.dart
import 'package:flutter/material.dart';
import '../../../theme/app_sizes.dart';

class WorkbenchToolbar extends StatelessWidget {
  final String? title;
  final List<Widget>? actions;
  final List<Widget>? tools;
  final EdgeInsetsGeometry? padding;

  const WorkbenchToolbar({
    super.key,
    this.title,
    this.actions,
    this.tools,
    this.padding,
  });

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);

    return Container(
      padding: padding ?? const EdgeInsets.all(AppSizes.spacingMedium),
      child: Row(
        children: [
          if (title != null)
            Text(title!, style: theme.textTheme.titleMedium),
          if (tools != null) ...[
            const SizedBox(width: AppSizes.spacingMedium),
            ...tools!,
          ],
          const Spacer(),
          if (actions != null)
            Row(
              mainAxisSize: MainAxisSize.min,
              children: actions!,
            ),
        ],
      ),
    );
  }
}

``n
# FILE:date_range_filter_section.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\works\date_range_filter_section.dart
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../../models/date_range_filter.dart';
import '../../theme/app_sizes.dart';

class DateRangeFilterSection extends StatelessWidget {
  final DateRangeFilter? filter;
  final ValueChanged<DateRangeFilter?> onChanged;

  const DateRangeFilterSection({
    super.key,
    this.filter,
    required this.onChanged,
  });

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 2,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (filter != null)
            Padding(
              padding: const EdgeInsets.only(bottom: AppSizes.s),
              child: Wrap(
                spacing: AppSizes.xs,
                children: [
                  Chip(
                    label: Text(_formatFilterText()),
                    onDeleted: () => onChanged(null),
                  ),
                ],
              ),
            ),
          const TabBar(
            tabs: [
              Tab(text: '快捷选择'),
              Tab(text: '自定义范围'),
            ],
          ),
          const SizedBox(height: AppSizes.m),
          SizedBox(
            height: 240,
            child: TabBarView(
              children: [
                _buildPresets(),
                _buildCustomRange(context),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPresets() {
    return SingleChildScrollView(
      child: Wrap(
        spacing: AppSizes.xs,
        runSpacing: AppSizes.xs,
        children: [
          for (final preset in DateRangePreset.values)
            FilterChip(
              label: Text(preset.label),
              selected: filter?.preset == preset,
              onSelected: (selected) {
                onChanged(selected ? DateRangeFilter.preset(preset) : null);
              },
            ),
        ],
      ),
    );
  }

  Widget _buildCustomRange(BuildContext context) {
    final isStartDateError = filter?.startDate != null && 
                           filter?.endDate != null && 
                           filter!.startDate!.isAfter(filter!.endDate!);
                           
    return Padding(
      padding: const EdgeInsets.all(AppSizes.s),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildDateField(
            context: context,
            label: '开始日期',
            value: filter?.startDate,
            error: isStartDateError ? '开始日期不能晚于结束日期' : null,
            onPressed: () => _selectDate(
              context,
              initialDate: filter?.startDate,
              isStartDate: true,
              maxDate: filter?.endDate,
            ),
            onClear: () => _updateDateRange(startDate: null),
          ),
          const SizedBox(height: AppSizes.m),
          _buildDateField(
            context: context,
            label: '结束日期',
            value: filter?.endDate,
            onPressed: () => _selectDate(
              context,
              initialDate: filter?.endDate,
              isStartDate: false,
              minDate: filter?.startDate,
            ),
            onClear: () => _updateDateRange(endDate: null),
          ),
        ],
      ),
    );
  }

  Widget _buildDateField({
    required BuildContext context,
    required String label,
    required DateTime? value,
    required VoidCallback onPressed,
    required VoidCallback onClear,
    String? error,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: Theme.of(context).textTheme.titleSmall),
        const SizedBox(height: AppSizes.xs),
        Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                icon: const Icon(Icons.calendar_today, size: 18),
                label: Text(value != null ? _formatDate(value) : '点击选择日期'),
                onPressed: onPressed,
                style: error != null ? 
                  OutlinedButton.styleFrom(
                    foregroundColor: Theme.of(context).colorScheme.error,
                  ) : null,
              ),
            ),
            if (value != null)
              IconButton(
                icon: const Icon(Icons.clear, size: 18),
                onPressed: onClear,
              ),
          ],
        ),
        if (error != null)
          Padding(
            padding: const EdgeInsets.only(top: AppSizes.xs),
            child: Text(
              error,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Theme.of(context).colorScheme.error,
                  ),
            ),
          ),
      ],
    );
  }

  Future<void> _selectDate(
    BuildContext context, {
    required DateTime? initialDate,
    required bool isStartDate,
    DateTime? minDate,
    DateTime? maxDate,
  }) async {
    final result = await showDatePicker(
      context: context,
      initialDate: initialDate ?? DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime(2100),
      selectableDayPredicate: (date) {
        if (minDate != null && date.isBefore(minDate)) return false;
        if (maxDate != null && date.isAfter(maxDate)) return false;
        return true;
      },
    );

    if (result != null) {
      _updateDateRange(
        startDate: isStartDate ? result : filter?.startDate,
        endDate: isStartDate ? filter?.endDate : result,
      );
    }
  }

  void _updateDateRange({DateTime? startDate, DateTime? endDate}) {
    onChanged(DateRangeFilter(
      startDate: startDate,
      endDate: endDate,
    ));
  }

  String _formatDate(DateTime date) {
    return DateFormat.yMd().format(date);
  }

  String _formatFilterText() {
    if (filter == null) return '不限';
    if (filter!.preset != null) return filter!.preset!.label;
    final start = filter!.startDate != null ? _formatDate(filter!.startDate!) : '不限';
    final end = filter!.endDate != null ? _formatDate(filter!.endDate!) : '不限';
    return '$start - $end';
  }
}
``n
# FILE:work_filter_panel.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\works\work_filter_panel.dart
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../../models/date_range_filter.dart';
import '../../models/work_filter.dart';
import '../../theme/app_sizes.dart';

class WorkFilterPanel extends StatelessWidget {
  final WorkFilter filter;
  final ValueChanged<WorkFilter> onFilterChanged;

  final List<({String label, SortField value})> _sortOptions = [
    (label: '名称', value: SortField.name),
    (label: '作者', value: SortField.author),
    (label: '创作时间', value: SortField.creationDate),
    (label: '导入时间', value: SortField.importDate),
  ];

  WorkFilterPanel({
    super.key,
    required this.filter,
    required this.onFilterChanged,
  });

  @override
  Widget build(BuildContext context) {
    return SingleChildScrollView( // 添加滚动支持
      child: Padding(
        padding: const EdgeInsets.all(AppSizes.m),
        child: Column(  // 将 ListView 改为 Column
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildSortSection(context),
            const Divider(),
            _buildStyleFilter(context),
            const Divider(),
            _buildToolFilter(context),
            const Divider(),
            _buildDateRangeFilter(context),
          ],
        ),
      ),
    );
  }

  Widget _buildSortSection(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('排序方式', style: Theme.of(context).textTheme.titleSmall),
        const SizedBox(height: AppSizes.s),
        Wrap(
          spacing: AppSizes.xs,
          runSpacing: AppSizes.xs,
          children: [
            for (final option in _sortOptions)
              FilterChip(
                label: Text(option.label),
                selected: filter.sortOption.field == option.value,
                onSelected: (selected) {
                  onFilterChanged(filter.copyWith(
                    sortOption: SortOption(
                      field: selected ? option.value : SortField.none,
                      descending: filter.sortOption.descending,
                    ),
                  ));
                },
              ),
          ],
        ),
        if (filter.sortOption.field != SortField.none) ...[
          const SizedBox(height: AppSizes.s),
          SegmentedButton<bool>(
            segments: const [
              ButtonSegment(value: false, label: Text('升序')),
              ButtonSegment(value: true, label: Text('降序')),
            ],
            selected: {filter.sortOption.descending},
            onSelectionChanged: (value) {
              onFilterChanged(filter.copyWith(
                sortOption: filter.sortOption.copyWith(
                  descending: value.first,
                ),
              ));
            },
          ),
        ],
      ],
    );
  }

  Widget _buildDateRangeFilter(BuildContext context) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('时间筛选', style: Theme.of(context).textTheme.titleSmall),
        const SizedBox(height: AppSizes.s),
        SizedBox(
          height: 300, // 固定高度避免溢出
          child: DefaultTabController(
            length: 2,
            child: Column(
              children: [
                // Tab 标签栏
                TabBar(
                  tabs: const [
                    Tab(text: '快捷选择'),
                    Tab(text: '自定义范围'),
                  ],
                  labelColor: Theme.of(context).colorScheme.primary,
                ),
                const SizedBox(height: AppSizes.m),
                
                // Tab 内容区
                Expanded(
                  child: TabBarView(
                    children: [
                      _buildQuickDatePresets(),
                      _buildCustomDateRange(context),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildQuickDatePresets() {
    return SingleChildScrollView(
      padding: const EdgeInsets.symmetric(vertical: AppSizes.s),
      child: Wrap(
        spacing: AppSizes.s,
        runSpacing: AppSizes.s,
        children: [
          for (final preset in DateRangePreset.values)
            FilterChip(
              label: Text(preset.label),
              selected: filter.dateFilter?.preset == preset,
              onSelected: (selected) {
                onFilterChanged(filter.copyWith(
                  dateFilter: () => selected 
                    ? DateRangeFilter.preset(preset)
                    : null,
                ));
              },
            ),
        ],
      ),
    );
  }

  Widget _buildCustomDateRange(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(AppSizes.s),
      child: Column(
        children: [
          // 开始日期
          _buildDateField(
            context,
            label: '开始日期',
            date: filter.dateFilter?.startDate,
            onDateSelected: (date) {
              onFilterChanged(filter.copyWith(
                dateFilter: () => DateRangeFilter(
                  startDate: date,
                  endDate: filter.dateFilter?.endDate,
                ),
              ));
            },
          ),
          const SizedBox(height: AppSizes.m),
          // 结束日期
          _buildDateField(
            context,
            label: '结束日期',
            date: filter.dateFilter?.endDate,
            onDateSelected: (date) {
              onFilterChanged(filter.copyWith(
                dateFilter: () => DateRangeFilter(
                  startDate: filter.dateFilter?.startDate,
                  endDate: date,
                ),
              ));
            },
          ),
        ],
      ),
    );
  }

  Widget _buildDateField(
    BuildContext context, {
    required String label,
    required DateTime? date,
    required ValueChanged<DateTime?> onDateSelected,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(label, style: Theme.of(context).textTheme.bodySmall),
        const SizedBox(height: AppSizes.xs),
        Row(
          children: [
            Expanded(
              child: OutlinedButton.icon(
                icon: const Icon(Icons.calendar_today, size: 18),
                label: Text(
                  date != null 
                      ? DateFormat('yyyy-MM-dd').format(date)
                      : '点击选择日期',
                ),
                onPressed: () async {
                  final selected = await showDatePicker(
                    context: context,
                    initialDate: date ?? DateTime.now(),
                    firstDate: DateTime(1900),
                    lastDate: DateTime.now(),
                  );
                  if (selected != null) {
                    onDateSelected(selected);
                  }
                },
              ),
            ),
            if (date != null)
              IconButton(
                icon: const Icon(Icons.clear),
                onPressed: () => onDateSelected(null),
              ),
          ],
        ),
      ],
    );
  }

  Widget _buildStyleFilter(BuildContext context) {
    final theme = Theme.of(context);
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('书法风格', style: theme.textTheme.titleSmall),
        const SizedBox(height: AppSizes.xs),
        Wrap(
          spacing: AppSizes.xs,
          runSpacing: AppSizes.xs,
          children: [
            for (final style in ['楷书', '行书', '草书', '隶书'])
              FilterChip(
                label: Text(style),
                selected: filter.selectedStyle == style,
                onSelected: (selected) {
                  onFilterChanged(filter.copyWith(
                    selectedStyle: () => selected ? style : null,
                  ));
                },
              ),
          ],
        ),
      ],
    );
  }

  Widget _buildToolFilter(BuildContext context) {
    final theme = Theme.of(context);
    
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text('书写工具', style: theme.textTheme.titleSmall),
        const SizedBox(height: AppSizes.xs),
        Wrap(
          spacing: AppSizes.xs,
          runSpacing: AppSizes.xs,
          children: [
            for (final tool in ['毛笔', '硬笔'])
              FilterChip(
                label: Text(tool),
                selected: filter.selectedTool == tool,
                onSelected: (selected) {
                  onFilterChanged(filter.copyWith(
                    selectedTool: () => selected ? tool : null,
                  ));
                },
              ),
          ],
        ),
      ],
    );
  }
}
``n
# FILE:work_import_preview.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\presentation\widgets\works\work_import_preview.dart

``n
# FILE:settings_provider.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\providers\settings_provider.dart
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

final languageProvider = StateNotifierProvider<LanguageNotifier, Locale?>((ref) {
  return LanguageNotifier();
});

class LanguageNotifier extends StateNotifier<Locale?> {
  LanguageNotifier() : super(null) {
    _loadSavedLanguage();
  }

  Future<void> _loadSavedLanguage() async {
    final prefs = await SharedPreferences.getInstance();
    final languageCode = prefs.getString('languageCode');
    if (languageCode != null) {
      state = Locale(languageCode);
    }
  }

  Future<void> setLanguage(String? languageCode) async {
    final prefs = await SharedPreferences.getInstance();
    if (languageCode == null) {
      await prefs.remove('languageCode');
      state = null;
    } else {
      await prefs.setString('languageCode', languageCode);
      state = Locale(languageCode);
    }
  }
}

``n
# FILE:app_sizes.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\theme\app_sizes.dart
import 'package:flutter/material.dart';

class AppSizes {
  // 图标尺寸
  static const double iconTiny = 16.0;
  static const double iconSmall = 20.0;
  static const double iconMedium = 24.0;
  static const double iconLarge = 32.0;

  // 文字尺寸
  static const double fontTiny = 12.0;
  static const double fontSmall = 14.0;
  static const double fontMedium = 16.0;
  static const double fontLarge = 20.0;
  static const double fontTitle = 24.0;

  // 按钮尺寸
  static const double buttonHeight = 36.0;
  static const double buttonHeightLarge = 44.0;
  static const EdgeInsets buttonPadding = EdgeInsets.symmetric(
    horizontal: 16.0,
    vertical: 8.0,
  );

  // 工具栏尺寸
  static const double pageBarHeight = 48.0;  // 改名
  static const double pageToolbarHeight = 48.0;  // 改名
  static const double navigationRailWidth = 72.0;

  // 间距
  static const double spacingTiny = 4.0;
  static const double spacingSmall = 8.0;
  static const double spacingMedium = 16.0;
  static const double spacingLarge = 24.0;

  // 圆角
  static const double radiusSmall = 4.0;
  static const double radiusMedium = 8.0;
  static const double radiusLarge = 12.0;

  // 卡片
  static const EdgeInsets cardPadding = EdgeInsets.all(16.0);
  static const double cardElevation = 1.0;
  static const double cardElevationSelected = 4.0;

  // 列表和网格
  static const double gridItemWidth = 200.0;
  static const double gridItemHeight = 200.0;
  static const double listItemHeight = 72.0;
  static const double thumbnailSize = 64.0;

  // 网格布局
  static const int gridCrossAxisCount = 4;
  static const double gridMainAxisSpacing = 16.0;
  static const double gridCrossAxisSpacing = 16.0;
  static const double gridItemTotalHeight = 280.0;
  static const double gridItemImageHeight = 200.0;

  // 表单尺寸常量
  static const double xxs = 1.0  ;   // 超小间距
  static const double xs = 2.0  ;   // 小小间距
  static const double s = 4.0;    // 小间距
  static const double m = 8.0;    // 中间距
  static const double l = 16.0;   // 大间距
  static const double xl = 24.0;  // 大大间距
  static const double xxl = 32.0; // 超大间距

  // 容器尺寸
  static const double dialogWidth = 400.0;
  static const double dialogWidthWide = 600.0;
  static const double dialogHeight = 600.0;
  static const double dialogHeightTall = 800.0;
}

``n
# FILE:app_theme.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\theme\app_theme.dart
import 'package:flutter/material.dart';

class AppTheme {
  static const Color primaryColor = Color(0xFF2196F3);
  static const Color secondaryColor = Color(0xFF03A9F4);
  static const Color backgroundColor = Color(0xFFF5F5F5);
  static const Color textColor = Color(0xFF333333);

  static ThemeData get lightTheme {
    return ThemeData(
      primaryColor: primaryColor,
      scaffoldBackgroundColor: backgroundColor,
      appBarTheme: const AppBarTheme(
        backgroundColor: primaryColor,
        elevation: 0,
      ),
      textTheme: const TextTheme(
        bodyLarge: TextStyle(
          color: textColor,
          fontSize: 16,
        ),
        bodyMedium: TextStyle(
          color: textColor,
          fontSize: 14,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: primaryColor,
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
        ),
      ),
      inputDecorationTheme: InputDecorationTheme(
        border: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
        ),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(8),
          borderSide: const BorderSide(color: primaryColor),
        ),
        filled: true,
        fillColor: Colors.white,
      ),
      cardTheme: CardTheme(
        elevation: 2,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }
}

``n
# FILE:date_formatter.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\utils\date_formatter.dart
import 'package:intl/intl.dart';

class DateFormatter {
  static final _compactFormatter = DateFormat('yyyy/MM/dd');
  static final _fullFormatter = DateFormat('yyyy年MM月dd日');
  static final _timeFormatter = DateFormat('HH:mm');

  /// Format date to compact format: 2024/02/22
  static String formatCompact(DateTime date) {
    return _compactFormatter.format(date);
  }

  /// Format date to full format: 2024年02月22日
  static String formatFull(DateTime date) {
    return _fullFormatter.format(date);
  }

  /// Format date with time: 2024/02/22 14:30
  static String formatWithTime(DateTime date) {
    return '${formatCompact(date)} ${_timeFormatter.format(date)}';
  }

  /// Format relative date: 今天/昨天/前天/日期
  static String formatRelative(DateTime date) {
    final now = DateTime.now();
    final difference = now.difference(date);

    if (difference.inDays == 0) {
      return '今天';
    } else if (difference.inDays == 1) {
      return '昨天';
    } else if (difference.inDays == 2) {
      return '前天';
    } else {
      return formatCompact(date);
    }
  }
}
``n
# FILE:path_helper.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\utils\path_helper.dart
import 'package:path/path.dart' as path;
import 'package:path_provider/path_provider.dart';

class PathHelper {
  static Future<String> getWorkDirectory(String workId) async {
    final appDir = await getApplicationDocumentsDirectory();
    return path.join(appDir.path, 'works', workId);
  }

  static Future<String> getWorkThumbnailPath(String workId) async {
    final workDir = await getWorkDirectory(workId);
    return path.join(workDir, 'thumbnail.jpg');
  }
}
``n
# FILE:work_path_helper.dart CONTEXT
`dart
// filepath: C:\Users\wailik\Documents\Code\Flutter\demo\demo\lib\utils\work_path_helper.dart
import 'dart:io';
import 'package:path/path.dart' as path;
import 'package:path_provider/path_provider.dart';

class WorkPathHelper {
  static Future<String> getThumbnailPath(String workId) async {
    final appDir = await getApplicationDocumentsDirectory();
    final workDir = path.join(appDir.path, 'works', workId);
    return path.join(workDir, 'thumbnail.jpg');
  }

  static Future<bool> thumbnailExists(String workId) async {
    final thumbnailPath = await getThumbnailPath(workId);
    return File(thumbnailPath).existsSync();
  }
}
``n
