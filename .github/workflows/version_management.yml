name: Version Management

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version_increment:
        description: '版本递增类型'
        required: false
        default: 'patch'
        type: choice
        options:
        - major
        - minor
        - patch
      prerelease:
        description: '预发布标识符 (可选)'
        required: false
        type: string

env:
  FLUTTER_VERSION: '3.16.0'
  PYTHON_VERSION: '3.9'

jobs:
  version-check:
    name: 版本一致性检查
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version-info.outputs.version }}
      build-number: ${{ steps.version-info.outputs.build-number }}
      
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整Git历史用于版本信息
        
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml gitpython
        
    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: 获取Flutter依赖
      run: flutter pub get
      
    - name: 运行版本一致性检查
      run: |
        echo "🔍 运行版本一致性检查..."
        python scripts/check_version_consistency.py
        
    - name: 生成版本信息
      id: version-info
      run: |
        echo "📋 生成版本信息..."
        python scripts/generate_version_info.py
        
        # 读取版本信息并设置输出
        VERSION=$(python -c "import json; print(json.load(open('version.json'))['version']['major'], json.load(open('version.json'))['version']['minor'], json.load(open('version.json'))['version']['patch'], sep='.')")
        BUILD_NUMBER=$(python -c "import json; print(json.load(open('version.json'))['version']['build'])")
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build-number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "📋 版本信息: $VERSION+$BUILD_NUMBER"
        
    - name: 上传版本信息文件
      uses: actions/upload-artifact@v4
      with:
        name: version-info
        path: |
          version.json
          version.yaml

  multi-platform-build:
    name: 多平台构建测试
    needs: version-check
    strategy:
      fail-fast: false
      matrix:
        include:
          # Android平台
          - platform: android
            os: ubuntu-latest
            build-command: 'flutter build apk --debug'
            artifact-path: 'build/app/outputs/flutter-apk/'
            
          # iOS平台 (仅在macOS上构建)
          - platform: ios
            os: macos-latest
            build-command: 'flutter build ios --debug --no-codesign'
            artifact-path: 'build/ios/iphoneos/'
            
          # Web平台  
          - platform: web
            os: ubuntu-latest
            build-command: 'flutter build web'
            artifact-path: 'build/web/'
            
          # Windows平台
          - platform: windows
            os: windows-latest
            build-command: 'flutter build windows'
            artifact-path: 'build/windows/runner/Release/'
            
          # macOS平台
          - platform: macos
            os: macos-latest
            build-command: 'flutter build macos'
            artifact-path: 'build/macos/Build/Products/Release/'
            
          # Linux平台
          - platform: linux
            os: ubuntu-latest
            build-command: 'flutter build linux'
            artifact-path: 'build/linux/x64/release/bundle/'
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Flutter环境
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        
    - name: 平台特定设置 - Linux
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
        
    - name: 平台特定设置 - Android
      if: matrix.platform == 'android'
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        build-tools: 33.0.0
        
    - name: 获取Flutter依赖
      run: flutter pub get
      
    - name: 下载版本信息
      uses: actions/download-artifact@v4
      with:
        name: version-info
        
    - name: 构建 ${{ matrix.platform }} 平台
      run: |
        echo "🔨 构建 ${{ matrix.platform }} 平台..."
        ${{ matrix.build-command }}
        
    - name: 验证构建产物
      run: |
        echo "✅ 验证 ${{ matrix.platform }} 构建产物..."
        if [ -d "${{ matrix.artifact-path }}" ]; then
          echo "构建产物目录存在: ${{ matrix.artifact-path }}"
          ls -la "${{ matrix.artifact-path }}"
        else
          echo "❌ 构建产物目录不存在: ${{ matrix.artifact-path }}"
          exit 1
        fi
        
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ matrix.platform }}
        path: ${{ matrix.artifact-path }}
        retention-days: 7

  # 鸿蒙OS平台构建 (单独处理，因为需要特殊环境)
  ohos-build:
    name: 鸿蒙OS构建准备
    needs: version-check
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 验证鸿蒙OS配置
      run: |
        echo "🔍 验证鸿蒙OS配置文件..."
        if [ -f "ohos/entry/src/main/config.json" ]; then
          echo "✅ 鸿蒙OS配置文件存在"
          python -c "import json; json.load(open('ohos/entry/src/main/config.json'))"
          echo "✅ 鸿蒙OS配置文件格式正确"
        else
          echo "⚠️ 鸿蒙OS配置文件不存在，跳过构建"
        fi
        
    - name: 检查鸿蒙OS版本配置
      run: |
        echo "📋 检查鸿蒙OS版本配置..."
        python -c "
        import json
        try:
            with open('version.json') as f:
                version_info = json.load(f)
            ohos_info = version_info.get('platforms', {}).get('ohos', {})
            print(f'鸿蒙OS版本信息: {ohos_info}')
            if ohos_info:
                print('✅ 鸿蒙OS版本配置正确')
            else:
                print('⚠️ 鸿蒙OS版本配置缺失')
        except Exception as e:
            print(f'❌ 检查鸿蒙OS版本配置失败: {e}')
        "
        
    - name: 上传鸿蒙OS配置
      uses: actions/upload-artifact@v4
      with:
        name: ohos-config
        path: |
          ohos/
          !ohos/build/
        retention-days: 7

  build-number-update:
    name: 构建号更新
    needs: [version-check, multi-platform-build]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml gitpython
        
    - name: 更新构建号
      run: |
        echo "🔄 更新构建号..."
        python scripts/update_build_number.py --strategy increment
        
    - name: 提交构建号更新
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "没有需要提交的更改"
        else
          git add .
          git commit -m "chore: 更新构建号 [skip ci]"
          git push
        fi

  version-release:
    name: 版本发布处理
    needs: [version-check, multi-platform-build]
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml gitpython
        
    - name: 手动版本递增
      if: github.event.inputs.version_increment != ''
      run: |
        echo "📈 手动版本递增: ${{ github.event.inputs.version_increment }}"
        PRERELEASE_ARG=""
        if [ "${{ github.event.inputs.prerelease }}" != "" ]; then
          PRERELEASE_ARG="--prerelease ${{ github.event.inputs.prerelease }}"
        fi
        
        python scripts/generate_version_info.py \
          --increment ${{ github.event.inputs.version_increment }} \
          $PRERELEASE_ARG
          
    - name: 提交版本更新
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if git diff --quiet; then
          echo "没有需要提交的更改"
        else
          NEW_VERSION=$(python -c "import json; v=json.load(open('version.json'))['version']; print(f\"{v['major']}.{v['minor']}.{v['patch']}\")")
          git add .
          git commit -m "chore: 发布版本 v$NEW_VERSION"
          git push
          
          # 创建Git标签
          git tag "v$NEW_VERSION"
          git push origin "v$NEW_VERSION"
        fi

  notification:
    name: 通知处理
    needs: [version-check, multi-platform-build, ohos-build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 成功通知
      if: needs.version-check.result == 'success' && needs.multi-platform-build.result == 'success'
      run: |
        echo "✅ 版本管理工作流执行成功"
        echo "版本: ${{ needs.version-check.outputs.version }}"
        echo "构建号: ${{ needs.version-check.outputs.build-number }}"
        
    - name: 失败通知
      if: needs.version-check.result == 'failure' || needs.multi-platform-build.result == 'failure'
      run: |
        echo "❌ 版本管理工作流执行失败"
        echo "请检查构建日志并修复问题"
        exit 1 