# Flutter 项目开发规范

## 通用日志规范

- 禁止使用 `debugPrint()` 和 `print()` 进行日志输出
- 必须使用结构化日志方法，避免简单字符串输出
- 所有日志必须包含结构化数据和操作上下文
- 使用条件日志避免生产环境性能开销

## 国际化(l10n)规范

### 强制性要求

1. **所有用户界面文本必须本地化** - 禁止在代码中硬编码任何用户可见的文本
2. **新功能必须同步更新ARB文件** - 添加新的界面文本时，必须同时在中英文ARB文件中添加对应条目
3. **删除功能时必须清理ARB条目** - 移除功能时需要删除相应的本地化键值对
4. **参数化文本优先** - 需要动态内容时，使用ARB文件的参数化功能而非字符串拼接
5. **必须使用AppLocalizations.of(context)访问本地化文本**

### 本地化文件管理

- 所有用户可见文本必须使用本地化字符串，不得硬编码
- 中文为主要语言，模板文件为 `app_zh.arb`
- 英文为辅助语言，文件为 `app_en.arb`
- 支持参数化文本，使用 `{variable}` 语法
- 新增文本必须同时在两种语言文件中添加

### 例外情况

以下情况可以不使用本地化：
- 技术术语和国际标准单位（如：MB, KB, JSON, API, HTTP等）
- 开发调试用的占位符文本（但生产版本必须本地化）
- 日志消息和错误堆栈（主要用于开发者调试）
- 代码注释和文档

### 本地化使用规范

```dart
// ❌ 错误示例 - 硬编码文本
Text('保存'),
AppBar(title: Text('设置')),
AlertDialog(title: Text('确认删除')),

// ✅ 正确示例 - 使用本地化
Text(AppLocalizations.of(context)!.save),
AppBar(title: Text(AppLocalizations.of(context)!.settings)),
AlertDialog(title: Text(AppLocalizations.of(context)!.confirmDelete)),

// ✅ 参数化文本示例
Text(AppLocalizations.of(context)!.addElementName('文字')),
Text(AppLocalizations.of(context)!.deleteConfirmMessage(fileName)),
```

### 本地化必需的导入

```dart
import 'package:flutter_gen/gen_l10n/app_localizations.dart';
// 或者，如果路径不同：
import '../l10n/app_localizations.dart';
```

### ARB文件命名规范

- 键名使用驼峰命名法
- 简洁明了，表达清楚含义
- 按模块分组，使用前缀区分（如：`canvas_`, `settings_`, `auth_`）
- 参数化文本必须包含描述注释

### ARB文件示例

```json
{
  "@@locale": "zh",
  "save": "保存",
  "cancel": "取消",
  "settings": "设置",
  "addElementName": "添加{type}元素",
  "@addElementName": {
    "description": "添加特定类型元素的标题",
    "placeholders": {
      "type": {
        "type": "String",
        "description": "元素类型名称"
      }
    }
  },
  "canvas_alignLeft": "左对齐",
  "canvas_alignRight": "右对齐",
  "settings_language": "语言设置",
  "auth_login": "登录"
}
```

### 本地化检查规则

1. 所有用户界面文本必须使用 `AppLocalizations.of(context)!.keyName`
2. 不允许在代码中出现中文或英文硬编码字符串（除日志和注释）
3. 新增功能必须同时更新中英文ARB文件
4. 删除功能时必须清理相应的ARB条目
5. 参数化文本优先于字符串拼接

### 开发工作流程

#### 添加新功能时：
1. 确定需要的界面文本
2. 在 `app_zh.arb` 中添加中文文本和键
3. 在 `app_en.arb` 中添加对应的英文文本
4. 运行 `flutter gen-l10n` 重新生成本地化文件
5. 在代码中使用 `AppLocalizations.of(context)!.keyName`
6. 运行 `dart check_l10n.dart` 验证本地化配置

#### 修改现有功能时：
1. 检查是否影响界面文本
2. 如有变化，同步更新ARB文件
3. 重新生成本地化文件
4. 测试中英文界面

#### 代码审查检查点：
- [ ] 是否存在硬编码的界面文本
- [ ] ARB文件是否同步更新
- [ ] 参数化文本是否正确使用
- [ ] 本地化导入是否正确

### 验证工具

项目提供以下验证工具：

```bash
# 检查本地化配置完整性
dart check_l10n.dart

# 检查硬编码文本（VS Code任务）
# 使用命令面板: Tasks: Run Task -> 检查非规范日志调用

# 重新生成本地化文件
flutter gen-l10n
```

## 字帖编辑页专用规范

- 编辑页面组件必须使用 `EditPageLogger` 扩展的条件日志方法
- 其他模块使用 `Logger` 实例的结构化日志方法

## 必需的导入

### 字帖编辑页组件
```dart
import '../../../infrastructure/logging/edit_page_logger_extension.dart';
import '../../../infrastructure/logging/logger.dart';
```

### 其他模块组件
```dart
import '../infrastructure/logging/logger.dart';
// 根据模块位置调整相对路径
```

## 日志方法选择

### 字帖编辑页组件
- 编辑页面相关：`EditPageLogger.editPageDebug/Info/Warning/Error`
- 画布操作相关：`EditPageLogger.canvasDebug/Error`
- 控制器相关：`EditPageLogger.controllerDebug/Info/Warning/Error`
- 属性面板相关：`EditPageLogger.propertyPanelDebug/Error`
- 渲染器相关：`EditPageLogger.rendererDebug/Error`
- 文件操作相关：`EditPageLogger.fileOpsInfo/Error`
- 性能监控相关：`EditPageLogger.performanceInfo/Warning`

### 通用模块组件
- 网络请求：`logger.info/warning/error` (带 'network' 标签)
- 数据库操作：`logger.info/error` (带 'database' 标签)
- 文件I/O：`logger.info/error` (带 'file_io' 标签)
- 用户界面：`logger.debug/info` (带 'ui' 标签)
- 业务逻辑：`logger.info/warning/error` (带 'business' 标签)
- 系统事件：`logger.info/warning` (带 'system' 标签)
- 认证授权：`logger.info/warning/error` (带 'auth' 标签)

## 日志格式要求

### 字帖编辑页组件
```dart
// ❌ 错误示例
debugPrint('用户点击了按钮: $buttonName');

// ✅ 正确示例
EditPageLogger.editPageInfo(
  '用户点击按钮',
  data: {
    'buttonName': buttonName,
    'operation': 'button_click',
    'timestamp': DateTime.now().toIso8601String(),
  },
);
```

### 通用模块组件
```dart
// ❌ 错误示例
debugPrint('网络请求失败: $url');

// ✅ 正确示例 - 网络请求
logger.error(
  '网络请求失败',
  data: {
    'url': url,
    'method': 'GET',
    'statusCode': response?.statusCode,
    'operation': 'api_request',
  },
  tags: ['network', 'api'],
);

// ✅ 正确示例 - 用户操作
logger.info(
  '用户导航',
  data: {
    'from': fromRoute,
    'to': toRoute,
    'operation': 'navigation',
    'userId': user?.id,
  },
  tags: ['ui', 'navigation'],
);
```

## 数据结构要求
- 使用 Map<String, dynamic> 传递结构化数据
- 包含 'operation' 字段标识操作类型
- 数值型数据使用正确的数据类型（int, double, bool）
- 避免在 data 中直接拼接字符串
- 通用模块必须使用 tags 参数进行分类标记
- 敏感数据（密码、令牌）需要脱敏处理
- 大型对象应转换为简化标识符（如 ID、长度等）

## 性能相关
- 使用条件日志避免不必要的字符串处理
- 大型对象转换为简化的标识符
- 错误处理必须包含 error 和 stackTrace 参数

## 禁止模式
- `debugPrint()`
- `print()`
- `log()` (dart:developer)
- 直接字符串拼接的日志消息
- 缺少结构化数据的日志调用
- 在日志中直接输出敏感信息
- 使用字符串格式化代替结构化数据
- 忽略错误处理的堆栈跟踪信息

## 标签分类规范
- `network` - 网络请求相关
- `database` - 数据库操作
- `file_io` - 文件读写操作
- `ui` - 用户界面交互
- `business` - 业务逻辑处理
- `auth` - 认证授权相关
- `system` - 系统事件
- `performance` - 性能监控
- `error` - 错误处理
- `navigation` - 页面导航
- `cache` - 缓存操作
- `validation` - 数据验证 