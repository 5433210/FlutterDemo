// Mocks generated by Mockito 5.4.5 from annotations
// in charasgem/test/repository_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;
import 'dart:typed_data' as _i15;

import 'package:charasgem/domain/models/character/character_entity.dart' as _i4;
import 'package:charasgem/domain/models/character/character_filter.dart'
    as _i11;
import 'package:charasgem/domain/models/character/character_region.dart'
    as _i12;
import 'package:charasgem/domain/models/practice/practice_entity.dart' as _i5;
import 'package:charasgem/domain/models/practice/practice_filter.dart' as _i14;
import 'package:charasgem/domain/models/work/work_entity.dart' as _i2;
import 'package:charasgem/domain/models/work/work_filter.dart' as _i8;
import 'package:charasgem/domain/models/work/work_image.dart' as _i3;
import 'package:charasgem/domain/repositories/character_repository.dart'
    as _i10;
import 'package:charasgem/domain/repositories/practice_repository.dart' as _i13;
import 'package:charasgem/domain/repositories/work_image_repository.dart'
    as _i9;
import 'package:charasgem/domain/repositories/work_repository.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWorkEntity_0 extends _i1.SmartFake implements _i2.WorkEntity {
  _FakeWorkEntity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeWorkImage_1 extends _i1.SmartFake implements _i3.WorkImage {
  _FakeWorkImage_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeCharacterEntity_2 extends _i1.SmartFake
    implements _i4.CharacterEntity {
  _FakeCharacterEntity_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePracticeEntity_3 extends _i1.SmartFake
    implements _i5.PracticeEntity {
  _FakePracticeEntity_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WorkRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkRepository extends _i1.Mock implements _i6.WorkRepository {
  MockWorkRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<int> count(_i8.WorkFilter? filter) =>
      (super.noSuchMethod(
            Invocation.method(#count, [filter]),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  _i7.Future<_i2.WorkEntity> create(_i2.WorkEntity? work) =>
      (super.noSuchMethod(
            Invocation.method(#create, [work]),
            returnValue: _i7.Future<_i2.WorkEntity>.value(
              _FakeWorkEntity_0(this, Invocation.method(#create, [work])),
            ),
          )
          as _i7.Future<_i2.WorkEntity>);

  @override
  _i7.Future<void> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> deleteMany(List<String>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMany, [ids]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i2.WorkEntity> duplicate(String? id, {String? newId}) =>
      (super.noSuchMethod(
            Invocation.method(#duplicate, [id], {#newId: newId}),
            returnValue: _i7.Future<_i2.WorkEntity>.value(
              _FakeWorkEntity_0(
                this,
                Invocation.method(#duplicate, [id], {#newId: newId}),
              ),
            ),
          )
          as _i7.Future<_i2.WorkEntity>);

  @override
  _i7.Future<_i2.WorkEntity?> get(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#get, [id]),
            returnValue: _i7.Future<_i2.WorkEntity?>.value(),
          )
          as _i7.Future<_i2.WorkEntity?>);

  @override
  _i7.Future<List<_i2.WorkEntity>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i7.Future<List<_i2.WorkEntity>>.value(
              <_i2.WorkEntity>[],
            ),
          )
          as _i7.Future<List<_i2.WorkEntity>>);

  @override
  _i7.Future<Set<String>> getAllTags() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTags, []),
            returnValue: _i7.Future<Set<String>>.value(<String>{}),
          )
          as _i7.Future<Set<String>>);

  @override
  _i7.Future<List<_i2.WorkEntity>> getByTags(Set<String>? tags) =>
      (super.noSuchMethod(
            Invocation.method(#getByTags, [tags]),
            returnValue: _i7.Future<List<_i2.WorkEntity>>.value(
              <_i2.WorkEntity>[],
            ),
          )
          as _i7.Future<List<_i2.WorkEntity>>);

  @override
  _i7.Future<List<_i2.WorkEntity>> query(_i8.WorkFilter? filter) =>
      (super.noSuchMethod(
            Invocation.method(#query, [filter]),
            returnValue: _i7.Future<List<_i2.WorkEntity>>.value(
              <_i2.WorkEntity>[],
            ),
          )
          as _i7.Future<List<_i2.WorkEntity>>);

  @override
  _i7.Future<_i2.WorkEntity> save(_i2.WorkEntity? work) =>
      (super.noSuchMethod(
            Invocation.method(#save, [work]),
            returnValue: _i7.Future<_i2.WorkEntity>.value(
              _FakeWorkEntity_0(this, Invocation.method(#save, [work])),
            ),
          )
          as _i7.Future<_i2.WorkEntity>);

  @override
  _i7.Future<List<_i2.WorkEntity>> saveMany(List<_i2.WorkEntity>? works) =>
      (super.noSuchMethod(
            Invocation.method(#saveMany, [works]),
            returnValue: _i7.Future<List<_i2.WorkEntity>>.value(
              <_i2.WorkEntity>[],
            ),
          )
          as _i7.Future<List<_i2.WorkEntity>>);

  @override
  _i7.Future<List<_i2.WorkEntity>> search(String? query, {int? limit}) =>
      (super.noSuchMethod(
            Invocation.method(#search, [query], {#limit: limit}),
            returnValue: _i7.Future<List<_i2.WorkEntity>>.value(
              <_i2.WorkEntity>[],
            ),
          )
          as _i7.Future<List<_i2.WorkEntity>>);

  @override
  _i7.Future<List<String>> suggestTags(String? prefix, {int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#suggestTags, [prefix], {#limit: limit}),
            returnValue: _i7.Future<List<String>>.value(<String>[]),
          )
          as _i7.Future<List<String>>);
}

/// A class which mocks [WorkImageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkImageRepository extends _i1.Mock
    implements _i9.WorkImageRepository {
  MockWorkImageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.WorkImage> create(String? workId, _i3.WorkImage? image) =>
      (super.noSuchMethod(
            Invocation.method(#create, [workId, image]),
            returnValue: _i7.Future<_i3.WorkImage>.value(
              _FakeWorkImage_1(
                this,
                Invocation.method(#create, [workId, image]),
              ),
            ),
          )
          as _i7.Future<_i3.WorkImage>);

  @override
  _i7.Future<List<_i3.WorkImage>> createMany(
    String? workId,
    List<_i3.WorkImage>? images,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createMany, [workId, images]),
            returnValue: _i7.Future<List<_i3.WorkImage>>.value(
              <_i3.WorkImage>[],
            ),
          )
          as _i7.Future<List<_i3.WorkImage>>);

  @override
  _i7.Future<void> delete(String? workId, String? imageId) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [workId, imageId]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> deleteMany(String? workId, List<String>? imageIds) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMany, [workId, imageIds]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i3.WorkImage?> get(String? imageId) =>
      (super.noSuchMethod(
            Invocation.method(#get, [imageId]),
            returnValue: _i7.Future<_i3.WorkImage?>.value(),
          )
          as _i7.Future<_i3.WorkImage?>);

  @override
  _i7.Future<List<_i3.WorkImage>> getAllByWorkId(String? workId) =>
      (super.noSuchMethod(
            Invocation.method(#getAllByWorkId, [workId]),
            returnValue: _i7.Future<List<_i3.WorkImage>>.value(
              <_i3.WorkImage>[],
            ),
          )
          as _i7.Future<List<_i3.WorkImage>>);

  @override
  _i7.Future<_i3.WorkImage?> getFirstByWorkId(String? workId) =>
      (super.noSuchMethod(
            Invocation.method(#getFirstByWorkId, [workId]),
            returnValue: _i7.Future<_i3.WorkImage?>.value(),
          )
          as _i7.Future<_i3.WorkImage?>);

  @override
  _i7.Future<int> getNextIndex(String? workId) =>
      (super.noSuchMethod(
            Invocation.method(#getNextIndex, [workId]),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  _i7.Future<List<_i3.WorkImage>> saveMany(List<_i3.WorkImage>? images) =>
      (super.noSuchMethod(
            Invocation.method(#saveMany, [images]),
            returnValue: _i7.Future<List<_i3.WorkImage>>.value(
              <_i3.WorkImage>[],
            ),
          )
          as _i7.Future<List<_i3.WorkImage>>);

  @override
  _i7.Future<void> updateIndex(
    String? workId,
    String? imageId,
    int? newIndex,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateIndex, [workId, imageId, newIndex]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [CharacterRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacterRepository extends _i1.Mock
    implements _i10.CharacterRepository {
  MockCharacterRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<int> count(_i11.CharacterFilter? filter) =>
      (super.noSuchMethod(
            Invocation.method(#count, [filter]),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  _i7.Future<_i4.CharacterEntity> create(_i4.CharacterEntity? character) =>
      (super.noSuchMethod(
            Invocation.method(#create, [character]),
            returnValue: _i7.Future<_i4.CharacterEntity>.value(
              _FakeCharacterEntity_2(
                this,
                Invocation.method(#create, [character]),
              ),
            ),
          )
          as _i7.Future<_i4.CharacterEntity>);

  @override
  _i7.Future<void> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> deleteBatch(List<String>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#deleteBatch, [ids]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> deleteMany(List<String>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMany, [ids]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i4.CharacterEntity?> findById(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#findById, [id]),
            returnValue: _i7.Future<_i4.CharacterEntity?>.value(),
          )
          as _i7.Future<_i4.CharacterEntity?>);

  @override
  _i7.Future<List<_i4.CharacterEntity>> findByWorkId(String? workId) =>
      (super.noSuchMethod(
            Invocation.method(#findByWorkId, [workId]),
            returnValue: _i7.Future<List<_i4.CharacterEntity>>.value(
              <_i4.CharacterEntity>[],
            ),
          )
          as _i7.Future<List<_i4.CharacterEntity>>);

  @override
  _i7.Future<_i4.CharacterEntity?> get(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#get, [id]),
            returnValue: _i7.Future<_i4.CharacterEntity?>.value(),
          )
          as _i7.Future<_i4.CharacterEntity?>);

  @override
  _i7.Future<List<_i4.CharacterEntity>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i7.Future<List<_i4.CharacterEntity>>.value(
              <_i4.CharacterEntity>[],
            ),
          )
          as _i7.Future<List<_i4.CharacterEntity>>);

  @override
  _i7.Future<List<_i4.CharacterEntity>> getByWorkId(String? workId) =>
      (super.noSuchMethod(
            Invocation.method(#getByWorkId, [workId]),
            returnValue: _i7.Future<List<_i4.CharacterEntity>>.value(
              <_i4.CharacterEntity>[],
            ),
          )
          as _i7.Future<List<_i4.CharacterEntity>>);

  @override
  _i7.Future<List<_i12.CharacterRegion>> getRegionsByPageId(String? pageId) =>
      (super.noSuchMethod(
            Invocation.method(#getRegionsByPageId, [pageId]),
            returnValue: _i7.Future<List<_i12.CharacterRegion>>.value(
              <_i12.CharacterRegion>[],
            ),
          )
          as _i7.Future<List<_i12.CharacterRegion>>);

  @override
  _i7.Future<List<_i12.CharacterRegion>> getRegionsByWorkId(String? workId) =>
      (super.noSuchMethod(
            Invocation.method(#getRegionsByWorkId, [workId]),
            returnValue: _i7.Future<List<_i12.CharacterRegion>>.value(
              <_i12.CharacterRegion>[],
            ),
          )
          as _i7.Future<List<_i12.CharacterRegion>>);

  @override
  _i7.Future<List<_i4.CharacterEntity>> query(_i11.CharacterFilter? filter) =>
      (super.noSuchMethod(
            Invocation.method(#query, [filter]),
            returnValue: _i7.Future<List<_i4.CharacterEntity>>.value(
              <_i4.CharacterEntity>[],
            ),
          )
          as _i7.Future<List<_i4.CharacterEntity>>);

  @override
  _i7.Future<_i4.CharacterEntity> save(_i4.CharacterEntity? character) =>
      (super.noSuchMethod(
            Invocation.method(#save, [character]),
            returnValue: _i7.Future<_i4.CharacterEntity>.value(
              _FakeCharacterEntity_2(
                this,
                Invocation.method(#save, [character]),
              ),
            ),
          )
          as _i7.Future<_i4.CharacterEntity>);

  @override
  _i7.Future<List<_i4.CharacterEntity>> saveMany(
    List<_i4.CharacterEntity>? characters,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveMany, [characters]),
            returnValue: _i7.Future<List<_i4.CharacterEntity>>.value(
              <_i4.CharacterEntity>[],
            ),
          )
          as _i7.Future<List<_i4.CharacterEntity>>);

  @override
  _i7.Future<List<_i4.CharacterEntity>> search(String? query, {int? limit}) =>
      (super.noSuchMethod(
            Invocation.method(#search, [query], {#limit: limit}),
            returnValue: _i7.Future<List<_i4.CharacterEntity>>.value(
              <_i4.CharacterEntity>[],
            ),
          )
          as _i7.Future<List<_i4.CharacterEntity>>);

  @override
  _i7.Future<void> updateRegion(_i12.CharacterRegion? region) =>
      (super.noSuchMethod(
            Invocation.method(#updateRegion, [region]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);
}

/// A class which mocks [PracticeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPracticeRepository extends _i1.Mock
    implements _i13.PracticeRepository {
  MockPracticeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<int> count(_i14.PracticeFilter? filter) =>
      (super.noSuchMethod(
            Invocation.method(#count, [filter]),
            returnValue: _i7.Future<int>.value(0),
          )
          as _i7.Future<int>);

  @override
  _i7.Future<_i5.PracticeEntity> create(_i5.PracticeEntity? practice) =>
      (super.noSuchMethod(
            Invocation.method(#create, [practice]),
            returnValue: _i7.Future<_i5.PracticeEntity>.value(
              _FakePracticeEntity_3(
                this,
                Invocation.method(#create, [practice]),
              ),
            ),
          )
          as _i7.Future<_i5.PracticeEntity>);

  @override
  _i7.Future<void> delete(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#delete, [id]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<void> deleteMany(List<String>? ids) =>
      (super.noSuchMethod(
            Invocation.method(#deleteMany, [ids]),
            returnValue: _i7.Future<void>.value(),
            returnValueForMissingStub: _i7.Future<void>.value(),
          )
          as _i7.Future<void>);

  @override
  _i7.Future<_i5.PracticeEntity> duplicate(String? id, {String? newId}) =>
      (super.noSuchMethod(
            Invocation.method(#duplicate, [id], {#newId: newId}),
            returnValue: _i7.Future<_i5.PracticeEntity>.value(
              _FakePracticeEntity_3(
                this,
                Invocation.method(#duplicate, [id], {#newId: newId}),
              ),
            ),
          )
          as _i7.Future<_i5.PracticeEntity>);

  @override
  _i7.Future<_i5.PracticeEntity?> get(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#get, [id]),
            returnValue: _i7.Future<_i5.PracticeEntity?>.value(),
          )
          as _i7.Future<_i5.PracticeEntity?>);

  @override
  _i7.Future<List<_i5.PracticeEntity>> getAll() =>
      (super.noSuchMethod(
            Invocation.method(#getAll, []),
            returnValue: _i7.Future<List<_i5.PracticeEntity>>.value(
              <_i5.PracticeEntity>[],
            ),
          )
          as _i7.Future<List<_i5.PracticeEntity>>);

  @override
  _i7.Future<Set<String>> getAllTags() =>
      (super.noSuchMethod(
            Invocation.method(#getAllTags, []),
            returnValue: _i7.Future<Set<String>>.value(<String>{}),
          )
          as _i7.Future<Set<String>>);

  @override
  _i7.Future<List<_i5.PracticeEntity>> getByTags(Set<String>? tags) =>
      (super.noSuchMethod(
            Invocation.method(#getByTags, [tags]),
            returnValue: _i7.Future<List<_i5.PracticeEntity>>.value(
              <_i5.PracticeEntity>[],
            ),
          )
          as _i7.Future<List<_i5.PracticeEntity>>);

  @override
  _i7.Future<bool> isTitleExists(String? title, {String? excludeId}) =>
      (super.noSuchMethod(
            Invocation.method(#isTitleExists, [title], {#excludeId: excludeId}),
            returnValue: _i7.Future<bool>.value(false),
          )
          as _i7.Future<bool>);

  @override
  _i7.Future<Map<String, dynamic>?> loadPractice(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#loadPractice, [id]),
            returnValue: _i7.Future<Map<String, dynamic>?>.value(),
          )
          as _i7.Future<Map<String, dynamic>?>);

  @override
  _i7.Future<List<_i5.PracticeEntity>> query(_i14.PracticeFilter? filter) =>
      (super.noSuchMethod(
            Invocation.method(#query, [filter]),
            returnValue: _i7.Future<List<_i5.PracticeEntity>>.value(
              <_i5.PracticeEntity>[],
            ),
          )
          as _i7.Future<List<_i5.PracticeEntity>>);

  @override
  _i7.Future<List<Map<String, dynamic>>> queryByField(
    String? field,
    String? operator,
    dynamic value,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#queryByField, [field, operator, value]),
            returnValue: _i7.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i7.Future<List<Map<String, dynamic>>>);

  @override
  _i7.Future<_i5.PracticeEntity> save(_i5.PracticeEntity? practice) =>
      (super.noSuchMethod(
            Invocation.method(#save, [practice]),
            returnValue: _i7.Future<_i5.PracticeEntity>.value(
              _FakePracticeEntity_3(this, Invocation.method(#save, [practice])),
            ),
          )
          as _i7.Future<_i5.PracticeEntity>);

  @override
  _i7.Future<List<_i5.PracticeEntity>> saveMany(
    List<_i5.PracticeEntity>? practices,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#saveMany, [practices]),
            returnValue: _i7.Future<List<_i5.PracticeEntity>>.value(
              <_i5.PracticeEntity>[],
            ),
          )
          as _i7.Future<List<_i5.PracticeEntity>>);

  @override
  _i7.Future<Map<String, dynamic>> savePracticeRaw({
    String? id,
    required String? title,
    required List<Map<String, dynamic>>? pages,
    _i15.Uint8List? thumbnail,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#savePracticeRaw, [], {
              #id: id,
              #title: title,
              #pages: pages,
              #thumbnail: thumbnail,
            }),
            returnValue: _i7.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i7.Future<Map<String, dynamic>>);

  @override
  _i7.Future<List<_i5.PracticeEntity>> search(String? query, {int? limit}) =>
      (super.noSuchMethod(
            Invocation.method(#search, [query], {#limit: limit}),
            returnValue: _i7.Future<List<_i5.PracticeEntity>>.value(
              <_i5.PracticeEntity>[],
            ),
          )
          as _i7.Future<List<_i5.PracticeEntity>>);

  @override
  _i7.Future<List<String>> suggestTags(String? prefix, {int? limit = 10}) =>
      (super.noSuchMethod(
            Invocation.method(#suggestTags, [prefix], {#limit: limit}),
            returnValue: _i7.Future<List<String>>.value(<String>[]),
          )
          as _i7.Future<List<String>>);
}
